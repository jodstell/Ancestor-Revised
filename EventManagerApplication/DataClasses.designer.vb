'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="GigEngynData")>  _
Partial Public Class DataClassesDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertSession(instance As Session)
    End Sub
  Partial Private Sub UpdateSession(instance As Session)
    End Sub
  Partial Private Sub DeleteSession(instance As Session)
    End Sub
  Partial Private Sub InserttblAccount(instance As tblAccount)
    End Sub
  Partial Private Sub UpdatetblAccount(instance As tblAccount)
    End Sub
  Partial Private Sub DeletetblAccount(instance As tblAccount)
    End Sub
  Partial Private Sub InserttblAccountActivity(instance As tblAccountActivity)
    End Sub
  Partial Private Sub UpdatetblAccountActivity(instance As tblAccountActivity)
    End Sub
  Partial Private Sub DeletetblAccountActivity(instance As tblAccountActivity)
    End Sub
  Partial Private Sub InserttblAccountActivityPhoto(instance As tblAccountActivityPhoto)
    End Sub
  Partial Private Sub UpdatetblAccountActivityPhoto(instance As tblAccountActivityPhoto)
    End Sub
  Partial Private Sub DeletetblAccountActivityPhoto(instance As tblAccountActivityPhoto)
    End Sub
  Partial Private Sub InserttblAccountActivityResult(instance As tblAccountActivityResult)
    End Sub
  Partial Private Sub UpdatetblAccountActivityResult(instance As tblAccountActivityResult)
    End Sub
  Partial Private Sub DeletetblAccountActivityResult(instance As tblAccountActivityResult)
    End Sub
  Partial Private Sub InserttblAccountBrandTracker(instance As tblAccountBrandTracker)
    End Sub
  Partial Private Sub UpdatetblAccountBrandTracker(instance As tblAccountBrandTracker)
    End Sub
  Partial Private Sub DeletetblAccountBrandTracker(instance As tblAccountBrandTracker)
    End Sub
  Partial Private Sub InserttblAccountContact(instance As tblAccountContact)
    End Sub
  Partial Private Sub UpdatetblAccountContact(instance As tblAccountContact)
    End Sub
  Partial Private Sub DeletetblAccountContact(instance As tblAccountContact)
    End Sub
  Partial Private Sub InserttblAccountDemographic(instance As tblAccountDemographic)
    End Sub
  Partial Private Sub UpdatetblAccountDemographic(instance As tblAccountDemographic)
    End Sub
  Partial Private Sub DeletetblAccountDemographic(instance As tblAccountDemographic)
    End Sub
  Partial Private Sub InserttblAccountDetail(instance As tblAccountDetail)
    End Sub
  Partial Private Sub UpdatetblAccountDetail(instance As tblAccountDetail)
    End Sub
  Partial Private Sub DeletetblAccountDetail(instance As tblAccountDetail)
    End Sub
  Partial Private Sub InserttblAccountHour(instance As tblAccountHour)
    End Sub
  Partial Private Sub UpdatetblAccountHour(instance As tblAccountHour)
    End Sub
  Partial Private Sub DeletetblAccountHour(instance As tblAccountHour)
    End Sub
  Partial Private Sub InserttblAccountNote(instance As tblAccountNote)
    End Sub
  Partial Private Sub UpdatetblAccountNote(instance As tblAccountNote)
    End Sub
  Partial Private Sub DeletetblAccountNote(instance As tblAccountNote)
    End Sub
  Partial Private Sub InserttblAccountPhoto(instance As tblAccountPhoto)
    End Sub
  Partial Private Sub UpdatetblAccountPhoto(instance As tblAccountPhoto)
    End Sub
  Partial Private Sub DeletetblAccountPhoto(instance As tblAccountPhoto)
    End Sub
  Partial Private Sub InserttblAccountType(instance As tblAccountType)
    End Sub
  Partial Private Sub UpdatetblAccountType(instance As tblAccountType)
    End Sub
  Partial Private Sub DeletetblAccountType(instance As tblAccountType)
    End Sub
  Partial Private Sub InserttblActivityAttachment(instance As tblActivityAttachment)
    End Sub
  Partial Private Sub UpdatetblActivityAttachment(instance As tblActivityAttachment)
    End Sub
  Partial Private Sub DeletetblActivityAttachment(instance As tblActivityAttachment)
    End Sub
  Partial Private Sub InserttblActivityField(instance As tblActivityField)
    End Sub
  Partial Private Sub UpdatetblActivityField(instance As tblActivityField)
    End Sub
  Partial Private Sub DeletetblActivityField(instance As tblActivityField)
    End Sub
  Partial Private Sub InserttblActivityOption(instance As tblActivityOption)
    End Sub
  Partial Private Sub UpdatetblActivityOption(instance As tblActivityOption)
    End Sub
  Partial Private Sub DeletetblActivityOption(instance As tblActivityOption)
    End Sub
  Partial Private Sub InserttblActivityType(instance As tblActivityType)
    End Sub
  Partial Private Sub UpdatetblActivityType(instance As tblActivityType)
    End Sub
  Partial Private Sub DeletetblActivityType(instance As tblActivityType)
    End Sub
  Partial Private Sub InserttblAgencyFee(instance As tblAgencyFee)
    End Sub
  Partial Private Sub UpdatetblAgencyFee(instance As tblAgencyFee)
    End Sub
  Partial Private Sub DeletetblAgencyFee(instance As tblAgencyFee)
    End Sub
  Partial Private Sub InserttblAmbassador(instance As tblAmbassador)
    End Sub
  Partial Private Sub UpdatetblAmbassador(instance As tblAmbassador)
    End Sub
  Partial Private Sub DeletetblAmbassador(instance As tblAmbassador)
    End Sub
  Partial Private Sub InserttblAmbassadorBrandCategoryType(instance As tblAmbassadorBrandCategoryType)
    End Sub
  Partial Private Sub UpdatetblAmbassadorBrandCategoryType(instance As tblAmbassadorBrandCategoryType)
    End Sub
  Partial Private Sub DeletetblAmbassadorBrandCategoryType(instance As tblAmbassadorBrandCategoryType)
    End Sub
  Partial Private Sub InserttblAmbassadorClient(instance As tblAmbassadorClient)
    End Sub
  Partial Private Sub UpdatetblAmbassadorClient(instance As tblAmbassadorClient)
    End Sub
  Partial Private Sub DeletetblAmbassadorClient(instance As tblAmbassadorClient)
    End Sub
  Partial Private Sub InserttblAmbassadorDocument(instance As tblAmbassadorDocument)
    End Sub
  Partial Private Sub UpdatetblAmbassadorDocument(instance As tblAmbassadorDocument)
    End Sub
  Partial Private Sub DeletetblAmbassadorDocument(instance As tblAmbassadorDocument)
    End Sub
  Partial Private Sub InserttblAmbassadorEventRequest(instance As tblAmbassadorEventRequest)
    End Sub
  Partial Private Sub UpdatetblAmbassadorEventRequest(instance As tblAmbassadorEventRequest)
    End Sub
  Partial Private Sub DeletetblAmbassadorEventRequest(instance As tblAmbassadorEventRequest)
    End Sub
  Partial Private Sub InserttblAmbassadorMarket(instance As tblAmbassadorMarket)
    End Sub
  Partial Private Sub UpdatetblAmbassadorMarket(instance As tblAmbassadorMarket)
    End Sub
  Partial Private Sub DeletetblAmbassadorMarket(instance As tblAmbassadorMarket)
    End Sub
  Partial Private Sub InserttblAmbassadorNote(instance As tblAmbassadorNote)
    End Sub
  Partial Private Sub UpdatetblAmbassadorNote(instance As tblAmbassadorNote)
    End Sub
  Partial Private Sub DeletetblAmbassadorNote(instance As tblAmbassadorNote)
    End Sub
  Partial Private Sub InserttblAmbassadorPhoto(instance As tblAmbassadorPhoto)
    End Sub
  Partial Private Sub UpdatetblAmbassadorPhoto(instance As tblAmbassadorPhoto)
    End Sub
  Partial Private Sub DeletetblAmbassadorPhoto(instance As tblAmbassadorPhoto)
    End Sub
  Partial Private Sub InserttblAmbassadorPosition(instance As tblAmbassadorPosition)
    End Sub
  Partial Private Sub UpdatetblAmbassadorPosition(instance As tblAmbassadorPosition)
    End Sub
  Partial Private Sub DeletetblAmbassadorPosition(instance As tblAmbassadorPosition)
    End Sub
  Partial Private Sub InserttblBrandCategorySubType(instance As tblBrandCategorySubType)
    End Sub
  Partial Private Sub UpdatetblBrandCategorySubType(instance As tblBrandCategorySubType)
    End Sub
  Partial Private Sub DeletetblBrandCategorySubType(instance As tblBrandCategorySubType)
    End Sub
  Partial Private Sub InserttblBrandCategoryType(instance As tblBrandCategoryType)
    End Sub
  Partial Private Sub UpdatetblBrandCategoryType(instance As tblBrandCategoryType)
    End Sub
  Partial Private Sub DeletetblBrandCategoryType(instance As tblBrandCategoryType)
    End Sub
  Partial Private Sub InserttblBrandDocument(instance As tblBrandDocument)
    End Sub
  Partial Private Sub UpdatetblBrandDocument(instance As tblBrandDocument)
    End Sub
  Partial Private Sub DeletetblBrandDocument(instance As tblBrandDocument)
    End Sub
  Partial Private Sub InserttblBrandEventExecution(instance As tblBrandEventExecution)
    End Sub
  Partial Private Sub UpdatetblBrandEventExecution(instance As tblBrandEventExecution)
    End Sub
  Partial Private Sub DeletetblBrandEventExecution(instance As tblBrandEventExecution)
    End Sub
  Partial Private Sub InserttblBrandEventTask(instance As tblBrandEventTask)
    End Sub
  Partial Private Sub UpdatetblBrandEventTask(instance As tblBrandEventTask)
    End Sub
  Partial Private Sub DeletetblBrandEventTask(instance As tblBrandEventTask)
    End Sub
  Partial Private Sub InserttblBrandGroup(instance As tblBrandGroup)
    End Sub
  Partial Private Sub UpdatetblBrandGroup(instance As tblBrandGroup)
    End Sub
  Partial Private Sub DeletetblBrandGroup(instance As tblBrandGroup)
    End Sub
  Partial Private Sub InserttblBrandImage(instance As tblBrandImage)
    End Sub
  Partial Private Sub UpdatetblBrandImage(instance As tblBrandImage)
    End Sub
  Partial Private Sub DeletetblBrandImage(instance As tblBrandImage)
    End Sub
  Partial Private Sub InserttblBrandInEvent(instance As tblBrandInEvent)
    End Sub
  Partial Private Sub UpdatetblBrandInEvent(instance As tblBrandInEvent)
    End Sub
  Partial Private Sub DeletetblBrandInEvent(instance As tblBrandInEvent)
    End Sub
  Partial Private Sub InserttblBrandPhoto(instance As tblBrandPhoto)
    End Sub
  Partial Private Sub UpdatetblBrandPhoto(instance As tblBrandPhoto)
    End Sub
  Partial Private Sub DeletetblBrandPhoto(instance As tblBrandPhoto)
    End Sub
  Partial Private Sub InserttblBrandRecapQuestion(instance As tblBrandRecapQuestion)
    End Sub
  Partial Private Sub UpdatetblBrandRecapQuestion(instance As tblBrandRecapQuestion)
    End Sub
  Partial Private Sub DeletetblBrandRecapQuestion(instance As tblBrandRecapQuestion)
    End Sub
  Partial Private Sub InserttblBrandsInRequestedEvent(instance As tblBrandsInRequestedEvent)
    End Sub
  Partial Private Sub UpdatetblBrandsInRequestedEvent(instance As tblBrandsInRequestedEvent)
    End Sub
  Partial Private Sub DeletetblBrandsInRequestedEvent(instance As tblBrandsInRequestedEvent)
    End Sub
  Partial Private Sub InserttblBrandStaffingPosition(instance As tblBrandStaffingPosition)
    End Sub
  Partial Private Sub UpdatetblBrandStaffingPosition(instance As tblBrandStaffingPosition)
    End Sub
  Partial Private Sub DeletetblBrandStaffingPosition(instance As tblBrandStaffingPosition)
    End Sub
  Partial Private Sub InserttblBrandTraining(instance As tblBrandTraining)
    End Sub
  Partial Private Sub UpdatetblBrandTraining(instance As tblBrandTraining)
    End Sub
  Partial Private Sub DeletetblBrandTraining(instance As tblBrandTraining)
    End Sub
  Partial Private Sub InserttblClientAccount(instance As tblClientAccount)
    End Sub
  Partial Private Sub UpdatetblClientAccount(instance As tblClientAccount)
    End Sub
  Partial Private Sub DeletetblClientAccount(instance As tblClientAccount)
    End Sub
  Partial Private Sub InserttblClientAccountType(instance As tblClientAccountType)
    End Sub
  Partial Private Sub UpdatetblClientAccountType(instance As tblClientAccountType)
    End Sub
  Partial Private Sub DeletetblClientAccountType(instance As tblClientAccountType)
    End Sub
  Partial Private Sub InserttblClientActivityType(instance As tblClientActivityType)
    End Sub
  Partial Private Sub UpdatetblClientActivityType(instance As tblClientActivityType)
    End Sub
  Partial Private Sub DeletetblClientActivityType(instance As tblClientActivityType)
    End Sub
  Partial Private Sub InserttblClientEventType(instance As tblClientEventType)
    End Sub
  Partial Private Sub UpdatetblClientEventType(instance As tblClientEventType)
    End Sub
  Partial Private Sub DeletetblClientEventType(instance As tblClientEventType)
    End Sub
  Partial Private Sub InserttblClientMarket(instance As tblClientMarket)
    End Sub
  Partial Private Sub UpdatetblClientMarket(instance As tblClientMarket)
    End Sub
  Partial Private Sub DeletetblClientMarket(instance As tblClientMarket)
    End Sub
  Partial Private Sub InserttblContactType(instance As tblContactType)
    End Sub
  Partial Private Sub UpdatetblContactType(instance As tblContactType)
    End Sub
  Partial Private Sub DeletetblContactType(instance As tblContactType)
    End Sub
  Partial Private Sub InserttblCountry(instance As tblCountry)
    End Sub
  Partial Private Sub UpdatetblCountry(instance As tblCountry)
    End Sub
  Partial Private Sub DeletetblCountry(instance As tblCountry)
    End Sub
  Partial Private Sub InserttblCourseInvitation(instance As tblCourseInvitation)
    End Sub
  Partial Private Sub UpdatetblCourseInvitation(instance As tblCourseInvitation)
    End Sub
  Partial Private Sub DeletetblCourseInvitation(instance As tblCourseInvitation)
    End Sub
  Partial Private Sub InserttblDefaultRecapQuestion(instance As tblDefaultRecapQuestion)
    End Sub
  Partial Private Sub UpdatetblDefaultRecapQuestion(instance As tblDefaultRecapQuestion)
    End Sub
  Partial Private Sub DeletetblDefaultRecapQuestion(instance As tblDefaultRecapQuestion)
    End Sub
  Partial Private Sub InserttblDistributor(instance As tblDistributor)
    End Sub
  Partial Private Sub UpdatetblDistributor(instance As tblDistributor)
    End Sub
  Partial Private Sub DeletetblDistributor(instance As tblDistributor)
    End Sub
  Partial Private Sub InserttblDocument(instance As tblDocument)
    End Sub
  Partial Private Sub UpdatetblDocument(instance As tblDocument)
    End Sub
  Partial Private Sub DeletetblDocument(instance As tblDocument)
    End Sub
  Partial Private Sub InserttblEvent(instance As tblEvent)
    End Sub
  Partial Private Sub UpdatetblEvent(instance As tblEvent)
    End Sub
  Partial Private Sub DeletetblEvent(instance As tblEvent)
    End Sub
  Partial Private Sub InserttblEventBrandResult(instance As tblEventBrandResult)
    End Sub
  Partial Private Sub UpdatetblEventBrandResult(instance As tblEventBrandResult)
    End Sub
  Partial Private Sub DeletetblEventBrandResult(instance As tblEventBrandResult)
    End Sub
  Partial Private Sub InserttblEventCourse(instance As tblEventCourse)
    End Sub
  Partial Private Sub UpdatetblEventCourse(instance As tblEventCourse)
    End Sub
  Partial Private Sub DeletetblEventCourse(instance As tblEventCourse)
    End Sub
  Partial Private Sub InserttblEventDocument(instance As tblEventDocument)
    End Sub
  Partial Private Sub UpdatetblEventDocument(instance As tblEventDocument)
    End Sub
  Partial Private Sub DeletetblEventDocument(instance As tblEventDocument)
    End Sub
  Partial Private Sub InserttblEventDocument_Hidden(instance As tblEventDocument_Hidden)
    End Sub
  Partial Private Sub UpdatetblEventDocument_Hidden(instance As tblEventDocument_Hidden)
    End Sub
  Partial Private Sub DeletetblEventDocument_Hidden(instance As tblEventDocument_Hidden)
    End Sub
  Partial Private Sub InserttblEventExpense(instance As tblEventExpense)
    End Sub
  Partial Private Sub UpdatetblEventExpense(instance As tblEventExpense)
    End Sub
  Partial Private Sub DeletetblEventExpense(instance As tblEventExpense)
    End Sub
  Partial Private Sub InserttblEventImport(instance As tblEventImport)
    End Sub
  Partial Private Sub UpdatetblEventImport(instance As tblEventImport)
    End Sub
  Partial Private Sub DeletetblEventImport(instance As tblEventImport)
    End Sub
  Partial Private Sub InserttblEventLog(instance As tblEventLog)
    End Sub
  Partial Private Sub UpdatetblEventLog(instance As tblEventLog)
    End Sub
  Partial Private Sub DeletetblEventLog(instance As tblEventLog)
    End Sub
  Partial Private Sub InserttblEventNote(instance As tblEventNote)
    End Sub
  Partial Private Sub UpdatetblEventNote(instance As tblEventNote)
    End Sub
  Partial Private Sub DeletetblEventNote(instance As tblEventNote)
    End Sub
  Partial Private Sub InserttblEventPayment(instance As tblEventPayment)
    End Sub
  Partial Private Sub UpdatetblEventPayment(instance As tblEventPayment)
    End Sub
  Partial Private Sub DeletetblEventPayment(instance As tblEventPayment)
    End Sub
  Partial Private Sub InserttblEventRecapQuestion(instance As tblEventRecapQuestion)
    End Sub
  Partial Private Sub UpdatetblEventRecapQuestion(instance As tblEventRecapQuestion)
    End Sub
  Partial Private Sub DeletetblEventRecapQuestion(instance As tblEventRecapQuestion)
    End Sub
  Partial Private Sub InserttblEventStaffingRequirement(instance As tblEventStaffingRequirement)
    End Sub
  Partial Private Sub UpdatetblEventStaffingRequirement(instance As tblEventStaffingRequirement)
    End Sub
  Partial Private Sub DeletetblEventStaffingRequirement(instance As tblEventStaffingRequirement)
    End Sub
  Partial Private Sub InserttblEventTrainingInvitation(instance As tblEventTrainingInvitation)
    End Sub
  Partial Private Sub UpdatetblEventTrainingInvitation(instance As tblEventTrainingInvitation)
    End Sub
  Partial Private Sub DeletetblEventTrainingInvitation(instance As tblEventTrainingInvitation)
    End Sub
  Partial Private Sub InserttblEventType(instance As tblEventType)
    End Sub
  Partial Private Sub UpdatetblEventType(instance As tblEventType)
    End Sub
  Partial Private Sub DeletetblEventType(instance As tblEventType)
    End Sub
  Partial Private Sub InserttblEventTypeRecapQuestion(instance As tblEventTypeRecapQuestion)
    End Sub
  Partial Private Sub UpdatetblEventTypeRecapQuestion(instance As tblEventTypeRecapQuestion)
    End Sub
  Partial Private Sub DeletetblEventTypeRecapQuestion(instance As tblEventTypeRecapQuestion)
    End Sub
  Partial Private Sub InserttblEventTypeTask(instance As tblEventTypeTask)
    End Sub
  Partial Private Sub UpdatetblEventTypeTask(instance As tblEventTypeTask)
    End Sub
  Partial Private Sub DeletetblEventTypeTask(instance As tblEventTypeTask)
    End Sub
  Partial Private Sub InserttblEventWeather(instance As tblEventWeather)
    End Sub
  Partial Private Sub UpdatetblEventWeather(instance As tblEventWeather)
    End Sub
  Partial Private Sub DeletetblEventWeather(instance As tblEventWeather)
    End Sub
  Partial Private Sub InserttblExpenseType(instance As tblExpenseType)
    End Sub
  Partial Private Sub UpdatetblExpenseType(instance As tblExpenseType)
    End Sub
  Partial Private Sub DeletetblExpenseType(instance As tblExpenseType)
    End Sub
  Partial Private Sub InserttblHelpfulLocation(instance As tblHelpfulLocation)
    End Sub
  Partial Private Sub UpdatetblHelpfulLocation(instance As tblHelpfulLocation)
    End Sub
  Partial Private Sub DeletetblHelpfulLocation(instance As tblHelpfulLocation)
    End Sub
  Partial Private Sub InserttblInventory(instance As tblInventory)
    End Sub
  Partial Private Sub UpdatetblInventory(instance As tblInventory)
    End Sub
  Partial Private Sub DeletetblInventory(instance As tblInventory)
    End Sub
  Partial Private Sub InserttblInventoryItem(instance As tblInventoryItem)
    End Sub
  Partial Private Sub UpdatetblInventoryItem(instance As tblInventoryItem)
    End Sub
  Partial Private Sub DeletetblInventoryItem(instance As tblInventoryItem)
    End Sub
  Partial Private Sub InserttblInvoice(instance As tblInvoice)
    End Sub
  Partial Private Sub UpdatetblInvoice(instance As tblInvoice)
    End Sub
  Partial Private Sub DeletetblInvoice(instance As tblInvoice)
    End Sub
  Partial Private Sub InserttblInvoiceHeader(instance As tblInvoiceHeader)
    End Sub
  Partial Private Sub UpdatetblInvoiceHeader(instance As tblInvoiceHeader)
    End Sub
  Partial Private Sub DeletetblInvoiceHeader(instance As tblInvoiceHeader)
    End Sub
  Partial Private Sub InserttblLoadBingMap(instance As tblLoadBingMap)
    End Sub
  Partial Private Sub UpdatetblLoadBingMap(instance As tblLoadBingMap)
    End Sub
  Partial Private Sub DeletetblLoadBingMap(instance As tblLoadBingMap)
    End Sub
  Partial Private Sub InserttblLogFile(instance As tblLogFile)
    End Sub
  Partial Private Sub UpdatetblLogFile(instance As tblLogFile)
    End Sub
  Partial Private Sub DeletetblLogFile(instance As tblLogFile)
    End Sub
  Partial Private Sub InserttblMarket(instance As tblMarket)
    End Sub
  Partial Private Sub UpdatetblMarket(instance As tblMarket)
    End Sub
  Partial Private Sub DeletetblMarket(instance As tblMarket)
    End Sub
  Partial Private Sub InserttblMessage(instance As tblMessage)
    End Sub
  Partial Private Sub UpdatetblMessage(instance As tblMessage)
    End Sub
  Partial Private Sub DeletetblMessage(instance As tblMessage)
    End Sub
  Partial Private Sub InserttblMessageBcc(instance As tblMessageBcc)
    End Sub
  Partial Private Sub UpdatetblMessageBcc(instance As tblMessageBcc)
    End Sub
  Partial Private Sub DeletetblMessageBcc(instance As tblMessageBcc)
    End Sub
  Partial Private Sub InserttblMessageColumn(instance As tblMessageColumn)
    End Sub
  Partial Private Sub UpdatetblMessageColumn(instance As tblMessageColumn)
    End Sub
  Partial Private Sub DeletetblMessageColumn(instance As tblMessageColumn)
    End Sub
  Partial Private Sub InserttblPayment(instance As tblPayment)
    End Sub
  Partial Private Sub UpdatetblPayment(instance As tblPayment)
    End Sub
  Partial Private Sub DeletetblPayment(instance As tblPayment)
    End Sub
  Partial Private Sub InserttblPhoto(instance As tblPhoto)
    End Sub
  Partial Private Sub UpdatetblPhoto(instance As tblPhoto)
    End Sub
  Partial Private Sub DeletetblPhoto(instance As tblPhoto)
    End Sub
  Partial Private Sub InserttblPhotoBin(instance As tblPhotoBin)
    End Sub
  Partial Private Sub UpdatetblPhotoBin(instance As tblPhotoBin)
    End Sub
  Partial Private Sub DeletetblPhotoBin(instance As tblPhotoBin)
    End Sub
  Partial Private Sub InserttblPosKit(instance As tblPosKit)
    End Sub
  Partial Private Sub UpdatetblPosKit(instance As tblPosKit)
    End Sub
  Partial Private Sub DeletetblPosKit(instance As tblPosKit)
    End Sub
  Partial Private Sub InserttblPosKitItem(instance As tblPosKitItem)
    End Sub
  Partial Private Sub UpdatetblPosKitItem(instance As tblPosKitItem)
    End Sub
  Partial Private Sub DeletetblPosKitItem(instance As tblPosKitItem)
    End Sub
  Partial Private Sub InserttblPosShippingCost(instance As tblPosShippingCost)
    End Sub
  Partial Private Sub UpdatetblPosShippingCost(instance As tblPosShippingCost)
    End Sub
  Partial Private Sub DeletetblPosShippingCost(instance As tblPosShippingCost)
    End Sub
  Partial Private Sub InserttblProfile(instance As tblProfile)
    End Sub
  Partial Private Sub UpdatetblProfile(instance As tblProfile)
    End Sub
  Partial Private Sub DeletetblProfile(instance As tblProfile)
    End Sub
  Partial Private Sub InserttblPurchaseOrder(instance As tblPurchaseOrder)
    End Sub
  Partial Private Sub UpdatetblPurchaseOrder(instance As tblPurchaseOrder)
    End Sub
  Partial Private Sub DeletetblPurchaseOrder(instance As tblPurchaseOrder)
    End Sub
  Partial Private Sub InserttblRecapQuestionOption(instance As tblRecapQuestionOption)
    End Sub
  Partial Private Sub UpdatetblRecapQuestionOption(instance As tblRecapQuestionOption)
    End Sub
  Partial Private Sub DeletetblRecapQuestionOption(instance As tblRecapQuestionOption)
    End Sub
  Partial Private Sub InserttblRegion(instance As tblRegion)
    End Sub
  Partial Private Sub UpdatetblRegion(instance As tblRegion)
    End Sub
  Partial Private Sub DeletetblRegion(instance As tblRegion)
    End Sub
  Partial Private Sub InserttblRequestedEvent(instance As tblRequestedEvent)
    End Sub
  Partial Private Sub UpdatetblRequestedEvent(instance As tblRequestedEvent)
    End Sub
  Partial Private Sub DeletetblRequestedEvent(instance As tblRequestedEvent)
    End Sub
  Partial Private Sub InserttblShippingVendor(instance As tblShippingVendor)
    End Sub
  Partial Private Sub UpdatetblShippingVendor(instance As tblShippingVendor)
    End Sub
  Partial Private Sub DeletetblShippingVendor(instance As tblShippingVendor)
    End Sub
  Partial Private Sub InserttblSiteLogin(instance As tblSiteLogin)
    End Sub
  Partial Private Sub UpdatetblSiteLogin(instance As tblSiteLogin)
    End Sub
  Partial Private Sub DeletetblSiteLogin(instance As tblSiteLogin)
    End Sub
  Partial Private Sub InserttblSiteSetting(instance As tblSiteSetting)
    End Sub
  Partial Private Sub UpdatetblSiteSetting(instance As tblSiteSetting)
    End Sub
  Partial Private Sub DeletetblSiteSetting(instance As tblSiteSetting)
    End Sub
  Partial Private Sub InserttblStaff(instance As tblStaff)
    End Sub
  Partial Private Sub UpdatetblStaff(instance As tblStaff)
    End Sub
  Partial Private Sub DeletetblStaff(instance As tblStaff)
    End Sub
  Partial Private Sub InserttblStaffClient(instance As tblStaffClient)
    End Sub
  Partial Private Sub UpdatetblStaffClient(instance As tblStaffClient)
    End Sub
  Partial Private Sub DeletetblStaffClient(instance As tblStaffClient)
    End Sub
  Partial Private Sub InserttblStaffInClient(instance As tblStaffInClient)
    End Sub
  Partial Private Sub UpdatetblStaffInClient(instance As tblStaffInClient)
    End Sub
  Partial Private Sub DeletetblStaffInClient(instance As tblStaffInClient)
    End Sub
  Partial Private Sub InserttblStaffingPosition(instance As tblStaffingPosition)
    End Sub
  Partial Private Sub UpdatetblStaffingPosition(instance As tblStaffingPosition)
    End Sub
  Partial Private Sub DeletetblStaffingPosition(instance As tblStaffingPosition)
    End Sub
  Partial Private Sub InserttblStaffInMarket(instance As tblStaffInMarket)
    End Sub
  Partial Private Sub UpdatetblStaffInMarket(instance As tblStaffInMarket)
    End Sub
  Partial Private Sub DeletetblStaffInMarket(instance As tblStaffInMarket)
    End Sub
  Partial Private Sub InserttblStaffInPosition(instance As tblStaffInPosition)
    End Sub
  Partial Private Sub UpdatetblStaffInPosition(instance As tblStaffInPosition)
    End Sub
  Partial Private Sub DeletetblStaffInPosition(instance As tblStaffInPosition)
    End Sub
  Partial Private Sub InserttblStaffMarket(instance As tblStaffMarket)
    End Sub
  Partial Private Sub UpdatetblStaffMarket(instance As tblStaffMarket)
    End Sub
  Partial Private Sub DeletetblStaffMarket(instance As tblStaffMarket)
    End Sub
  Partial Private Sub InserttblStaffSupplier(instance As tblStaffSupplier)
    End Sub
  Partial Private Sub UpdatetblStaffSupplier(instance As tblStaffSupplier)
    End Sub
  Partial Private Sub DeletetblStaffSupplier(instance As tblStaffSupplier)
    End Sub
  Partial Private Sub InserttblStaffTeam(instance As tblStaffTeam)
    End Sub
  Partial Private Sub UpdatetblStaffTeam(instance As tblStaffTeam)
    End Sub
  Partial Private Sub DeletetblStaffTeam(instance As tblStaffTeam)
    End Sub
  Partial Private Sub InserttblState(instance As tblState)
    End Sub
  Partial Private Sub UpdatetblState(instance As tblState)
    End Sub
  Partial Private Sub DeletetblState(instance As tblState)
    End Sub
  Partial Private Sub InserttblStatus(instance As tblStatus)
    End Sub
  Partial Private Sub UpdatetblStatus(instance As tblStatus)
    End Sub
  Partial Private Sub DeletetblStatus(instance As tblStatus)
    End Sub
  Partial Private Sub InserttblSupplierBillingRate(instance As tblSupplierBillingRate)
    End Sub
  Partial Private Sub UpdatetblSupplierBillingRate(instance As tblSupplierBillingRate)
    End Sub
  Partial Private Sub DeletetblSupplierBillingRate(instance As tblSupplierBillingRate)
    End Sub
  Partial Private Sub InserttblSupplierBillingRate_MarketSucharge(instance As tblSupplierBillingRate_MarketSucharge)
    End Sub
  Partial Private Sub UpdatetblSupplierBillingRate_MarketSucharge(instance As tblSupplierBillingRate_MarketSucharge)
    End Sub
  Partial Private Sub DeletetblSupplierBillingRate_MarketSucharge(instance As tblSupplierBillingRate_MarketSucharge)
    End Sub
  Partial Private Sub InserttblSupplierBudgetQuestion(instance As tblSupplierBudgetQuestion)
    End Sub
  Partial Private Sub UpdatetblSupplierBudgetQuestion(instance As tblSupplierBudgetQuestion)
    End Sub
  Partial Private Sub DeletetblSupplierBudgetQuestion(instance As tblSupplierBudgetQuestion)
    End Sub
  Partial Private Sub InserttblSupplierBudgetQuestionOption(instance As tblSupplierBudgetQuestionOption)
    End Sub
  Partial Private Sub UpdatetblSupplierBudgetQuestionOption(instance As tblSupplierBudgetQuestionOption)
    End Sub
  Partial Private Sub DeletetblSupplierBudgetQuestionOption(instance As tblSupplierBudgetQuestionOption)
    End Sub
  Partial Private Sub InserttblSupplierBudgetQuestionResult(instance As tblSupplierBudgetQuestionResult)
    End Sub
  Partial Private Sub UpdatetblSupplierBudgetQuestionResult(instance As tblSupplierBudgetQuestionResult)
    End Sub
  Partial Private Sub DeletetblSupplierBudgetQuestionResult(instance As tblSupplierBudgetQuestionResult)
    End Sub
  Partial Private Sub InserttblSupplierDocument(instance As tblSupplierDocument)
    End Sub
  Partial Private Sub UpdatetblSupplierDocument(instance As tblSupplierDocument)
    End Sub
  Partial Private Sub DeletetblSupplierDocument(instance As tblSupplierDocument)
    End Sub
  Partial Private Sub InserttblTeam(instance As tblTeam)
    End Sub
  Partial Private Sub UpdatetblTeam(instance As tblTeam)
    End Sub
  Partial Private Sub DeletetblTeam(instance As tblTeam)
    End Sub
  Partial Private Sub InserttblTeamMarket(instance As tblTeamMarket)
    End Sub
  Partial Private Sub UpdatetblTeamMarket(instance As tblTeamMarket)
    End Sub
  Partial Private Sub DeletetblTeamMarket(instance As tblTeamMarket)
    End Sub
  Partial Private Sub InserttblTrainingResult(instance As tblTrainingResult)
    End Sub
  Partial Private Sub UpdatetblTrainingResult(instance As tblTrainingResult)
    End Sub
  Partial Private Sub DeletetblTrainingResult(instance As tblTrainingResult)
    End Sub
  Partial Private Sub InserttblUser(instance As tblUser)
    End Sub
  Partial Private Sub UpdatetblUser(instance As tblUser)
    End Sub
  Partial Private Sub DeletetblUser(instance As tblUser)
    End Sub
  Partial Private Sub InserttblUserClient(instance As tblUserClient)
    End Sub
  Partial Private Sub UpdatetblUserClient(instance As tblUserClient)
    End Sub
  Partial Private Sub DeletetblUserClient(instance As tblUserClient)
    End Sub
  Partial Private Sub InserttblUserMarket(instance As tblUserMarket)
    End Sub
  Partial Private Sub UpdatetblUserMarket(instance As tblUserMarket)
    End Sub
  Partial Private Sub DeletetblUserMarket(instance As tblUserMarket)
    End Sub
  Partial Private Sub InserttblUserTeam(instance As tblUserTeam)
    End Sub
  Partial Private Sub UpdatetblUserTeam(instance As tblUserTeam)
    End Sub
  Partial Private Sub DeletetblUserTeam(instance As tblUserTeam)
    End Sub
  Partial Private Sub InserttblWeatherInfo(instance As tblWeatherInfo)
    End Sub
  Partial Private Sub UpdatetblWeatherInfo(instance As tblWeatherInfo)
    End Sub
  Partial Private Sub DeletetblWeatherInfo(instance As tblWeatherInfo)
    End Sub
  Partial Private Sub Inserttemp_Account(instance As temp_Account)
    End Sub
  Partial Private Sub Updatetemp_Account(instance As temp_Account)
    End Sub
  Partial Private Sub Deletetemp_Account(instance As temp_Account)
    End Sub
  Partial Private Sub Inserttemp_AmbassadorMarket(instance As temp_AmbassadorMarket)
    End Sub
  Partial Private Sub Updatetemp_AmbassadorMarket(instance As temp_AmbassadorMarket)
    End Sub
  Partial Private Sub Deletetemp_AmbassadorMarket(instance As temp_AmbassadorMarket)
    End Sub
  Partial Private Sub InserttempAccountPosDistribution(instance As tempAccountPosDistribution)
    End Sub
  Partial Private Sub UpdatetempAccountPosDistribution(instance As tempAccountPosDistribution)
    End Sub
  Partial Private Sub DeletetempAccountPosDistribution(instance As tempAccountPosDistribution)
    End Sub
  Partial Private Sub InserttempAmbassador(instance As tempAmbassador)
    End Sub
  Partial Private Sub UpdatetempAmbassador(instance As tempAmbassador)
    End Sub
  Partial Private Sub DeletetempAmbassador(instance As tempAmbassador)
    End Sub
  Partial Private Sub InserttempAmbassadorClient(instance As tempAmbassadorClient)
    End Sub
  Partial Private Sub UpdatetempAmbassadorClient(instance As tempAmbassadorClient)
    End Sub
  Partial Private Sub DeletetempAmbassadorClient(instance As tempAmbassadorClient)
    End Sub
  Partial Private Sub InserttempAmbassadorMarket(instance As tempAmbassadorMarket)
    End Sub
  Partial Private Sub UpdatetempAmbassadorMarket(instance As tempAmbassadorMarket)
    End Sub
  Partial Private Sub DeletetempAmbassadorMarket(instance As tempAmbassadorMarket)
    End Sub
  Partial Private Sub InserttempBrandEventExecution(instance As tempBrandEventExecution)
    End Sub
  Partial Private Sub UpdatetempBrandEventExecution(instance As tempBrandEventExecution)
    End Sub
  Partial Private Sub DeletetempBrandEventExecution(instance As tempBrandEventExecution)
    End Sub
  Partial Private Sub InserttempBrandEventTask(instance As tempBrandEventTask)
    End Sub
  Partial Private Sub UpdatetempBrandEventTask(instance As tempBrandEventTask)
    End Sub
  Partial Private Sub DeletetempBrandEventTask(instance As tempBrandEventTask)
    End Sub
  Partial Private Sub InserttempBrandRecapQuestion(instance As tempBrandRecapQuestion)
    End Sub
  Partial Private Sub UpdatetempBrandRecapQuestion(instance As tempBrandRecapQuestion)
    End Sub
  Partial Private Sub DeletetempBrandRecapQuestion(instance As tempBrandRecapQuestion)
    End Sub
  Partial Private Sub InserttempBrandStaffingPosition(instance As tempBrandStaffingPosition)
    End Sub
  Partial Private Sub UpdatetempBrandStaffingPosition(instance As tempBrandStaffingPosition)
    End Sub
  Partial Private Sub DeletetempBrandStaffingPosition(instance As tempBrandStaffingPosition)
    End Sub
  Partial Private Sub InserttempBrandSupplier(instance As tempBrandSupplier)
    End Sub
  Partial Private Sub UpdatetempBrandSupplier(instance As tempBrandSupplier)
    End Sub
  Partial Private Sub DeletetempBrandSupplier(instance As tempBrandSupplier)
    End Sub
  Partial Private Sub InserttempCheckIn(instance As tempCheckIn)
    End Sub
  Partial Private Sub UpdatetempCheckIn(instance As tempCheckIn)
    End Sub
  Partial Private Sub DeletetempCheckIn(instance As tempCheckIn)
    End Sub
  Partial Private Sub InserttempEvent(instance As tempEvent)
    End Sub
  Partial Private Sub UpdatetempEvent(instance As tempEvent)
    End Sub
  Partial Private Sub DeletetempEvent(instance As tempEvent)
    End Sub
  Partial Private Sub InserttempEventRecapQuestion(instance As tempEventRecapQuestion)
    End Sub
  Partial Private Sub UpdatetempEventRecapQuestion(instance As tempEventRecapQuestion)
    End Sub
  Partial Private Sub DeletetempEventRecapQuestion(instance As tempEventRecapQuestion)
    End Sub
  Partial Private Sub InserttempEventTypeRecapQuestion(instance As tempEventTypeRecapQuestion)
    End Sub
  Partial Private Sub UpdatetempEventTypeRecapQuestion(instance As tempEventTypeRecapQuestion)
    End Sub
  Partial Private Sub DeletetempEventTypeRecapQuestion(instance As tempEventTypeRecapQuestion)
    End Sub
  Partial Private Sub InserttempEventTypeTask(instance As tempEventTypeTask)
    End Sub
  Partial Private Sub UpdatetempEventTypeTask(instance As tempEventTypeTask)
    End Sub
  Partial Private Sub DeletetempEventTypeTask(instance As tempEventTypeTask)
    End Sub
  Partial Private Sub InserttempPhoto(instance As tempPhoto)
    End Sub
  Partial Private Sub UpdatetempPhoto(instance As tempPhoto)
    End Sub
  Partial Private Sub DeletetempPhoto(instance As tempPhoto)
    End Sub
  Partial Private Sub InserttempRecapQuestionOption(instance As tempRecapQuestionOption)
    End Sub
  Partial Private Sub UpdatetempRecapQuestionOption(instance As tempRecapQuestionOption)
    End Sub
  Partial Private Sub DeletetempRecapQuestionOption(instance As tempRecapQuestionOption)
    End Sub
  Partial Private Sub InserttempSupplierBillingRate(instance As tempSupplierBillingRate)
    End Sub
  Partial Private Sub UpdatetempSupplierBillingRate(instance As tempSupplierBillingRate)
    End Sub
  Partial Private Sub DeletetempSupplierBillingRate(instance As tempSupplierBillingRate)
    End Sub
  Partial Private Sub InserttempSupplierBrand(instance As tempSupplierBrand)
    End Sub
  Partial Private Sub UpdatetempSupplierBrand(instance As tempSupplierBrand)
    End Sub
  Partial Private Sub DeletetempSupplierBrand(instance As tempSupplierBrand)
    End Sub
  Partial Private Sub InsertActivityResult(instance As ActivityResult)
    End Sub
  Partial Private Sub UpdateActivityResult(instance As ActivityResult)
    End Sub
  Partial Private Sub DeleteActivityResult(instance As ActivityResult)
    End Sub
  Partial Private Sub InsertActivity(instance As Activity)
    End Sub
  Partial Private Sub UpdateActivity(instance As Activity)
    End Sub
  Partial Private Sub DeleteActivity(instance As Activity)
    End Sub
  Partial Private Sub InserttblClient(instance As tblClient)
    End Sub
  Partial Private Sub UpdatetblClient(instance As tblClient)
    End Sub
  Partial Private Sub DeletetblClient(instance As tblClient)
    End Sub
  Partial Private Sub InserttblBrand(instance As tblBrand)
    End Sub
  Partial Private Sub UpdatetblBrand(instance As tblBrand)
    End Sub
  Partial Private Sub DeletetblBrand(instance As tblBrand)
    End Sub
  Partial Private Sub InserttblShippingMethod(instance As tblShippingMethod)
    End Sub
  Partial Private Sub UpdatetblShippingMethod(instance As tblShippingMethod)
    End Sub
  Partial Private Sub DeletetblShippingMethod(instance As tblShippingMethod)
    End Sub
  Partial Private Sub InserttempBrandCategoryType(instance As tempBrandCategoryType)
    End Sub
  Partial Private Sub UpdatetempBrandCategoryType(instance As tempBrandCategoryType)
    End Sub
  Partial Private Sub DeletetempBrandCategoryType(instance As tempBrandCategoryType)
    End Sub
  Partial Private Sub InserttblBrandCategory(instance As tblBrandCategory)
    End Sub
  Partial Private Sub UpdatetblBrandCategory(instance As tblBrandCategory)
    End Sub
  Partial Private Sub DeletetblBrandCategory(instance As tblBrandCategory)
    End Sub
  Partial Private Sub InserttempBrandCategorySubType(instance As tempBrandCategorySubType)
    End Sub
  Partial Private Sub UpdatetempBrandCategorySubType(instance As tempBrandCategorySubType)
    End Sub
  Partial Private Sub DeletetempBrandCategorySubType(instance As tempBrandCategorySubType)
    End Sub
  Partial Private Sub InserttblBrandProduct(instance As tblBrandProduct)
    End Sub
  Partial Private Sub UpdatetblBrandProduct(instance As tblBrandProduct)
    End Sub
  Partial Private Sub DeletetblBrandProduct(instance As tblBrandProduct)
    End Sub
  Partial Private Sub InserttblCategory(instance As tblCategory)
    End Sub
  Partial Private Sub UpdatetblCategory(instance As tblCategory)
    End Sub
  Partial Private Sub DeletetblCategory(instance As tblCategory)
    End Sub
  Partial Private Sub InserttblSupplier(instance As tblSupplier)
    End Sub
  Partial Private Sub UpdatetblSupplier(instance As tblSupplier)
    End Sub
  Partial Private Sub DeletetblSupplier(instance As tblSupplier)
    End Sub
  Partial Private Sub InserttblSupplierBrand(instance As tblSupplierBrand)
    End Sub
  Partial Private Sub UpdatetblSupplierBrand(instance As tblSupplierBrand)
    End Sub
  Partial Private Sub DeletetblSupplierBrand(instance As tblSupplierBrand)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("DefaultConnection").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property InvoiceImports() As System.Data.Linq.Table(Of InvoiceImport)
		Get
			Return Me.GetTable(Of InvoiceImport)
		End Get
	End Property
	
	Public ReadOnly Property Sessions() As System.Data.Linq.Table(Of Session)
		Get
			Return Me.GetTable(Of Session)
		End Get
	End Property
	
	Public ReadOnly Property tblAccounts() As System.Data.Linq.Table(Of tblAccount)
		Get
			Return Me.GetTable(Of tblAccount)
		End Get
	End Property
	
	Public ReadOnly Property tblAccountActivities() As System.Data.Linq.Table(Of tblAccountActivity)
		Get
			Return Me.GetTable(Of tblAccountActivity)
		End Get
	End Property
	
	Public ReadOnly Property tblAccountActivityPhotos() As System.Data.Linq.Table(Of tblAccountActivityPhoto)
		Get
			Return Me.GetTable(Of tblAccountActivityPhoto)
		End Get
	End Property
	
	Public ReadOnly Property tblAccountActivityResults() As System.Data.Linq.Table(Of tblAccountActivityResult)
		Get
			Return Me.GetTable(Of tblAccountActivityResult)
		End Get
	End Property
	
	Public ReadOnly Property tblAccountBrandTrackers() As System.Data.Linq.Table(Of tblAccountBrandTracker)
		Get
			Return Me.GetTable(Of tblAccountBrandTracker)
		End Get
	End Property
	
	Public ReadOnly Property tblAccountContacts() As System.Data.Linq.Table(Of tblAccountContact)
		Get
			Return Me.GetTable(Of tblAccountContact)
		End Get
	End Property
	
	Public ReadOnly Property tblAccountDemographics() As System.Data.Linq.Table(Of tblAccountDemographic)
		Get
			Return Me.GetTable(Of tblAccountDemographic)
		End Get
	End Property
	
	Public ReadOnly Property tblAccountDetails() As System.Data.Linq.Table(Of tblAccountDetail)
		Get
			Return Me.GetTable(Of tblAccountDetail)
		End Get
	End Property
	
	Public ReadOnly Property tblAccountHours() As System.Data.Linq.Table(Of tblAccountHour)
		Get
			Return Me.GetTable(Of tblAccountHour)
		End Get
	End Property
	
	Public ReadOnly Property tblAccountNotes() As System.Data.Linq.Table(Of tblAccountNote)
		Get
			Return Me.GetTable(Of tblAccountNote)
		End Get
	End Property
	
	Public ReadOnly Property tblAccountPhotos() As System.Data.Linq.Table(Of tblAccountPhoto)
		Get
			Return Me.GetTable(Of tblAccountPhoto)
		End Get
	End Property
	
	Public ReadOnly Property tblAccountPosDistributions() As System.Data.Linq.Table(Of tblAccountPosDistribution)
		Get
			Return Me.GetTable(Of tblAccountPosDistribution)
		End Get
	End Property
	
	Public ReadOnly Property tblAccountTypes() As System.Data.Linq.Table(Of tblAccountType)
		Get
			Return Me.GetTable(Of tblAccountType)
		End Get
	End Property
	
	Public ReadOnly Property tblActivityAttachments() As System.Data.Linq.Table(Of tblActivityAttachment)
		Get
			Return Me.GetTable(Of tblActivityAttachment)
		End Get
	End Property
	
	Public ReadOnly Property tblActivityFields() As System.Data.Linq.Table(Of tblActivityField)
		Get
			Return Me.GetTable(Of tblActivityField)
		End Get
	End Property
	
	Public ReadOnly Property tblActivityOptions() As System.Data.Linq.Table(Of tblActivityOption)
		Get
			Return Me.GetTable(Of tblActivityOption)
		End Get
	End Property
	
	Public ReadOnly Property tblActivityTypes() As System.Data.Linq.Table(Of tblActivityType)
		Get
			Return Me.GetTable(Of tblActivityType)
		End Get
	End Property
	
	Public ReadOnly Property tblAgencyFees() As System.Data.Linq.Table(Of tblAgencyFee)
		Get
			Return Me.GetTable(Of tblAgencyFee)
		End Get
	End Property
	
	Public ReadOnly Property tblAmbassadors() As System.Data.Linq.Table(Of tblAmbassador)
		Get
			Return Me.GetTable(Of tblAmbassador)
		End Get
	End Property
	
	Public ReadOnly Property tblAmbassadorBrandCategoryTypes() As System.Data.Linq.Table(Of tblAmbassadorBrandCategoryType)
		Get
			Return Me.GetTable(Of tblAmbassadorBrandCategoryType)
		End Get
	End Property
	
	Public ReadOnly Property tblAmbassadorClients() As System.Data.Linq.Table(Of tblAmbassadorClient)
		Get
			Return Me.GetTable(Of tblAmbassadorClient)
		End Get
	End Property
	
	Public ReadOnly Property tblAmbassadorDocuments() As System.Data.Linq.Table(Of tblAmbassadorDocument)
		Get
			Return Me.GetTable(Of tblAmbassadorDocument)
		End Get
	End Property
	
	Public ReadOnly Property tblAmbassadorEventRequests() As System.Data.Linq.Table(Of tblAmbassadorEventRequest)
		Get
			Return Me.GetTable(Of tblAmbassadorEventRequest)
		End Get
	End Property
	
	Public ReadOnly Property tblAmbassadorEventTypes() As System.Data.Linq.Table(Of tblAmbassadorEventType)
		Get
			Return Me.GetTable(Of tblAmbassadorEventType)
		End Get
	End Property
	
	Public ReadOnly Property tblAmbassadorMarkets() As System.Data.Linq.Table(Of tblAmbassadorMarket)
		Get
			Return Me.GetTable(Of tblAmbassadorMarket)
		End Get
	End Property
	
	Public ReadOnly Property tblAmbassadorNotes() As System.Data.Linq.Table(Of tblAmbassadorNote)
		Get
			Return Me.GetTable(Of tblAmbassadorNote)
		End Get
	End Property
	
	Public ReadOnly Property tblAmbassadorPhotos() As System.Data.Linq.Table(Of tblAmbassadorPhoto)
		Get
			Return Me.GetTable(Of tblAmbassadorPhoto)
		End Get
	End Property
	
	Public ReadOnly Property tblAmbassadorPositions() As System.Data.Linq.Table(Of tblAmbassadorPosition)
		Get
			Return Me.GetTable(Of tblAmbassadorPosition)
		End Get
	End Property
	
	Public ReadOnly Property tblBrandCategorySubTypes() As System.Data.Linq.Table(Of tblBrandCategorySubType)
		Get
			Return Me.GetTable(Of tblBrandCategorySubType)
		End Get
	End Property
	
	Public ReadOnly Property tblBrandCategoryTypes() As System.Data.Linq.Table(Of tblBrandCategoryType)
		Get
			Return Me.GetTable(Of tblBrandCategoryType)
		End Get
	End Property
	
	Public ReadOnly Property tblBrandDocuments() As System.Data.Linq.Table(Of tblBrandDocument)
		Get
			Return Me.GetTable(Of tblBrandDocument)
		End Get
	End Property
	
	Public ReadOnly Property tblBrandEventExecutions() As System.Data.Linq.Table(Of tblBrandEventExecution)
		Get
			Return Me.GetTable(Of tblBrandEventExecution)
		End Get
	End Property
	
	Public ReadOnly Property tblBrandEventTasks() As System.Data.Linq.Table(Of tblBrandEventTask)
		Get
			Return Me.GetTable(Of tblBrandEventTask)
		End Get
	End Property
	
	Public ReadOnly Property tblBrandGroups() As System.Data.Linq.Table(Of tblBrandGroup)
		Get
			Return Me.GetTable(Of tblBrandGroup)
		End Get
	End Property
	
	Public ReadOnly Property tblBrandImages() As System.Data.Linq.Table(Of tblBrandImage)
		Get
			Return Me.GetTable(Of tblBrandImage)
		End Get
	End Property
	
	Public ReadOnly Property tblBrandInEvents() As System.Data.Linq.Table(Of tblBrandInEvent)
		Get
			Return Me.GetTable(Of tblBrandInEvent)
		End Get
	End Property
	
	Public ReadOnly Property tblBrandPhotos() As System.Data.Linq.Table(Of tblBrandPhoto)
		Get
			Return Me.GetTable(Of tblBrandPhoto)
		End Get
	End Property
	
	Public ReadOnly Property tblBrandRecapQuestions() As System.Data.Linq.Table(Of tblBrandRecapQuestion)
		Get
			Return Me.GetTable(Of tblBrandRecapQuestion)
		End Get
	End Property
	
	Public ReadOnly Property tblBrandsInRequestedEvents() As System.Data.Linq.Table(Of tblBrandsInRequestedEvent)
		Get
			Return Me.GetTable(Of tblBrandsInRequestedEvent)
		End Get
	End Property
	
	Public ReadOnly Property tblBrandStaffingPositions() As System.Data.Linq.Table(Of tblBrandStaffingPosition)
		Get
			Return Me.GetTable(Of tblBrandStaffingPosition)
		End Get
	End Property
	
	Public ReadOnly Property tblBrandTrainings() As System.Data.Linq.Table(Of tblBrandTraining)
		Get
			Return Me.GetTable(Of tblBrandTraining)
		End Get
	End Property
	
	Public ReadOnly Property tblClientAccounts() As System.Data.Linq.Table(Of tblClientAccount)
		Get
			Return Me.GetTable(Of tblClientAccount)
		End Get
	End Property
	
	Public ReadOnly Property tblClientAccountTypes() As System.Data.Linq.Table(Of tblClientAccountType)
		Get
			Return Me.GetTable(Of tblClientAccountType)
		End Get
	End Property
	
	Public ReadOnly Property tblClientActivityTypes() As System.Data.Linq.Table(Of tblClientActivityType)
		Get
			Return Me.GetTable(Of tblClientActivityType)
		End Get
	End Property
	
	Public ReadOnly Property tblClientEventTypes() As System.Data.Linq.Table(Of tblClientEventType)
		Get
			Return Me.GetTable(Of tblClientEventType)
		End Get
	End Property
	
	Public ReadOnly Property tblClientMarkets() As System.Data.Linq.Table(Of tblClientMarket)
		Get
			Return Me.GetTable(Of tblClientMarket)
		End Get
	End Property
	
	Public ReadOnly Property tblContactTypes() As System.Data.Linq.Table(Of tblContactType)
		Get
			Return Me.GetTable(Of tblContactType)
		End Get
	End Property
	
	Public ReadOnly Property tblCountries() As System.Data.Linq.Table(Of tblCountry)
		Get
			Return Me.GetTable(Of tblCountry)
		End Get
	End Property
	
	Public ReadOnly Property tblCourseInvitations() As System.Data.Linq.Table(Of tblCourseInvitation)
		Get
			Return Me.GetTable(Of tblCourseInvitation)
		End Get
	End Property
	
	Public ReadOnly Property tblDefaultRecapQuestions() As System.Data.Linq.Table(Of tblDefaultRecapQuestion)
		Get
			Return Me.GetTable(Of tblDefaultRecapQuestion)
		End Get
	End Property
	
	Public ReadOnly Property tblDistributors() As System.Data.Linq.Table(Of tblDistributor)
		Get
			Return Me.GetTable(Of tblDistributor)
		End Get
	End Property
	
	Public ReadOnly Property tblDocuments() As System.Data.Linq.Table(Of tblDocument)
		Get
			Return Me.GetTable(Of tblDocument)
		End Get
	End Property
	
	Public ReadOnly Property tblEvents() As System.Data.Linq.Table(Of tblEvent)
		Get
			Return Me.GetTable(Of tblEvent)
		End Get
	End Property
	
	Public ReadOnly Property tblEventBrandResults() As System.Data.Linq.Table(Of tblEventBrandResult)
		Get
			Return Me.GetTable(Of tblEventBrandResult)
		End Get
	End Property
	
	Public ReadOnly Property tblEventCourses() As System.Data.Linq.Table(Of tblEventCourse)
		Get
			Return Me.GetTable(Of tblEventCourse)
		End Get
	End Property
	
	Public ReadOnly Property tblEventDocuments() As System.Data.Linq.Table(Of tblEventDocument)
		Get
			Return Me.GetTable(Of tblEventDocument)
		End Get
	End Property
	
	Public ReadOnly Property tblEventDocument_Hiddens() As System.Data.Linq.Table(Of tblEventDocument_Hidden)
		Get
			Return Me.GetTable(Of tblEventDocument_Hidden)
		End Get
	End Property
	
	Public ReadOnly Property tblEventExpenses() As System.Data.Linq.Table(Of tblEventExpense)
		Get
			Return Me.GetTable(Of tblEventExpense)
		End Get
	End Property
	
	Public ReadOnly Property tblEventImports() As System.Data.Linq.Table(Of tblEventImport)
		Get
			Return Me.GetTable(Of tblEventImport)
		End Get
	End Property
	
	Public ReadOnly Property tblEventLogs() As System.Data.Linq.Table(Of tblEventLog)
		Get
			Return Me.GetTable(Of tblEventLog)
		End Get
	End Property
	
	Public ReadOnly Property tblEventNotes() As System.Data.Linq.Table(Of tblEventNote)
		Get
			Return Me.GetTable(Of tblEventNote)
		End Get
	End Property
	
	Public ReadOnly Property tblEventPayments() As System.Data.Linq.Table(Of tblEventPayment)
		Get
			Return Me.GetTable(Of tblEventPayment)
		End Get
	End Property
	
	Public ReadOnly Property tblEventRecapQuestions() As System.Data.Linq.Table(Of tblEventRecapQuestion)
		Get
			Return Me.GetTable(Of tblEventRecapQuestion)
		End Get
	End Property
	
	Public ReadOnly Property tblEventStaffingRequirements() As System.Data.Linq.Table(Of tblEventStaffingRequirement)
		Get
			Return Me.GetTable(Of tblEventStaffingRequirement)
		End Get
	End Property
	
	Public ReadOnly Property tblEventTrainingInvitations() As System.Data.Linq.Table(Of tblEventTrainingInvitation)
		Get
			Return Me.GetTable(Of tblEventTrainingInvitation)
		End Get
	End Property
	
	Public ReadOnly Property tblEventTypes() As System.Data.Linq.Table(Of tblEventType)
		Get
			Return Me.GetTable(Of tblEventType)
		End Get
	End Property
	
	Public ReadOnly Property tblEventTypeRecapQuestions() As System.Data.Linq.Table(Of tblEventTypeRecapQuestion)
		Get
			Return Me.GetTable(Of tblEventTypeRecapQuestion)
		End Get
	End Property
	
	Public ReadOnly Property tblEventTypeTasks() As System.Data.Linq.Table(Of tblEventTypeTask)
		Get
			Return Me.GetTable(Of tblEventTypeTask)
		End Get
	End Property
	
	Public ReadOnly Property tblEventWeathers() As System.Data.Linq.Table(Of tblEventWeather)
		Get
			Return Me.GetTable(Of tblEventWeather)
		End Get
	End Property
	
	Public ReadOnly Property tblExpenseTypes() As System.Data.Linq.Table(Of tblExpenseType)
		Get
			Return Me.GetTable(Of tblExpenseType)
		End Get
	End Property
	
	Public ReadOnly Property tblHelpfulLocations() As System.Data.Linq.Table(Of tblHelpfulLocation)
		Get
			Return Me.GetTable(Of tblHelpfulLocation)
		End Get
	End Property
	
	Public ReadOnly Property tblInventories() As System.Data.Linq.Table(Of tblInventory)
		Get
			Return Me.GetTable(Of tblInventory)
		End Get
	End Property
	
	Public ReadOnly Property tblInventoryItems() As System.Data.Linq.Table(Of tblInventoryItem)
		Get
			Return Me.GetTable(Of tblInventoryItem)
		End Get
	End Property
	
	Public ReadOnly Property tblInvoices() As System.Data.Linq.Table(Of tblInvoice)
		Get
			Return Me.GetTable(Of tblInvoice)
		End Get
	End Property
	
	Public ReadOnly Property tblInvoiceBatches() As System.Data.Linq.Table(Of tblInvoiceBatch)
		Get
			Return Me.GetTable(Of tblInvoiceBatch)
		End Get
	End Property
	
	Public ReadOnly Property tblInvoiceHeaders() As System.Data.Linq.Table(Of tblInvoiceHeader)
		Get
			Return Me.GetTable(Of tblInvoiceHeader)
		End Get
	End Property
	
	Public ReadOnly Property tblLoadBingMaps() As System.Data.Linq.Table(Of tblLoadBingMap)
		Get
			Return Me.GetTable(Of tblLoadBingMap)
		End Get
	End Property
	
	Public ReadOnly Property tblLogFiles() As System.Data.Linq.Table(Of tblLogFile)
		Get
			Return Me.GetTable(Of tblLogFile)
		End Get
	End Property
	
	Public ReadOnly Property tblMarkets() As System.Data.Linq.Table(Of tblMarket)
		Get
			Return Me.GetTable(Of tblMarket)
		End Get
	End Property
	
	Public ReadOnly Property tblMessages() As System.Data.Linq.Table(Of tblMessage)
		Get
			Return Me.GetTable(Of tblMessage)
		End Get
	End Property
	
	Public ReadOnly Property tblMessageBccs() As System.Data.Linq.Table(Of tblMessageBcc)
		Get
			Return Me.GetTable(Of tblMessageBcc)
		End Get
	End Property
	
	Public ReadOnly Property tblMessageColumns() As System.Data.Linq.Table(Of tblMessageColumn)
		Get
			Return Me.GetTable(Of tblMessageColumn)
		End Get
	End Property
	
	Public ReadOnly Property tblPayments() As System.Data.Linq.Table(Of tblPayment)
		Get
			Return Me.GetTable(Of tblPayment)
		End Get
	End Property
	
	Public ReadOnly Property tblPhotos() As System.Data.Linq.Table(Of tblPhoto)
		Get
			Return Me.GetTable(Of tblPhoto)
		End Get
	End Property
	
	Public ReadOnly Property tblPhotoBins() As System.Data.Linq.Table(Of tblPhotoBin)
		Get
			Return Me.GetTable(Of tblPhotoBin)
		End Get
	End Property
	
	Public ReadOnly Property tblPosKits() As System.Data.Linq.Table(Of tblPosKit)
		Get
			Return Me.GetTable(Of tblPosKit)
		End Get
	End Property
	
	Public ReadOnly Property tblPosKitItems() As System.Data.Linq.Table(Of tblPosKitItem)
		Get
			Return Me.GetTable(Of tblPosKitItem)
		End Get
	End Property
	
	Public ReadOnly Property tblPosShippingCosts() As System.Data.Linq.Table(Of tblPosShippingCost)
		Get
			Return Me.GetTable(Of tblPosShippingCost)
		End Get
	End Property
	
	Public ReadOnly Property tblProfiles() As System.Data.Linq.Table(Of tblProfile)
		Get
			Return Me.GetTable(Of tblProfile)
		End Get
	End Property
	
	Public ReadOnly Property tblPurchaseOrders() As System.Data.Linq.Table(Of tblPurchaseOrder)
		Get
			Return Me.GetTable(Of tblPurchaseOrder)
		End Get
	End Property
	
	Public ReadOnly Property tblRecapOptions() As System.Data.Linq.Table(Of tblRecapOption)
		Get
			Return Me.GetTable(Of tblRecapOption)
		End Get
	End Property
	
	Public ReadOnly Property tblRecapQuestionOptions() As System.Data.Linq.Table(Of tblRecapQuestionOption)
		Get
			Return Me.GetTable(Of tblRecapQuestionOption)
		End Get
	End Property
	
	Public ReadOnly Property tblRegions() As System.Data.Linq.Table(Of tblRegion)
		Get
			Return Me.GetTable(Of tblRegion)
		End Get
	End Property
	
	Public ReadOnly Property tblRequestedEvents() As System.Data.Linq.Table(Of tblRequestedEvent)
		Get
			Return Me.GetTable(Of tblRequestedEvent)
		End Get
	End Property
	
	Public ReadOnly Property tblShippingVendors() As System.Data.Linq.Table(Of tblShippingVendor)
		Get
			Return Me.GetTable(Of tblShippingVendor)
		End Get
	End Property
	
	Public ReadOnly Property tblSiteLogins() As System.Data.Linq.Table(Of tblSiteLogin)
		Get
			Return Me.GetTable(Of tblSiteLogin)
		End Get
	End Property
	
	Public ReadOnly Property tblSiteSettings() As System.Data.Linq.Table(Of tblSiteSetting)
		Get
			Return Me.GetTable(Of tblSiteSetting)
		End Get
	End Property
	
	Public ReadOnly Property tblStaffs() As System.Data.Linq.Table(Of tblStaff)
		Get
			Return Me.GetTable(Of tblStaff)
		End Get
	End Property
	
	Public ReadOnly Property tblStaffClients() As System.Data.Linq.Table(Of tblStaffClient)
		Get
			Return Me.GetTable(Of tblStaffClient)
		End Get
	End Property
	
	Public ReadOnly Property tblStaffInClients() As System.Data.Linq.Table(Of tblStaffInClient)
		Get
			Return Me.GetTable(Of tblStaffInClient)
		End Get
	End Property
	
	Public ReadOnly Property tblStaffingPositions() As System.Data.Linq.Table(Of tblStaffingPosition)
		Get
			Return Me.GetTable(Of tblStaffingPosition)
		End Get
	End Property
	
	Public ReadOnly Property tblStaffInMarkets() As System.Data.Linq.Table(Of tblStaffInMarket)
		Get
			Return Me.GetTable(Of tblStaffInMarket)
		End Get
	End Property
	
	Public ReadOnly Property tblStaffInPositions() As System.Data.Linq.Table(Of tblStaffInPosition)
		Get
			Return Me.GetTable(Of tblStaffInPosition)
		End Get
	End Property
	
	Public ReadOnly Property tblStaffMarkets() As System.Data.Linq.Table(Of tblStaffMarket)
		Get
			Return Me.GetTable(Of tblStaffMarket)
		End Get
	End Property
	
	Public ReadOnly Property tblStaffSuppliers() As System.Data.Linq.Table(Of tblStaffSupplier)
		Get
			Return Me.GetTable(Of tblStaffSupplier)
		End Get
	End Property
	
	Public ReadOnly Property tblStaffTeams() As System.Data.Linq.Table(Of tblStaffTeam)
		Get
			Return Me.GetTable(Of tblStaffTeam)
		End Get
	End Property
	
	Public ReadOnly Property tblStates() As System.Data.Linq.Table(Of tblState)
		Get
			Return Me.GetTable(Of tblState)
		End Get
	End Property
	
	Public ReadOnly Property tblStatus() As System.Data.Linq.Table(Of tblStatus)
		Get
			Return Me.GetTable(Of tblStatus)
		End Get
	End Property
	
	Public ReadOnly Property tblSupplierBillingRates() As System.Data.Linq.Table(Of tblSupplierBillingRate)
		Get
			Return Me.GetTable(Of tblSupplierBillingRate)
		End Get
	End Property
	
	Public ReadOnly Property tblSupplierBillingRate_MarketSucharges() As System.Data.Linq.Table(Of tblSupplierBillingRate_MarketSucharge)
		Get
			Return Me.GetTable(Of tblSupplierBillingRate_MarketSucharge)
		End Get
	End Property
	
	Public ReadOnly Property tblSupplierBudgetQuestions() As System.Data.Linq.Table(Of tblSupplierBudgetQuestion)
		Get
			Return Me.GetTable(Of tblSupplierBudgetQuestion)
		End Get
	End Property
	
	Public ReadOnly Property tblSupplierBudgetQuestionOptions() As System.Data.Linq.Table(Of tblSupplierBudgetQuestionOption)
		Get
			Return Me.GetTable(Of tblSupplierBudgetQuestionOption)
		End Get
	End Property
	
	Public ReadOnly Property tblSupplierBudgetQuestionResults() As System.Data.Linq.Table(Of tblSupplierBudgetQuestionResult)
		Get
			Return Me.GetTable(Of tblSupplierBudgetQuestionResult)
		End Get
	End Property
	
	Public ReadOnly Property tblSupplierDocuments() As System.Data.Linq.Table(Of tblSupplierDocument)
		Get
			Return Me.GetTable(Of tblSupplierDocument)
		End Get
	End Property
	
	Public ReadOnly Property tblTeams() As System.Data.Linq.Table(Of tblTeam)
		Get
			Return Me.GetTable(Of tblTeam)
		End Get
	End Property
	
	Public ReadOnly Property tblTeamMarkets() As System.Data.Linq.Table(Of tblTeamMarket)
		Get
			Return Me.GetTable(Of tblTeamMarket)
		End Get
	End Property
	
	Public ReadOnly Property tblTrainingResults() As System.Data.Linq.Table(Of tblTrainingResult)
		Get
			Return Me.GetTable(Of tblTrainingResult)
		End Get
	End Property
	
	Public ReadOnly Property tblUsers() As System.Data.Linq.Table(Of tblUser)
		Get
			Return Me.GetTable(Of tblUser)
		End Get
	End Property
	
	Public ReadOnly Property tblUserClients() As System.Data.Linq.Table(Of tblUserClient)
		Get
			Return Me.GetTable(Of tblUserClient)
		End Get
	End Property
	
	Public ReadOnly Property tblUserMarkets() As System.Data.Linq.Table(Of tblUserMarket)
		Get
			Return Me.GetTable(Of tblUserMarket)
		End Get
	End Property
	
	Public ReadOnly Property tblUserTeams() As System.Data.Linq.Table(Of tblUserTeam)
		Get
			Return Me.GetTable(Of tblUserTeam)
		End Get
	End Property
	
	Public ReadOnly Property tblWeatherInfos() As System.Data.Linq.Table(Of tblWeatherInfo)
		Get
			Return Me.GetTable(Of tblWeatherInfo)
		End Get
	End Property
	
	Public ReadOnly Property temp_Accounts() As System.Data.Linq.Table(Of temp_Account)
		Get
			Return Me.GetTable(Of temp_Account)
		End Get
	End Property
	
	Public ReadOnly Property temp_AmbassadorMarkets() As System.Data.Linq.Table(Of temp_AmbassadorMarket)
		Get
			Return Me.GetTable(Of temp_AmbassadorMarket)
		End Get
	End Property
	
	Public ReadOnly Property tempAccountPosDistributions() As System.Data.Linq.Table(Of tempAccountPosDistribution)
		Get
			Return Me.GetTable(Of tempAccountPosDistribution)
		End Get
	End Property
	
	Public ReadOnly Property tempAmbassadors() As System.Data.Linq.Table(Of tempAmbassador)
		Get
			Return Me.GetTable(Of tempAmbassador)
		End Get
	End Property
	
	Public ReadOnly Property tempAmbassadorClients() As System.Data.Linq.Table(Of tempAmbassadorClient)
		Get
			Return Me.GetTable(Of tempAmbassadorClient)
		End Get
	End Property
	
	Public ReadOnly Property tempAmbassadorMarkets() As System.Data.Linq.Table(Of tempAmbassadorMarket)
		Get
			Return Me.GetTable(Of tempAmbassadorMarket)
		End Get
	End Property
	
	Public ReadOnly Property tempAmbassadorPositions() As System.Data.Linq.Table(Of tempAmbassadorPosition)
		Get
			Return Me.GetTable(Of tempAmbassadorPosition)
		End Get
	End Property
	
	Public ReadOnly Property tempAvailableAmbassadors() As System.Data.Linq.Table(Of tempAvailableAmbassador)
		Get
			Return Me.GetTable(Of tempAvailableAmbassador)
		End Get
	End Property
	
	Public ReadOnly Property tempBrandEventExecutions() As System.Data.Linq.Table(Of tempBrandEventExecution)
		Get
			Return Me.GetTable(Of tempBrandEventExecution)
		End Get
	End Property
	
	Public ReadOnly Property tempBrandEventTasks() As System.Data.Linq.Table(Of tempBrandEventTask)
		Get
			Return Me.GetTable(Of tempBrandEventTask)
		End Get
	End Property
	
	Public ReadOnly Property tempBrandRecapQuestions() As System.Data.Linq.Table(Of tempBrandRecapQuestion)
		Get
			Return Me.GetTable(Of tempBrandRecapQuestion)
		End Get
	End Property
	
	Public ReadOnly Property tempBrandStaffingPositions() As System.Data.Linq.Table(Of tempBrandStaffingPosition)
		Get
			Return Me.GetTable(Of tempBrandStaffingPosition)
		End Get
	End Property
	
	Public ReadOnly Property tempBrandSuppliers() As System.Data.Linq.Table(Of tempBrandSupplier)
		Get
			Return Me.GetTable(Of tempBrandSupplier)
		End Get
	End Property
	
	Public ReadOnly Property tempCheckIns() As System.Data.Linq.Table(Of tempCheckIn)
		Get
			Return Me.GetTable(Of tempCheckIn)
		End Get
	End Property
	
	Public ReadOnly Property tempEvents() As System.Data.Linq.Table(Of tempEvent)
		Get
			Return Me.GetTable(Of tempEvent)
		End Get
	End Property
	
	Public ReadOnly Property tempEventRecapQuestions() As System.Data.Linq.Table(Of tempEventRecapQuestion)
		Get
			Return Me.GetTable(Of tempEventRecapQuestion)
		End Get
	End Property
	
	Public ReadOnly Property tempEventTypeRecapQuestions() As System.Data.Linq.Table(Of tempEventTypeRecapQuestion)
		Get
			Return Me.GetTable(Of tempEventTypeRecapQuestion)
		End Get
	End Property
	
	Public ReadOnly Property tempEventTypeTasks() As System.Data.Linq.Table(Of tempEventTypeTask)
		Get
			Return Me.GetTable(Of tempEventTypeTask)
		End Get
	End Property
	
	Public ReadOnly Property tempPhotos() As System.Data.Linq.Table(Of tempPhoto)
		Get
			Return Me.GetTable(Of tempPhoto)
		End Get
	End Property
	
	Public ReadOnly Property tempRecapQuestionOptions() As System.Data.Linq.Table(Of tempRecapQuestionOption)
		Get
			Return Me.GetTable(Of tempRecapQuestionOption)
		End Get
	End Property
	
	Public ReadOnly Property tempSupplierBillingRates() As System.Data.Linq.Table(Of tempSupplierBillingRate)
		Get
			Return Me.GetTable(Of tempSupplierBillingRate)
		End Get
	End Property
	
	Public ReadOnly Property tempSupplierBrands() As System.Data.Linq.Table(Of tempSupplierBrand)
		Get
			Return Me.GetTable(Of tempSupplierBrand)
		End Get
	End Property
	
	Public ReadOnly Property ActivityResults() As System.Data.Linq.Table(Of ActivityResult)
		Get
			Return Me.GetTable(Of ActivityResult)
		End Get
	End Property
	
	Public ReadOnly Property Activities() As System.Data.Linq.Table(Of Activity)
		Get
			Return Me.GetTable(Of Activity)
		End Get
	End Property
	
	Public ReadOnly Property _tempInvoices() As System.Data.Linq.Table(Of _tempInvoice)
		Get
			Return Me.GetTable(Of _tempInvoice)
		End Get
	End Property
	
	Public ReadOnly Property qryViewEvents() As System.Data.Linq.Table(Of qryViewEvent)
		Get
			Return Me.GetTable(Of qryViewEvent)
		End Get
	End Property
	
	Public ReadOnly Property getScheduleConflicts() As System.Data.Linq.Table(Of getScheduleConflict)
		Get
			Return Me.GetTable(Of getScheduleConflict)
		End Get
	End Property
	
	Public ReadOnly Property qryViewEventsbyMarkets() As System.Data.Linq.Table(Of qryViewEventsbyMarket)
		Get
			Return Me.GetTable(Of qryViewEventsbyMarket)
		End Get
	End Property
	
	Public ReadOnly Property getAssignedLists() As System.Data.Linq.Table(Of getAssignedList)
		Get
			Return Me.GetTable(Of getAssignedList)
		End Get
	End Property
	
	Public ReadOnly Property qryGetRecapCount_last24hrs() As System.Data.Linq.Table(Of qryGetRecapCount_last24hr)
		Get
			Return Me.GetTable(Of qryGetRecapCount_last24hr)
		End Get
	End Property
	
	Public ReadOnly Property qryGetRequestedEvents() As System.Data.Linq.Table(Of qryGetRequestedEvent)
		Get
			Return Me.GetTable(Of qryGetRequestedEvent)
		End Get
	End Property
	
	Public ReadOnly Property qryGetRecapCreated_last24hours() As System.Data.Linq.Table(Of qryGetRecapCreated_last24hour)
		Get
			Return Me.GetTable(Of qryGetRecapCreated_last24hour)
		End Get
	End Property
	
	Public ReadOnly Property qryGetRecapTotalsByEvents() As System.Data.Linq.Table(Of qryGetRecapTotalsByEvent)
		Get
			Return Me.GetTable(Of qryGetRecapTotalsByEvent)
		End Get
	End Property
	
	Public ReadOnly Property qryGetRegisteredCount_last24hrs() As System.Data.Linq.Table(Of qryGetRegisteredCount_last24hr)
		Get
			Return Me.GetTable(Of qryGetRegisteredCount_last24hr)
		End Get
	End Property
	
	Public ReadOnly Property qryGetRegistrations_last24hrs() As System.Data.Linq.Table(Of qryGetRegistrations_last24hr)
		Get
			Return Me.GetTable(Of qryGetRegistrations_last24hr)
		End Get
	End Property
	
	Public ReadOnly Property qrySalesRecapReports() As System.Data.Linq.Table(Of qrySalesRecapReport)
		Get
			Return Me.GetTable(Of qrySalesRecapReport)
		End Get
	End Property
	
	Public ReadOnly Property qryViewAssignments() As System.Data.Linq.Table(Of qryViewAssignment)
		Get
			Return Me.GetTable(Of qryViewAssignment)
		End Get
	End Property
	
	Public ReadOnly Property qrySalesRecapReport_OffPremises() As System.Data.Linq.Table(Of qrySalesRecapReport_OffPremise)
		Get
			Return Me.GetTable(Of qrySalesRecapReport_OffPremise)
		End Get
	End Property
	
	Public ReadOnly Property qrySalesRecapReportBrandTotals() As System.Data.Linq.Table(Of qrySalesRecapReportBrandTotal)
		Get
			Return Me.GetTable(Of qrySalesRecapReportBrandTotal)
		End Get
	End Property
	
	Public ReadOnly Property qryScheduledPaymentsByAmbassadors() As System.Data.Linq.Table(Of qryScheduledPaymentsByAmbassador)
		Get
			Return Me.GetTable(Of qryScheduledPaymentsByAmbassador)
		End Get
	End Property
	
	Public ReadOnly Property qryStateListbyMarketIDs() As System.Data.Linq.Table(Of qryStateListbyMarketID)
		Get
			Return Me.GetTable(Of qryStateListbyMarketID)
		End Get
	End Property
	
	Public ReadOnly Property qryTotalBonusByIDs() As System.Data.Linq.Table(Of qryTotalBonusByID)
		Get
			Return Me.GetTable(Of qryTotalBonusByID)
		End Get
	End Property
	
	Public ReadOnly Property qryTotalBottlesSolds() As System.Data.Linq.Table(Of qryTotalBottlesSold)
		Get
			Return Me.GetTable(Of qryTotalBottlesSold)
		End Get
	End Property
	
	Public ReadOnly Property qryTotalBottlesUseds() As System.Data.Linq.Table(Of qryTotalBottlesUsed)
		Get
			Return Me.GetTable(Of qryTotalBottlesUsed)
		End Get
	End Property
	
	Public ReadOnly Property qryTotalExpenseByIDs() As System.Data.Linq.Table(Of qryTotalExpenseByID)
		Get
			Return Me.GetTable(Of qryTotalExpenseByID)
		End Get
	End Property
	
	Public ReadOnly Property qryTotalExpensesByEventIDs() As System.Data.Linq.Table(Of qryTotalExpensesByEventID)
		Get
			Return Me.GetTable(Of qryTotalExpensesByEventID)
		End Get
	End Property
	
	Public ReadOnly Property qryTotalReciptsByIDs() As System.Data.Linq.Table(Of qryTotalReciptsByID)
		Get
			Return Me.GetTable(Of qryTotalReciptsByID)
		End Get
	End Property
	
	Public ReadOnly Property qryTotalSampleds() As System.Data.Linq.Table(Of qryTotalSampled)
		Get
			Return Me.GetTable(Of qryTotalSampled)
		End Get
	End Property
	
	Public ReadOnly Property qryViewABIEvents() As System.Data.Linq.Table(Of qryViewABIEvent)
		Get
			Return Me.GetTable(Of qryViewABIEvent)
		End Get
	End Property
	
	Public ReadOnly Property qryViewAccountActivities() As System.Data.Linq.Table(Of qryViewAccountActivity)
		Get
			Return Me.GetTable(Of qryViewAccountActivity)
		End Get
	End Property
	
	Public ReadOnly Property qryViewAccounts() As System.Data.Linq.Table(Of qryViewAccount)
		Get
			Return Me.GetTable(Of qryViewAccount)
		End Get
	End Property
	
	Public ReadOnly Property qryViewAccountsByClients() As System.Data.Linq.Table(Of qryViewAccountsByClient)
		Get
			Return Me.GetTable(Of qryViewAccountsByClient)
		End Get
	End Property
	
	Public ReadOnly Property qryViewActiveAmbassadors() As System.Data.Linq.Table(Of qryViewActiveAmbassador)
		Get
			Return Me.GetTable(Of qryViewActiveAmbassador)
		End Get
	End Property
	
	Public ReadOnly Property qryViewActiveAmbassador_withMarketIDs() As System.Data.Linq.Table(Of qryViewActiveAmbassador_withMarketID)
		Get
			Return Me.GetTable(Of qryViewActiveAmbassador_withMarketID)
		End Get
	End Property
	
	Public ReadOnly Property qryViewActiveAmbassador_withMarkets() As System.Data.Linq.Table(Of qryViewActiveAmbassador_withMarket)
		Get
			Return Me.GetTable(Of qryViewActiveAmbassador_withMarket)
		End Get
	End Property
	
	Public ReadOnly Property qryViewActivityTypeByClients() As System.Data.Linq.Table(Of qryViewActivityTypeByClient)
		Get
			Return Me.GetTable(Of qryViewActivityTypeByClient)
		End Get
	End Property
	
	Public ReadOnly Property qryViewApprovedPayments() As System.Data.Linq.Table(Of qryViewApprovedPayment)
		Get
			Return Me.GetTable(Of qryViewApprovedPayment)
		End Get
	End Property
	
	Public ReadOnly Property qryViewUpcomingPayments() As System.Data.Linq.Table(Of qryViewUpcomingPayment)
		Get
			Return Me.GetTable(Of qryViewUpcomingPayment)
		End Get
	End Property
	
	Public ReadOnly Property getBrandsbySuppliers() As System.Data.Linq.Table(Of getBrandsbySupplier)
		Get
			Return Me.GetTable(Of getBrandsbySupplier)
		End Get
	End Property
	
	Public ReadOnly Property qryBrandsMissingCourses() As System.Data.Linq.Table(Of qryBrandsMissingCourse)
		Get
			Return Me.GetTable(Of qryBrandsMissingCourse)
		End Get
	End Property
	
	Public ReadOnly Property getBrandsForEvents() As System.Data.Linq.Table(Of getBrandsForEvent)
		Get
			Return Me.GetTable(Of getBrandsForEvent)
		End Get
	End Property
	
	Public ReadOnly Property getBrandsForEventByMarkets() As System.Data.Linq.Table(Of getBrandsForEventByMarket)
		Get
			Return Me.GetTable(Of getBrandsForEventByMarket)
		End Get
	End Property
	
	Public ReadOnly Property getBrandTrainingGroupByEventIDs() As System.Data.Linq.Table(Of getBrandTrainingGroupByEventID)
		Get
			Return Me.GetTable(Of getBrandTrainingGroupByEventID)
		End Get
	End Property
	
	Public ReadOnly Property getCourseForEvents() As System.Data.Linq.Table(Of getCourseForEvent)
		Get
			Return Me.GetTable(Of getCourseForEvent)
		End Get
	End Property
	
	Public ReadOnly Property getDistinctBrandsInEvents() As System.Data.Linq.Table(Of getDistinctBrandsInEvent)
		Get
			Return Me.GetTable(Of getDistinctBrandsInEvent)
		End Get
	End Property
	
	Public ReadOnly Property getEventDetails() As System.Data.Linq.Table(Of getEventDetail)
		Get
			Return Me.GetTable(Of getEventDetail)
		End Get
	End Property
	
	Public ReadOnly Property getEventDetailReports() As System.Data.Linq.Table(Of getEventDetailReport)
		Get
			Return Me.GetTable(Of getEventDetailReport)
		End Get
	End Property
	
	Public ReadOnly Property getEventDetailReportByBrands() As System.Data.Linq.Table(Of getEventDetailReportByBrand)
		Get
			Return Me.GetTable(Of getEventDetailReportByBrand)
		End Get
	End Property
	
	Public ReadOnly Property getEventsByStates() As System.Data.Linq.Table(Of getEventsByState)
		Get
			Return Me.GetTable(Of getEventsByState)
		End Get
	End Property
	
	Public ReadOnly Property getEventsByStatebyMarkets() As System.Data.Linq.Table(Of getEventsByStatebyMarket)
		Get
			Return Me.GetTable(Of getEventsByStatebyMarket)
		End Get
	End Property
	
	Public ReadOnly Property getEventsByStateByUserIDs() As System.Data.Linq.Table(Of getEventsByStateByUserID)
		Get
			Return Me.GetTable(Of getEventsByStateByUserID)
		End Get
	End Property
	
	Public ReadOnly Property getPaidPayments() As System.Data.Linq.Table(Of getPaidPayment)
		Get
			Return Me.GetTable(Of getPaidPayment)
		End Get
	End Property
	
	Public ReadOnly Property getPaidPaymentsByPaymentID_toProcessCSVs() As System.Data.Linq.Table(Of getPaidPaymentsByPaymentID_toProcessCSV)
		Get
			Return Me.GetTable(Of getPaidPaymentsByPaymentID_toProcessCSV)
		End Get
	End Property
	
	Public ReadOnly Property getPOSKitItems() As System.Data.Linq.Table(Of getPOSKitItem)
		Get
			Return Me.GetTable(Of getPOSKitItem)
		End Get
	End Property
	
	Public ReadOnly Property getScheduleConflict1s() As System.Data.Linq.Table(Of getScheduleConflict1)
		Get
			Return Me.GetTable(Of getScheduleConflict1)
		End Get
	End Property
	
	Public ReadOnly Property getShortGeoLocations() As System.Data.Linq.Table(Of getShortGeoLocation)
		Get
			Return Me.GetTable(Of getShortGeoLocation)
		End Get
	End Property
	
	Public ReadOnly Property getSuppliersbyBrands() As System.Data.Linq.Table(Of getSuppliersbyBrand)
		Get
			Return Me.GetTable(Of getSuppliersbyBrand)
		End Get
	End Property
	
	Public ReadOnly Property qryAccountCityLists() As System.Data.Linq.Table(Of qryAccountCityList)
		Get
			Return Me.GetTable(Of qryAccountCityList)
		End Get
	End Property
	
	Public ReadOnly Property qryAmbassadorMarketPositions() As System.Data.Linq.Table(Of qryAmbassadorMarketPosition)
		Get
			Return Me.GetTable(Of qryAmbassadorMarketPosition)
		End Get
	End Property
	
	Public ReadOnly Property qryAmbassodorBrandTypeByUsers() As System.Data.Linq.Table(Of qryAmbassodorBrandTypeByUser)
		Get
			Return Me.GetTable(Of qryAmbassodorBrandTypeByUser)
		End Get
	End Property
	
	Public ReadOnly Property qryGetLoggedInUsers() As System.Data.Linq.Table(Of qryGetLoggedInUser)
		Get
			Return Me.GetTable(Of qryGetLoggedInUser)
		End Get
	End Property
	
	Public ReadOnly Property qryGetLoggedInUsers_last24hours() As System.Data.Linq.Table(Of qryGetLoggedInUsers_last24hour)
		Get
			Return Me.GetTable(Of qryGetLoggedInUsers_last24hour)
		End Get
	End Property
	
	Public ReadOnly Property qryGetNewEvents_last24hours() As System.Data.Linq.Table(Of qryGetNewEvents_last24hour)
		Get
			Return Me.GetTable(Of qryGetNewEvents_last24hour)
		End Get
	End Property
	
	Public ReadOnly Property qryGetNewVisits_last24hours() As System.Data.Linq.Table(Of qryGetNewVisits_last24hour)
		Get
			Return Me.GetTable(Of qryGetNewVisits_last24hour)
		End Get
	End Property
	
	Public ReadOnly Property qryGetNewAmbassadors_last24hrs() As System.Data.Linq.Table(Of qryGetNewAmbassadors_last24hr)
		Get
			Return Me.GetTable(Of qryGetNewAmbassadors_last24hr)
		End Get
	End Property
	
	Public ReadOnly Property qryGetAmbassadorAssigned_last24hrs() As System.Data.Linq.Table(Of qryGetAmbassadorAssigned_last24hr)
		Get
			Return Me.GetTable(Of qryGetAmbassadorAssigned_last24hr)
		End Get
	End Property
	
	Public ReadOnly Property qryGetApprovedEvents_last24hrs() As System.Data.Linq.Table(Of qryGetApprovedEvents_last24hr)
		Get
			Return Me.GetTable(Of qryGetApprovedEvents_last24hr)
		End Get
	End Property
	
	Public ReadOnly Property qryGetUpcomingEventLocations() As System.Data.Linq.Table(Of qryGetUpcomingEventLocation)
		Get
			Return Me.GetTable(Of qryGetUpcomingEventLocation)
		End Get
	End Property
	
	Public ReadOnly Property qryViewRejectedPayments() As System.Data.Linq.Table(Of qryViewRejectedPayment)
		Get
			Return Me.GetTable(Of qryViewRejectedPayment)
		End Get
	End Property
	
	Public ReadOnly Property qryViewPendingPayments() As System.Data.Linq.Table(Of qryViewPendingPayment)
		Get
			Return Me.GetTable(Of qryViewPendingPayment)
		End Get
	End Property
	
	Public ReadOnly Property qryGetBudgetTrackingResults() As System.Data.Linq.Table(Of qryGetBudgetTrackingResult)
		Get
			Return Me.GetTable(Of qryGetBudgetTrackingResult)
		End Get
	End Property
	
	Public ReadOnly Property qryEventStaffingRequirements() As System.Data.Linq.Table(Of qryEventStaffingRequirement)
		Get
			Return Me.GetTable(Of qryEventStaffingRequirement)
		End Get
	End Property
	
	Public ReadOnly Property qryEventStaffingRequirement1s() As System.Data.Linq.Table(Of qryEventStaffingRequirement1)
		Get
			Return Me.GetTable(Of qryEventStaffingRequirement1)
		End Get
	End Property
	
	Public ReadOnly Property qryEventStaffingRequirementLists() As System.Data.Linq.Table(Of qryEventStaffingRequirementList)
		Get
			Return Me.GetTable(Of qryEventStaffingRequirementList)
		End Get
	End Property
	
	Public ReadOnly Property qryGetBudgetTrackingResult1s() As System.Data.Linq.Table(Of qryGetBudgetTrackingResult1)
		Get
			Return Me.GetTable(Of qryGetBudgetTrackingResult1)
		End Get
	End Property
	
	Public ReadOnly Property qryGetBrandsInEvents() As System.Data.Linq.Table(Of qryGetBrandsInEvent)
		Get
			Return Me.GetTable(Of qryGetBrandsInEvent)
		End Get
	End Property
	
	Public ReadOnly Property qryGetBrandsInRequestedEvents() As System.Data.Linq.Table(Of qryGetBrandsInRequestedEvent)
		Get
			Return Me.GetTable(Of qryGetBrandsInRequestedEvent)
		End Get
	End Property
	
	Public ReadOnly Property vewEventStaffingRequirements() As System.Data.Linq.Table(Of vewEventStaffingRequirement)
		Get
			Return Me.GetTable(Of vewEventStaffingRequirement)
		End Get
	End Property
	
	Public ReadOnly Property viewEventStaffingRequirements() As System.Data.Linq.Table(Of viewEventStaffingRequirement)
		Get
			Return Me.GetTable(Of viewEventStaffingRequirement)
		End Get
	End Property
	
	Public ReadOnly Property qryGetPosKitItems() As System.Data.Linq.Table(Of qryGetPosKitItem)
		Get
			Return Me.GetTable(Of qryGetPosKitItem)
		End Get
	End Property
	
	Public ReadOnly Property qryGetRecapCreated_last24hour1s() As System.Data.Linq.Table(Of qryGetRecapCreated_last24hour1)
		Get
			Return Me.GetTable(Of qryGetRecapCreated_last24hour1)
		End Get
	End Property
	
	Public ReadOnly Property qryGetPosShippingCosts() As System.Data.Linq.Table(Of qryGetPosShippingCost)
		Get
			Return Me.GetTable(Of qryGetPosShippingCost)
		End Get
	End Property
	
	Public ReadOnly Property qryGetRecapCount_last24hr1s() As System.Data.Linq.Table(Of qryGetRecapCount_last24hr1)
		Get
			Return Me.GetTable(Of qryGetRecapCount_last24hr1)
		End Get
	End Property
	
	Public ReadOnly Property qryGetSampledTotalsByEvents() As System.Data.Linq.Table(Of qryGetSampledTotalsByEvent)
		Get
			Return Me.GetTable(Of qryGetSampledTotalsByEvent)
		End Get
	End Property
	
	Public ReadOnly Property qryGettblSupplierBudgetQuestionAnswers() As System.Data.Linq.Table(Of qryGettblSupplierBudgetQuestionAnswer)
		Get
			Return Me.GetTable(Of qryGettblSupplierBudgetQuestionAnswer)
		End Get
	End Property
	
	Public ReadOnly Property qryGetSupplierBudgetQuestion_Answers() As System.Data.Linq.Table(Of qryGetSupplierBudgetQuestion_Answer)
		Get
			Return Me.GetTable(Of qryGetSupplierBudgetQuestion_Answer)
		End Get
	End Property
	
	Public ReadOnly Property qryGetSupplierLists() As System.Data.Linq.Table(Of qryGetSupplierList)
		Get
			Return Me.GetTable(Of qryGetSupplierList)
		End Get
	End Property
	
	Public ReadOnly Property qryIsBrandInGroups() As System.Data.Linq.Table(Of qryIsBrandInGroup)
		Get
			Return Me.GetTable(Of qryIsBrandInGroup)
		End Get
	End Property
	
	Public ReadOnly Property qryViewPastEvents() As System.Data.Linq.Table(Of qryViewPastEvent)
		Get
			Return Me.GetTable(Of qryViewPastEvent)
		End Get
	End Property
	
	Public ReadOnly Property qryViewPastEventsByAmbassadors() As System.Data.Linq.Table(Of qryViewPastEventsByAmbassador)
		Get
			Return Me.GetTable(Of qryViewPastEventsByAmbassador)
		End Get
	End Property
	
	Public ReadOnly Property qryViewNeedsRecapEventsByAmbassadors() As System.Data.Linq.Table(Of qryViewNeedsRecapEventsByAmbassador)
		Get
			Return Me.GetTable(Of qryViewNeedsRecapEventsByAmbassador)
		End Get
	End Property
	
	Public ReadOnly Property GetAmbassadorMaps() As System.Data.Linq.Table(Of GetAmbassadorMap)
		Get
			Return Me.GetTable(Of GetAmbassadorMap)
		End Get
	End Property
	
	Public ReadOnly Property qryViewCurrentEventsByAmbassadors() As System.Data.Linq.Table(Of qryViewCurrentEventsByAmbassador)
		Get
			Return Me.GetTable(Of qryViewCurrentEventsByAmbassador)
		End Get
	End Property
	
	Public ReadOnly Property qryViewCurrentEvents() As System.Data.Linq.Table(Of qryViewCurrentEvent)
		Get
			Return Me.GetTable(Of qryViewCurrentEvent)
		End Get
	End Property
	
	Public ReadOnly Property qryGetBrandGroupsByClientIDs() As System.Data.Linq.Table(Of qryGetBrandGroupsByClientID)
		Get
			Return Me.GetTable(Of qryGetBrandGroupsByClientID)
		End Get
	End Property
	
	Public ReadOnly Property qryInventoryLists() As System.Data.Linq.Table(Of qryInventoryList)
		Get
			Return Me.GetTable(Of qryInventoryList)
		End Get
	End Property
	
	Public ReadOnly Property qryViewCurrentEventsByAmbassador1s() As System.Data.Linq.Table(Of qryViewCurrentEventsByAmbassador1)
		Get
			Return Me.GetTable(Of qryViewCurrentEventsByAmbassador1)
		End Get
	End Property
	
	Public ReadOnly Property qryViewEventsByAmbassadors() As System.Data.Linq.Table(Of qryViewEventsByAmbassador)
		Get
			Return Me.GetTable(Of qryViewEventsByAmbassador)
		End Get
	End Property
	
	Public ReadOnly Property qryGetAccountActivities() As System.Data.Linq.Table(Of qryGetAccountActivity)
		Get
			Return Me.GetTable(Of qryGetAccountActivity)
		End Get
	End Property
	
	Public ReadOnly Property qryViewPendingAmbassadors() As System.Data.Linq.Table(Of qryViewPendingAmbassador)
		Get
			Return Me.GetTable(Of qryViewPendingAmbassador)
		End Get
	End Property
	
	Public ReadOnly Property qryViewRejectedAmbassadors() As System.Data.Linq.Table(Of qryViewRejectedAmbassador)
		Get
			Return Me.GetTable(Of qryViewRejectedAmbassador)
		End Get
	End Property
	
	Public ReadOnly Property qryViewTerminatedAmbassadors() As System.Data.Linq.Table(Of qryViewTerminatedAmbassador)
		Get
			Return Me.GetTable(Of qryViewTerminatedAmbassador)
		End Get
	End Property
	
	Public ReadOnly Property qryEventTypeByClients() As System.Data.Linq.Table(Of qryEventTypeByClient)
		Get
			Return Me.GetTable(Of qryEventTypeByClient)
		End Get
	End Property
	
	Public ReadOnly Property qryMarketsbyClients() As System.Data.Linq.Table(Of qryMarketsbyClient)
		Get
			Return Me.GetTable(Of qryMarketsbyClient)
		End Get
	End Property
	
	Public ReadOnly Property qryGetEventCourses() As System.Data.Linq.Table(Of qryGetEventCourse)
		Get
			Return Me.GetTable(Of qryGetEventCourse)
		End Get
	End Property
	
	Public ReadOnly Property qryGetEventImportLists() As System.Data.Linq.Table(Of qryGetEventImportList)
		Get
			Return Me.GetTable(Of qryGetEventImportList)
		End Get
	End Property
	
	Public ReadOnly Property qryGetAssignedAmbassaorsbyEventIDs() As System.Data.Linq.Table(Of qryGetAssignedAmbassaorsbyEventID)
		Get
			Return Me.GetTable(Of qryGetAssignedAmbassaorsbyEventID)
		End Get
	End Property
	
	Public ReadOnly Property tblClients() As System.Data.Linq.Table(Of tblClient)
		Get
			Return Me.GetTable(Of tblClient)
		End Get
	End Property
	
	Public ReadOnly Property tblBrands() As System.Data.Linq.Table(Of tblBrand)
		Get
			Return Me.GetTable(Of tblBrand)
		End Get
	End Property
	
	Public ReadOnly Property qryGetBrands() As System.Data.Linq.Table(Of qryGetBrand)
		Get
			Return Me.GetTable(Of qryGetBrand)
		End Get
	End Property
	
	Public ReadOnly Property tblShippingMethods() As System.Data.Linq.Table(Of tblShippingMethod)
		Get
			Return Me.GetTable(Of tblShippingMethod)
		End Get
	End Property
	
	Public ReadOnly Property tempBrandCategories() As System.Data.Linq.Table(Of tempBrandCategory)
		Get
			Return Me.GetTable(Of tempBrandCategory)
		End Get
	End Property
	
	Public ReadOnly Property tempBrandCategoryTypes() As System.Data.Linq.Table(Of tempBrandCategoryType)
		Get
			Return Me.GetTable(Of tempBrandCategoryType)
		End Get
	End Property
	
	Public ReadOnly Property tblBrandCategories() As System.Data.Linq.Table(Of tblBrandCategory)
		Get
			Return Me.GetTable(Of tblBrandCategory)
		End Get
	End Property
	
	Public ReadOnly Property tempBrandCategorySubTypes() As System.Data.Linq.Table(Of tempBrandCategorySubType)
		Get
			Return Me.GetTable(Of tempBrandCategorySubType)
		End Get
	End Property
	
	Public ReadOnly Property tblBrandProducts() As System.Data.Linq.Table(Of tblBrandProduct)
		Get
			Return Me.GetTable(Of tblBrandProduct)
		End Get
	End Property
	
	Public ReadOnly Property getProductsByBrands() As System.Data.Linq.Table(Of getProductsByBrand)
		Get
			Return Me.GetTable(Of getProductsByBrand)
		End Get
	End Property
	
	Public ReadOnly Property tblBrandProductPhotos() As System.Data.Linq.Table(Of tblBrandProductPhoto)
		Get
			Return Me.GetTable(Of tblBrandProductPhoto)
		End Get
	End Property
	
	Public ReadOnly Property tblBrandProductImages() As System.Data.Linq.Table(Of tblBrandProductImage)
		Get
			Return Me.GetTable(Of tblBrandProductImage)
		End Get
	End Property
	
	Public ReadOnly Property tblCategories() As System.Data.Linq.Table(Of tblCategory)
		Get
			Return Me.GetTable(Of tblCategory)
		End Get
	End Property
	
	Public ReadOnly Property tblSuppliers() As System.Data.Linq.Table(Of tblSupplier)
		Get
			Return Me.GetTable(Of tblSupplier)
		End Get
	End Property
	
	Public ReadOnly Property tblSupplierBrands() As System.Data.Linq.Table(Of tblSupplierBrand)
		Get
			Return Me.GetTable(Of tblSupplierBrand)
		End Get
	End Property
	
	Public ReadOnly Property qryGetBrandsBySupplers() As System.Data.Linq.Table(Of qryGetBrandsBySuppler)
		Get
			Return Me.GetTable(Of qryGetBrandsBySuppler)
		End Get
	End Property
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.AA_getAvailableAmbassador")>  _
	Public Function AA_getAvailableAmbassador(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Float")> ByVal lat As System.Nullable(Of Double), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="long", DbType:="Float")> ByVal [long] As System.Nullable(Of Double), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal marketID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal positionID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal eventID As System.Nullable(Of Integer)) As ISingleResult(Of AA_getAvailableAmbassadorResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), lat, [long], marketID, positionID, eventID)
		Return CType(result.ReturnValue,ISingleResult(Of AA_getAvailableAmbassadorResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.ViewScheduledPaymentsByAmbassador")>  _
	Public Function ViewScheduledPaymentsByAmbassador(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UserID", DbType:="NVarChar(50)")> ByVal userID As String) As ISingleResult(Of ViewScheduledPaymentsByAmbassadorResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID)
		Return CType(result.ReturnValue,ISingleResult(Of ViewScheduledPaymentsByAmbassadorResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.AmbassadorCheckInLocation")>  _
	Public Function AmbassadorCheckInLocation(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userName As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal latitude As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal longtitude As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal eventID As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userName, latitude, longtitude, eventID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.AmbassadorCheckInTime")>  _
	Public Function AmbassadorCheckInTime(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UserName", DbType:="NVarChar(50)")> ByVal userName As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal eventID As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userName, eventID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.ApproveNewAmbassador")>  _
	Public Function ApproveNewAmbassador(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal oldUserID As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal newUserID As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), oldUserID, newUserID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.AssignStafftoEvent")>  _
	Public Function AssignStafftoEvent(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="RequirementID", DbType:="Int")> ByVal requirementID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UserName", DbType:="NVarChar(50)")> ByVal userName As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal paymentdate As System.Nullable(Of Date)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), requirementID, userName, paymentdate)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.CheckInAmbassador")>  _
	Public Function CheckInAmbassador(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userName As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal latitude As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal longtitude As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal eventID As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userName, latitude, longtitude, eventID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.CheckInTest")>  _
	Public Function CheckInTest(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userName As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal latitude As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal longtitude As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal eventID As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userName, latitude, longtitude, eventID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.CheckInTime")>  _
	Public Function CheckInTime(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userName As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal eventID As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userName, eventID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.CreateInvoice")>  _
	Public Function CreateInvoice(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal eventID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal invoiceBatchID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), eventID, invoiceBatchID, userID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteAccount")>  _
	Public Function DeleteAccount(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal accountID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), accountID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteAccountActivity")>  _
	Public Function DeleteAccountActivity(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal accountActivityID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), accountActivityID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteAccountActivityPhoto")>  _
	Public Function DeleteAccountActivityPhoto(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal photoid As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), photoid)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteAccountPhoto")>  _
	Public Function DeleteAccountPhoto(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal photoid As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), photoid)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteActivityField")>  _
	Public Function DeleteActivityField(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal fieldID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), fieldID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteActivityType")>  _
	Public Function DeleteActivityType(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal activityTypeID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), activityTypeID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteAllEventRecapQuestions")>  _
	Public Function DeleteAllEventRecapQuestions(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal eventID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), eventID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteAmbassador")>  _
	Public Function DeleteAmbassador(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteAmbassadorClient")>  _
	Public Function DeleteAmbassadorClient(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal clientid As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), clientid, userID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteAmbassadorDocument")>  _
	Public Function DeleteAmbassadorDocument(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal ambassadorFileID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), ambassadorFileID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteAmbassadorEventRequested")>  _
	Public Function DeleteAmbassadorEventRequested(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal eventID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), eventID, userID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteAmbassadorMarket")>  _
	Public Function DeleteAmbassadorMarket(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal marketid As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), marketid, userID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteAmbassadorPosition")>  _
	Public Function DeleteAmbassadorPosition(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal positionid As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), positionid, userID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteBrandRecapQuestionsByEvent")>  _
	Public Function DeleteBrandRecapQuestionsByEvent(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal eventID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal brandID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), eventID, brandID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteClientAccountType")>  _
	Public Function DeleteClientAccountType(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal accountTypeID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal clientID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), accountTypeID, clientID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteClientActivityType")>  _
	Public Function DeleteClientActivityType(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal clientid As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal activitytypeid As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), clientid, activitytypeid)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteClientEventType")>  _
	Public Function DeleteClientEventType(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal clientid As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal eventtypeid As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), clientid, eventtypeid)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteClientMarket")>  _
	Public Function DeleteClientMarket(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal clientid As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal marketid As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), clientid, marketid)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteDistributor")>  _
	Public Function DeleteDistributor(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal distributorID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), distributorID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteEvent")>  _
	Public Function DeleteEvent(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal eventID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), eventID, userID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteEventBrand")>  _
	Public Function DeleteEventBrand(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal eventID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal brandID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), eventID, brandID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.deleteEventCourse")>  _
	Public Function deleteEventCourse(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal eventID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), eventID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteEventDocument")>  _
	Public Function DeleteEventDocument(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal documentID As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), documentID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteEventFromDB")>  _
	Public Function DeleteEventFromDB(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal eventID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), eventID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteEventRecapQuestionsByEvent")>  _
	Public Function DeleteEventRecapQuestionsByEvent(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal eventID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal recapID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), eventID, recapID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteEventType")>  _
	Public Function DeleteEventType(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal eventtypeid As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), eventtypeid)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteExpense")>  _
	Public Function DeleteExpense(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal eventExpenseID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), eventExpenseID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteInsertClientMarket")>  _
	Public Function DeleteInsertClientMarket(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal clientID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal marketID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), clientID, marketID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteInvoice")>  _
	Public Function DeleteInvoice(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal invoiceID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), invoiceID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteMessageBcc")>  _
	Public Function DeleteMessageBcc(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal messagebccID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), messagebccID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeletePhoto")>  _
	Public Function DeletePhoto(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal photoid As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), photoid)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeletePhotoBin")>  _
	Public Function DeletePhotoBin(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userid As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userid)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeletePOSKit")>  _
	Public Function DeletePOSKit(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal kitID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), kitID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeletePurchaseOrder")>  _
	Public Function DeletePurchaseOrder(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal purchaseOrderID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), purchaseOrderID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteRecapQuestion")>  _
	Public Function DeleteRecapQuestion(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal recapQuestionID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal recapID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), recapQuestionID, recapID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteReport")>  _
	Public Function DeleteReport(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal reportID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), reportID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteRequestedEvent")>  _
	Public Function DeleteRequestedEvent(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal requestedEventID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal eventID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), requestedEventID, eventID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteRequestedEventBrand")>  _
	Public Function DeleteRequestedEventBrand(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal requestedEventID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal brandID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), requestedEventID, brandID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteSelectedBrandRecapQuestion")>  _
	Public Function DeleteSelectedBrandRecapQuestion(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal questionID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), questionID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteSelectedEventTypeRecapQuestion")>  _
	Public Function DeleteSelectedEventTypeRecapQuestion(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal questionID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), questionID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteSelectedSupplierBudgetQuestion")>  _
	Public Function DeleteSelectedSupplierBudgetQuestion(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal questionID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), questionID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteStaffClient")>  _
	Public Function DeleteStaffClient(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal clientid As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), clientid, userID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteStaffMarket")>  _
	Public Function DeleteStaffMarket(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal marketid As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), marketid, userID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteStaffSupplier")>  _
	Public Function DeleteStaffSupplier(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal supplierid As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), supplierid, userID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteSupplierBrand")>  _
	Public Function DeleteSupplierBrand(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal supplierid As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal brandid As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), supplierid, brandid)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteSupplierDocument")>  _
	Public Function DeleteSupplierDocument(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal documentID As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), documentID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteTeamMarkets")>  _
	Public Function DeleteTeamMarkets(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal teamid As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), teamid)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteTempAmbassadorClient")>  _
	Public Function DeleteTempAmbassadorClient(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal clientid As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), clientid, userID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteTempAmbassadorPosition")>  _
	Public Function DeleteTempAmbassadorPosition(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal positionid As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), positionid, userID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteTempBrandSupplier")>  _
	Public Function DeleteTempBrandSupplier(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal brandid As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal tempsupplierid As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), brandid, tempsupplierid)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteTempEventRecapQuestion")>  _
	Public Function DeleteTempEventRecapQuestion(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal eventID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), eventID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteTempSupplierBrand")>  _
	Public Function DeleteTempSupplierBrand(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal supplierid As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal tempbrandid As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), supplierid, tempbrandid)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.deleteUserProfile")>  _
	Public Function deleteUserProfile(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteWeather")>  _
	Public Function DeleteWeather() As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteWeatherByLocation")>  _
	Public Function DeleteWeatherByLocation(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(256)")> ByVal location As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), location)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getAccountsByUserID")>  _
	Public Function getAccountsByUserID(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String) As ISingleResult(Of getAccountsByUserIDResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID)
		Return CType(result.ReturnValue,ISingleResult(Of getAccountsByUserIDResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetAccountsCityList")>  _
	Public Function GetAccountsCityList() As ISingleResult(Of GetAccountsCityListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetAccountsCityListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getActiveAmbassador_byMarketID")>  _
	Public Function getActiveAmbassador_byMarketID(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal marketID As System.Nullable(Of Integer)) As ISingleResult(Of getActiveAmbassador_byMarketIDResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), marketID)
		Return CType(result.ReturnValue,ISingleResult(Of getActiveAmbassador_byMarketIDResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetActiveClientsByUserID")>  _
	Public Function GetActiveClientsByUserID(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String) As ISingleResult(Of GetActiveClientsByUserIDResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID)
		Return CType(result.ReturnValue,ISingleResult(Of GetActiveClientsByUserIDResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetAmbassadorbyMarketID")>  _
	Public Function GetAmbassadorbyMarketID(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal marketID As System.Nullable(Of Integer)) As ISingleResult(Of GetAmbassadorbyMarketIDResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), marketID)
		Return CType(result.ReturnValue,ISingleResult(Of GetAmbassadorbyMarketIDResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetAmbassadorbyMarketID_withAccounts")>  _
	Public Function GetAmbassadorbyMarketID_withAccounts(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal marketID As System.Nullable(Of Integer)) As ISingleResult(Of GetAmbassadorbyMarketID_withAccountsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), marketID)
		Return CType(result.ReturnValue,ISingleResult(Of GetAmbassadorbyMarketID_withAccountsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetAmbassadorbyMarketID_withScheduledEvents")>  _
	Public Function GetAmbassadorbyMarketID_withScheduledEvents(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal marketID As System.Nullable(Of Integer)) As ISingleResult(Of GetAmbassadorbyMarketID_withScheduledEventsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), marketID)
		Return CType(result.ReturnValue,ISingleResult(Of GetAmbassadorbyMarketID_withScheduledEventsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getAmbassadorClients")>  _
	Public Function getAmbassadorClients(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String) As ISingleResult(Of getAmbassadorClientsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID)
		Return CType(result.ReturnValue,ISingleResult(Of getAmbassadorClientsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetAmbassadorEventsWithBrands")>  _
	Public Function GetAmbassadorEventsWithBrands(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String) As ISingleResult(Of GetAmbassadorEventsWithBrandsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID)
		Return CType(result.ReturnValue,ISingleResult(Of GetAmbassadorEventsWithBrandsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetAmbassadorForAmbassadorMap")>  _
	Public Function GetAmbassadorForAmbassadorMap(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal marketID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal positionID As System.Nullable(Of Integer)) As ISingleResult(Of GetAmbassadorForAmbassadorMapResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), marketID, positionID)
		Return CType(result.ReturnValue,ISingleResult(Of GetAmbassadorForAmbassadorMapResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getAmbassadorMarkets")>  _
	Public Function getAmbassadorMarkets(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String) As ISingleResult(Of getAmbassadorMarketsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID)
		Return CType(result.ReturnValue,ISingleResult(Of getAmbassadorMarketsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getAmbassadorPosition")>  _
	Public Function getAmbassadorPosition(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String) As ISingleResult(Of getAmbassadorPositionResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID)
		Return CType(result.ReturnValue,ISingleResult(Of getAmbassadorPositionResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetApprovedPayments_toProcessByDate")>  _
	Public Function GetApprovedPayments_toProcessByDate(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="DateTime")> ByVal start As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="end", DbType:="DateTime")> ByVal [end] As System.Nullable(Of Date)) As ISingleResult(Of GetApprovedPayments_toProcessByDateResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), start, [end])
		Return CType(result.ReturnValue,ISingleResult(Of GetApprovedPayments_toProcessByDateResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getAssignments_ByUserID")>  _
	Public Function getAssignments_ByUserID(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="DateTime")> ByVal fromDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="DateTime")> ByVal toDate As System.Nullable(Of Date)) As ISingleResult(Of getAssignments_ByUserIDResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID, fromDate, toDate)
		Return CType(result.ReturnValue,ISingleResult(Of getAssignments_ByUserIDResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getAssignmentsByUserID", IsComposable:=true)>  _
	Public Function getAssignmentsByUserID(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="DateTime")> ByVal fromDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="DateTime")> ByVal toDate As System.Nullable(Of Date)) As Object
		Return CType(Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID, fromDate, toDate).ReturnValue,Object)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getAssignmentsByUserID_ClientID", IsComposable:=true)>  _
	Public Function getAssignmentsByUserID_ClientID(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="DateTime")> ByVal fromDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="DateTime")> ByVal toDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal clientID As System.Nullable(Of Integer)) As Object
		Return CType(Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID, fromDate, toDate, clientID).ReturnValue,Object)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getAvailableAmbassador")>  _
	Public Function getAvailableAmbassador(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Float")> ByVal lat As System.Nullable(Of Double), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="long", DbType:="Float")> ByVal [long] As System.Nullable(Of Double), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal marketID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal positionID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal eventID As System.Nullable(Of Integer)) As ISingleResult(Of getAvailableAmbassadorResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), lat, [long], marketID, positionID, eventID)
		Return CType(result.ReturnValue,ISingleResult(Of getAvailableAmbassadorResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getAvailableAmbassadorByEventID")>  _
	Public Function getAvailableAmbassadorByEventID(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal eventID As System.Nullable(Of Integer)) As ISingleResult(Of getAvailableAmbassadorByEventIDResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), eventID)
		Return CType(result.ReturnValue,ISingleResult(Of getAvailableAmbassadorByEventIDResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getAvailableAmbassadorbyMarketID")>  _
	Public Function getAvailableAmbassadorbyMarketID(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal marketID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal positionID As System.Nullable(Of Integer)) As ISingleResult(Of getAvailableAmbassadorbyMarketIDResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), marketID, positionID)
		Return CType(result.ReturnValue,ISingleResult(Of getAvailableAmbassadorbyMarketIDResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getAvailableAmbassadorByUserID")>  _
	Public Function getAvailableAmbassadorByUserID(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Float")> ByVal lat As System.Nullable(Of Double), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="long", DbType:="Float")> ByVal [long] As System.Nullable(Of Double), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal marketID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal positionID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal eventID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userName As String) As ISingleResult(Of getAvailableAmbassadorByUserIDResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), lat, [long], marketID, positionID, eventID, userName)
		Return CType(result.ReturnValue,ISingleResult(Of getAvailableAmbassadorByUserIDResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getAvailableAmbassadorEmailString")>  _
	Public Function getAvailableAmbassadorEmailString(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal marketID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal positionID As System.Nullable(Of Integer)) As ISingleResult(Of getAvailableAmbassadorEmailStringResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), marketID, positionID)
		Return CType(result.ReturnValue,ISingleResult(Of getAvailableAmbassadorEmailStringResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getAvailableAmbassadorNameList")>  _
	Public Function getAvailableAmbassadorNameList(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal lat As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="long", DbType:="NVarChar(50)")> ByVal [long] As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal marketID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal positionID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal eventID As System.Nullable(Of Integer)) As ISingleResult(Of getAvailableAmbassadorNameListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), lat, [long], marketID, positionID, eventID)
		Return CType(result.ReturnValue,ISingleResult(Of getAvailableAmbassadorNameListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getAvailableAmbassadorNoThumbnail")>  _
	Public Function getAvailableAmbassadorNoThumbnail(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal lat As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="long", DbType:="NVarChar(50)")> ByVal [long] As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal marketID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal positionID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal eventID As System.Nullable(Of Integer)) As ISingleResult(Of getAvailableAmbassadorNoThumbnailResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), lat, [long], marketID, positionID, eventID)
		Return CType(result.ReturnValue,ISingleResult(Of getAvailableAmbassadorNoThumbnailResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getAvailableBrandsBySupplierForEvent")>  _
	Public Function getAvailableBrandsBySupplierForEvent(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal supplierID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal eventID As System.Nullable(Of Integer)) As ISingleResult(Of getAvailableBrandsBySupplierForEventResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), supplierID, eventID)
		Return CType(result.ReturnValue,ISingleResult(Of getAvailableBrandsBySupplierForEventResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getAvailableBrandsBySupplierForRequestedEvent")>  _
	Public Function getAvailableBrandsBySupplierForRequestedEvent(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal supplierID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal requestedEventID As System.Nullable(Of Integer)) As ISingleResult(Of getAvailableBrandsBySupplierForRequestedEventResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), supplierID, requestedEventID)
		Return CType(result.ReturnValue,ISingleResult(Of getAvailableBrandsBySupplierForRequestedEventResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getAvailableClientForStaff")>  _
	Public Function getAvailableClientForStaff(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String) As ISingleResult(Of getAvailableClientForStaffResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID)
		Return CType(result.ReturnValue,ISingleResult(Of getAvailableClientForStaffResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getAvailableClientsForAmbassador")>  _
	Public Function getAvailableClientsForAmbassador(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String) As ISingleResult(Of getAvailableClientsForAmbassadorResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID)
		Return CType(result.ReturnValue,ISingleResult(Of getAvailableClientsForAmbassadorResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetAvailableEventsbyAmbassador")>  _
	Public Function GetAvailableEventsbyAmbassador(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String) As ISingleResult(Of GetAvailableEventsbyAmbassadorResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID)
		Return CType(result.ReturnValue,ISingleResult(Of GetAvailableEventsbyAmbassadorResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetAvailableEventsbyAmbassadorID")>  _
	Public Function GetAvailableEventsbyAmbassadorID(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String) As ISingleResult(Of GetAvailableEventsbyAmbassadorIDResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID)
		Return CType(result.ReturnValue,ISingleResult(Of GetAvailableEventsbyAmbassadorIDResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetAvailableEventsMapbyAmbassador")>  _
	Public Function GetAvailableEventsMapbyAmbassador(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String) As ISingleResult(Of GetAvailableEventsMapbyAmbassadorResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID)
		Return CType(result.ReturnValue,ISingleResult(Of GetAvailableEventsMapbyAmbassadorResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetAvailableEventsMapbyAmbassadorSelectedEvent")>  _
	Public Function GetAvailableEventsMapbyAmbassadorSelectedEvent(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal eventID As System.Nullable(Of Integer)) As ISingleResult(Of GetAvailableEventsMapbyAmbassadorSelectedEventResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID, eventID)
		Return CType(result.ReturnValue,ISingleResult(Of GetAvailableEventsMapbyAmbassadorSelectedEventResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getAvailableMarketForStaff")>  _
	Public Function getAvailableMarketForStaff(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String) As ISingleResult(Of getAvailableMarketForStaffResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID)
		Return CType(result.ReturnValue,ISingleResult(Of getAvailableMarketForStaffResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getAvailableMarketsForAmbassador")>  _
	Public Function getAvailableMarketsForAmbassador(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String) As ISingleResult(Of getAvailableMarketsForAmbassadorResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID)
		Return CType(result.ReturnValue,ISingleResult(Of getAvailableMarketsForAmbassadorResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getAvailablePositionsForAmbassador")>  _
	Public Function getAvailablePositionsForAmbassador(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String) As ISingleResult(Of getAvailablePositionsForAmbassadorResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID)
		Return CType(result.ReturnValue,ISingleResult(Of getAvailablePositionsForAmbassadorResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getAvailableSupplierForStaff")>  _
	Public Function getAvailableSupplierForStaff(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String) As ISingleResult(Of getAvailableSupplierForStaffResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID)
		Return CType(result.ReturnValue,ISingleResult(Of getAvailableSupplierForStaffResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetBillingRateBySupplier")>  _
	Public Function GetBillingRateBySupplier(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal supplierID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal eventTypeID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal positionID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal marketID As System.Nullable(Of Integer)) As ISingleResult(Of GetBillingRateBySupplierResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), supplierID, eventTypeID, positionID, marketID)
		Return CType(result.ReturnValue,ISingleResult(Of GetBillingRateBySupplierResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getBrandsInEvent")>  _
	Public Function getBrandsInEvent(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal eventID As System.Nullable(Of Integer)) As ISingleResult(Of getBrandsInEventResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), eventID)
		Return CType(result.ReturnValue,ISingleResult(Of getBrandsInEventResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getBrandsInRequestedEvent")>  _
	Public Function getBrandsInRequestedEvent(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal requestedEventID As System.Nullable(Of Integer)) As ISingleResult(Of getBrandsInRequestedEventResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), requestedEventID)
		Return CType(result.ReturnValue,ISingleResult(Of getBrandsInRequestedEventResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetCaseCountByEventType_Supplier")>  _
	Public Function GetCaseCountByEventType_Supplier(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal startDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal endDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal supplierID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal eventTypeID As System.Nullable(Of Integer)) As ISingleResult(Of GetCaseCountByEventType_SupplierResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), startDate, endDate, supplierID, eventTypeID)
		Return CType(result.ReturnValue,ISingleResult(Of GetCaseCountByEventType_SupplierResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetCaseDisplayCountByEventType_Supplier")>  _
	Public Function GetCaseDisplayCountByEventType_Supplier(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal startDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal endDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal supplierID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal eventTypeID As System.Nullable(Of Integer)) As ISingleResult(Of GetCaseDisplayCountByEventType_SupplierResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), startDate, endDate, supplierID, eventTypeID)
		Return CType(result.ReturnValue,ISingleResult(Of GetCaseDisplayCountByEventType_SupplierResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getClientMarkets")>  _
	Public Function getClientMarkets(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal clientID As System.Nullable(Of Integer)) As ISingleResult(Of getClientMarketsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), clientID)
		Return CType(result.ReturnValue,ISingleResult(Of getClientMarketsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetCurrentEventsByAmbassadorsByUserID")>  _
	Public Function GetCurrentEventsByAmbassadorsByUserID(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="LoggedInUserID", DbType:="NVarChar(50)")> ByVal loggedInUserID As String) As ISingleResult(Of GetCurrentEventsByAmbassadorsByUserIDResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID, loggedInUserID)
		Return CType(result.ReturnValue,ISingleResult(Of GetCurrentEventsByAmbassadorsByUserIDResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getEvent_Approved_ByUserID", IsComposable:=true)>  _
	Public Function getEvent_Approved_ByUserID(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal clientID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="DateTime")> ByVal fromDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="DateTime")> ByVal toDate As System.Nullable(Of Date)) As Object
		Return CType(Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID, clientID, fromDate, toDate).ReturnValue,Object)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getEventAssignmentsByUserID", IsComposable:=true)>  _
	Public Function getEventAssignmentsByUserID(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="DateTime")> ByVal fromDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="DateTime")> ByVal toDate As System.Nullable(Of Date)) As Object
		Return CType(Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID, fromDate, toDate).ReturnValue,Object)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getEventBrandsCount")>  _
	Public Function getEventBrandsCount(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal startdate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal enddate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal clientid As System.Nullable(Of Integer)) As ISingleResult(Of getEventBrandsCountResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), startdate, enddate, clientid)
		Return CType(result.ReturnValue,ISingleResult(Of getEventBrandsCountResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getEventBrandsCountbyMarkets")>  _
	Public Function getEventBrandsCountbyMarkets(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal startdate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal enddate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal clientid As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userid As String) As ISingleResult(Of getEventBrandsCountbyMarketsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), startdate, enddate, clientid, userid)
		Return CType(result.ReturnValue,ISingleResult(Of getEventBrandsCountbyMarketsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetEventCountByWeek")>  _
	Public Function GetEventCountByWeek(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal startDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal endDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal supplierID As System.Nullable(Of Integer)) As ISingleResult(Of GetEventCountByWeekResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), startDate, endDate, supplierID)
		Return CType(result.ReturnValue,ISingleResult(Of GetEventCountByWeekResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetEventCountByWeek_EventType")>  _
	Public Function GetEventCountByWeek_EventType(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal startDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal endDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal supplierID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal eventTypeID As System.Nullable(Of Integer)) As ISingleResult(Of GetEventCountByWeek_EventTypeResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), startDate, endDate, supplierID, eventTypeID)
		Return CType(result.ReturnValue,ISingleResult(Of GetEventCountByWeek_EventTypeResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetEventDurationMinutes")>  _
	Public Function GetEventDurationMinutes(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal eventID As System.Nullable(Of Integer)) As ISingleResult(Of GetEventDurationMinutesResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), eventID)
		Return CType(result.ReturnValue,ISingleResult(Of GetEventDurationMinutesResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getEventReport", IsComposable:=true)>  _
	Public Function getEventReport(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal reportID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal clientID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="DateTime")> ByVal selectedToDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="DateTime")> ByVal selectedFromDate As System.Nullable(Of Date)) As Object
		Return CType(Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), reportID, clientID, selectedToDate, selectedFromDate).ReturnValue,Object)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getEvents_ByUserID")>  _
	Public Function getEvents_ByUserID(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="DateTime")> ByVal fromDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="DateTime")> ByVal toDate As System.Nullable(Of Date)) As ISingleResult(Of getEvents_ByUserIDResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID, fromDate, toDate)
		Return CType(result.ReturnValue,ISingleResult(Of getEvents_ByUserIDResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getEvents_ByUserID_withWholesaler", IsComposable:=true)>  _
	Public Function getEvents_ByUserID_withWholesaler(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="DateTime")> ByVal fromDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="DateTime")> ByVal toDate As System.Nullable(Of Date)) As Object
		Return CType(Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID, fromDate, toDate).ReturnValue,Object)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetEventsbyStatus")>  _
	Public Function GetEventsbyStatus(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal statusID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="DateTime")> ByVal startDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="DateTime")> ByVal endDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal clientID As System.Nullable(Of Integer)) As ISingleResult(Of GetEventsbyStatusResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), statusID, startDate, endDate, clientID)
		Return CType(result.ReturnValue,ISingleResult(Of GetEventsbyStatusResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getEventsByUserID", IsComposable:=true)>  _
	Public Function getEventsByUserID(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal clientID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="DateTime")> ByVal fromDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="DateTime")> ByVal toDate As System.Nullable(Of Date)) As Object
		Return CType(Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID, clientID, fromDate, toDate).ReturnValue,Object)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getEventStateCount")>  _
	Public Function getEventStateCount(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal startdate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal enddate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal clientID As System.Nullable(Of Integer)) As ISingleResult(Of getEventStateCountResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), startdate, enddate, clientID)
		Return CType(result.ReturnValue,ISingleResult(Of getEventStateCountResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getEventStateCountbyMarkets")>  _
	Public Function getEventStateCountbyMarkets(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal startdate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal enddate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal clientID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userid As String) As ISingleResult(Of getEventStateCountbyMarketsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), startdate, enddate, clientID, userid)
		Return CType(result.ReturnValue,ISingleResult(Of getEventStateCountbyMarketsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getEventStateCountByUserID")>  _
	Public Function getEventStateCountByUserID(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal startdate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal enddate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal clientID As System.Nullable(Of Integer)) As ISingleResult(Of getEventStateCountByUserIDResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), startdate, enddate, clientID)
		Return CType(result.ReturnValue,ISingleResult(Of getEventStateCountByUserIDResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetEventStatusTotalsByUserID")>  _
	Public Function GetEventStatusTotalsByUserID(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="DateTime")> ByVal fromDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="DateTime")> ByVal toDate As System.Nullable(Of Date)) As ISingleResult(Of GetEventStatusTotalsByUserIDResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID, fromDate, toDate)
		Return CType(result.ReturnValue,ISingleResult(Of GetEventStatusTotalsByUserIDResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getEventSummaryByUserID", IsComposable:=true)>  _
	Public Function getEventSummaryByUserID(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal clientID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="DateTime")> ByVal fromDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="DateTime")> ByVal toDate As System.Nullable(Of Date)) As Object
		Return CType(Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID, clientID, fromDate, toDate).ReturnValue,Object)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getEventSupplierCount")>  _
	Public Function getEventSupplierCount(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal startdate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal enddate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal clientID As System.Nullable(Of Integer)) As ISingleResult(Of getEventSupplierCountResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), startdate, enddate, clientID)
		Return CType(result.ReturnValue,ISingleResult(Of getEventSupplierCountResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getEventSupplierCountbyMarkets")>  _
	Public Function getEventSupplierCountbyMarkets(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal startdate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal enddate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal clientID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userid As String) As ISingleResult(Of getEventSupplierCountbyMarketsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), startdate, enddate, clientID, userid)
		Return CType(result.ReturnValue,ISingleResult(Of getEventSupplierCountbyMarketsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getEventTotal_CountByUserID", IsComposable:=true)>  _
	Public Function getEventTotal_CountByUserID(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal clientID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="DateTime")> ByVal fromDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="DateTime")> ByVal toDate As System.Nullable(Of Date)) As Object
		Return CType(Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID, clientID, fromDate, toDate).ReturnValue,Object)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getEventTotalCountByUserID", IsComposable:=true)>  _
	Public Function getEventTotalCountByUserID(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal clientID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="DateTime")> ByVal fromDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="DateTime")> ByVal toDate As System.Nullable(Of Date)) As Object
		Return CType(Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID, clientID, fromDate, toDate).ReturnValue,Object)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getEventTypeCount")>  _
	Public Function getEventTypeCount(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal startdate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal enddate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal clientID As System.Nullable(Of Integer)) As ISingleResult(Of getEventTypeCountResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), startdate, enddate, clientID)
		Return CType(result.ReturnValue,ISingleResult(Of getEventTypeCountResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getEventTypeCount_AllSuppliers")>  _
	Public Function getEventTypeCount_AllSuppliers(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal startdate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal enddate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal clientID As System.Nullable(Of Integer)) As ISingleResult(Of getEventTypeCount_AllSuppliersResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), startdate, enddate, clientID)
		Return CType(result.ReturnValue,ISingleResult(Of getEventTypeCount_AllSuppliersResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getEventTypeCountbyMarkets")>  _
	Public Function getEventTypeCountbyMarkets(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal startdate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal enddate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal clientID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userid As String) As ISingleResult(Of getEventTypeCountbyMarketsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), startdate, enddate, clientID, userid)
		Return CType(result.ReturnValue,ISingleResult(Of getEventTypeCountbyMarketsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getGalleryEvents_ByUserID")>  _
	Public Function getGalleryEvents_ByUserID(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal clientID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="DateTime")> ByVal fromDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="DateTime")> ByVal toDate As System.Nullable(Of Date)) As ISingleResult(Of getGalleryEvents_ByUserIDResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID, clientID, fromDate, toDate)
		Return CType(result.ReturnValue,ISingleResult(Of getGalleryEvents_ByUserIDResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getGalleryEventsByUserID", IsComposable:=true)>  _
	Public Function getGalleryEventsByUserID(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal clientID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="DateTime")> ByVal fromDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="DateTime")> ByVal toDate As System.Nullable(Of Date)) As Object
		Return CType(Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID, clientID, fromDate, toDate).ReturnValue,Object)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getImportedEvents_ByImportID", IsComposable:=true)>  _
	Public Function getImportedEvents_ByImportID(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal importFileID As System.Nullable(Of Integer)) As Object
		Return CType(Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID, importFileID).ReturnValue,Object)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetInventoryCount")>  _
	Public Function GetInventoryCount(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal itemID As System.Nullable(Of Integer)) As ISingleResult(Of GetInventoryCountResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), itemID)
		Return CType(result.ReturnValue,ISingleResult(Of GetInventoryCountResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetInventoryItemsbySupplier")>  _
	Public Function GetInventoryItemsbySupplier(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal supplierID As System.Nullable(Of Integer)) As ISingleResult(Of GetInventoryItemsbySupplierResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), supplierID)
		Return CType(result.ReturnValue,ISingleResult(Of GetInventoryItemsbySupplierResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetInventoryList")>  _
	Public Function GetInventoryList() As ISingleResult(Of GetInventoryListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetInventoryListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getInventoryListByUserID", IsComposable:=true)>  _
	Public Function getInventoryListByUserID(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String) As Object
		Return CType(Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID).ReturnValue,Object)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getInventoryListByUserIDAndClientID", IsComposable:=true)>  _
	Public Function getInventoryListByUserIDAndClientID(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal clientID As System.Nullable(Of Integer)) As Object
		Return CType(Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID, clientID).ReturnValue,Object)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetInvoiceBatchID")>  _
	Public Function GetInvoiceBatchID() As ISingleResult(Of GetInvoiceBatchIDResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetInvoiceBatchIDResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getInvoiceItems")>  _
	Public Function getInvoiceItems(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal invoiceID As System.Nullable(Of Integer)) As ISingleResult(Of getInvoiceItemsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), invoiceID)
		Return CType(result.ReturnValue,ISingleResult(Of getInvoiceItemsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getInvoiceListByDate")>  _
	Public Function getInvoiceListByDate(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal supplierID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal clientID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal startDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal endDate As System.Nullable(Of Date)) As ISingleResult(Of getInvoiceListByDateResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), supplierID, clientID, startDate, endDate)
		Return CType(result.ReturnValue,ISingleResult(Of getInvoiceListByDateResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetLastHourChangeCount")>  _
	Public Function GetLastHourChangeCount(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal activity As String) As ISingleResult(Of GetLastHourChangeCountResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), activity)
		Return CType(result.ReturnValue,ISingleResult(Of GetLastHourChangeCountResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetLoggedInUserTotals")>  _
	Public Function GetLoggedInUserTotals() As ISingleResult(Of GetLoggedInUserTotalsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetLoggedInUserTotalsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getMarketsByUserID")>  _
	Public Function getMarketsByUserID(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String) As ISingleResult(Of getMarketsByUserIDResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID)
		Return CType(result.ReturnValue,ISingleResult(Of getMarketsByUserIDResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getMatchedLocation")>  _
	Public Function getMatchedLocation(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Name", DbType:="NVarChar(50)")> ByVal name As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Float")> ByVal lat As System.Nullable(Of Double), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="long", DbType:="Float")> ByVal [long] As System.Nullable(Of Double)) As ISingleResult(Of getMatchedLocationResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), name, lat, [long])
		Return CType(result.ReturnValue,ISingleResult(Of getMatchedLocationResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getNeedInvoiceListByDate")>  _
	Public Function getNeedInvoiceListByDate(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(MAX)")> ByVal supplierID As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(MAX)")> ByVal marketID As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal clientID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal startDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal endDate As System.Nullable(Of Date)) As ISingleResult(Of getNeedInvoiceListByDateResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), supplierID, marketID, clientID, startDate, endDate)
		Return CType(result.ReturnValue,ISingleResult(Of getNeedInvoiceListByDateResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetNeedsRecapEventsListByUserID")>  _
	Public Function GetNeedsRecapEventsListByUserID(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="LoggedInUserID", DbType:="NVarChar(50)")> ByVal loggedInUserID As String) As ISingleResult(Of GetNeedsRecapEventsListByUserIDResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID, loggedInUserID)
		Return CType(result.ReturnValue,ISingleResult(Of GetNeedsRecapEventsListByUserIDResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetNewRegistrations")>  _
	Public Function GetNewRegistrations() As ISingleResult(Of GetNewRegistrationsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetNewRegistrationsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetNewVisitsTotals")>  _
	Public Function GetNewVisitsTotals() As ISingleResult(Of GetNewVisitsTotalsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetNewVisitsTotalsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getOffPremisePosItemsByBrand")>  _
	Public Function getOffPremisePosItemsByBrand(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal eventID As System.Nullable(Of Integer)) As ISingleResult(Of getOffPremisePosItemsByBrandResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), eventID)
		Return CType(result.ReturnValue,ISingleResult(Of getOffPremisePosItemsByBrandResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getOnPremisePosItemsByBrand")>  _
	Public Function getOnPremisePosItemsByBrand(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal eventID As System.Nullable(Of Integer)) As ISingleResult(Of getOnPremisePosItemsByBrandResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), eventID)
		Return CType(result.ReturnValue,ISingleResult(Of getOnPremisePosItemsByBrandResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetPastEventsByAmbassadorsByUserID")>  _
	Public Function GetPastEventsByAmbassadorsByUserID(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="LoggedInUserID", DbType:="NVarChar(50)")> ByVal loggedInUserID As String) As ISingleResult(Of GetPastEventsByAmbassadorsByUserIDResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID, loggedInUserID)
		Return CType(result.ReturnValue,ISingleResult(Of GetPastEventsByAmbassadorsByUserIDResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetPayrollSummaryForReport")>  _
	Public Function GetPayrollSummaryForReport(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal clientID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="DateTime")> ByVal startDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="DateTime")> ByVal endDate As System.Nullable(Of Date)) As ISingleResult(Of GetPayrollSummaryForReportResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), clientID, startDate, endDate)
		Return CType(result.ReturnValue,ISingleResult(Of GetPayrollSummaryForReportResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetPayrollSummaryForReport_BARetc")>  _
	Public Function GetPayrollSummaryForReport_BARetc(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal clientID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="DateTime")> ByVal startDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="DateTime")> ByVal endDate As System.Nullable(Of Date)) As ISingleResult(Of GetPayrollSummaryForReport_BARetcResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), clientID, startDate, endDate)
		Return CType(result.ReturnValue,ISingleResult(Of GetPayrollSummaryForReport_BARetcResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetPayrollSummaryForReport_Gallo")>  _
	Public Function GetPayrollSummaryForReport_Gallo(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal clientID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="DateTime")> ByVal startDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="DateTime")> ByVal endDate As System.Nullable(Of Date)) As ISingleResult(Of GetPayrollSummaryForReport_GalloResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), clientID, startDate, endDate)
		Return CType(result.ReturnValue,ISingleResult(Of GetPayrollSummaryForReport_GalloResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetPayrollSummaryForReport_Stoli")>  _
	Public Function GetPayrollSummaryForReport_Stoli(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal clientID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="DateTime")> ByVal startDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="DateTime")> ByVal endDate As System.Nullable(Of Date)) As ISingleResult(Of GetPayrollSummaryForReport_StoliResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), clientID, startDate, endDate)
		Return CType(result.ReturnValue,ISingleResult(Of GetPayrollSummaryForReport_StoliResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetPayrollSummaryForReport_WindyHill")>  _
	Public Function GetPayrollSummaryForReport_WindyHill(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal clientID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="DateTime")> ByVal startDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="DateTime")> ByVal endDate As System.Nullable(Of Date)) As ISingleResult(Of GetPayrollSummaryForReport_WindyHillResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), clientID, startDate, endDate)
		Return CType(result.ReturnValue,ISingleResult(Of GetPayrollSummaryForReport_WindyHillResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getPosKitsByUserID", IsComposable:=true)>  _
	Public Function getPosKitsByUserID(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String) As Object
		Return CType(Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID).ReturnValue,Object)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getPosKitsByUserIDAndClientID", IsComposable:=true)>  _
	Public Function getPosKitsByUserIDAndClientID(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal clientID As System.Nullable(Of Integer)) As Object
		Return CType(Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID, clientID).ReturnValue,Object)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetRecapCount_ChangeLastHour")>  _
	Public Function GetRecapCount_ChangeLastHour() As ISingleResult(Of GetRecapCount_ChangeLastHourResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetRecapCount_ChangeLastHourResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetRecapQuestionsForReportBuilder")>  _
	Public Function GetRecapQuestionsForReportBuilder(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal reportID As System.Nullable(Of Integer)) As ISingleResult(Of GetRecapQuestionsForReportBuilderResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), reportID)
		Return CType(result.ReturnValue,ISingleResult(Of GetRecapQuestionsForReportBuilderResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getRecapResultsbyDateRange")>  _
	Public Function getRecapResultsbyDateRange(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal recapID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal recapQuestionID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal startDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal endDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal supplierID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal eventTypeID As System.Nullable(Of Integer)) As ISingleResult(Of getRecapResultsbyDateRangeResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), recapID, recapQuestionID, startDate, endDate, supplierID, eventTypeID)
		Return CType(result.ReturnValue,ISingleResult(Of getRecapResultsbyDateRangeResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getRecapSummaryForChartbySupplier")>  _
	Public Function getRecapSummaryForChartbySupplier(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="DateTime")> ByVal startdate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="DateTime")> ByVal enddate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal supplierID As System.Nullable(Of Integer)) As ISingleResult(Of getRecapSummaryForChartbySupplierResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), startdate, enddate, supplierID)
		Return CType(result.ReturnValue,ISingleResult(Of getRecapSummaryForChartbySupplierResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getRecapSummaryTotalsForChartbySupplier")>  _
	Public Function getRecapSummaryTotalsForChartbySupplier(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="DateTime")> ByVal startdate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="DateTime")> ByVal enddate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal supplierID As System.Nullable(Of Integer)) As ISingleResult(Of getRecapSummaryTotalsForChartbySupplierResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), startdate, enddate, supplierID)
		Return CType(result.ReturnValue,ISingleResult(Of getRecapSummaryTotalsForChartbySupplierResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getRecapWeeklyConversionRatebyDateRange")>  _
	Public Function getRecapWeeklyConversionRatebyDateRange(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal startDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal endDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal supplierID As System.Nullable(Of Integer)) As ISingleResult(Of getRecapWeeklyConversionRatebyDateRangeResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), startDate, endDate, supplierID)
		Return CType(result.ReturnValue,ISingleResult(Of getRecapWeeklyConversionRatebyDateRangeResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getRecapWeeklyEstimatedRevenue")>  _
	Public Function getRecapWeeklyEstimatedRevenue(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal startDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal endDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal supplierID As System.Nullable(Of Integer)) As ISingleResult(Of getRecapWeeklyEstimatedRevenueResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), startDate, endDate, supplierID)
		Return CType(result.ReturnValue,ISingleResult(Of getRecapWeeklyEstimatedRevenueResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getRecapWeeklyTotalsbyDateRange")>  _
	Public Function getRecapWeeklyTotalsbyDateRange(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal recapID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal recapQuestionID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal startDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal endDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal supplierID As System.Nullable(Of Integer)) As ISingleResult(Of getRecapWeeklyTotalsbyDateRangeResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), recapID, recapQuestionID, startDate, endDate, supplierID)
		Return CType(result.ReturnValue,ISingleResult(Of getRecapWeeklyTotalsbyDateRangeResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getReportByUserID")>  _
	Public Function getReportByUserID(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String) As ISingleResult(Of getReportByUserIDResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID)
		Return CType(result.ReturnValue,ISingleResult(Of getReportByUserIDResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getReportByUserIDAndClientID")>  _
	Public Function getReportByUserIDAndClientID(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal clientID As System.Nullable(Of Integer)) As ISingleResult(Of getReportByUserIDAndClientIDResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID, clientID)
		Return CType(result.ReturnValue,ISingleResult(Of getReportByUserIDAndClientIDResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getShippingCosts")>  _
	Public Function getShippingCosts(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="DateTime")> ByVal fromDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="DateTime")> ByVal toDate As System.Nullable(Of Date)) As ISingleResult(Of getShippingCostsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), fromDate, toDate)
		Return CType(result.ReturnValue,ISingleResult(Of getShippingCostsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getSpuppliersbyBrand")>  _
	Public Function getSpuppliersbyBrand(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="BrandID", DbType:="Int")> ByVal brandID As System.Nullable(Of Integer)) As ISingleResult(Of getSpuppliersbyBrandResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), brandID)
		Return CType(result.ReturnValue,ISingleResult(Of getSpuppliersbyBrandResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getStaffClient")>  _
	Public Function getStaffClient(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String) As ISingleResult(Of getStaffClientResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID)
		Return CType(result.ReturnValue,ISingleResult(Of getStaffClientResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getStaffMarket")>  _
	Public Function getStaffMarket(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String) As ISingleResult(Of getStaffMarketResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID)
		Return CType(result.ReturnValue,ISingleResult(Of getStaffMarketResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getStaffSuppliers")>  _
	Public Function getStaffSuppliers(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String) As ISingleResult(Of getStaffSuppliersResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID)
		Return CType(result.ReturnValue,ISingleResult(Of getStaffSuppliersResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetSupplierBudgetResult")>  _
	Public Function GetSupplierBudgetResult(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal eventID As System.Nullable(Of Integer)) As ISingleResult(Of GetSupplierBudgetResultResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), eventID)
		Return CType(result.ReturnValue,ISingleResult(Of GetSupplierBudgetResultResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getSuppliersbyBrandID")>  _
	Public Function getSuppliersbyBrandID(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="BrandID", DbType:="Int")> ByVal brandID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal clientID As System.Nullable(Of Integer)) As ISingleResult(Of getSuppliersbyBrandIDResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), brandID, clientID)
		Return CType(result.ReturnValue,ISingleResult(Of getSuppliersbyBrandIDResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetSuppliersByClientID")>  _
	Public Function GetSuppliersByClientID(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal clientID As System.Nullable(Of Integer)) As ISingleResult(Of GetSuppliersByClientIDResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), clientID)
		Return CType(result.ReturnValue,ISingleResult(Of GetSuppliersByClientIDResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetSuppliersByUser")>  _
	Public Function GetSuppliersByUser(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String) As ISingleResult(Of GetSuppliersByUserResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID)
		Return CType(result.ReturnValue,ISingleResult(Of GetSuppliersByUserResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetSuppliersByUserIDandClientID")>  _
	Public Function GetSuppliersByUserIDandClientID(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal clientID As System.Nullable(Of Integer)) As ISingleResult(Of GetSuppliersByUserIDandClientIDResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID, clientID)
		Return CType(result.ReturnValue,ISingleResult(Of GetSuppliersByUserIDandClientIDResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetSuppliersWithCourseByUser")>  _
	Public Function GetSuppliersWithCourseByUser(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String) As ISingleResult(Of GetSuppliersWithCourseByUserResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID)
		Return CType(result.ReturnValue,ISingleResult(Of GetSuppliersWithCourseByUserResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getTotalBonusByInvoiceID")>  _
	Public Function getTotalBonusByInvoiceID(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal invoiceID As System.Nullable(Of Integer)) As ISingleResult(Of getTotalBonusByInvoiceIDResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), invoiceID)
		Return CType(result.ReturnValue,ISingleResult(Of getTotalBonusByInvoiceIDResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetTotalCaseCountByEventType_Supplier")>  _
	Public Function GetTotalCaseCountByEventType_Supplier(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal startDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal endDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal supplierID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal eventTypeID As System.Nullable(Of Integer)) As ISingleResult(Of GetTotalCaseCountByEventType_SupplierResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), startDate, endDate, supplierID, eventTypeID)
		Return CType(result.ReturnValue,ISingleResult(Of GetTotalCaseCountByEventType_SupplierResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getTotalExpensesByInvoiceID")>  _
	Public Function getTotalExpensesByInvoiceID(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal invoiceID As System.Nullable(Of Integer)) As ISingleResult(Of getTotalExpensesByInvoiceIDResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), invoiceID)
		Return CType(result.ReturnValue,ISingleResult(Of getTotalExpensesByInvoiceIDResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getTotalLaborByInvoiceID")>  _
	Public Function getTotalLaborByInvoiceID(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal invoiceID As System.Nullable(Of Integer)) As ISingleResult(Of getTotalLaborByInvoiceIDResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), invoiceID)
		Return CType(result.ReturnValue,ISingleResult(Of getTotalLaborByInvoiceIDResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getWeatherbyEvent")>  _
	Public Function getWeatherbyEvent(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal eventID As System.Nullable(Of Integer)) As ISingleResult(Of getWeatherbyEventResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), eventID)
		Return CType(result.ReturnValue,ISingleResult(Of getWeatherbyEventResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertAmbassadorClient")>  _
	Public Function InsertAmbassadorClient(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal clientid As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), clientid, userID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertAmbassadorMarket")>  _
	Public Function InsertAmbassadorMarket(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal marketid As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), marketid, userID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertAmbassadorPosition")>  _
	Public Function InsertAmbassadorPosition(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal positionid As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), positionid, userID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertBillingRates")>  _
	Public Function InsertBillingRates(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal supplierID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal relatedItemID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rate As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rateType As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(20)")> ByVal billingRateType As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), supplierID, relatedItemID, rate, rateType, billingRateType)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertBillingRatesFromTempTable")>  _
	Public Function InsertBillingRatesFromTempTable(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal tempSupplierID As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal supplierID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), tempSupplierID, supplierID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertBrandEventExecution")>  _
	Public Function InsertBrandEventExecution(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal tempBrandID As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal brandID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), tempBrandID, brandID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertBrandEventTask")>  _
	Public Function InsertBrandEventTask(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal tempBrandID As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal brandID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), tempBrandID, brandID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertBrandRecapQuestion")>  _
	Public Function InsertBrandRecapQuestion(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal tempBrandID As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal brandID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), tempBrandID, brandID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertBrandStaffingPosition")>  _
	Public Function InsertBrandStaffingPosition(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal tempBrandID As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal brandID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), tempBrandID, brandID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertBrandSupplier")>  _
	Public Function InsertBrandSupplier(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal tempsupplierid As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal brandid As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), tempsupplierid, brandid)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertBrandSupplierFromTempTable")>  _
	Public Function InsertBrandSupplierFromTempTable(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal tempSupplierID As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal supplierID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), tempSupplierID, supplierID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertClientMarket")>  _
	Public Function InsertClientMarket(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal clientID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal marketID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), clientID, marketID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertEventBrand")>  _
	Public Function InsertEventBrand(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal eventID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal brandID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), eventID, brandID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertEventLog")>  _
	Public Function InsertEventLog(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal eventID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(1000)")> ByVal activity As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(MAX)")> ByVal detail As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal createdBy As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal createdDate As System.Nullable(Of Date)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), eventID, activity, detail, createdBy, createdDate)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertEventTypeRecapQuestion")>  _
	Public Function InsertEventTypeRecapQuestion(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal eventTypeID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(1000)")> ByVal question As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal questionType As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal recapID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal sortOrder As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal recapQuestionID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), eventTypeID, question, questionType, recapID, sortOrder, recapQuestionID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertLogFile")>  _
	Public Function InsertLogFile(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(MAX)")> ByVal item As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), item)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertPhotoBin")>  _
	Public Function InsertPhotoBin(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal photoid As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userid As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal sessionID As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), photoid, userid, sessionID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertPosKitItems")>  _
	Public Function InsertPosKitItems(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal eventID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal kitID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal itemID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), eventID, kitID, itemID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertRecapAnswer")>  _
	Public Function InsertRecapAnswer(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal questionID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(MAX)")> ByVal answer As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), questionID, answer, userID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertRecapQuestion")>  _
	Public Function InsertRecapQuestion(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal brandID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(1000)")> ByVal question As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal questionType As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal recapID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal sortOrder As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal recapQuestionID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), brandID, question, questionType, recapID, sortOrder, recapQuestionID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertRequestedEventBrand")>  _
	Public Function InsertRequestedEventBrand(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal requestedEventID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal brandID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), requestedEventID, brandID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertStaffClient")>  _
	Public Function InsertStaffClient(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal clientid As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), clientid, userID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertStaffMarket")>  _
	Public Function InsertStaffMarket(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal marketid As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), marketid, userID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertStaffSupplier")>  _
	Public Function InsertStaffSupplier(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal supplierid As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), supplierid, userID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertSupplierBrand")>  _
	Public Function InsertSupplierBrand(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal supplierid As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal brandid As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), supplierid, brandid)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertSupplierBrandFromTempTable")>  _
	Public Function InsertSupplierBrandFromTempTable(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal tempBrandID As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal brandID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), tempBrandID, brandID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertTempAmbassadorClient")>  _
	Public Function InsertTempAmbassadorClient(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal clientid As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), clientid, userID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertTempAmbassadorPosition")>  _
	Public Function InsertTempAmbassadorPosition(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal positionid As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), positionid, userID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertTempBrandSupplier")>  _
	Public Function InsertTempBrandSupplier(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal tempsupplierid As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal brandid As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), tempsupplierid, brandid)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertTempSupplierBrand")>  _
	Public Function InsertTempSupplierBrand(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal supplierid As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal tempbrandid As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), supplierid, tempbrandid)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.LookupAccount")>  _
	Public Function LookupAccount(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal accountName As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal city As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal zip As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal state As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(100)")> ByVal address As String) As ISingleResult(Of LookupAccountResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), accountName, city, zip, state, address)
		Return CType(result.ReturnValue,ISingleResult(Of LookupAccountResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.MoveDown_ActivityField")>  _
	Public Function MoveDown_ActivityField(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal activityTypeID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal currentRowID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), activityTypeID, currentRowID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.MoveDown_BrandRecapQuestion")>  _
	Public Function MoveDown_BrandRecapQuestion(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal brandID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal currentRowID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), brandID, currentRowID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.MoveDown_EventTypeRecapQuestion")>  _
	Public Function MoveDown_EventTypeRecapQuestion(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal eventTypeID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal currentRowID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), eventTypeID, currentRowID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.MoveDown_SupplierBudgetQuestion")>  _
	Public Function MoveDown_SupplierBudgetQuestion(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal supplierID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal currentRowID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), supplierID, currentRowID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.MoveUp_ActivityField")>  _
	Public Function MoveUp_ActivityField(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal activityTypeID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal currentRowID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), activityTypeID, currentRowID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.MoveUp_BrandRecapQuestion")>  _
	Public Function MoveUp_BrandRecapQuestion(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal brandID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal currentRowID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), brandID, currentRowID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.MoveUp_EventTypeRecapQuestion")>  _
	Public Function MoveUp_EventTypeRecapQuestion(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal eventTypeID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal currentRowID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), eventTypeID, currentRowID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.MoveUp_SupplierBudgetQuestion")>  _
	Public Function MoveUp_SupplierBudgetQuestion(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal supplierID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal currentRowID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), supplierID, currentRowID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.pr_qryEventStaffingStatus")>  _
	Public Function pr_qryEventStaffingStatus(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal eventID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String) As ISingleResult(Of pr_qryEventStaffingStatusResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), eventID, userID)
		Return CType(result.ReturnValue,ISingleResult(Of pr_qryEventStaffingStatusResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.prAddBrandTypeToAmbassador")>  _
	Public Function prAddBrandTypeToAmbassador(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal username As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal brandcategoryID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), username, brandcategoryID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.prAddEventTypeToAmbassador")>  _
	Public Function prAddEventTypeToAmbassador(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal username As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal eventtypeID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), username, eventtypeID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.prDeleteBrandTypeFromAmbassador")>  _
	Public Function prDeleteBrandTypeFromAmbassador(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal username As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal brandcategoryID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), username, brandcategoryID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.prDeleteEventTypeFromAmbassador")>  _
	Public Function prDeleteEventTypeFromAmbassador(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal username As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal eventtypeID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), username, eventtypeID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.RemoveStaffFromEvent")>  _
	Public Function RemoveStaffFromEvent(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="RequirementID", DbType:="Int")> ByVal requirementID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), requirementID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.SetActiveBrand")>  _
	Public Function SetActiveBrand(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal brandID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal status As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), brandID, status)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.SetActiveMarket")>  _
	Public Function SetActiveMarket(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal marketID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal status As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), marketID, status)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.SetActiveSupplier")>  _
	Public Function SetActiveSupplier(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal supplierID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal status As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), supplierID, status)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.sp_CancelEvent")>  _
	Public Function sp_CancelEvent(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal eventID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), eventID, userID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.sp_CancelEventLastMinute")>  _
	Public Function sp_CancelEventLastMinute(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal eventID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), eventID, userID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.sp_galleryFiltertest")>  _
	Public Function sp_galleryFiltertest(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(MAX)")> ByVal marketID_String As String) As ISingleResult(Of sp_galleryFiltertestResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), marketID_String)
		Return CType(result.ReturnValue,ISingleResult(Of sp_galleryFiltertestResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.sp_GalleryView")>  _
	Public Function sp_GalleryView(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal clientID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(MAX)")> ByVal marketID_String As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(MAX)")> ByVal brandID_String As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal startDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal endDate As System.Nullable(Of Date)) As ISingleResult(Of sp_GalleryViewResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), clientID, marketID_String, brandID_String, startDate, endDate)
		Return CType(result.ReturnValue,ISingleResult(Of sp_GalleryViewResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.sp_GalleryView1")>  _
	Public Function sp_GalleryView1(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal clientID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(MAX)")> ByVal marketID_String As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(MAX)")> ByVal brandID_String As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal startDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal endDate As System.Nullable(Of Date)) As ISingleResult(Of sp_GalleryView1Result)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), clientID, marketID_String, brandID_String, startDate, endDate)
		Return CType(result.ReturnValue,ISingleResult(Of sp_GalleryView1Result))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.sp_GalleryViewByBrand")>  _
	Public Function sp_GalleryViewByBrand(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(MAX)")> ByVal brandID_String As String) As ISingleResult(Of sp_GalleryViewByBrandResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), brandID_String)
		Return CType(result.ReturnValue,ISingleResult(Of sp_GalleryViewByBrandResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.sp_GalleryViewByBrandAndDateRange")>  _
	Public Function sp_GalleryViewByBrandAndDateRange(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(MAX)")> ByVal brandID_String As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal startDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal endDate As System.Nullable(Of Date)) As ISingleResult(Of sp_GalleryViewByBrandAndDateRangeResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), brandID_String, startDate, endDate)
		Return CType(result.ReturnValue,ISingleResult(Of sp_GalleryViewByBrandAndDateRangeResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.sp_GalleryViewByBrandAndMarket")>  _
	Public Function sp_GalleryViewByBrandAndMarket(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(MAX)")> ByVal marketID_String As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(MAX)")> ByVal brandID_String As String) As ISingleResult(Of sp_GalleryViewByBrandAndMarketResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), marketID_String, brandID_String)
		Return CType(result.ReturnValue,ISingleResult(Of sp_GalleryViewByBrandAndMarketResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.sp_GalleryViewByBrandAndMarketAndDateRange")>  _
	Public Function sp_GalleryViewByBrandAndMarketAndDateRange(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(MAX)")> ByVal marketID_String As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(MAX)")> ByVal brandID_String As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal startDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal endDate As System.Nullable(Of Date)) As ISingleResult(Of sp_GalleryViewByBrandAndMarketAndDateRangeResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), marketID_String, brandID_String, startDate, endDate)
		Return CType(result.ReturnValue,ISingleResult(Of sp_GalleryViewByBrandAndMarketAndDateRangeResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.sp_GalleryViewByDateRange")>  _
	Public Function sp_GalleryViewByDateRange(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal startDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal endDate As System.Nullable(Of Date)) As ISingleResult(Of sp_GalleryViewByDateRangeResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), startDate, endDate)
		Return CType(result.ReturnValue,ISingleResult(Of sp_GalleryViewByDateRangeResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.sp_GalleryViewByMarket")>  _
	Public Function sp_GalleryViewByMarket(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(MAX)")> ByVal marketID_String As String) As ISingleResult(Of sp_GalleryViewByMarketResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), marketID_String)
		Return CType(result.ReturnValue,ISingleResult(Of sp_GalleryViewByMarketResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.sp_GalleryViewByMarketAndDateRange")>  _
	Public Function sp_GalleryViewByMarketAndDateRange(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(MAX)")> ByVal marketID_String As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal startDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal endDate As System.Nullable(Of Date)) As ISingleResult(Of sp_GalleryViewByMarketAndDateRangeResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), marketID_String, startDate, endDate)
		Return CType(result.ReturnValue,ISingleResult(Of sp_GalleryViewByMarketAndDateRangeResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.sp_GetRowSize")>  _
	Public Function sp_GetRowSize(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Tablename", DbType:="VarChar(100)")> ByVal tablename As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(100)")> ByVal pkcol As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), tablename, pkcol)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.sp_SQLskills_ExposeColsInIndexLevels", IsComposable:=true)>  _
	Public Function sp_SQLskills_ExposeColsInIndexLevels(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal object_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal index_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ColsInTree", DbType:="NVarChar(2126)")> ByRef colsInTree As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ColsInLeaf", DbType:="NVarChar(MAX)")> ByRef colsInLeaf As String) As Object
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), object_id, index_id, colsInTree, colsInLeaf)
		colsInTree = CType(result.GetParameterValue(2),String)
		colsInLeaf = CType(result.GetParameterValue(3),String)
		Return CType(result.ReturnValue,Object)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.sp_SQLskills_SQL2012_helpindex", IsComposable:=true)>  _
	Public Function sp_SQLskills_SQL2012_helpindex(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(776)")> ByVal objname As String) As Object
		Return CType(Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), objname).ReturnValue,Object)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateAccountModifiedDate")>  _
	Public Function UpdateAccountModifiedDate(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="AccountID", DbType:="Int")> ByVal accountID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UserID", DbType:="NVarChar(50)")> ByVal userID As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), accountID, userID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateBillingRate")>  _
	Public Function UpdateBillingRate(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal eventID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal requirementID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), eventID, requirementID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateBudgetQuestionAnswer")>  _
	Public Function UpdateBudgetQuestionAnswer(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal questionID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(MAX)")> ByVal answer As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal eventID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), questionID, answer, eventID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateBudgetQuestionEventID")>  _
	Public Function UpdateBudgetQuestionEventID(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal oldEventID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal newEventID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), oldEventID, newEventID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateEventAttireText")>  _
	Public Function UpdateEventAttireText(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal eventID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(MAX)")> ByVal text As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), eventID, text)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateEventCourseList")>  _
	Public Function UpdateEventCourseList(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal supplierID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), supplierID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateEventDateTime")>  _
	Public Function UpdateEventDateTime(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal eventID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="DateTime")> ByVal eventDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="DateTime")> ByVal startTime As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Duration", DbType:="Int")> ByVal duration As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="EventHours", DbType:="Int")> ByVal eventHours As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="EventMinutes", DbType:="Int")> ByVal eventMinutes As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), eventID, eventDate, startTime, duration, eventHours, eventMinutes)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateEventDuration")>  _
	Public Function UpdateEventDuration(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal eventID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), eventID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateEventModifiedFlag")>  _
	Public Function UpdateEventModifiedFlag(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal brandID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), brandID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateEventRecapStatus")>  _
	Public Function UpdateEventRecapStatus(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal eventID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), eventID, userID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateEventRecapStatus_Approved")>  _
	Public Function UpdateEventRecapStatus_Approved(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal eventID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), eventID, userID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateEventRecapStatus_CanceledLastMinute")>  _
	Public Function UpdateEventRecapStatus_CanceledLastMinute(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal eventID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), eventID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateEventRecapStatus_Toplined")>  _
	Public Function UpdateEventRecapStatus_Toplined(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal eventID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String) As ISingleResult(Of UpdateEventRecapStatus_ToplinedResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), eventID, userID)
		Return CType(result.ReturnValue,ISingleResult(Of UpdateEventRecapStatus_ToplinedResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateEventStaffRequirement")>  _
	Public Function UpdateEventStaffRequirement(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="RequirementID", DbType:="Int")> ByVal requirementID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="DateTime")> ByVal startTime As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="DateTime")> ByVal endTime As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rate As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), requirementID, startTime, endTime, rate)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateHeadBodyShot")>  _
	Public Function UpdateHeadBodyShot() As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateInventoryItemCount")>  _
	Public Function UpdateInventoryItemCount(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ItemID", DbType:="Int")> ByVal itemID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="DesiredCount", DbType:="Int")> ByVal desiredCount As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(MAX)")> ByVal note As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), itemID, desiredCount, note)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateInvoiceStatus")>  _
	Public Function UpdateInvoiceStatus(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal invoiceID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), invoiceID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateLastActivity")>  _
	Public Function UpdateLastActivity(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UserID", DbType:="NVarChar(50)")> ByVal userID As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(256)")> ByVal lastPageLanding As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID, lastPageLanding)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateLastActivity2")>  _
	Public Function UpdateLastActivity2(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UserID", DbType:="NVarChar(50)")> ByVal userID As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(256)")> ByVal lastPageLanding As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IsMobileDevice", DbType:="Bit")> ByVal isMobileDevice As System.Nullable(Of Boolean)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID, lastPageLanding, isMobileDevice)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateLastActivityDate")>  _
	Public Function UpdateLastActivityDate(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UserID", DbType:="NVarChar(50)")> ByVal userID As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateLastLoggedInDate")>  _
	Public Function UpdateLastLoggedInDate(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UserID", DbType:="NVarChar(50)")> ByVal userID As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IsFirstLogin", DbType:="Bit")> ByVal isFirstLogin As System.Nullable(Of Boolean), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal ipAddress As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal browser As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID, isFirstLogin, ipAddress, browser)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateLinkedProfile")>  _
	Public Function UpdateLinkedProfile(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateLoadCount")>  _
	Public Function UpdateLoadCount(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Page", DbType:="NVarChar(50)")> ByVal page As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), page)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateMarketActiveStatus")>  _
	Public Function UpdateMarketActiveStatus(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal marketID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), marketID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdatePosRequirementsText")>  _
	Public Function UpdatePosRequirementsText(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal eventID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(MAX)")> ByVal text As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), eventID, text)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateSamplingNotesText")>  _
	Public Function UpdateSamplingNotesText(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal eventID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(MAX)")> ByVal text As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), eventID, text)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.updateUserName")>  _
	Public Function updateUserName(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal oldUserName As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal newUserName As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), oldUserName, newUserName)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.ViewApprovedPaymentsByAmbassador")>  _
	Public Function ViewApprovedPaymentsByAmbassador(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UserID", DbType:="NVarChar(50)")> ByVal userID As String) As ISingleResult(Of ViewApprovedPaymentsByAmbassadorResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID)
		Return CType(result.ReturnValue,ISingleResult(Of ViewApprovedPaymentsByAmbassadorResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.ViewBillingSummaryByEvent")>  _
	Public Function ViewBillingSummaryByEvent(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal eventID As System.Nullable(Of Integer)) As ISingleResult(Of ViewBillingSummaryByEventResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), eventID)
		Return CType(result.ReturnValue,ISingleResult(Of ViewBillingSummaryByEventResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.ViewInventoryItemListByBrand")>  _
	Public Function ViewInventoryItemListByBrand(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal brandGroupID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal brandID As System.Nullable(Of Integer)) As ISingleResult(Of ViewInventoryItemListByBrandResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), brandGroupID, brandID)
		Return CType(result.ReturnValue,ISingleResult(Of ViewInventoryItemListByBrandResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.ViewPaidPaymentsByAmbassador")>  _
	Public Function ViewPaidPaymentsByAmbassador(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UserID", DbType:="NVarChar(50)")> ByVal userID As String) As ISingleResult(Of ViewPaidPaymentsByAmbassadorResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID)
		Return CType(result.ReturnValue,ISingleResult(Of ViewPaidPaymentsByAmbassadorResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.ViewPaymentsByAmbassador")>  _
	Public Function ViewPaymentsByAmbassador(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UserID", DbType:="NVarChar(50)")> ByVal userID As String) As ISingleResult(Of ViewPaymentsByAmbassadorResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID)
		Return CType(result.ReturnValue,ISingleResult(Of ViewPaymentsByAmbassadorResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.ViewPayrollSummaryByEvent")>  _
	Public Function ViewPayrollSummaryByEvent(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal eventID As System.Nullable(Of Integer)) As ISingleResult(Of ViewPayrollSummaryByEventResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), eventID)
		Return CType(result.ReturnValue,ISingleResult(Of ViewPayrollSummaryByEventResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.ViewPendingPaymentsByAmbassador")>  _
	Public Function ViewPendingPaymentsByAmbassador(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UserID", DbType:="NVarChar(50)")> ByVal userID As String) As ISingleResult(Of ViewPendingPaymentsByAmbassadorResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID)
		Return CType(result.ReturnValue,ISingleResult(Of ViewPendingPaymentsByAmbassadorResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.ViewProcessingPaymentsByAmbassador")>  _
	Public Function ViewProcessingPaymentsByAmbassador(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UserID", DbType:="NVarChar(50)")> ByVal userID As String) As ISingleResult(Of ViewProcessingPaymentsByAmbassadorResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID)
		Return CType(result.ReturnValue,ISingleResult(Of ViewProcessingPaymentsByAmbassadorResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetCategoryTreeByClientID", IsComposable:=true)>  _
	Public Function GetCategoryTreeByClientID(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal clientID As System.Nullable(Of Integer)) As Object
		Return CType(Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), clientID).ReturnValue,Object)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteCategory")>  _
	Public Function DeleteCategory(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal categoryID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), categoryID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateCategory")>  _
	Public Function UpdateCategory(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal categoryID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal newName As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), categoryID, newName)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteClient")>  _
	Public Function DeleteClient(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal clientid As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), clientid)
		Return CType(result.ReturnValue,Integer)
	End Function
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.InvoiceImport")>  _
Partial Public Class InvoiceImport
	
	Private _ID As Integer
	
	Private _eventID As System.Nullable(Of Integer)
	
	Private _invoiced As System.Nullable(Of Boolean)
	
	Private _invoiceID As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me._ID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int")>  _
	Public Property eventID() As System.Nullable(Of Integer)
		Get
			Return Me._eventID
		End Get
		Set
			If (Me._eventID.Equals(value) = false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_invoiced", DbType:="Bit")>  _
	Public Property invoiced() As System.Nullable(Of Boolean)
		Get
			Return Me._invoiced
		End Get
		Set
			If (Me._invoiced.Equals(value) = false) Then
				Me._invoiced = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_invoiceID", DbType:="Int")>  _
	Public Property invoiceID() As System.Nullable(Of Integer)
		Get
			Return Me._invoiceID
		End Get
		Set
			If (Me._invoiceID.Equals(value) = false) Then
				Me._invoiceID = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Sessions")>  _
Partial Public Class Session
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SessionId As String
	
	Private _Created As Date
	
	Private _Expires As Date
	
	Private _LockDate As Date
	
	Private _LockCookie As Integer
	
	Private _Locked As Boolean
	
	Private _SessionItem As System.Data.Linq.Binary
	
	Private _Flags As Integer
	
	Private _Timeout As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSessionIdChanging(value As String)
    End Sub
    Partial Private Sub OnSessionIdChanged()
    End Sub
    Partial Private Sub OnCreatedChanging(value As Date)
    End Sub
    Partial Private Sub OnCreatedChanged()
    End Sub
    Partial Private Sub OnExpiresChanging(value As Date)
    End Sub
    Partial Private Sub OnExpiresChanged()
    End Sub
    Partial Private Sub OnLockDateChanging(value As Date)
    End Sub
    Partial Private Sub OnLockDateChanged()
    End Sub
    Partial Private Sub OnLockCookieChanging(value As Integer)
    End Sub
    Partial Private Sub OnLockCookieChanged()
    End Sub
    Partial Private Sub OnLockedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnLockedChanged()
    End Sub
    Partial Private Sub OnSessionItemChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnSessionItemChanged()
    End Sub
    Partial Private Sub OnFlagsChanging(value As Integer)
    End Sub
    Partial Private Sub OnFlagsChanged()
    End Sub
    Partial Private Sub OnTimeoutChanging(value As Integer)
    End Sub
    Partial Private Sub OnTimeoutChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SessionId", DbType:="NVarChar(88) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property SessionId() As String
		Get
			Return Me._SessionId
		End Get
		Set
			If (String.Equals(Me._SessionId, value) = false) Then
				Me.OnSessionIdChanging(value)
				Me.SendPropertyChanging
				Me._SessionId = value
				Me.SendPropertyChanged("SessionId")
				Me.OnSessionIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Created", DbType:="DateTime NOT NULL")>  _
	Public Property Created() As Date
		Get
			Return Me._Created
		End Get
		Set
			If ((Me._Created = value)  _
						= false) Then
				Me.OnCreatedChanging(value)
				Me.SendPropertyChanging
				Me._Created = value
				Me.SendPropertyChanged("Created")
				Me.OnCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Expires", DbType:="DateTime NOT NULL")>  _
	Public Property Expires() As Date
		Get
			Return Me._Expires
		End Get
		Set
			If ((Me._Expires = value)  _
						= false) Then
				Me.OnExpiresChanging(value)
				Me.SendPropertyChanging
				Me._Expires = value
				Me.SendPropertyChanged("Expires")
				Me.OnExpiresChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LockDate", DbType:="DateTime NOT NULL")>  _
	Public Property LockDate() As Date
		Get
			Return Me._LockDate
		End Get
		Set
			If ((Me._LockDate = value)  _
						= false) Then
				Me.OnLockDateChanging(value)
				Me.SendPropertyChanging
				Me._LockDate = value
				Me.SendPropertyChanged("LockDate")
				Me.OnLockDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LockCookie", DbType:="Int NOT NULL")>  _
	Public Property LockCookie() As Integer
		Get
			Return Me._LockCookie
		End Get
		Set
			If ((Me._LockCookie = value)  _
						= false) Then
				Me.OnLockCookieChanging(value)
				Me.SendPropertyChanging
				Me._LockCookie = value
				Me.SendPropertyChanged("LockCookie")
				Me.OnLockCookieChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Locked", DbType:="Bit NOT NULL")>  _
	Public Property Locked() As Boolean
		Get
			Return Me._Locked
		End Get
		Set
			If ((Me._Locked = value)  _
						= false) Then
				Me.OnLockedChanging(value)
				Me.SendPropertyChanging
				Me._Locked = value
				Me.SendPropertyChanged("Locked")
				Me.OnLockedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SessionItem", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property SessionItem() As System.Data.Linq.Binary
		Get
			Return Me._SessionItem
		End Get
		Set
			If (Object.Equals(Me._SessionItem, value) = false) Then
				Me.OnSessionItemChanging(value)
				Me.SendPropertyChanging
				Me._SessionItem = value
				Me.SendPropertyChanged("SessionItem")
				Me.OnSessionItemChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Flags", DbType:="Int NOT NULL")>  _
	Public Property Flags() As Integer
		Get
			Return Me._Flags
		End Get
		Set
			If ((Me._Flags = value)  _
						= false) Then
				Me.OnFlagsChanging(value)
				Me.SendPropertyChanging
				Me._Flags = value
				Me.SendPropertyChanged("Flags")
				Me.OnFlagsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Timeout", DbType:="Int NOT NULL")>  _
	Public Property Timeout() As Integer
		Get
			Return Me._Timeout
		End Get
		Set
			If ((Me._Timeout = value)  _
						= false) Then
				Me.OnTimeoutChanging(value)
				Me.SendPropertyChanging
				Me._Timeout = value
				Me.SendPropertyChanged("Timeout")
				Me.OnTimeoutChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblAccount")>  _
Partial Public Class tblAccount
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _accountID As Integer
	
	Private _Vpid As System.Nullable(Of Integer)
	
	Private _accountName As String
	
	Private _brandChampion As System.Nullable(Of Boolean)
	
	Private _clientID As System.Nullable(Of Integer)
	
	Private _status As String
	
	Private _DBAName As String
	
	Private _streetAddress1 As String
	
	Private _streetAddress2 As String
	
	Private _city As String
	
	Private _state As String
	
	Private _zipCode As String
	
	Private _phone As String
	
	Private _website As String
	
	Private _facebook As String
	
	Private _twitter As String
	
	Private _yelp As String
	
	Private _supplierID As String
	
	Private _distributorID As String
	
	Private _distributorName As String
	
	Private _accountTypeName As String
	
	Private _marketID As System.Nullable(Of Integer)
	
	Private _accountTypeID As System.Nullable(Of Integer)
	
	Private _capacity As System.Nullable(Of Integer)
	
	Private _numberofBars As System.Nullable(Of Integer)
	
	Private _marketName As String
	
	Private _neighborhood As String
	
	Private _traffic As System.Nullable(Of Integer)
	
	Private _permamentbars As System.Nullable(Of Integer)
	
	Private _patioSeating As System.Nullable(Of Boolean)
	
	Private _liveMusic As System.Nullable(Of Boolean)
	
	Private _poolTables As System.Nullable(Of Boolean)
	
	Private _darts As System.Nullable(Of Boolean)
	
	Private _arcade As System.Nullable(Of Boolean)
	
	Private _otherGames As String
	
	Private _latitude As System.Nullable(Of Double)
	
	Private _longitude As System.Nullable(Of Double)
	
	Private _notes As String
	
	Private _createdDate As System.Nullable(Of Date)
	
	Private _modifiedDate As System.Nullable(Of Date)
	
	Private _createdBy As String
	
	Private _modifiedBy As String
	
	Private _geoLocationUpdated As System.Nullable(Of Boolean)
	
	Private _latitude_old As System.Nullable(Of Double)
	
	Private _longitude_old As System.Nullable(Of Double)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnaccountIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnaccountIDChanged()
    End Sub
    Partial Private Sub OnVpidChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnVpidChanged()
    End Sub
    Partial Private Sub OnaccountNameChanging(value As String)
    End Sub
    Partial Private Sub OnaccountNameChanged()
    End Sub
    Partial Private Sub OnbrandChampionChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnbrandChampionChanged()
    End Sub
    Partial Private Sub OnclientIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnclientIDChanged()
    End Sub
    Partial Private Sub OnstatusChanging(value As String)
    End Sub
    Partial Private Sub OnstatusChanged()
    End Sub
    Partial Private Sub OnDBANameChanging(value As String)
    End Sub
    Partial Private Sub OnDBANameChanged()
    End Sub
    Partial Private Sub OnstreetAddress1Changing(value As String)
    End Sub
    Partial Private Sub OnstreetAddress1Changed()
    End Sub
    Partial Private Sub OnstreetAddress2Changing(value As String)
    End Sub
    Partial Private Sub OnstreetAddress2Changed()
    End Sub
    Partial Private Sub OncityChanging(value As String)
    End Sub
    Partial Private Sub OncityChanged()
    End Sub
    Partial Private Sub OnstateChanging(value As String)
    End Sub
    Partial Private Sub OnstateChanged()
    End Sub
    Partial Private Sub OnzipCodeChanging(value As String)
    End Sub
    Partial Private Sub OnzipCodeChanged()
    End Sub
    Partial Private Sub OnphoneChanging(value As String)
    End Sub
    Partial Private Sub OnphoneChanged()
    End Sub
    Partial Private Sub OnwebsiteChanging(value As String)
    End Sub
    Partial Private Sub OnwebsiteChanged()
    End Sub
    Partial Private Sub OnfacebookChanging(value As String)
    End Sub
    Partial Private Sub OnfacebookChanged()
    End Sub
    Partial Private Sub OntwitterChanging(value As String)
    End Sub
    Partial Private Sub OntwitterChanged()
    End Sub
    Partial Private Sub OnyelpChanging(value As String)
    End Sub
    Partial Private Sub OnyelpChanged()
    End Sub
    Partial Private Sub OnsupplierIDChanging(value As String)
    End Sub
    Partial Private Sub OnsupplierIDChanged()
    End Sub
    Partial Private Sub OndistributorIDChanging(value As String)
    End Sub
    Partial Private Sub OndistributorIDChanged()
    End Sub
    Partial Private Sub OndistributorNameChanging(value As String)
    End Sub
    Partial Private Sub OndistributorNameChanged()
    End Sub
    Partial Private Sub OnaccountTypeNameChanging(value As String)
    End Sub
    Partial Private Sub OnaccountTypeNameChanged()
    End Sub
    Partial Private Sub OnmarketIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnmarketIDChanged()
    End Sub
    Partial Private Sub OnaccountTypeIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnaccountTypeIDChanged()
    End Sub
    Partial Private Sub OncapacityChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OncapacityChanged()
    End Sub
    Partial Private Sub OnnumberofBarsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnnumberofBarsChanged()
    End Sub
    Partial Private Sub OnmarketNameChanging(value As String)
    End Sub
    Partial Private Sub OnmarketNameChanged()
    End Sub
    Partial Private Sub OnneighborhoodChanging(value As String)
    End Sub
    Partial Private Sub OnneighborhoodChanged()
    End Sub
    Partial Private Sub OntrafficChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OntrafficChanged()
    End Sub
    Partial Private Sub OnpermamentbarsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnpermamentbarsChanged()
    End Sub
    Partial Private Sub OnpatioSeatingChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnpatioSeatingChanged()
    End Sub
    Partial Private Sub OnliveMusicChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnliveMusicChanged()
    End Sub
    Partial Private Sub OnpoolTablesChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnpoolTablesChanged()
    End Sub
    Partial Private Sub OndartsChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OndartsChanged()
    End Sub
    Partial Private Sub OnarcadeChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnarcadeChanged()
    End Sub
    Partial Private Sub OnotherGamesChanging(value As String)
    End Sub
    Partial Private Sub OnotherGamesChanged()
    End Sub
    Partial Private Sub OnlatitudeChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnlatitudeChanged()
    End Sub
    Partial Private Sub OnlongitudeChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnlongitudeChanged()
    End Sub
    Partial Private Sub OnnotesChanging(value As String)
    End Sub
    Partial Private Sub OnnotesChanged()
    End Sub
    Partial Private Sub OncreatedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OncreatedDateChanged()
    End Sub
    Partial Private Sub OnmodifiedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnmodifiedDateChanged()
    End Sub
    Partial Private Sub OncreatedByChanging(value As String)
    End Sub
    Partial Private Sub OncreatedByChanged()
    End Sub
    Partial Private Sub OnmodifiedByChanging(value As String)
    End Sub
    Partial Private Sub OnmodifiedByChanged()
    End Sub
    Partial Private Sub OngeoLocationUpdatedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OngeoLocationUpdatedChanged()
    End Sub
    Partial Private Sub Onlatitude_oldChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub Onlatitude_oldChanged()
    End Sub
    Partial Private Sub Onlongitude_oldChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub Onlongitude_oldChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property accountID() As Integer
		Get
			Return Me._accountID
		End Get
		Set
			If ((Me._accountID = value)  _
						= false) Then
				Me.OnaccountIDChanging(value)
				Me.SendPropertyChanging
				Me._accountID = value
				Me.SendPropertyChanged("accountID")
				Me.OnaccountIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Vpid", DbType:="Int")>  _
	Public Property Vpid() As System.Nullable(Of Integer)
		Get
			Return Me._Vpid
		End Get
		Set
			If (Me._Vpid.Equals(value) = false) Then
				Me.OnVpidChanging(value)
				Me.SendPropertyChanging
				Me._Vpid = value
				Me.SendPropertyChanged("Vpid")
				Me.OnVpidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountName", DbType:="VarChar(256)")>  _
	Public Property accountName() As String
		Get
			Return Me._accountName
		End Get
		Set
			If (String.Equals(Me._accountName, value) = false) Then
				Me.OnaccountNameChanging(value)
				Me.SendPropertyChanging
				Me._accountName = value
				Me.SendPropertyChanged("accountName")
				Me.OnaccountNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandChampion", DbType:="Bit")>  _
	Public Property brandChampion() As System.Nullable(Of Boolean)
		Get
			Return Me._brandChampion
		End Get
		Set
			If (Me._brandChampion.Equals(value) = false) Then
				Me.OnbrandChampionChanging(value)
				Me.SendPropertyChanging
				Me._brandChampion = value
				Me.SendPropertyChanged("brandChampion")
				Me.OnbrandChampionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", DbType:="Int")>  _
	Public Property clientID() As System.Nullable(Of Integer)
		Get
			Return Me._clientID
		End Get
		Set
			If (Me._clientID.Equals(value) = false) Then
				Me.OnclientIDChanging(value)
				Me.SendPropertyChanging
				Me._clientID = value
				Me.SendPropertyChanged("clientID")
				Me.OnclientIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", DbType:="VarChar(50)")>  _
	Public Property status() As String
		Get
			Return Me._status
		End Get
		Set
			If (String.Equals(Me._status, value) = false) Then
				Me.OnstatusChanging(value)
				Me.SendPropertyChanging
				Me._status = value
				Me.SendPropertyChanged("status")
				Me.OnstatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DBAName", DbType:="VarChar(256)")>  _
	Public Property DBAName() As String
		Get
			Return Me._DBAName
		End Get
		Set
			If (String.Equals(Me._DBAName, value) = false) Then
				Me.OnDBANameChanging(value)
				Me.SendPropertyChanging
				Me._DBAName = value
				Me.SendPropertyChanged("DBAName")
				Me.OnDBANameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_streetAddress1", DbType:="VarChar(256)")>  _
	Public Property streetAddress1() As String
		Get
			Return Me._streetAddress1
		End Get
		Set
			If (String.Equals(Me._streetAddress1, value) = false) Then
				Me.OnstreetAddress1Changing(value)
				Me.SendPropertyChanging
				Me._streetAddress1 = value
				Me.SendPropertyChanged("streetAddress1")
				Me.OnstreetAddress1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_streetAddress2", DbType:="VarChar(256)")>  _
	Public Property streetAddress2() As String
		Get
			Return Me._streetAddress2
		End Get
		Set
			If (String.Equals(Me._streetAddress2, value) = false) Then
				Me.OnstreetAddress2Changing(value)
				Me.SendPropertyChanging
				Me._streetAddress2 = value
				Me.SendPropertyChanged("streetAddress2")
				Me.OnstreetAddress2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_city", DbType:="VarChar(50)")>  _
	Public Property city() As String
		Get
			Return Me._city
		End Get
		Set
			If (String.Equals(Me._city, value) = false) Then
				Me.OncityChanging(value)
				Me.SendPropertyChanging
				Me._city = value
				Me.SendPropertyChanged("city")
				Me.OncityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_state", DbType:="NVarChar(20)")>  _
	Public Property state() As String
		Get
			Return Me._state
		End Get
		Set
			If (String.Equals(Me._state, value) = false) Then
				Me.OnstateChanging(value)
				Me.SendPropertyChanging
				Me._state = value
				Me.SendPropertyChanged("state")
				Me.OnstateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_zipCode", DbType:="VarChar(10)")>  _
	Public Property zipCode() As String
		Get
			Return Me._zipCode
		End Get
		Set
			If (String.Equals(Me._zipCode, value) = false) Then
				Me.OnzipCodeChanging(value)
				Me.SendPropertyChanging
				Me._zipCode = value
				Me.SendPropertyChanged("zipCode")
				Me.OnzipCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_phone", DbType:="VarChar(50)")>  _
	Public Property phone() As String
		Get
			Return Me._phone
		End Get
		Set
			If (String.Equals(Me._phone, value) = false) Then
				Me.OnphoneChanging(value)
				Me.SendPropertyChanging
				Me._phone = value
				Me.SendPropertyChanged("phone")
				Me.OnphoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_website", DbType:="VarChar(256)")>  _
	Public Property website() As String
		Get
			Return Me._website
		End Get
		Set
			If (String.Equals(Me._website, value) = false) Then
				Me.OnwebsiteChanging(value)
				Me.SendPropertyChanging
				Me._website = value
				Me.SendPropertyChanged("website")
				Me.OnwebsiteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_facebook", DbType:="VarChar(256)")>  _
	Public Property facebook() As String
		Get
			Return Me._facebook
		End Get
		Set
			If (String.Equals(Me._facebook, value) = false) Then
				Me.OnfacebookChanging(value)
				Me.SendPropertyChanging
				Me._facebook = value
				Me.SendPropertyChanged("facebook")
				Me.OnfacebookChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_twitter", DbType:="VarChar(256)")>  _
	Public Property twitter() As String
		Get
			Return Me._twitter
		End Get
		Set
			If (String.Equals(Me._twitter, value) = false) Then
				Me.OntwitterChanging(value)
				Me.SendPropertyChanging
				Me._twitter = value
				Me.SendPropertyChanged("twitter")
				Me.OntwitterChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_yelp", DbType:="VarChar(256)")>  _
	Public Property yelp() As String
		Get
			Return Me._yelp
		End Get
		Set
			If (String.Equals(Me._yelp, value) = false) Then
				Me.OnyelpChanging(value)
				Me.SendPropertyChanging
				Me._yelp = value
				Me.SendPropertyChanged("yelp")
				Me.OnyelpChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="VarChar(256)")>  _
	Public Property supplierID() As String
		Get
			Return Me._supplierID
		End Get
		Set
			If (String.Equals(Me._supplierID, value) = false) Then
				Me.OnsupplierIDChanging(value)
				Me.SendPropertyChanging
				Me._supplierID = value
				Me.SendPropertyChanged("supplierID")
				Me.OnsupplierIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_distributorID", DbType:="VarChar(256)")>  _
	Public Property distributorID() As String
		Get
			Return Me._distributorID
		End Get
		Set
			If (String.Equals(Me._distributorID, value) = false) Then
				Me.OndistributorIDChanging(value)
				Me.SendPropertyChanging
				Me._distributorID = value
				Me.SendPropertyChanged("distributorID")
				Me.OndistributorIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_distributorName", DbType:="VarChar(256)")>  _
	Public Property distributorName() As String
		Get
			Return Me._distributorName
		End Get
		Set
			If (String.Equals(Me._distributorName, value) = false) Then
				Me.OndistributorNameChanging(value)
				Me.SendPropertyChanging
				Me._distributorName = value
				Me.SendPropertyChanged("distributorName")
				Me.OndistributorNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountTypeName", DbType:="VarChar(50)")>  _
	Public Property accountTypeName() As String
		Get
			Return Me._accountTypeName
		End Get
		Set
			If (String.Equals(Me._accountTypeName, value) = false) Then
				Me.OnaccountTypeNameChanging(value)
				Me.SendPropertyChanging
				Me._accountTypeName = value
				Me.SendPropertyChanged("accountTypeName")
				Me.OnaccountTypeNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="Int")>  _
	Public Property marketID() As System.Nullable(Of Integer)
		Get
			Return Me._marketID
		End Get
		Set
			If (Me._marketID.Equals(value) = false) Then
				Me.OnmarketIDChanging(value)
				Me.SendPropertyChanging
				Me._marketID = value
				Me.SendPropertyChanged("marketID")
				Me.OnmarketIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountTypeID", DbType:="Int")>  _
	Public Property accountTypeID() As System.Nullable(Of Integer)
		Get
			Return Me._accountTypeID
		End Get
		Set
			If (Me._accountTypeID.Equals(value) = false) Then
				Me.OnaccountTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._accountTypeID = value
				Me.SendPropertyChanged("accountTypeID")
				Me.OnaccountTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_capacity", DbType:="Int")>  _
	Public Property capacity() As System.Nullable(Of Integer)
		Get
			Return Me._capacity
		End Get
		Set
			If (Me._capacity.Equals(value) = false) Then
				Me.OncapacityChanging(value)
				Me.SendPropertyChanging
				Me._capacity = value
				Me.SendPropertyChanged("capacity")
				Me.OncapacityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_numberofBars", DbType:="Int")>  _
	Public Property numberofBars() As System.Nullable(Of Integer)
		Get
			Return Me._numberofBars
		End Get
		Set
			If (Me._numberofBars.Equals(value) = false) Then
				Me.OnnumberofBarsChanging(value)
				Me.SendPropertyChanging
				Me._numberofBars = value
				Me.SendPropertyChanged("numberofBars")
				Me.OnnumberofBarsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketName", DbType:="VarChar(256)")>  _
	Public Property marketName() As String
		Get
			Return Me._marketName
		End Get
		Set
			If (String.Equals(Me._marketName, value) = false) Then
				Me.OnmarketNameChanging(value)
				Me.SendPropertyChanging
				Me._marketName = value
				Me.SendPropertyChanged("marketName")
				Me.OnmarketNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_neighborhood", DbType:="VarChar(256)")>  _
	Public Property neighborhood() As String
		Get
			Return Me._neighborhood
		End Get
		Set
			If (String.Equals(Me._neighborhood, value) = false) Then
				Me.OnneighborhoodChanging(value)
				Me.SendPropertyChanging
				Me._neighborhood = value
				Me.SendPropertyChanged("neighborhood")
				Me.OnneighborhoodChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_traffic", DbType:="Int")>  _
	Public Property traffic() As System.Nullable(Of Integer)
		Get
			Return Me._traffic
		End Get
		Set
			If (Me._traffic.Equals(value) = false) Then
				Me.OntrafficChanging(value)
				Me.SendPropertyChanging
				Me._traffic = value
				Me.SendPropertyChanged("traffic")
				Me.OntrafficChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_permamentbars", DbType:="Int")>  _
	Public Property permamentbars() As System.Nullable(Of Integer)
		Get
			Return Me._permamentbars
		End Get
		Set
			If (Me._permamentbars.Equals(value) = false) Then
				Me.OnpermamentbarsChanging(value)
				Me.SendPropertyChanging
				Me._permamentbars = value
				Me.SendPropertyChanged("permamentbars")
				Me.OnpermamentbarsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_patioSeating", DbType:="Bit")>  _
	Public Property patioSeating() As System.Nullable(Of Boolean)
		Get
			Return Me._patioSeating
		End Get
		Set
			If (Me._patioSeating.Equals(value) = false) Then
				Me.OnpatioSeatingChanging(value)
				Me.SendPropertyChanging
				Me._patioSeating = value
				Me.SendPropertyChanged("patioSeating")
				Me.OnpatioSeatingChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_liveMusic", DbType:="Bit")>  _
	Public Property liveMusic() As System.Nullable(Of Boolean)
		Get
			Return Me._liveMusic
		End Get
		Set
			If (Me._liveMusic.Equals(value) = false) Then
				Me.OnliveMusicChanging(value)
				Me.SendPropertyChanging
				Me._liveMusic = value
				Me.SendPropertyChanged("liveMusic")
				Me.OnliveMusicChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_poolTables", DbType:="Bit")>  _
	Public Property poolTables() As System.Nullable(Of Boolean)
		Get
			Return Me._poolTables
		End Get
		Set
			If (Me._poolTables.Equals(value) = false) Then
				Me.OnpoolTablesChanging(value)
				Me.SendPropertyChanging
				Me._poolTables = value
				Me.SendPropertyChanged("poolTables")
				Me.OnpoolTablesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_darts", DbType:="Bit")>  _
	Public Property darts() As System.Nullable(Of Boolean)
		Get
			Return Me._darts
		End Get
		Set
			If (Me._darts.Equals(value) = false) Then
				Me.OndartsChanging(value)
				Me.SendPropertyChanging
				Me._darts = value
				Me.SendPropertyChanged("darts")
				Me.OndartsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_arcade", DbType:="Bit")>  _
	Public Property arcade() As System.Nullable(Of Boolean)
		Get
			Return Me._arcade
		End Get
		Set
			If (Me._arcade.Equals(value) = false) Then
				Me.OnarcadeChanging(value)
				Me.SendPropertyChanging
				Me._arcade = value
				Me.SendPropertyChanged("arcade")
				Me.OnarcadeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_otherGames", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property otherGames() As String
		Get
			Return Me._otherGames
		End Get
		Set
			If (String.Equals(Me._otherGames, value) = false) Then
				Me.OnotherGamesChanging(value)
				Me.SendPropertyChanging
				Me._otherGames = value
				Me.SendPropertyChanged("otherGames")
				Me.OnotherGamesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_latitude", DbType:="Float")>  _
	Public Property latitude() As System.Nullable(Of Double)
		Get
			Return Me._latitude
		End Get
		Set
			If (Me._latitude.Equals(value) = false) Then
				Me.OnlatitudeChanging(value)
				Me.SendPropertyChanging
				Me._latitude = value
				Me.SendPropertyChanged("latitude")
				Me.OnlatitudeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_longitude", DbType:="Float")>  _
	Public Property longitude() As System.Nullable(Of Double)
		Get
			Return Me._longitude
		End Get
		Set
			If (Me._longitude.Equals(value) = false) Then
				Me.OnlongitudeChanging(value)
				Me.SendPropertyChanging
				Me._longitude = value
				Me.SendPropertyChanged("longitude")
				Me.OnlongitudeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_notes", DbType:="NVarChar(MAX)")>  _
	Public Property notes() As String
		Get
			Return Me._notes
		End Get
		Set
			If (String.Equals(Me._notes, value) = false) Then
				Me.OnnotesChanging(value)
				Me.SendPropertyChanging
				Me._notes = value
				Me.SendPropertyChanged("notes")
				Me.OnnotesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_createdDate", DbType:="SmallDateTime")>  _
	Public Property createdDate() As System.Nullable(Of Date)
		Get
			Return Me._createdDate
		End Get
		Set
			If (Me._createdDate.Equals(value) = false) Then
				Me.OncreatedDateChanging(value)
				Me.SendPropertyChanging
				Me._createdDate = value
				Me.SendPropertyChanged("createdDate")
				Me.OncreatedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_modifiedDate", DbType:="SmallDateTime")>  _
	Public Property modifiedDate() As System.Nullable(Of Date)
		Get
			Return Me._modifiedDate
		End Get
		Set
			If (Me._modifiedDate.Equals(value) = false) Then
				Me.OnmodifiedDateChanging(value)
				Me.SendPropertyChanging
				Me._modifiedDate = value
				Me.SendPropertyChanged("modifiedDate")
				Me.OnmodifiedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_createdBy", DbType:="NVarChar(50)")>  _
	Public Property createdBy() As String
		Get
			Return Me._createdBy
		End Get
		Set
			If (String.Equals(Me._createdBy, value) = false) Then
				Me.OncreatedByChanging(value)
				Me.SendPropertyChanging
				Me._createdBy = value
				Me.SendPropertyChanged("createdBy")
				Me.OncreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_modifiedBy", DbType:="NVarChar(50)")>  _
	Public Property modifiedBy() As String
		Get
			Return Me._modifiedBy
		End Get
		Set
			If (String.Equals(Me._modifiedBy, value) = false) Then
				Me.OnmodifiedByChanging(value)
				Me.SendPropertyChanging
				Me._modifiedBy = value
				Me.SendPropertyChanged("modifiedBy")
				Me.OnmodifiedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_geoLocationUpdated", DbType:="Bit")>  _
	Public Property geoLocationUpdated() As System.Nullable(Of Boolean)
		Get
			Return Me._geoLocationUpdated
		End Get
		Set
			If (Me._geoLocationUpdated.Equals(value) = false) Then
				Me.OngeoLocationUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._geoLocationUpdated = value
				Me.SendPropertyChanged("geoLocationUpdated")
				Me.OngeoLocationUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_latitude_old", DbType:="Float")>  _
	Public Property latitude_old() As System.Nullable(Of Double)
		Get
			Return Me._latitude_old
		End Get
		Set
			If (Me._latitude_old.Equals(value) = false) Then
				Me.Onlatitude_oldChanging(value)
				Me.SendPropertyChanging
				Me._latitude_old = value
				Me.SendPropertyChanged("latitude_old")
				Me.Onlatitude_oldChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_longitude_old", DbType:="Float")>  _
	Public Property longitude_old() As System.Nullable(Of Double)
		Get
			Return Me._longitude_old
		End Get
		Set
			If (Me._longitude_old.Equals(value) = false) Then
				Me.Onlongitude_oldChanging(value)
				Me.SendPropertyChanging
				Me._longitude_old = value
				Me.SendPropertyChanged("longitude_old")
				Me.Onlongitude_oldChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblAccountActivity")>  _
Partial Public Class tblAccountActivity
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _accountActivityID As Integer
	
	Private _accountID As Integer
	
	Private _activityTypeID As System.Nullable(Of Integer)
	
	Private _activityType As String
	
	Private _status As String
	
	Private _activityDate As System.Nullable(Of Date)
	
	Private _visitType As String
	
	Private _visitGoal As String
	
	Private _followup As String
	
	Private _notes As String
	
	Private _visitContact As String
	
	Private _createdDate As System.Nullable(Of Date)
	
	Private _createdBy As String
	
	Private _modifiedDate As System.Nullable(Of Date)
	
	Private _modifiedBy As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnaccountActivityIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnaccountActivityIDChanged()
    End Sub
    Partial Private Sub OnaccountIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnaccountIDChanged()
    End Sub
    Partial Private Sub OnactivityTypeIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnactivityTypeIDChanged()
    End Sub
    Partial Private Sub OnactivityTypeChanging(value As String)
    End Sub
    Partial Private Sub OnactivityTypeChanged()
    End Sub
    Partial Private Sub OnstatusChanging(value As String)
    End Sub
    Partial Private Sub OnstatusChanged()
    End Sub
    Partial Private Sub OnactivityDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnactivityDateChanged()
    End Sub
    Partial Private Sub OnvisitTypeChanging(value As String)
    End Sub
    Partial Private Sub OnvisitTypeChanged()
    End Sub
    Partial Private Sub OnvisitGoalChanging(value As String)
    End Sub
    Partial Private Sub OnvisitGoalChanged()
    End Sub
    Partial Private Sub OnfollowupChanging(value As String)
    End Sub
    Partial Private Sub OnfollowupChanged()
    End Sub
    Partial Private Sub OnnotesChanging(value As String)
    End Sub
    Partial Private Sub OnnotesChanged()
    End Sub
    Partial Private Sub OnvisitContactChanging(value As String)
    End Sub
    Partial Private Sub OnvisitContactChanged()
    End Sub
    Partial Private Sub OncreatedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OncreatedDateChanged()
    End Sub
    Partial Private Sub OncreatedByChanging(value As String)
    End Sub
    Partial Private Sub OncreatedByChanged()
    End Sub
    Partial Private Sub OnmodifiedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnmodifiedDateChanged()
    End Sub
    Partial Private Sub OnmodifiedByChanging(value As String)
    End Sub
    Partial Private Sub OnmodifiedByChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountActivityID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property accountActivityID() As Integer
		Get
			Return Me._accountActivityID
		End Get
		Set
			If ((Me._accountActivityID = value)  _
						= false) Then
				Me.OnaccountActivityIDChanging(value)
				Me.SendPropertyChanging
				Me._accountActivityID = value
				Me.SendPropertyChanged("accountActivityID")
				Me.OnaccountActivityIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="Int NOT NULL")>  _
	Public Property accountID() As Integer
		Get
			Return Me._accountID
		End Get
		Set
			If ((Me._accountID = value)  _
						= false) Then
				Me.OnaccountIDChanging(value)
				Me.SendPropertyChanging
				Me._accountID = value
				Me.SendPropertyChanged("accountID")
				Me.OnaccountIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_activityTypeID", DbType:="Int")>  _
	Public Property activityTypeID() As System.Nullable(Of Integer)
		Get
			Return Me._activityTypeID
		End Get
		Set
			If (Me._activityTypeID.Equals(value) = false) Then
				Me.OnactivityTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._activityTypeID = value
				Me.SendPropertyChanged("activityTypeID")
				Me.OnactivityTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_activityType", DbType:="NVarChar(50)")>  _
	Public Property activityType() As String
		Get
			Return Me._activityType
		End Get
		Set
			If (String.Equals(Me._activityType, value) = false) Then
				Me.OnactivityTypeChanging(value)
				Me.SendPropertyChanging
				Me._activityType = value
				Me.SendPropertyChanged("activityType")
				Me.OnactivityTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", DbType:="NVarChar(50)")>  _
	Public Property status() As String
		Get
			Return Me._status
		End Get
		Set
			If (String.Equals(Me._status, value) = false) Then
				Me.OnstatusChanging(value)
				Me.SendPropertyChanging
				Me._status = value
				Me.SendPropertyChanged("status")
				Me.OnstatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_activityDate", DbType:="SmallDateTime")>  _
	Public Property activityDate() As System.Nullable(Of Date)
		Get
			Return Me._activityDate
		End Get
		Set
			If (Me._activityDate.Equals(value) = false) Then
				Me.OnactivityDateChanging(value)
				Me.SendPropertyChanging
				Me._activityDate = value
				Me.SendPropertyChanged("activityDate")
				Me.OnactivityDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_visitType", DbType:="NVarChar(50)")>  _
	Public Property visitType() As String
		Get
			Return Me._visitType
		End Get
		Set
			If (String.Equals(Me._visitType, value) = false) Then
				Me.OnvisitTypeChanging(value)
				Me.SendPropertyChanging
				Me._visitType = value
				Me.SendPropertyChanged("visitType")
				Me.OnvisitTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_visitGoal", DbType:="NVarChar(50)")>  _
	Public Property visitGoal() As String
		Get
			Return Me._visitGoal
		End Get
		Set
			If (String.Equals(Me._visitGoal, value) = false) Then
				Me.OnvisitGoalChanging(value)
				Me.SendPropertyChanging
				Me._visitGoal = value
				Me.SendPropertyChanged("visitGoal")
				Me.OnvisitGoalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_followup", DbType:="NVarChar(50)")>  _
	Public Property followup() As String
		Get
			Return Me._followup
		End Get
		Set
			If (String.Equals(Me._followup, value) = false) Then
				Me.OnfollowupChanging(value)
				Me.SendPropertyChanging
				Me._followup = value
				Me.SendPropertyChanged("followup")
				Me.OnfollowupChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_notes", DbType:="NVarChar(MAX)")>  _
	Public Property notes() As String
		Get
			Return Me._notes
		End Get
		Set
			If (String.Equals(Me._notes, value) = false) Then
				Me.OnnotesChanging(value)
				Me.SendPropertyChanging
				Me._notes = value
				Me.SendPropertyChanged("notes")
				Me.OnnotesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_visitContact", DbType:="NVarChar(50)")>  _
	Public Property visitContact() As String
		Get
			Return Me._visitContact
		End Get
		Set
			If (String.Equals(Me._visitContact, value) = false) Then
				Me.OnvisitContactChanging(value)
				Me.SendPropertyChanging
				Me._visitContact = value
				Me.SendPropertyChanged("visitContact")
				Me.OnvisitContactChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_createdDate", DbType:="SmallDateTime")>  _
	Public Property createdDate() As System.Nullable(Of Date)
		Get
			Return Me._createdDate
		End Get
		Set
			If (Me._createdDate.Equals(value) = false) Then
				Me.OncreatedDateChanging(value)
				Me.SendPropertyChanging
				Me._createdDate = value
				Me.SendPropertyChanged("createdDate")
				Me.OncreatedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_createdBy", DbType:="NVarChar(50)")>  _
	Public Property createdBy() As String
		Get
			Return Me._createdBy
		End Get
		Set
			If (String.Equals(Me._createdBy, value) = false) Then
				Me.OncreatedByChanging(value)
				Me.SendPropertyChanging
				Me._createdBy = value
				Me.SendPropertyChanged("createdBy")
				Me.OncreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_modifiedDate", DbType:="SmallDateTime")>  _
	Public Property modifiedDate() As System.Nullable(Of Date)
		Get
			Return Me._modifiedDate
		End Get
		Set
			If (Me._modifiedDate.Equals(value) = false) Then
				Me.OnmodifiedDateChanging(value)
				Me.SendPropertyChanging
				Me._modifiedDate = value
				Me.SendPropertyChanged("modifiedDate")
				Me.OnmodifiedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_modifiedBy", DbType:="NVarChar(50)")>  _
	Public Property modifiedBy() As String
		Get
			Return Me._modifiedBy
		End Get
		Set
			If (String.Equals(Me._modifiedBy, value) = false) Then
				Me.OnmodifiedByChanging(value)
				Me.SendPropertyChanging
				Me._modifiedBy = value
				Me.SendPropertyChanged("modifiedBy")
				Me.OnmodifiedByChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblAccountActivityPhoto")>  _
Partial Public Class tblAccountActivityPhoto
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _photoID As Integer
	
	Private _photoTitle As String
	
	Private _fileName As String
	
	Private _photoDescription As String
	
	Private _Image As System.Data.Linq.Binary
	
	Private _ThumbImage As System.Data.Linq.Binary
	
	Private _SmallImage As System.Data.Linq.Binary
	
	Private _LargeImage As System.Data.Linq.Binary
	
	Private _accountID As System.Nullable(Of Integer)
	
	Private _activityID As System.Nullable(Of Integer)
	
	Private _keywords As String
	
	Private _tag As String
	
	Private _dateUploaded As System.Nullable(Of Date)
	
	Private _uploadedBy As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnphotoIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnphotoIDChanged()
    End Sub
    Partial Private Sub OnphotoTitleChanging(value As String)
    End Sub
    Partial Private Sub OnphotoTitleChanged()
    End Sub
    Partial Private Sub OnfileNameChanging(value As String)
    End Sub
    Partial Private Sub OnfileNameChanged()
    End Sub
    Partial Private Sub OnphotoDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnphotoDescriptionChanged()
    End Sub
    Partial Private Sub OnImageChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnImageChanged()
    End Sub
    Partial Private Sub OnThumbImageChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnThumbImageChanged()
    End Sub
    Partial Private Sub OnSmallImageChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnSmallImageChanged()
    End Sub
    Partial Private Sub OnLargeImageChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnLargeImageChanged()
    End Sub
    Partial Private Sub OnaccountIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnaccountIDChanged()
    End Sub
    Partial Private Sub OnactivityIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnactivityIDChanged()
    End Sub
    Partial Private Sub OnkeywordsChanging(value As String)
    End Sub
    Partial Private Sub OnkeywordsChanged()
    End Sub
    Partial Private Sub OntagChanging(value As String)
    End Sub
    Partial Private Sub OntagChanged()
    End Sub
    Partial Private Sub OndateUploadedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OndateUploadedChanged()
    End Sub
    Partial Private Sub OnuploadedByChanging(value As String)
    End Sub
    Partial Private Sub OnuploadedByChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_photoID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property photoID() As Integer
		Get
			Return Me._photoID
		End Get
		Set
			If ((Me._photoID = value)  _
						= false) Then
				Me.OnphotoIDChanging(value)
				Me.SendPropertyChanging
				Me._photoID = value
				Me.SendPropertyChanged("photoID")
				Me.OnphotoIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_photoTitle", DbType:="VarChar(255)")>  _
	Public Property photoTitle() As String
		Get
			Return Me._photoTitle
		End Get
		Set
			If (String.Equals(Me._photoTitle, value) = false) Then
				Me.OnphotoTitleChanging(value)
				Me.SendPropertyChanging
				Me._photoTitle = value
				Me.SendPropertyChanged("photoTitle")
				Me.OnphotoTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fileName", DbType:="VarChar(255)")>  _
	Public Property fileName() As String
		Get
			Return Me._fileName
		End Get
		Set
			If (String.Equals(Me._fileName, value) = false) Then
				Me.OnfileNameChanging(value)
				Me.SendPropertyChanging
				Me._fileName = value
				Me.SendPropertyChanged("fileName")
				Me.OnfileNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_photoDescription", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property photoDescription() As String
		Get
			Return Me._photoDescription
		End Get
		Set
			If (String.Equals(Me._photoDescription, value) = false) Then
				Me.OnphotoDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._photoDescription = value
				Me.SendPropertyChanged("photoDescription")
				Me.OnphotoDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Image", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Image() As System.Data.Linq.Binary
		Get
			Return Me._Image
		End Get
		Set
			If (Object.Equals(Me._Image, value) = false) Then
				Me.OnImageChanging(value)
				Me.SendPropertyChanging
				Me._Image = value
				Me.SendPropertyChanged("Image")
				Me.OnImageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ThumbImage", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ThumbImage() As System.Data.Linq.Binary
		Get
			Return Me._ThumbImage
		End Get
		Set
			If (Object.Equals(Me._ThumbImage, value) = false) Then
				Me.OnThumbImageChanging(value)
				Me.SendPropertyChanging
				Me._ThumbImage = value
				Me.SendPropertyChanged("ThumbImage")
				Me.OnThumbImageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SmallImage", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property SmallImage() As System.Data.Linq.Binary
		Get
			Return Me._SmallImage
		End Get
		Set
			If (Object.Equals(Me._SmallImage, value) = false) Then
				Me.OnSmallImageChanging(value)
				Me.SendPropertyChanging
				Me._SmallImage = value
				Me.SendPropertyChanged("SmallImage")
				Me.OnSmallImageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LargeImage", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property LargeImage() As System.Data.Linq.Binary
		Get
			Return Me._LargeImage
		End Get
		Set
			If (Object.Equals(Me._LargeImage, value) = false) Then
				Me.OnLargeImageChanging(value)
				Me.SendPropertyChanging
				Me._LargeImage = value
				Me.SendPropertyChanged("LargeImage")
				Me.OnLargeImageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="Int")>  _
	Public Property accountID() As System.Nullable(Of Integer)
		Get
			Return Me._accountID
		End Get
		Set
			If (Me._accountID.Equals(value) = false) Then
				Me.OnaccountIDChanging(value)
				Me.SendPropertyChanging
				Me._accountID = value
				Me.SendPropertyChanged("accountID")
				Me.OnaccountIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_activityID", DbType:="Int")>  _
	Public Property activityID() As System.Nullable(Of Integer)
		Get
			Return Me._activityID
		End Get
		Set
			If (Me._activityID.Equals(value) = false) Then
				Me.OnactivityIDChanging(value)
				Me.SendPropertyChanging
				Me._activityID = value
				Me.SendPropertyChanged("activityID")
				Me.OnactivityIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_keywords", DbType:="VarChar(1000)")>  _
	Public Property keywords() As String
		Get
			Return Me._keywords
		End Get
		Set
			If (String.Equals(Me._keywords, value) = false) Then
				Me.OnkeywordsChanging(value)
				Me.SendPropertyChanging
				Me._keywords = value
				Me.SendPropertyChanged("keywords")
				Me.OnkeywordsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tag", DbType:="VarChar(500)")>  _
	Public Property tag() As String
		Get
			Return Me._tag
		End Get
		Set
			If (String.Equals(Me._tag, value) = false) Then
				Me.OntagChanging(value)
				Me.SendPropertyChanging
				Me._tag = value
				Me.SendPropertyChanged("tag")
				Me.OntagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateUploaded", DbType:="SmallDateTime")>  _
	Public Property dateUploaded() As System.Nullable(Of Date)
		Get
			Return Me._dateUploaded
		End Get
		Set
			If (Me._dateUploaded.Equals(value) = false) Then
				Me.OndateUploadedChanging(value)
				Me.SendPropertyChanging
				Me._dateUploaded = value
				Me.SendPropertyChanged("dateUploaded")
				Me.OndateUploadedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_uploadedBy", DbType:="VarChar(50)")>  _
	Public Property uploadedBy() As String
		Get
			Return Me._uploadedBy
		End Get
		Set
			If (String.Equals(Me._uploadedBy, value) = false) Then
				Me.OnuploadedByChanging(value)
				Me.SendPropertyChanging
				Me._uploadedBy = value
				Me.SendPropertyChanged("uploadedBy")
				Me.OnuploadedByChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblAccountActivityResults")>  _
Partial Public Class tblAccountActivityResult
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _accountActivityResultsID As String
	
	Private _accountActivityID As System.Nullable(Of Integer)
	
	Private _fieldID As System.Nullable(Of Integer)
	
	Private _question As String
	
	Private _answer As String
	
	Private _order As System.Nullable(Of Integer)
	
	Private _fieldType As String
	
	Private _rows As System.Nullable(Of Integer)
	
	Private _options As String
	
	Private _displayOptions As String
	
	Private _description As String
	
	Private _yes_noDefaultValue As String
	
	Private _numberDecimalPlace As System.Nullable(Of Integer)
	
	Private _numberDefaultValue As String
	
	Private _showPercentage As System.Nullable(Of Boolean)
	
	Private _dateFormat As String
	
	Private _dateDefaultValue As String
	
	Private _timeFormat As String
	
	Private _dateDisplay As String
	
	Private _selectedDateVaule As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnaccountActivityResultsIDChanging(value As String)
    End Sub
    Partial Private Sub OnaccountActivityResultsIDChanged()
    End Sub
    Partial Private Sub OnaccountActivityIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnaccountActivityIDChanged()
    End Sub
    Partial Private Sub OnfieldIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnfieldIDChanged()
    End Sub
    Partial Private Sub OnquestionChanging(value As String)
    End Sub
    Partial Private Sub OnquestionChanged()
    End Sub
    Partial Private Sub OnanswerChanging(value As String)
    End Sub
    Partial Private Sub OnanswerChanged()
    End Sub
    Partial Private Sub OnorderChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnorderChanged()
    End Sub
    Partial Private Sub OnfieldTypeChanging(value As String)
    End Sub
    Partial Private Sub OnfieldTypeChanged()
    End Sub
    Partial Private Sub OnrowsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnrowsChanged()
    End Sub
    Partial Private Sub OnoptionsChanging(value As String)
    End Sub
    Partial Private Sub OnoptionsChanged()
    End Sub
    Partial Private Sub OndisplayOptionsChanging(value As String)
    End Sub
    Partial Private Sub OndisplayOptionsChanged()
    End Sub
    Partial Private Sub OndescriptionChanging(value As String)
    End Sub
    Partial Private Sub OndescriptionChanged()
    End Sub
    Partial Private Sub Onyes_noDefaultValueChanging(value As String)
    End Sub
    Partial Private Sub Onyes_noDefaultValueChanged()
    End Sub
    Partial Private Sub OnnumberDecimalPlaceChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnnumberDecimalPlaceChanged()
    End Sub
    Partial Private Sub OnnumberDefaultValueChanging(value As String)
    End Sub
    Partial Private Sub OnnumberDefaultValueChanged()
    End Sub
    Partial Private Sub OnshowPercentageChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnshowPercentageChanged()
    End Sub
    Partial Private Sub OndateFormatChanging(value As String)
    End Sub
    Partial Private Sub OndateFormatChanged()
    End Sub
    Partial Private Sub OndateDefaultValueChanging(value As String)
    End Sub
    Partial Private Sub OndateDefaultValueChanged()
    End Sub
    Partial Private Sub OntimeFormatChanging(value As String)
    End Sub
    Partial Private Sub OntimeFormatChanged()
    End Sub
    Partial Private Sub OndateDisplayChanging(value As String)
    End Sub
    Partial Private Sub OndateDisplayChanged()
    End Sub
    Partial Private Sub OnselectedDateVauleChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnselectedDateVauleChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountActivityResultsID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property accountActivityResultsID() As String
		Get
			Return Me._accountActivityResultsID
		End Get
		Set
			If (String.Equals(Me._accountActivityResultsID, value) = false) Then
				Me.OnaccountActivityResultsIDChanging(value)
				Me.SendPropertyChanging
				Me._accountActivityResultsID = value
				Me.SendPropertyChanged("accountActivityResultsID")
				Me.OnaccountActivityResultsIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountActivityID", DbType:="Int")>  _
	Public Property accountActivityID() As System.Nullable(Of Integer)
		Get
			Return Me._accountActivityID
		End Get
		Set
			If (Me._accountActivityID.Equals(value) = false) Then
				Me.OnaccountActivityIDChanging(value)
				Me.SendPropertyChanging
				Me._accountActivityID = value
				Me.SendPropertyChanged("accountActivityID")
				Me.OnaccountActivityIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fieldID", DbType:="Int")>  _
	Public Property fieldID() As System.Nullable(Of Integer)
		Get
			Return Me._fieldID
		End Get
		Set
			If (Me._fieldID.Equals(value) = false) Then
				Me.OnfieldIDChanging(value)
				Me.SendPropertyChanging
				Me._fieldID = value
				Me.SendPropertyChanged("fieldID")
				Me.OnfieldIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_question", DbType:="VarChar(256)")>  _
	Public Property question() As String
		Get
			Return Me._question
		End Get
		Set
			If (String.Equals(Me._question, value) = false) Then
				Me.OnquestionChanging(value)
				Me.SendPropertyChanging
				Me._question = value
				Me.SendPropertyChanged("question")
				Me.OnquestionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_answer", DbType:="VarChar(MAX)")>  _
	Public Property answer() As String
		Get
			Return Me._answer
		End Get
		Set
			If (String.Equals(Me._answer, value) = false) Then
				Me.OnanswerChanging(value)
				Me.SendPropertyChanging
				Me._answer = value
				Me.SendPropertyChanged("answer")
				Me.OnanswerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_order", DbType:="Int")>  _
	Public Property [order]() As System.Nullable(Of Integer)
		Get
			Return Me._order
		End Get
		Set
			If (Me._order.Equals(value) = false) Then
				Me.OnorderChanging(value)
				Me.SendPropertyChanging
				Me._order = value
				Me.SendPropertyChanged("[order]")
				Me.OnorderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fieldType", DbType:="VarChar(50)")>  _
	Public Property fieldType() As String
		Get
			Return Me._fieldType
		End Get
		Set
			If (String.Equals(Me._fieldType, value) = false) Then
				Me.OnfieldTypeChanging(value)
				Me.SendPropertyChanging
				Me._fieldType = value
				Me.SendPropertyChanged("fieldType")
				Me.OnfieldTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rows", DbType:="Int")>  _
	Public Property rows() As System.Nullable(Of Integer)
		Get
			Return Me._rows
		End Get
		Set
			If (Me._rows.Equals(value) = false) Then
				Me.OnrowsChanging(value)
				Me.SendPropertyChanging
				Me._rows = value
				Me.SendPropertyChanged("rows")
				Me.OnrowsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_options", DbType:="VarChar(50)")>  _
	Public Property options() As String
		Get
			Return Me._options
		End Get
		Set
			If (String.Equals(Me._options, value) = false) Then
				Me.OnoptionsChanging(value)
				Me.SendPropertyChanging
				Me._options = value
				Me.SendPropertyChanged("options")
				Me.OnoptionsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_displayOptions", DbType:="NVarChar(50)")>  _
	Public Property displayOptions() As String
		Get
			Return Me._displayOptions
		End Get
		Set
			If (String.Equals(Me._displayOptions, value) = false) Then
				Me.OndisplayOptionsChanging(value)
				Me.SendPropertyChanging
				Me._displayOptions = value
				Me.SendPropertyChanged("displayOptions")
				Me.OndisplayOptionsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_description", DbType:="NVarChar(2000)")>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me.OndescriptionChanging(value)
				Me.SendPropertyChanging
				Me._description = value
				Me.SendPropertyChanged("description")
				Me.OndescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[yes/noDefaultValue]", Storage:="_yes_noDefaultValue", DbType:="NVarChar(50)")>  _
	Public Property yes_noDefaultValue() As String
		Get
			Return Me._yes_noDefaultValue
		End Get
		Set
			If (String.Equals(Me._yes_noDefaultValue, value) = false) Then
				Me.Onyes_noDefaultValueChanging(value)
				Me.SendPropertyChanging
				Me._yes_noDefaultValue = value
				Me.SendPropertyChanged("yes_noDefaultValue")
				Me.Onyes_noDefaultValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_numberDecimalPlace", DbType:="Int")>  _
	Public Property numberDecimalPlace() As System.Nullable(Of Integer)
		Get
			Return Me._numberDecimalPlace
		End Get
		Set
			If (Me._numberDecimalPlace.Equals(value) = false) Then
				Me.OnnumberDecimalPlaceChanging(value)
				Me.SendPropertyChanging
				Me._numberDecimalPlace = value
				Me.SendPropertyChanged("numberDecimalPlace")
				Me.OnnumberDecimalPlaceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_numberDefaultValue", DbType:="VarChar(50)")>  _
	Public Property numberDefaultValue() As String
		Get
			Return Me._numberDefaultValue
		End Get
		Set
			If (String.Equals(Me._numberDefaultValue, value) = false) Then
				Me.OnnumberDefaultValueChanging(value)
				Me.SendPropertyChanging
				Me._numberDefaultValue = value
				Me.SendPropertyChanged("numberDefaultValue")
				Me.OnnumberDefaultValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_showPercentage", DbType:="Bit")>  _
	Public Property showPercentage() As System.Nullable(Of Boolean)
		Get
			Return Me._showPercentage
		End Get
		Set
			If (Me._showPercentage.Equals(value) = false) Then
				Me.OnshowPercentageChanging(value)
				Me.SendPropertyChanging
				Me._showPercentage = value
				Me.SendPropertyChanged("showPercentage")
				Me.OnshowPercentageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateFormat", DbType:="NVarChar(50)")>  _
	Public Property dateFormat() As String
		Get
			Return Me._dateFormat
		End Get
		Set
			If (String.Equals(Me._dateFormat, value) = false) Then
				Me.OndateFormatChanging(value)
				Me.SendPropertyChanging
				Me._dateFormat = value
				Me.SendPropertyChanged("dateFormat")
				Me.OndateFormatChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateDefaultValue", DbType:="NVarChar(50)")>  _
	Public Property dateDefaultValue() As String
		Get
			Return Me._dateDefaultValue
		End Get
		Set
			If (String.Equals(Me._dateDefaultValue, value) = false) Then
				Me.OndateDefaultValueChanging(value)
				Me.SendPropertyChanging
				Me._dateDefaultValue = value
				Me.SendPropertyChanged("dateDefaultValue")
				Me.OndateDefaultValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_timeFormat", DbType:="NVarChar(50)")>  _
	Public Property timeFormat() As String
		Get
			Return Me._timeFormat
		End Get
		Set
			If (String.Equals(Me._timeFormat, value) = false) Then
				Me.OntimeFormatChanging(value)
				Me.SendPropertyChanging
				Me._timeFormat = value
				Me.SendPropertyChanged("timeFormat")
				Me.OntimeFormatChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateDisplay", DbType:="NVarChar(50)")>  _
	Public Property dateDisplay() As String
		Get
			Return Me._dateDisplay
		End Get
		Set
			If (String.Equals(Me._dateDisplay, value) = false) Then
				Me.OndateDisplayChanging(value)
				Me.SendPropertyChanging
				Me._dateDisplay = value
				Me.SendPropertyChanged("dateDisplay")
				Me.OndateDisplayChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_selectedDateVaule", DbType:="SmallDateTime")>  _
	Public Property selectedDateVaule() As System.Nullable(Of Date)
		Get
			Return Me._selectedDateVaule
		End Get
		Set
			If (Me._selectedDateVaule.Equals(value) = false) Then
				Me.OnselectedDateVauleChanging(value)
				Me.SendPropertyChanging
				Me._selectedDateVaule = value
				Me.SendPropertyChanged("selectedDateVaule")
				Me.OnselectedDateVauleChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblAccountBrandTracker")>  _
Partial Public Class tblAccountBrandTracker
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _accountBrandTrackerID As Integer
	
	Private _accountID As Integer
	
	Private _brandID As Integer
	
	Private _firstvisit_cocktailList As System.Nullable(Of Boolean)
	
	Private _firstvisit_shotList As System.Nullable(Of Boolean)
	
	Private _firstvisit_menus As System.Nullable(Of Boolean)
	
	Private _firstvisit_tableTent As System.Nullable(Of Boolean)
	
	Private _firstvisit_chalkboard As System.Nullable(Of Boolean)
	
	Private _firstvisit_well As System.Nullable(Of Boolean)
	
	Private _firstvisit_backBar As System.Nullable(Of Boolean)
	
	Private _currently_cocktailList As System.Nullable(Of Boolean)
	
	Private _currently_shotList As System.Nullable(Of Boolean)
	
	Private _currently_menus As System.Nullable(Of Boolean)
	
	Private _currently_tableTent As System.Nullable(Of Boolean)
	
	Private _currently_chalkboard As System.Nullable(Of Boolean)
	
	Private _currently_well As System.Nullable(Of Boolean)
	
	Private _currently_backBar As System.Nullable(Of Boolean)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnaccountBrandTrackerIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnaccountBrandTrackerIDChanged()
    End Sub
    Partial Private Sub OnaccountIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnaccountIDChanged()
    End Sub
    Partial Private Sub OnbrandIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnbrandIDChanged()
    End Sub
    Partial Private Sub Onfirstvisit_cocktailListChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub Onfirstvisit_cocktailListChanged()
    End Sub
    Partial Private Sub Onfirstvisit_shotListChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub Onfirstvisit_shotListChanged()
    End Sub
    Partial Private Sub Onfirstvisit_menusChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub Onfirstvisit_menusChanged()
    End Sub
    Partial Private Sub Onfirstvisit_tableTentChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub Onfirstvisit_tableTentChanged()
    End Sub
    Partial Private Sub Onfirstvisit_chalkboardChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub Onfirstvisit_chalkboardChanged()
    End Sub
    Partial Private Sub Onfirstvisit_wellChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub Onfirstvisit_wellChanged()
    End Sub
    Partial Private Sub Onfirstvisit_backBarChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub Onfirstvisit_backBarChanged()
    End Sub
    Partial Private Sub Oncurrently_cocktailListChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub Oncurrently_cocktailListChanged()
    End Sub
    Partial Private Sub Oncurrently_shotListChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub Oncurrently_shotListChanged()
    End Sub
    Partial Private Sub Oncurrently_menusChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub Oncurrently_menusChanged()
    End Sub
    Partial Private Sub Oncurrently_tableTentChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub Oncurrently_tableTentChanged()
    End Sub
    Partial Private Sub Oncurrently_chalkboardChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub Oncurrently_chalkboardChanged()
    End Sub
    Partial Private Sub Oncurrently_wellChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub Oncurrently_wellChanged()
    End Sub
    Partial Private Sub Oncurrently_backBarChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub Oncurrently_backBarChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountBrandTrackerID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property accountBrandTrackerID() As Integer
		Get
			Return Me._accountBrandTrackerID
		End Get
		Set
			If ((Me._accountBrandTrackerID = value)  _
						= false) Then
				Me.OnaccountBrandTrackerIDChanging(value)
				Me.SendPropertyChanging
				Me._accountBrandTrackerID = value
				Me.SendPropertyChanged("accountBrandTrackerID")
				Me.OnaccountBrandTrackerIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="Int NOT NULL")>  _
	Public Property accountID() As Integer
		Get
			Return Me._accountID
		End Get
		Set
			If ((Me._accountID = value)  _
						= false) Then
				Me.OnaccountIDChanging(value)
				Me.SendPropertyChanging
				Me._accountID = value
				Me.SendPropertyChanged("accountID")
				Me.OnaccountIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandID", DbType:="Int NOT NULL")>  _
	Public Property brandID() As Integer
		Get
			Return Me._brandID
		End Get
		Set
			If ((Me._brandID = value)  _
						= false) Then
				Me.OnbrandIDChanging(value)
				Me.SendPropertyChanging
				Me._brandID = value
				Me.SendPropertyChanged("brandID")
				Me.OnbrandIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_firstvisit_cocktailList", DbType:="Bit")>  _
	Public Property firstvisit_cocktailList() As System.Nullable(Of Boolean)
		Get
			Return Me._firstvisit_cocktailList
		End Get
		Set
			If (Me._firstvisit_cocktailList.Equals(value) = false) Then
				Me.Onfirstvisit_cocktailListChanging(value)
				Me.SendPropertyChanging
				Me._firstvisit_cocktailList = value
				Me.SendPropertyChanged("firstvisit_cocktailList")
				Me.Onfirstvisit_cocktailListChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_firstvisit_shotList", DbType:="Bit")>  _
	Public Property firstvisit_shotList() As System.Nullable(Of Boolean)
		Get
			Return Me._firstvisit_shotList
		End Get
		Set
			If (Me._firstvisit_shotList.Equals(value) = false) Then
				Me.Onfirstvisit_shotListChanging(value)
				Me.SendPropertyChanging
				Me._firstvisit_shotList = value
				Me.SendPropertyChanged("firstvisit_shotList")
				Me.Onfirstvisit_shotListChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_firstvisit_menus", DbType:="Bit")>  _
	Public Property firstvisit_menus() As System.Nullable(Of Boolean)
		Get
			Return Me._firstvisit_menus
		End Get
		Set
			If (Me._firstvisit_menus.Equals(value) = false) Then
				Me.Onfirstvisit_menusChanging(value)
				Me.SendPropertyChanging
				Me._firstvisit_menus = value
				Me.SendPropertyChanged("firstvisit_menus")
				Me.Onfirstvisit_menusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_firstvisit_tableTent", DbType:="Bit")>  _
	Public Property firstvisit_tableTent() As System.Nullable(Of Boolean)
		Get
			Return Me._firstvisit_tableTent
		End Get
		Set
			If (Me._firstvisit_tableTent.Equals(value) = false) Then
				Me.Onfirstvisit_tableTentChanging(value)
				Me.SendPropertyChanging
				Me._firstvisit_tableTent = value
				Me.SendPropertyChanged("firstvisit_tableTent")
				Me.Onfirstvisit_tableTentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_firstvisit_chalkboard", DbType:="Bit")>  _
	Public Property firstvisit_chalkboard() As System.Nullable(Of Boolean)
		Get
			Return Me._firstvisit_chalkboard
		End Get
		Set
			If (Me._firstvisit_chalkboard.Equals(value) = false) Then
				Me.Onfirstvisit_chalkboardChanging(value)
				Me.SendPropertyChanging
				Me._firstvisit_chalkboard = value
				Me.SendPropertyChanged("firstvisit_chalkboard")
				Me.Onfirstvisit_chalkboardChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_firstvisit_well", DbType:="Bit")>  _
	Public Property firstvisit_well() As System.Nullable(Of Boolean)
		Get
			Return Me._firstvisit_well
		End Get
		Set
			If (Me._firstvisit_well.Equals(value) = false) Then
				Me.Onfirstvisit_wellChanging(value)
				Me.SendPropertyChanging
				Me._firstvisit_well = value
				Me.SendPropertyChanged("firstvisit_well")
				Me.Onfirstvisit_wellChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_firstvisit_backBar", DbType:="Bit")>  _
	Public Property firstvisit_backBar() As System.Nullable(Of Boolean)
		Get
			Return Me._firstvisit_backBar
		End Get
		Set
			If (Me._firstvisit_backBar.Equals(value) = false) Then
				Me.Onfirstvisit_backBarChanging(value)
				Me.SendPropertyChanging
				Me._firstvisit_backBar = value
				Me.SendPropertyChanged("firstvisit_backBar")
				Me.Onfirstvisit_backBarChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_currently_cocktailList", DbType:="Bit")>  _
	Public Property currently_cocktailList() As System.Nullable(Of Boolean)
		Get
			Return Me._currently_cocktailList
		End Get
		Set
			If (Me._currently_cocktailList.Equals(value) = false) Then
				Me.Oncurrently_cocktailListChanging(value)
				Me.SendPropertyChanging
				Me._currently_cocktailList = value
				Me.SendPropertyChanged("currently_cocktailList")
				Me.Oncurrently_cocktailListChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_currently_shotList", DbType:="Bit")>  _
	Public Property currently_shotList() As System.Nullable(Of Boolean)
		Get
			Return Me._currently_shotList
		End Get
		Set
			If (Me._currently_shotList.Equals(value) = false) Then
				Me.Oncurrently_shotListChanging(value)
				Me.SendPropertyChanging
				Me._currently_shotList = value
				Me.SendPropertyChanged("currently_shotList")
				Me.Oncurrently_shotListChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_currently_menus", DbType:="Bit")>  _
	Public Property currently_menus() As System.Nullable(Of Boolean)
		Get
			Return Me._currently_menus
		End Get
		Set
			If (Me._currently_menus.Equals(value) = false) Then
				Me.Oncurrently_menusChanging(value)
				Me.SendPropertyChanging
				Me._currently_menus = value
				Me.SendPropertyChanged("currently_menus")
				Me.Oncurrently_menusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_currently_tableTent", DbType:="Bit")>  _
	Public Property currently_tableTent() As System.Nullable(Of Boolean)
		Get
			Return Me._currently_tableTent
		End Get
		Set
			If (Me._currently_tableTent.Equals(value) = false) Then
				Me.Oncurrently_tableTentChanging(value)
				Me.SendPropertyChanging
				Me._currently_tableTent = value
				Me.SendPropertyChanged("currently_tableTent")
				Me.Oncurrently_tableTentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_currently_chalkboard", DbType:="Bit")>  _
	Public Property currently_chalkboard() As System.Nullable(Of Boolean)
		Get
			Return Me._currently_chalkboard
		End Get
		Set
			If (Me._currently_chalkboard.Equals(value) = false) Then
				Me.Oncurrently_chalkboardChanging(value)
				Me.SendPropertyChanging
				Me._currently_chalkboard = value
				Me.SendPropertyChanged("currently_chalkboard")
				Me.Oncurrently_chalkboardChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_currently_well", DbType:="Bit")>  _
	Public Property currently_well() As System.Nullable(Of Boolean)
		Get
			Return Me._currently_well
		End Get
		Set
			If (Me._currently_well.Equals(value) = false) Then
				Me.Oncurrently_wellChanging(value)
				Me.SendPropertyChanging
				Me._currently_well = value
				Me.SendPropertyChanged("currently_well")
				Me.Oncurrently_wellChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_currently_backBar", DbType:="Bit")>  _
	Public Property currently_backBar() As System.Nullable(Of Boolean)
		Get
			Return Me._currently_backBar
		End Get
		Set
			If (Me._currently_backBar.Equals(value) = false) Then
				Me.Oncurrently_backBarChanging(value)
				Me.SendPropertyChanging
				Me._currently_backBar = value
				Me.SendPropertyChanged("currently_backBar")
				Me.Oncurrently_backBarChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblAccountContact")>  _
Partial Public Class tblAccountContact
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _accountContactID As Integer
	
	Private _accountID As Integer
	
	Private _title As String
	
	Private _contactName As String
	
	Private _contactPhone As String
	
	Private _contactEmail As String
	
	Private _dob As String
	
	Private _dateCreated As System.Nullable(Of Date)
	
	Private _createdBy As String
	
	Private _dateModified As System.Nullable(Of Date)
	
	Private _modifiedBy As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnaccountContactIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnaccountContactIDChanged()
    End Sub
    Partial Private Sub OnaccountIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnaccountIDChanged()
    End Sub
    Partial Private Sub OntitleChanging(value As String)
    End Sub
    Partial Private Sub OntitleChanged()
    End Sub
    Partial Private Sub OncontactNameChanging(value As String)
    End Sub
    Partial Private Sub OncontactNameChanged()
    End Sub
    Partial Private Sub OncontactPhoneChanging(value As String)
    End Sub
    Partial Private Sub OncontactPhoneChanged()
    End Sub
    Partial Private Sub OncontactEmailChanging(value As String)
    End Sub
    Partial Private Sub OncontactEmailChanged()
    End Sub
    Partial Private Sub OndobChanging(value As String)
    End Sub
    Partial Private Sub OndobChanged()
    End Sub
    Partial Private Sub OndateCreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OndateCreatedChanged()
    End Sub
    Partial Private Sub OncreatedByChanging(value As String)
    End Sub
    Partial Private Sub OncreatedByChanged()
    End Sub
    Partial Private Sub OndateModifiedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OndateModifiedChanged()
    End Sub
    Partial Private Sub OnmodifiedByChanging(value As String)
    End Sub
    Partial Private Sub OnmodifiedByChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountContactID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property accountContactID() As Integer
		Get
			Return Me._accountContactID
		End Get
		Set
			If ((Me._accountContactID = value)  _
						= false) Then
				Me.OnaccountContactIDChanging(value)
				Me.SendPropertyChanging
				Me._accountContactID = value
				Me.SendPropertyChanged("accountContactID")
				Me.OnaccountContactIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="Int NOT NULL")>  _
	Public Property accountID() As Integer
		Get
			Return Me._accountID
		End Get
		Set
			If ((Me._accountID = value)  _
						= false) Then
				Me.OnaccountIDChanging(value)
				Me.SendPropertyChanging
				Me._accountID = value
				Me.SendPropertyChanged("accountID")
				Me.OnaccountIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_title", DbType:="NVarChar(50)")>  _
	Public Property title() As String
		Get
			Return Me._title
		End Get
		Set
			If (String.Equals(Me._title, value) = false) Then
				Me.OntitleChanging(value)
				Me.SendPropertyChanging
				Me._title = value
				Me.SendPropertyChanged("title")
				Me.OntitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_contactName", DbType:="NVarChar(256)")>  _
	Public Property contactName() As String
		Get
			Return Me._contactName
		End Get
		Set
			If (String.Equals(Me._contactName, value) = false) Then
				Me.OncontactNameChanging(value)
				Me.SendPropertyChanging
				Me._contactName = value
				Me.SendPropertyChanged("contactName")
				Me.OncontactNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_contactPhone", DbType:="NVarChar(50)")>  _
	Public Property contactPhone() As String
		Get
			Return Me._contactPhone
		End Get
		Set
			If (String.Equals(Me._contactPhone, value) = false) Then
				Me.OncontactPhoneChanging(value)
				Me.SendPropertyChanging
				Me._contactPhone = value
				Me.SendPropertyChanged("contactPhone")
				Me.OncontactPhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_contactEmail", DbType:="NVarChar(256)")>  _
	Public Property contactEmail() As String
		Get
			Return Me._contactEmail
		End Get
		Set
			If (String.Equals(Me._contactEmail, value) = false) Then
				Me.OncontactEmailChanging(value)
				Me.SendPropertyChanging
				Me._contactEmail = value
				Me.SendPropertyChanged("contactEmail")
				Me.OncontactEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dob", DbType:="NVarChar(50)")>  _
	Public Property dob() As String
		Get
			Return Me._dob
		End Get
		Set
			If (String.Equals(Me._dob, value) = false) Then
				Me.OndobChanging(value)
				Me.SendPropertyChanging
				Me._dob = value
				Me.SendPropertyChanged("dob")
				Me.OndobChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateCreated", DbType:="SmallDateTime")>  _
	Public Property dateCreated() As System.Nullable(Of Date)
		Get
			Return Me._dateCreated
		End Get
		Set
			If (Me._dateCreated.Equals(value) = false) Then
				Me.OndateCreatedChanging(value)
				Me.SendPropertyChanging
				Me._dateCreated = value
				Me.SendPropertyChanged("dateCreated")
				Me.OndateCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_createdBy", DbType:="NVarChar(50)")>  _
	Public Property createdBy() As String
		Get
			Return Me._createdBy
		End Get
		Set
			If (String.Equals(Me._createdBy, value) = false) Then
				Me.OncreatedByChanging(value)
				Me.SendPropertyChanging
				Me._createdBy = value
				Me.SendPropertyChanged("createdBy")
				Me.OncreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateModified", DbType:="SmallDateTime")>  _
	Public Property dateModified() As System.Nullable(Of Date)
		Get
			Return Me._dateModified
		End Get
		Set
			If (Me._dateModified.Equals(value) = false) Then
				Me.OndateModifiedChanging(value)
				Me.SendPropertyChanging
				Me._dateModified = value
				Me.SendPropertyChanged("dateModified")
				Me.OndateModifiedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_modifiedBy", DbType:="NVarChar(50)")>  _
	Public Property modifiedBy() As String
		Get
			Return Me._modifiedBy
		End Get
		Set
			If (String.Equals(Me._modifiedBy, value) = false) Then
				Me.OnmodifiedByChanging(value)
				Me.SendPropertyChanging
				Me._modifiedBy = value
				Me.SendPropertyChanged("modifiedBy")
				Me.OnmodifiedByChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblAccountDemographic")>  _
Partial Public Class tblAccountDemographic
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _accountDemographicID As Integer
	
	Private _accountID As Integer
	
	Private _caucasian As System.Nullable(Of Integer)
	
	Private _africanAmerican As System.Nullable(Of Integer)
	
	Private _hispanic As System.Nullable(Of Integer)
	
	Private _asian As System.Nullable(Of Integer)
	
	Private _other As System.Nullable(Of Integer)
	
	Private __21_25 As System.Nullable(Of Integer)
	
	Private __26_30 As System.Nullable(Of Integer)
	
	Private __31_35 As System.Nullable(Of Integer)
	
	Private __36_40 As System.Nullable(Of Integer)
	
	Private __40_ As System.Nullable(Of Integer)
	
	Private _male As System.Nullable(Of Integer)
	
	Private _female As System.Nullable(Of Integer)
	
	Private _income20to35 As System.Nullable(Of Integer)
	
	Private _income36to50 As System.Nullable(Of Integer)
	
	Private _income51to75 As System.Nullable(Of Integer)
	
	Private _income76to100 As System.Nullable(Of Integer)
	
	Private _income100plus As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnaccountDemographicIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnaccountDemographicIDChanged()
    End Sub
    Partial Private Sub OnaccountIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnaccountIDChanged()
    End Sub
    Partial Private Sub OncaucasianChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OncaucasianChanged()
    End Sub
    Partial Private Sub OnafricanAmericanChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnafricanAmericanChanged()
    End Sub
    Partial Private Sub OnhispanicChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnhispanicChanged()
    End Sub
    Partial Private Sub OnasianChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnasianChanged()
    End Sub
    Partial Private Sub OnotherChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnotherChanged()
    End Sub
    Partial Private Sub On_21_25Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub On_21_25Changed()
    End Sub
    Partial Private Sub On_26_30Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub On_26_30Changed()
    End Sub
    Partial Private Sub On_31_35Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub On_31_35Changed()
    End Sub
    Partial Private Sub On_36_40Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub On_36_40Changed()
    End Sub
    Partial Private Sub On_40_Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub On_40_Changed()
    End Sub
    Partial Private Sub OnmaleChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnmaleChanged()
    End Sub
    Partial Private Sub OnfemaleChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnfemaleChanged()
    End Sub
    Partial Private Sub Onincome20to35Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onincome20to35Changed()
    End Sub
    Partial Private Sub Onincome36to50Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onincome36to50Changed()
    End Sub
    Partial Private Sub Onincome51to75Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onincome51to75Changed()
    End Sub
    Partial Private Sub Onincome76to100Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onincome76to100Changed()
    End Sub
    Partial Private Sub Onincome100plusChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onincome100plusChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountDemographicID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property accountDemographicID() As Integer
		Get
			Return Me._accountDemographicID
		End Get
		Set
			If ((Me._accountDemographicID = value)  _
						= false) Then
				Me.OnaccountDemographicIDChanging(value)
				Me.SendPropertyChanging
				Me._accountDemographicID = value
				Me.SendPropertyChanged("accountDemographicID")
				Me.OnaccountDemographicIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="Int NOT NULL")>  _
	Public Property accountID() As Integer
		Get
			Return Me._accountID
		End Get
		Set
			If ((Me._accountID = value)  _
						= false) Then
				Me.OnaccountIDChanging(value)
				Me.SendPropertyChanging
				Me._accountID = value
				Me.SendPropertyChanged("accountID")
				Me.OnaccountIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_caucasian", DbType:="Int")>  _
	Public Property caucasian() As System.Nullable(Of Integer)
		Get
			Return Me._caucasian
		End Get
		Set
			If (Me._caucasian.Equals(value) = false) Then
				Me.OncaucasianChanging(value)
				Me.SendPropertyChanging
				Me._caucasian = value
				Me.SendPropertyChanged("caucasian")
				Me.OncaucasianChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_africanAmerican", DbType:="Int")>  _
	Public Property africanAmerican() As System.Nullable(Of Integer)
		Get
			Return Me._africanAmerican
		End Get
		Set
			If (Me._africanAmerican.Equals(value) = false) Then
				Me.OnafricanAmericanChanging(value)
				Me.SendPropertyChanging
				Me._africanAmerican = value
				Me.SendPropertyChanged("africanAmerican")
				Me.OnafricanAmericanChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hispanic", DbType:="Int")>  _
	Public Property hispanic() As System.Nullable(Of Integer)
		Get
			Return Me._hispanic
		End Get
		Set
			If (Me._hispanic.Equals(value) = false) Then
				Me.OnhispanicChanging(value)
				Me.SendPropertyChanging
				Me._hispanic = value
				Me.SendPropertyChanged("hispanic")
				Me.OnhispanicChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_asian", DbType:="Int")>  _
	Public Property asian() As System.Nullable(Of Integer)
		Get
			Return Me._asian
		End Get
		Set
			If (Me._asian.Equals(value) = false) Then
				Me.OnasianChanging(value)
				Me.SendPropertyChanging
				Me._asian = value
				Me.SendPropertyChanged("asian")
				Me.OnasianChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_other", DbType:="Int")>  _
	Public Property other() As System.Nullable(Of Integer)
		Get
			Return Me._other
		End Get
		Set
			If (Me._other.Equals(value) = false) Then
				Me.OnotherChanging(value)
				Me.SendPropertyChanging
				Me._other = value
				Me.SendPropertyChanged("other")
				Me.OnotherChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[21-25]", Storage:="__21_25", DbType:="Int")>  _
	Public Property _21_25() As System.Nullable(Of Integer)
		Get
			Return Me.__21_25
		End Get
		Set
			If (Me.__21_25.Equals(value) = false) Then
				Me.On_21_25Changing(value)
				Me.SendPropertyChanging
				Me.__21_25 = value
				Me.SendPropertyChanged("_21_25")
				Me.On_21_25Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[26-30]", Storage:="__26_30", DbType:="Int")>  _
	Public Property _26_30() As System.Nullable(Of Integer)
		Get
			Return Me.__26_30
		End Get
		Set
			If (Me.__26_30.Equals(value) = false) Then
				Me.On_26_30Changing(value)
				Me.SendPropertyChanging
				Me.__26_30 = value
				Me.SendPropertyChanged("_26_30")
				Me.On_26_30Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[31-35]", Storage:="__31_35", DbType:="Int")>  _
	Public Property _31_35() As System.Nullable(Of Integer)
		Get
			Return Me.__31_35
		End Get
		Set
			If (Me.__31_35.Equals(value) = false) Then
				Me.On_31_35Changing(value)
				Me.SendPropertyChanging
				Me.__31_35 = value
				Me.SendPropertyChanged("_31_35")
				Me.On_31_35Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[36-40]", Storage:="__36_40", DbType:="Int")>  _
	Public Property _36_40() As System.Nullable(Of Integer)
		Get
			Return Me.__36_40
		End Get
		Set
			If (Me.__36_40.Equals(value) = false) Then
				Me.On_36_40Changing(value)
				Me.SendPropertyChanging
				Me.__36_40 = value
				Me.SendPropertyChanged("_36_40")
				Me.On_36_40Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[40+]", Storage:="__40_", DbType:="Int")>  _
	Public Property _40_() As System.Nullable(Of Integer)
		Get
			Return Me.__40_
		End Get
		Set
			If (Me.__40_.Equals(value) = false) Then
				Me.On_40_Changing(value)
				Me.SendPropertyChanging
				Me.__40_ = value
				Me.SendPropertyChanged("_40_")
				Me.On_40_Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_male", DbType:="Int")>  _
	Public Property male() As System.Nullable(Of Integer)
		Get
			Return Me._male
		End Get
		Set
			If (Me._male.Equals(value) = false) Then
				Me.OnmaleChanging(value)
				Me.SendPropertyChanging
				Me._male = value
				Me.SendPropertyChanged("male")
				Me.OnmaleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_female", DbType:="Int")>  _
	Public Property female() As System.Nullable(Of Integer)
		Get
			Return Me._female
		End Get
		Set
			If (Me._female.Equals(value) = false) Then
				Me.OnfemaleChanging(value)
				Me.SendPropertyChanging
				Me._female = value
				Me.SendPropertyChanged("female")
				Me.OnfemaleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_income20to35", DbType:="Int")>  _
	Public Property income20to35() As System.Nullable(Of Integer)
		Get
			Return Me._income20to35
		End Get
		Set
			If (Me._income20to35.Equals(value) = false) Then
				Me.Onincome20to35Changing(value)
				Me.SendPropertyChanging
				Me._income20to35 = value
				Me.SendPropertyChanged("income20to35")
				Me.Onincome20to35Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_income36to50", DbType:="Int")>  _
	Public Property income36to50() As System.Nullable(Of Integer)
		Get
			Return Me._income36to50
		End Get
		Set
			If (Me._income36to50.Equals(value) = false) Then
				Me.Onincome36to50Changing(value)
				Me.SendPropertyChanging
				Me._income36to50 = value
				Me.SendPropertyChanged("income36to50")
				Me.Onincome36to50Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_income51to75", DbType:="Int")>  _
	Public Property income51to75() As System.Nullable(Of Integer)
		Get
			Return Me._income51to75
		End Get
		Set
			If (Me._income51to75.Equals(value) = false) Then
				Me.Onincome51to75Changing(value)
				Me.SendPropertyChanging
				Me._income51to75 = value
				Me.SendPropertyChanged("income51to75")
				Me.Onincome51to75Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_income76to100", DbType:="Int")>  _
	Public Property income76to100() As System.Nullable(Of Integer)
		Get
			Return Me._income76to100
		End Get
		Set
			If (Me._income76to100.Equals(value) = false) Then
				Me.Onincome76to100Changing(value)
				Me.SendPropertyChanging
				Me._income76to100 = value
				Me.SendPropertyChanged("income76to100")
				Me.Onincome76to100Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_income100plus", DbType:="Int")>  _
	Public Property income100plus() As System.Nullable(Of Integer)
		Get
			Return Me._income100plus
		End Get
		Set
			If (Me._income100plus.Equals(value) = false) Then
				Me.Onincome100plusChanging(value)
				Me.SendPropertyChanging
				Me._income100plus = value
				Me.SendPropertyChanged("income100plus")
				Me.Onincome100plusChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblAccountDetails")>  _
Partial Public Class tblAccountDetail
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _accountDetailID As Integer
	
	Private _accountID As System.Nullable(Of Integer)
	
	Private _capacity As String
	
	Private _traffic As String
	
	Private _bars As String
	
	Private _barStations As String
	
	Private _patioSeating As System.Nullable(Of Boolean)
	
	Private _liveMusic As System.Nullable(Of Boolean)
	
	Private _poolTables As System.Nullable(Of Boolean)
	
	Private _darts As System.Nullable(Of Boolean)
	
	Private _arcadeGames As System.Nullable(Of Boolean)
	
	Private _otherGames As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnaccountDetailIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnaccountDetailIDChanged()
    End Sub
    Partial Private Sub OnaccountIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnaccountIDChanged()
    End Sub
    Partial Private Sub OncapacityChanging(value As String)
    End Sub
    Partial Private Sub OncapacityChanged()
    End Sub
    Partial Private Sub OntrafficChanging(value As String)
    End Sub
    Partial Private Sub OntrafficChanged()
    End Sub
    Partial Private Sub OnbarsChanging(value As String)
    End Sub
    Partial Private Sub OnbarsChanged()
    End Sub
    Partial Private Sub OnbarStationsChanging(value As String)
    End Sub
    Partial Private Sub OnbarStationsChanged()
    End Sub
    Partial Private Sub OnpatioSeatingChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnpatioSeatingChanged()
    End Sub
    Partial Private Sub OnliveMusicChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnliveMusicChanged()
    End Sub
    Partial Private Sub OnpoolTablesChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnpoolTablesChanged()
    End Sub
    Partial Private Sub OndartsChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OndartsChanged()
    End Sub
    Partial Private Sub OnarcadeGamesChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnarcadeGamesChanged()
    End Sub
    Partial Private Sub OnotherGamesChanging(value As String)
    End Sub
    Partial Private Sub OnotherGamesChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountDetailID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property accountDetailID() As Integer
		Get
			Return Me._accountDetailID
		End Get
		Set
			If ((Me._accountDetailID = value)  _
						= false) Then
				Me.OnaccountDetailIDChanging(value)
				Me.SendPropertyChanging
				Me._accountDetailID = value
				Me.SendPropertyChanged("accountDetailID")
				Me.OnaccountDetailIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="Int")>  _
	Public Property accountID() As System.Nullable(Of Integer)
		Get
			Return Me._accountID
		End Get
		Set
			If (Me._accountID.Equals(value) = false) Then
				Me.OnaccountIDChanging(value)
				Me.SendPropertyChanging
				Me._accountID = value
				Me.SendPropertyChanged("accountID")
				Me.OnaccountIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_capacity", DbType:="VarChar(50)")>  _
	Public Property capacity() As String
		Get
			Return Me._capacity
		End Get
		Set
			If (String.Equals(Me._capacity, value) = false) Then
				Me.OncapacityChanging(value)
				Me.SendPropertyChanging
				Me._capacity = value
				Me.SendPropertyChanged("capacity")
				Me.OncapacityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_traffic", DbType:="VarChar(50)")>  _
	Public Property traffic() As String
		Get
			Return Me._traffic
		End Get
		Set
			If (String.Equals(Me._traffic, value) = false) Then
				Me.OntrafficChanging(value)
				Me.SendPropertyChanging
				Me._traffic = value
				Me.SendPropertyChanged("traffic")
				Me.OntrafficChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bars", DbType:="VarChar(50)")>  _
	Public Property bars() As String
		Get
			Return Me._bars
		End Get
		Set
			If (String.Equals(Me._bars, value) = false) Then
				Me.OnbarsChanging(value)
				Me.SendPropertyChanging
				Me._bars = value
				Me.SendPropertyChanged("bars")
				Me.OnbarsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_barStations", DbType:="VarChar(50)")>  _
	Public Property barStations() As String
		Get
			Return Me._barStations
		End Get
		Set
			If (String.Equals(Me._barStations, value) = false) Then
				Me.OnbarStationsChanging(value)
				Me.SendPropertyChanging
				Me._barStations = value
				Me.SendPropertyChanged("barStations")
				Me.OnbarStationsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_patioSeating", DbType:="Bit")>  _
	Public Property patioSeating() As System.Nullable(Of Boolean)
		Get
			Return Me._patioSeating
		End Get
		Set
			If (Me._patioSeating.Equals(value) = false) Then
				Me.OnpatioSeatingChanging(value)
				Me.SendPropertyChanging
				Me._patioSeating = value
				Me.SendPropertyChanged("patioSeating")
				Me.OnpatioSeatingChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_liveMusic", DbType:="Bit")>  _
	Public Property liveMusic() As System.Nullable(Of Boolean)
		Get
			Return Me._liveMusic
		End Get
		Set
			If (Me._liveMusic.Equals(value) = false) Then
				Me.OnliveMusicChanging(value)
				Me.SendPropertyChanging
				Me._liveMusic = value
				Me.SendPropertyChanged("liveMusic")
				Me.OnliveMusicChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_poolTables", DbType:="Bit")>  _
	Public Property poolTables() As System.Nullable(Of Boolean)
		Get
			Return Me._poolTables
		End Get
		Set
			If (Me._poolTables.Equals(value) = false) Then
				Me.OnpoolTablesChanging(value)
				Me.SendPropertyChanging
				Me._poolTables = value
				Me.SendPropertyChanged("poolTables")
				Me.OnpoolTablesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_darts", DbType:="Bit")>  _
	Public Property darts() As System.Nullable(Of Boolean)
		Get
			Return Me._darts
		End Get
		Set
			If (Me._darts.Equals(value) = false) Then
				Me.OndartsChanging(value)
				Me.SendPropertyChanging
				Me._darts = value
				Me.SendPropertyChanged("darts")
				Me.OndartsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_arcadeGames", DbType:="Bit")>  _
	Public Property arcadeGames() As System.Nullable(Of Boolean)
		Get
			Return Me._arcadeGames
		End Get
		Set
			If (Me._arcadeGames.Equals(value) = false) Then
				Me.OnarcadeGamesChanging(value)
				Me.SendPropertyChanging
				Me._arcadeGames = value
				Me.SendPropertyChanged("arcadeGames")
				Me.OnarcadeGamesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_otherGames", DbType:="VarChar(MAX)")>  _
	Public Property otherGames() As String
		Get
			Return Me._otherGames
		End Get
		Set
			If (String.Equals(Me._otherGames, value) = false) Then
				Me.OnotherGamesChanging(value)
				Me.SendPropertyChanging
				Me._otherGames = value
				Me.SendPropertyChanged("otherGames")
				Me.OnotherGamesChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblAccountHours")>  _
Partial Public Class tblAccountHour
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _accountHoursID As Integer
	
	Private _accountID As Integer
	
	Private _monOpen As String
	
	Private _monClose As String
	
	Private _tuesOpen As String
	
	Private _tuesClose As String
	
	Private _wedOpen As String
	
	Private _wedClose As String
	
	Private _thurOpen As String
	
	Private _thurClose As String
	
	Private _friOpen As String
	
	Private _friClose As String
	
	Private _satOpen As String
	
	Private _satClose As String
	
	Private _sunOpen As String
	
	Private _sunClose As String
	
	Private _monStart As String
	
	Private _monEnd As String
	
	Private _tuesStart As String
	
	Private _tuesEnd As String
	
	Private _wedStart As String
	
	Private _wedEnd As String
	
	Private _thurStart As String
	
	Private _thurEnd As String
	
	Private _friStart As String
	
	Private _friEnd As String
	
	Private _satStart As String
	
	Private _satEnd As String
	
	Private _sunStart As String
	
	Private _sunEnd As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnaccountHoursIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnaccountHoursIDChanged()
    End Sub
    Partial Private Sub OnaccountIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnaccountIDChanged()
    End Sub
    Partial Private Sub OnmonOpenChanging(value As String)
    End Sub
    Partial Private Sub OnmonOpenChanged()
    End Sub
    Partial Private Sub OnmonCloseChanging(value As String)
    End Sub
    Partial Private Sub OnmonCloseChanged()
    End Sub
    Partial Private Sub OntuesOpenChanging(value As String)
    End Sub
    Partial Private Sub OntuesOpenChanged()
    End Sub
    Partial Private Sub OntuesCloseChanging(value As String)
    End Sub
    Partial Private Sub OntuesCloseChanged()
    End Sub
    Partial Private Sub OnwedOpenChanging(value As String)
    End Sub
    Partial Private Sub OnwedOpenChanged()
    End Sub
    Partial Private Sub OnwedCloseChanging(value As String)
    End Sub
    Partial Private Sub OnwedCloseChanged()
    End Sub
    Partial Private Sub OnthurOpenChanging(value As String)
    End Sub
    Partial Private Sub OnthurOpenChanged()
    End Sub
    Partial Private Sub OnthurCloseChanging(value As String)
    End Sub
    Partial Private Sub OnthurCloseChanged()
    End Sub
    Partial Private Sub OnfriOpenChanging(value As String)
    End Sub
    Partial Private Sub OnfriOpenChanged()
    End Sub
    Partial Private Sub OnfriCloseChanging(value As String)
    End Sub
    Partial Private Sub OnfriCloseChanged()
    End Sub
    Partial Private Sub OnsatOpenChanging(value As String)
    End Sub
    Partial Private Sub OnsatOpenChanged()
    End Sub
    Partial Private Sub OnsatCloseChanging(value As String)
    End Sub
    Partial Private Sub OnsatCloseChanged()
    End Sub
    Partial Private Sub OnsunOpenChanging(value As String)
    End Sub
    Partial Private Sub OnsunOpenChanged()
    End Sub
    Partial Private Sub OnsunCloseChanging(value As String)
    End Sub
    Partial Private Sub OnsunCloseChanged()
    End Sub
    Partial Private Sub OnmonStartChanging(value As String)
    End Sub
    Partial Private Sub OnmonStartChanged()
    End Sub
    Partial Private Sub OnmonEndChanging(value As String)
    End Sub
    Partial Private Sub OnmonEndChanged()
    End Sub
    Partial Private Sub OntuesStartChanging(value As String)
    End Sub
    Partial Private Sub OntuesStartChanged()
    End Sub
    Partial Private Sub OntuesEndChanging(value As String)
    End Sub
    Partial Private Sub OntuesEndChanged()
    End Sub
    Partial Private Sub OnwedStartChanging(value As String)
    End Sub
    Partial Private Sub OnwedStartChanged()
    End Sub
    Partial Private Sub OnwedEndChanging(value As String)
    End Sub
    Partial Private Sub OnwedEndChanged()
    End Sub
    Partial Private Sub OnthurStartChanging(value As String)
    End Sub
    Partial Private Sub OnthurStartChanged()
    End Sub
    Partial Private Sub OnthurEndChanging(value As String)
    End Sub
    Partial Private Sub OnthurEndChanged()
    End Sub
    Partial Private Sub OnfriStartChanging(value As String)
    End Sub
    Partial Private Sub OnfriStartChanged()
    End Sub
    Partial Private Sub OnfriEndChanging(value As String)
    End Sub
    Partial Private Sub OnfriEndChanged()
    End Sub
    Partial Private Sub OnsatStartChanging(value As String)
    End Sub
    Partial Private Sub OnsatStartChanged()
    End Sub
    Partial Private Sub OnsatEndChanging(value As String)
    End Sub
    Partial Private Sub OnsatEndChanged()
    End Sub
    Partial Private Sub OnsunStartChanging(value As String)
    End Sub
    Partial Private Sub OnsunStartChanged()
    End Sub
    Partial Private Sub OnsunEndChanging(value As String)
    End Sub
    Partial Private Sub OnsunEndChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountHoursID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property accountHoursID() As Integer
		Get
			Return Me._accountHoursID
		End Get
		Set
			If ((Me._accountHoursID = value)  _
						= false) Then
				Me.OnaccountHoursIDChanging(value)
				Me.SendPropertyChanging
				Me._accountHoursID = value
				Me.SendPropertyChanged("accountHoursID")
				Me.OnaccountHoursIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="Int NOT NULL")>  _
	Public Property accountID() As Integer
		Get
			Return Me._accountID
		End Get
		Set
			If ((Me._accountID = value)  _
						= false) Then
				Me.OnaccountIDChanging(value)
				Me.SendPropertyChanging
				Me._accountID = value
				Me.SendPropertyChanged("accountID")
				Me.OnaccountIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_monOpen", DbType:="NVarChar(50)")>  _
	Public Property monOpen() As String
		Get
			Return Me._monOpen
		End Get
		Set
			If (String.Equals(Me._monOpen, value) = false) Then
				Me.OnmonOpenChanging(value)
				Me.SendPropertyChanging
				Me._monOpen = value
				Me.SendPropertyChanged("monOpen")
				Me.OnmonOpenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_monClose", DbType:="NVarChar(50)")>  _
	Public Property monClose() As String
		Get
			Return Me._monClose
		End Get
		Set
			If (String.Equals(Me._monClose, value) = false) Then
				Me.OnmonCloseChanging(value)
				Me.SendPropertyChanging
				Me._monClose = value
				Me.SendPropertyChanged("monClose")
				Me.OnmonCloseChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tuesOpen", DbType:="NVarChar(50)")>  _
	Public Property tuesOpen() As String
		Get
			Return Me._tuesOpen
		End Get
		Set
			If (String.Equals(Me._tuesOpen, value) = false) Then
				Me.OntuesOpenChanging(value)
				Me.SendPropertyChanging
				Me._tuesOpen = value
				Me.SendPropertyChanged("tuesOpen")
				Me.OntuesOpenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tuesClose", DbType:="NVarChar(50)")>  _
	Public Property tuesClose() As String
		Get
			Return Me._tuesClose
		End Get
		Set
			If (String.Equals(Me._tuesClose, value) = false) Then
				Me.OntuesCloseChanging(value)
				Me.SendPropertyChanging
				Me._tuesClose = value
				Me.SendPropertyChanged("tuesClose")
				Me.OntuesCloseChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_wedOpen", DbType:="NVarChar(50)")>  _
	Public Property wedOpen() As String
		Get
			Return Me._wedOpen
		End Get
		Set
			If (String.Equals(Me._wedOpen, value) = false) Then
				Me.OnwedOpenChanging(value)
				Me.SendPropertyChanging
				Me._wedOpen = value
				Me.SendPropertyChanged("wedOpen")
				Me.OnwedOpenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_wedClose", DbType:="NVarChar(50)")>  _
	Public Property wedClose() As String
		Get
			Return Me._wedClose
		End Get
		Set
			If (String.Equals(Me._wedClose, value) = false) Then
				Me.OnwedCloseChanging(value)
				Me.SendPropertyChanging
				Me._wedClose = value
				Me.SendPropertyChanged("wedClose")
				Me.OnwedCloseChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_thurOpen", DbType:="NVarChar(50)")>  _
	Public Property thurOpen() As String
		Get
			Return Me._thurOpen
		End Get
		Set
			If (String.Equals(Me._thurOpen, value) = false) Then
				Me.OnthurOpenChanging(value)
				Me.SendPropertyChanging
				Me._thurOpen = value
				Me.SendPropertyChanged("thurOpen")
				Me.OnthurOpenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_thurClose", DbType:="NVarChar(50)")>  _
	Public Property thurClose() As String
		Get
			Return Me._thurClose
		End Get
		Set
			If (String.Equals(Me._thurClose, value) = false) Then
				Me.OnthurCloseChanging(value)
				Me.SendPropertyChanging
				Me._thurClose = value
				Me.SendPropertyChanged("thurClose")
				Me.OnthurCloseChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_friOpen", DbType:="NVarChar(50)")>  _
	Public Property friOpen() As String
		Get
			Return Me._friOpen
		End Get
		Set
			If (String.Equals(Me._friOpen, value) = false) Then
				Me.OnfriOpenChanging(value)
				Me.SendPropertyChanging
				Me._friOpen = value
				Me.SendPropertyChanged("friOpen")
				Me.OnfriOpenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_friClose", DbType:="NVarChar(50)")>  _
	Public Property friClose() As String
		Get
			Return Me._friClose
		End Get
		Set
			If (String.Equals(Me._friClose, value) = false) Then
				Me.OnfriCloseChanging(value)
				Me.SendPropertyChanging
				Me._friClose = value
				Me.SendPropertyChanged("friClose")
				Me.OnfriCloseChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_satOpen", DbType:="NVarChar(50)")>  _
	Public Property satOpen() As String
		Get
			Return Me._satOpen
		End Get
		Set
			If (String.Equals(Me._satOpen, value) = false) Then
				Me.OnsatOpenChanging(value)
				Me.SendPropertyChanging
				Me._satOpen = value
				Me.SendPropertyChanged("satOpen")
				Me.OnsatOpenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_satClose", DbType:="NVarChar(50)")>  _
	Public Property satClose() As String
		Get
			Return Me._satClose
		End Get
		Set
			If (String.Equals(Me._satClose, value) = false) Then
				Me.OnsatCloseChanging(value)
				Me.SendPropertyChanging
				Me._satClose = value
				Me.SendPropertyChanged("satClose")
				Me.OnsatCloseChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sunOpen", DbType:="NVarChar(50)")>  _
	Public Property sunOpen() As String
		Get
			Return Me._sunOpen
		End Get
		Set
			If (String.Equals(Me._sunOpen, value) = false) Then
				Me.OnsunOpenChanging(value)
				Me.SendPropertyChanging
				Me._sunOpen = value
				Me.SendPropertyChanged("sunOpen")
				Me.OnsunOpenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sunClose", DbType:="NVarChar(50)")>  _
	Public Property sunClose() As String
		Get
			Return Me._sunClose
		End Get
		Set
			If (String.Equals(Me._sunClose, value) = false) Then
				Me.OnsunCloseChanging(value)
				Me.SendPropertyChanging
				Me._sunClose = value
				Me.SendPropertyChanged("sunClose")
				Me.OnsunCloseChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_monStart", DbType:="NVarChar(50)")>  _
	Public Property monStart() As String
		Get
			Return Me._monStart
		End Get
		Set
			If (String.Equals(Me._monStart, value) = false) Then
				Me.OnmonStartChanging(value)
				Me.SendPropertyChanging
				Me._monStart = value
				Me.SendPropertyChanged("monStart")
				Me.OnmonStartChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_monEnd", DbType:="NVarChar(50)")>  _
	Public Property monEnd() As String
		Get
			Return Me._monEnd
		End Get
		Set
			If (String.Equals(Me._monEnd, value) = false) Then
				Me.OnmonEndChanging(value)
				Me.SendPropertyChanging
				Me._monEnd = value
				Me.SendPropertyChanged("monEnd")
				Me.OnmonEndChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tuesStart", DbType:="NVarChar(50)")>  _
	Public Property tuesStart() As String
		Get
			Return Me._tuesStart
		End Get
		Set
			If (String.Equals(Me._tuesStart, value) = false) Then
				Me.OntuesStartChanging(value)
				Me.SendPropertyChanging
				Me._tuesStart = value
				Me.SendPropertyChanged("tuesStart")
				Me.OntuesStartChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tuesEnd", DbType:="NVarChar(50)")>  _
	Public Property tuesEnd() As String
		Get
			Return Me._tuesEnd
		End Get
		Set
			If (String.Equals(Me._tuesEnd, value) = false) Then
				Me.OntuesEndChanging(value)
				Me.SendPropertyChanging
				Me._tuesEnd = value
				Me.SendPropertyChanged("tuesEnd")
				Me.OntuesEndChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_wedStart", DbType:="NVarChar(50)")>  _
	Public Property wedStart() As String
		Get
			Return Me._wedStart
		End Get
		Set
			If (String.Equals(Me._wedStart, value) = false) Then
				Me.OnwedStartChanging(value)
				Me.SendPropertyChanging
				Me._wedStart = value
				Me.SendPropertyChanged("wedStart")
				Me.OnwedStartChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_wedEnd", DbType:="NVarChar(50)")>  _
	Public Property wedEnd() As String
		Get
			Return Me._wedEnd
		End Get
		Set
			If (String.Equals(Me._wedEnd, value) = false) Then
				Me.OnwedEndChanging(value)
				Me.SendPropertyChanging
				Me._wedEnd = value
				Me.SendPropertyChanged("wedEnd")
				Me.OnwedEndChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_thurStart", DbType:="NVarChar(50)")>  _
	Public Property thurStart() As String
		Get
			Return Me._thurStart
		End Get
		Set
			If (String.Equals(Me._thurStart, value) = false) Then
				Me.OnthurStartChanging(value)
				Me.SendPropertyChanging
				Me._thurStart = value
				Me.SendPropertyChanged("thurStart")
				Me.OnthurStartChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_thurEnd", DbType:="NVarChar(50)")>  _
	Public Property thurEnd() As String
		Get
			Return Me._thurEnd
		End Get
		Set
			If (String.Equals(Me._thurEnd, value) = false) Then
				Me.OnthurEndChanging(value)
				Me.SendPropertyChanging
				Me._thurEnd = value
				Me.SendPropertyChanged("thurEnd")
				Me.OnthurEndChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_friStart", DbType:="NVarChar(50)")>  _
	Public Property friStart() As String
		Get
			Return Me._friStart
		End Get
		Set
			If (String.Equals(Me._friStart, value) = false) Then
				Me.OnfriStartChanging(value)
				Me.SendPropertyChanging
				Me._friStart = value
				Me.SendPropertyChanged("friStart")
				Me.OnfriStartChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="friEnd", Storage:="_friEnd", DbType:="NVarChar(50)")>  _
	Public Property [friEnd]() As String
		Get
			Return Me._friEnd
		End Get
		Set
			If (String.Equals(Me._friEnd, value) = false) Then
				Me.OnfriEndChanging(value)
				Me.SendPropertyChanging
				Me._friEnd = value
				Me.SendPropertyChanged("[friEnd]")
				Me.OnfriEndChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_satStart", DbType:="NVarChar(50)")>  _
	Public Property satStart() As String
		Get
			Return Me._satStart
		End Get
		Set
			If (String.Equals(Me._satStart, value) = false) Then
				Me.OnsatStartChanging(value)
				Me.SendPropertyChanging
				Me._satStart = value
				Me.SendPropertyChanged("satStart")
				Me.OnsatStartChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_satEnd", DbType:="NVarChar(50)")>  _
	Public Property satEnd() As String
		Get
			Return Me._satEnd
		End Get
		Set
			If (String.Equals(Me._satEnd, value) = false) Then
				Me.OnsatEndChanging(value)
				Me.SendPropertyChanging
				Me._satEnd = value
				Me.SendPropertyChanged("satEnd")
				Me.OnsatEndChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sunStart", DbType:="NVarChar(50)")>  _
	Public Property sunStart() As String
		Get
			Return Me._sunStart
		End Get
		Set
			If (String.Equals(Me._sunStart, value) = false) Then
				Me.OnsunStartChanging(value)
				Me.SendPropertyChanging
				Me._sunStart = value
				Me.SendPropertyChanged("sunStart")
				Me.OnsunStartChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sunEnd", DbType:="NVarChar(50)")>  _
	Public Property sunEnd() As String
		Get
			Return Me._sunEnd
		End Get
		Set
			If (String.Equals(Me._sunEnd, value) = false) Then
				Me.OnsunEndChanging(value)
				Me.SendPropertyChanging
				Me._sunEnd = value
				Me.SendPropertyChanged("sunEnd")
				Me.OnsunEndChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblAccountNote")>  _
Partial Public Class tblAccountNote
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _accountNoteID As Integer
	
	Private _accountID As System.Nullable(Of Integer)
	
	Private _note As String
	
	Private _dateCreated As System.Nullable(Of Date)
	
	Private _dateModified As System.Nullable(Of Date)
	
	Private _createdBy As String
	
	Private _modifiedBy As String
	
	Private _createdDate As System.Nullable(Of Date)
	
	Private _modifiedDate As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnaccountNoteIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnaccountNoteIDChanged()
    End Sub
    Partial Private Sub OnaccountIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnaccountIDChanged()
    End Sub
    Partial Private Sub OnnoteChanging(value As String)
    End Sub
    Partial Private Sub OnnoteChanged()
    End Sub
    Partial Private Sub OndateCreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OndateCreatedChanged()
    End Sub
    Partial Private Sub OndateModifiedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OndateModifiedChanged()
    End Sub
    Partial Private Sub OncreatedByChanging(value As String)
    End Sub
    Partial Private Sub OncreatedByChanged()
    End Sub
    Partial Private Sub OnmodifiedByChanging(value As String)
    End Sub
    Partial Private Sub OnmodifiedByChanged()
    End Sub
    Partial Private Sub OncreatedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OncreatedDateChanged()
    End Sub
    Partial Private Sub OnmodifiedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnmodifiedDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountNoteID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property accountNoteID() As Integer
		Get
			Return Me._accountNoteID
		End Get
		Set
			If ((Me._accountNoteID = value)  _
						= false) Then
				Me.OnaccountNoteIDChanging(value)
				Me.SendPropertyChanging
				Me._accountNoteID = value
				Me.SendPropertyChanged("accountNoteID")
				Me.OnaccountNoteIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="Int")>  _
	Public Property accountID() As System.Nullable(Of Integer)
		Get
			Return Me._accountID
		End Get
		Set
			If (Me._accountID.Equals(value) = false) Then
				Me.OnaccountIDChanging(value)
				Me.SendPropertyChanging
				Me._accountID = value
				Me.SendPropertyChanged("accountID")
				Me.OnaccountIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_note", DbType:="NVarChar(MAX)")>  _
	Public Property note() As String
		Get
			Return Me._note
		End Get
		Set
			If (String.Equals(Me._note, value) = false) Then
				Me.OnnoteChanging(value)
				Me.SendPropertyChanging
				Me._note = value
				Me.SendPropertyChanged("note")
				Me.OnnoteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateCreated", DbType:="SmallDateTime")>  _
	Public Property dateCreated() As System.Nullable(Of Date)
		Get
			Return Me._dateCreated
		End Get
		Set
			If (Me._dateCreated.Equals(value) = false) Then
				Me.OndateCreatedChanging(value)
				Me.SendPropertyChanging
				Me._dateCreated = value
				Me.SendPropertyChanged("dateCreated")
				Me.OndateCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateModified", DbType:="SmallDateTime")>  _
	Public Property dateModified() As System.Nullable(Of Date)
		Get
			Return Me._dateModified
		End Get
		Set
			If (Me._dateModified.Equals(value) = false) Then
				Me.OndateModifiedChanging(value)
				Me.SendPropertyChanging
				Me._dateModified = value
				Me.SendPropertyChanged("dateModified")
				Me.OndateModifiedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_createdBy", DbType:="NVarChar(50)")>  _
	Public Property createdBy() As String
		Get
			Return Me._createdBy
		End Get
		Set
			If (String.Equals(Me._createdBy, value) = false) Then
				Me.OncreatedByChanging(value)
				Me.SendPropertyChanging
				Me._createdBy = value
				Me.SendPropertyChanged("createdBy")
				Me.OncreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_modifiedBy", DbType:="NVarChar(50)")>  _
	Public Property modifiedBy() As String
		Get
			Return Me._modifiedBy
		End Get
		Set
			If (String.Equals(Me._modifiedBy, value) = false) Then
				Me.OnmodifiedByChanging(value)
				Me.SendPropertyChanging
				Me._modifiedBy = value
				Me.SendPropertyChanged("modifiedBy")
				Me.OnmodifiedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_createdDate", DbType:="SmallDateTime")>  _
	Public Property createdDate() As System.Nullable(Of Date)
		Get
			Return Me._createdDate
		End Get
		Set
			If (Me._createdDate.Equals(value) = false) Then
				Me.OncreatedDateChanging(value)
				Me.SendPropertyChanging
				Me._createdDate = value
				Me.SendPropertyChanged("createdDate")
				Me.OncreatedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_modifiedDate", DbType:="SmallDateTime")>  _
	Public Property modifiedDate() As System.Nullable(Of Date)
		Get
			Return Me._modifiedDate
		End Get
		Set
			If (Me._modifiedDate.Equals(value) = false) Then
				Me.OnmodifiedDateChanging(value)
				Me.SendPropertyChanging
				Me._modifiedDate = value
				Me.SendPropertyChanged("modifiedDate")
				Me.OnmodifiedDateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblAccountPhoto")>  _
Partial Public Class tblAccountPhoto
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _photoID As Integer
	
	Private _photoTitle As String
	
	Private _fileName As String
	
	Private _photoDescription As String
	
	Private _Image As System.Data.Linq.Binary
	
	Private _ThumbImage As System.Data.Linq.Binary
	
	Private _SmallImage As System.Data.Linq.Binary
	
	Private _LargeImage As System.Data.Linq.Binary
	
	Private _accountID As System.Nullable(Of Integer)
	
	Private _keywords As String
	
	Private _tag As String
	
	Private _dateUploaded As System.Nullable(Of Date)
	
	Private _uploadedBy As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnphotoIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnphotoIDChanged()
    End Sub
    Partial Private Sub OnphotoTitleChanging(value As String)
    End Sub
    Partial Private Sub OnphotoTitleChanged()
    End Sub
    Partial Private Sub OnfileNameChanging(value As String)
    End Sub
    Partial Private Sub OnfileNameChanged()
    End Sub
    Partial Private Sub OnphotoDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnphotoDescriptionChanged()
    End Sub
    Partial Private Sub OnImageChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnImageChanged()
    End Sub
    Partial Private Sub OnThumbImageChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnThumbImageChanged()
    End Sub
    Partial Private Sub OnSmallImageChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnSmallImageChanged()
    End Sub
    Partial Private Sub OnLargeImageChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnLargeImageChanged()
    End Sub
    Partial Private Sub OnaccountIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnaccountIDChanged()
    End Sub
    Partial Private Sub OnkeywordsChanging(value As String)
    End Sub
    Partial Private Sub OnkeywordsChanged()
    End Sub
    Partial Private Sub OntagChanging(value As String)
    End Sub
    Partial Private Sub OntagChanged()
    End Sub
    Partial Private Sub OndateUploadedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OndateUploadedChanged()
    End Sub
    Partial Private Sub OnuploadedByChanging(value As String)
    End Sub
    Partial Private Sub OnuploadedByChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_photoID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property photoID() As Integer
		Get
			Return Me._photoID
		End Get
		Set
			If ((Me._photoID = value)  _
						= false) Then
				Me.OnphotoIDChanging(value)
				Me.SendPropertyChanging
				Me._photoID = value
				Me.SendPropertyChanged("photoID")
				Me.OnphotoIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_photoTitle", DbType:="VarChar(255)")>  _
	Public Property photoTitle() As String
		Get
			Return Me._photoTitle
		End Get
		Set
			If (String.Equals(Me._photoTitle, value) = false) Then
				Me.OnphotoTitleChanging(value)
				Me.SendPropertyChanging
				Me._photoTitle = value
				Me.SendPropertyChanged("photoTitle")
				Me.OnphotoTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fileName", DbType:="VarChar(255)")>  _
	Public Property fileName() As String
		Get
			Return Me._fileName
		End Get
		Set
			If (String.Equals(Me._fileName, value) = false) Then
				Me.OnfileNameChanging(value)
				Me.SendPropertyChanging
				Me._fileName = value
				Me.SendPropertyChanged("fileName")
				Me.OnfileNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_photoDescription", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property photoDescription() As String
		Get
			Return Me._photoDescription
		End Get
		Set
			If (String.Equals(Me._photoDescription, value) = false) Then
				Me.OnphotoDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._photoDescription = value
				Me.SendPropertyChanged("photoDescription")
				Me.OnphotoDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Image", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Image() As System.Data.Linq.Binary
		Get
			Return Me._Image
		End Get
		Set
			If (Object.Equals(Me._Image, value) = false) Then
				Me.OnImageChanging(value)
				Me.SendPropertyChanging
				Me._Image = value
				Me.SendPropertyChanged("Image")
				Me.OnImageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ThumbImage", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ThumbImage() As System.Data.Linq.Binary
		Get
			Return Me._ThumbImage
		End Get
		Set
			If (Object.Equals(Me._ThumbImage, value) = false) Then
				Me.OnThumbImageChanging(value)
				Me.SendPropertyChanging
				Me._ThumbImage = value
				Me.SendPropertyChanged("ThumbImage")
				Me.OnThumbImageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SmallImage", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property SmallImage() As System.Data.Linq.Binary
		Get
			Return Me._SmallImage
		End Get
		Set
			If (Object.Equals(Me._SmallImage, value) = false) Then
				Me.OnSmallImageChanging(value)
				Me.SendPropertyChanging
				Me._SmallImage = value
				Me.SendPropertyChanged("SmallImage")
				Me.OnSmallImageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LargeImage", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property LargeImage() As System.Data.Linq.Binary
		Get
			Return Me._LargeImage
		End Get
		Set
			If (Object.Equals(Me._LargeImage, value) = false) Then
				Me.OnLargeImageChanging(value)
				Me.SendPropertyChanging
				Me._LargeImage = value
				Me.SendPropertyChanged("LargeImage")
				Me.OnLargeImageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="Int")>  _
	Public Property accountID() As System.Nullable(Of Integer)
		Get
			Return Me._accountID
		End Get
		Set
			If (Me._accountID.Equals(value) = false) Then
				Me.OnaccountIDChanging(value)
				Me.SendPropertyChanging
				Me._accountID = value
				Me.SendPropertyChanged("accountID")
				Me.OnaccountIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_keywords", DbType:="VarChar(1000)")>  _
	Public Property keywords() As String
		Get
			Return Me._keywords
		End Get
		Set
			If (String.Equals(Me._keywords, value) = false) Then
				Me.OnkeywordsChanging(value)
				Me.SendPropertyChanging
				Me._keywords = value
				Me.SendPropertyChanged("keywords")
				Me.OnkeywordsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tag", DbType:="VarChar(500)")>  _
	Public Property tag() As String
		Get
			Return Me._tag
		End Get
		Set
			If (String.Equals(Me._tag, value) = false) Then
				Me.OntagChanging(value)
				Me.SendPropertyChanging
				Me._tag = value
				Me.SendPropertyChanged("tag")
				Me.OntagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateUploaded", DbType:="SmallDateTime")>  _
	Public Property dateUploaded() As System.Nullable(Of Date)
		Get
			Return Me._dateUploaded
		End Get
		Set
			If (Me._dateUploaded.Equals(value) = false) Then
				Me.OndateUploadedChanging(value)
				Me.SendPropertyChanging
				Me._dateUploaded = value
				Me.SendPropertyChanged("dateUploaded")
				Me.OndateUploadedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_uploadedBy", DbType:="VarChar(50)")>  _
	Public Property uploadedBy() As String
		Get
			Return Me._uploadedBy
		End Get
		Set
			If (String.Equals(Me._uploadedBy, value) = false) Then
				Me.OnuploadedByChanging(value)
				Me.SendPropertyChanging
				Me._uploadedBy = value
				Me.SendPropertyChanged("uploadedBy")
				Me.OnuploadedByChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblAccountPosDistribution")>  _
Partial Public Class tblAccountPosDistribution
	
	Private _posDistributionID As Integer
	
	Private _accountActivityID As System.Nullable(Of Integer)
	
	Private _posItemID As System.Nullable(Of Integer)
	
	Private _retailPrice As System.Nullable(Of Decimal)
	
	Private _costPerUnit As System.Nullable(Of Decimal)
	
	Private _qty As System.Nullable(Of Integer)
	
	Private _tempID As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_posDistributionID", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property posDistributionID() As Integer
		Get
			Return Me._posDistributionID
		End Get
		Set
			If ((Me._posDistributionID = value)  _
						= false) Then
				Me._posDistributionID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountActivityID", DbType:="Int")>  _
	Public Property accountActivityID() As System.Nullable(Of Integer)
		Get
			Return Me._accountActivityID
		End Get
		Set
			If (Me._accountActivityID.Equals(value) = false) Then
				Me._accountActivityID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_posItemID", DbType:="Int")>  _
	Public Property posItemID() As System.Nullable(Of Integer)
		Get
			Return Me._posItemID
		End Get
		Set
			If (Me._posItemID.Equals(value) = false) Then
				Me._posItemID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_retailPrice", DbType:="Decimal(6,2)")>  _
	Public Property retailPrice() As System.Nullable(Of Decimal)
		Get
			Return Me._retailPrice
		End Get
		Set
			If (Me._retailPrice.Equals(value) = false) Then
				Me._retailPrice = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_costPerUnit", DbType:="Decimal(6,2)")>  _
	Public Property costPerUnit() As System.Nullable(Of Decimal)
		Get
			Return Me._costPerUnit
		End Get
		Set
			If (Me._costPerUnit.Equals(value) = false) Then
				Me._costPerUnit = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_qty", DbType:="Int")>  _
	Public Property qty() As System.Nullable(Of Integer)
		Get
			Return Me._qty
		End Get
		Set
			If (Me._qty.Equals(value) = false) Then
				Me._qty = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tempID", DbType:="NVarChar(50)")>  _
	Public Property tempID() As String
		Get
			Return Me._tempID
		End Get
		Set
			If (String.Equals(Me._tempID, value) = false) Then
				Me._tempID = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblAccountType")>  _
Partial Public Class tblAccountType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _accountTypeID As Integer
	
	Private _accountTypeName As String
	
	Private _active As System.Nullable(Of Boolean)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnaccountTypeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnaccountTypeIDChanged()
    End Sub
    Partial Private Sub OnaccountTypeNameChanging(value As String)
    End Sub
    Partial Private Sub OnaccountTypeNameChanged()
    End Sub
    Partial Private Sub OnactiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnactiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountTypeID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property accountTypeID() As Integer
		Get
			Return Me._accountTypeID
		End Get
		Set
			If ((Me._accountTypeID = value)  _
						= false) Then
				Me.OnaccountTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._accountTypeID = value
				Me.SendPropertyChanged("accountTypeID")
				Me.OnaccountTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountTypeName", DbType:="VarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property accountTypeName() As String
		Get
			Return Me._accountTypeName
		End Get
		Set
			If (String.Equals(Me._accountTypeName, value) = false) Then
				Me.OnaccountTypeNameChanging(value)
				Me.SendPropertyChanging
				Me._accountTypeName = value
				Me.SendPropertyChanged("accountTypeName")
				Me.OnaccountTypeNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_active", DbType:="Bit")>  _
	Public Property active() As System.Nullable(Of Boolean)
		Get
			Return Me._active
		End Get
		Set
			If (Me._active.Equals(value) = false) Then
				Me.OnactiveChanging(value)
				Me.SendPropertyChanging
				Me._active = value
				Me.SendPropertyChanged("active")
				Me.OnactiveChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblActivityAttachment")>  _
Partial Public Class tblActivityAttachment
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _attachmentID As Integer
	
	Private _documentName As String
	
	Private _contentType As String
	
	Private _size As Long
	
	Private _data As System.Data.Linq.Binary
	
	Private _accountID As String
	
	Private _dateUploaded As System.Nullable(Of Date)
	
	Private _uploadedBy As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnattachmentIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnattachmentIDChanged()
    End Sub
    Partial Private Sub OndocumentNameChanging(value As String)
    End Sub
    Partial Private Sub OndocumentNameChanged()
    End Sub
    Partial Private Sub OncontentTypeChanging(value As String)
    End Sub
    Partial Private Sub OncontentTypeChanged()
    End Sub
    Partial Private Sub OnsizeChanging(value As Long)
    End Sub
    Partial Private Sub OnsizeChanged()
    End Sub
    Partial Private Sub OndataChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OndataChanged()
    End Sub
    Partial Private Sub OnaccountIDChanging(value As String)
    End Sub
    Partial Private Sub OnaccountIDChanged()
    End Sub
    Partial Private Sub OndateUploadedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OndateUploadedChanged()
    End Sub
    Partial Private Sub OnuploadedByChanging(value As String)
    End Sub
    Partial Private Sub OnuploadedByChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_attachmentID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property attachmentID() As Integer
		Get
			Return Me._attachmentID
		End Get
		Set
			If ((Me._attachmentID = value)  _
						= false) Then
				Me.OnattachmentIDChanging(value)
				Me.SendPropertyChanging
				Me._attachmentID = value
				Me.SendPropertyChanged("attachmentID")
				Me.OnattachmentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_documentName", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property documentName() As String
		Get
			Return Me._documentName
		End Get
		Set
			If (String.Equals(Me._documentName, value) = false) Then
				Me.OndocumentNameChanging(value)
				Me.SendPropertyChanging
				Me._documentName = value
				Me.SendPropertyChanged("documentName")
				Me.OndocumentNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_contentType", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property contentType() As String
		Get
			Return Me._contentType
		End Get
		Set
			If (String.Equals(Me._contentType, value) = false) Then
				Me.OncontentTypeChanging(value)
				Me.SendPropertyChanging
				Me._contentType = value
				Me.SendPropertyChanged("contentType")
				Me.OncontentTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_size", DbType:="BigInt NOT NULL")>  _
	Public Property size() As Long
		Get
			Return Me._size
		End Get
		Set
			If ((Me._size = value)  _
						= false) Then
				Me.OnsizeChanging(value)
				Me.SendPropertyChanging
				Me._size = value
				Me.SendPropertyChanged("size")
				Me.OnsizeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_data", DbType:="VarBinary(MAX) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property data() As System.Data.Linq.Binary
		Get
			Return Me._data
		End Get
		Set
			If (Object.Equals(Me._data, value) = false) Then
				Me.OndataChanging(value)
				Me.SendPropertyChanging
				Me._data = value
				Me.SendPropertyChanged("data")
				Me.OndataChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="NVarChar(50)")>  _
	Public Property accountID() As String
		Get
			Return Me._accountID
		End Get
		Set
			If (String.Equals(Me._accountID, value) = false) Then
				Me.OnaccountIDChanging(value)
				Me.SendPropertyChanging
				Me._accountID = value
				Me.SendPropertyChanged("accountID")
				Me.OnaccountIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateUploaded", DbType:="SmallDateTime")>  _
	Public Property dateUploaded() As System.Nullable(Of Date)
		Get
			Return Me._dateUploaded
		End Get
		Set
			If (Me._dateUploaded.Equals(value) = false) Then
				Me.OndateUploadedChanging(value)
				Me.SendPropertyChanging
				Me._dateUploaded = value
				Me.SendPropertyChanged("dateUploaded")
				Me.OndateUploadedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_uploadedBy", DbType:="NVarChar(50)")>  _
	Public Property uploadedBy() As String
		Get
			Return Me._uploadedBy
		End Get
		Set
			If (String.Equals(Me._uploadedBy, value) = false) Then
				Me.OnuploadedByChanging(value)
				Me.SendPropertyChanging
				Me._uploadedBy = value
				Me.SendPropertyChanged("uploadedBy")
				Me.OnuploadedByChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblActivityField")>  _
Partial Public Class tblActivityField
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _fieldID As Integer
	
	Private _activityTypeID As System.Nullable(Of Integer)
	
	Private _fieldName As String
	
	Private _active As System.Nullable(Of Boolean)
	
	Private _sortOrder As System.Nullable(Of Integer)
	
	Private _type As String
	
	Private _rows As System.Nullable(Of Integer)
	
	Private _required As System.Nullable(Of Boolean)
	
	Private _desiredOrder As System.Nullable(Of Integer)
	
	Private _choices As String
	
	Private _displayOptions As String
	
	Private _description As String
	
	Private _yes_noDefaultValue As String
	
	Private _numberDecimalPlace As System.Nullable(Of Integer)
	
	Private _numberDefaultValue As String
	
	Private _showPercentage As System.Nullable(Of Boolean)
	
	Private _dateFormat As String
	
	Private _dateDefaultValue As String
	
	Private _timeFormat As String
	
	Private _dateDisplay As String
	
	Private _selectedDateVaule As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnfieldIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnfieldIDChanged()
    End Sub
    Partial Private Sub OnactivityTypeIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnactivityTypeIDChanged()
    End Sub
    Partial Private Sub OnfieldNameChanging(value As String)
    End Sub
    Partial Private Sub OnfieldNameChanged()
    End Sub
    Partial Private Sub OnactiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnactiveChanged()
    End Sub
    Partial Private Sub OnsortOrderChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnsortOrderChanged()
    End Sub
    Partial Private Sub OntypeChanging(value As String)
    End Sub
    Partial Private Sub OntypeChanged()
    End Sub
    Partial Private Sub OnrowsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnrowsChanged()
    End Sub
    Partial Private Sub OnrequiredChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnrequiredChanged()
    End Sub
    Partial Private Sub OndesiredOrderChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OndesiredOrderChanged()
    End Sub
    Partial Private Sub OnchoicesChanging(value As String)
    End Sub
    Partial Private Sub OnchoicesChanged()
    End Sub
    Partial Private Sub OndisplayOptionsChanging(value As String)
    End Sub
    Partial Private Sub OndisplayOptionsChanged()
    End Sub
    Partial Private Sub OndescriptionChanging(value As String)
    End Sub
    Partial Private Sub OndescriptionChanged()
    End Sub
    Partial Private Sub Onyes_noDefaultValueChanging(value As String)
    End Sub
    Partial Private Sub Onyes_noDefaultValueChanged()
    End Sub
    Partial Private Sub OnnumberDecimalPlaceChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnnumberDecimalPlaceChanged()
    End Sub
    Partial Private Sub OnnumberDefaultValueChanging(value As String)
    End Sub
    Partial Private Sub OnnumberDefaultValueChanged()
    End Sub
    Partial Private Sub OnshowPercentageChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnshowPercentageChanged()
    End Sub
    Partial Private Sub OndateFormatChanging(value As String)
    End Sub
    Partial Private Sub OndateFormatChanged()
    End Sub
    Partial Private Sub OndateDefaultValueChanging(value As String)
    End Sub
    Partial Private Sub OndateDefaultValueChanged()
    End Sub
    Partial Private Sub OntimeFormatChanging(value As String)
    End Sub
    Partial Private Sub OntimeFormatChanged()
    End Sub
    Partial Private Sub OndateDisplayChanging(value As String)
    End Sub
    Partial Private Sub OndateDisplayChanged()
    End Sub
    Partial Private Sub OnselectedDateVauleChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnselectedDateVauleChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fieldID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property fieldID() As Integer
		Get
			Return Me._fieldID
		End Get
		Set
			If ((Me._fieldID = value)  _
						= false) Then
				Me.OnfieldIDChanging(value)
				Me.SendPropertyChanging
				Me._fieldID = value
				Me.SendPropertyChanged("fieldID")
				Me.OnfieldIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_activityTypeID", DbType:="Int")>  _
	Public Property activityTypeID() As System.Nullable(Of Integer)
		Get
			Return Me._activityTypeID
		End Get
		Set
			If (Me._activityTypeID.Equals(value) = false) Then
				Me.OnactivityTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._activityTypeID = value
				Me.SendPropertyChanged("activityTypeID")
				Me.OnactivityTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fieldName", DbType:="NVarChar(256)")>  _
	Public Property fieldName() As String
		Get
			Return Me._fieldName
		End Get
		Set
			If (String.Equals(Me._fieldName, value) = false) Then
				Me.OnfieldNameChanging(value)
				Me.SendPropertyChanging
				Me._fieldName = value
				Me.SendPropertyChanged("fieldName")
				Me.OnfieldNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_active", DbType:="Bit")>  _
	Public Property active() As System.Nullable(Of Boolean)
		Get
			Return Me._active
		End Get
		Set
			If (Me._active.Equals(value) = false) Then
				Me.OnactiveChanging(value)
				Me.SendPropertyChanging
				Me._active = value
				Me.SendPropertyChanged("active")
				Me.OnactiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sortOrder", DbType:="Int")>  _
	Public Property sortOrder() As System.Nullable(Of Integer)
		Get
			Return Me._sortOrder
		End Get
		Set
			If (Me._sortOrder.Equals(value) = false) Then
				Me.OnsortOrderChanging(value)
				Me.SendPropertyChanging
				Me._sortOrder = value
				Me.SendPropertyChanged("sortOrder")
				Me.OnsortOrderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_type", DbType:="NVarChar(50)")>  _
	Public Property type() As String
		Get
			Return Me._type
		End Get
		Set
			If (String.Equals(Me._type, value) = false) Then
				Me.OntypeChanging(value)
				Me.SendPropertyChanging
				Me._type = value
				Me.SendPropertyChanged("type")
				Me.OntypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rows", DbType:="Int")>  _
	Public Property rows() As System.Nullable(Of Integer)
		Get
			Return Me._rows
		End Get
		Set
			If (Me._rows.Equals(value) = false) Then
				Me.OnrowsChanging(value)
				Me.SendPropertyChanging
				Me._rows = value
				Me.SendPropertyChanged("rows")
				Me.OnrowsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_required", DbType:="Bit")>  _
	Public Property required() As System.Nullable(Of Boolean)
		Get
			Return Me._required
		End Get
		Set
			If (Me._required.Equals(value) = false) Then
				Me.OnrequiredChanging(value)
				Me.SendPropertyChanging
				Me._required = value
				Me.SendPropertyChanged("required")
				Me.OnrequiredChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_desiredOrder", DbType:="Int")>  _
	Public Property desiredOrder() As System.Nullable(Of Integer)
		Get
			Return Me._desiredOrder
		End Get
		Set
			If (Me._desiredOrder.Equals(value) = false) Then
				Me.OndesiredOrderChanging(value)
				Me.SendPropertyChanging
				Me._desiredOrder = value
				Me.SendPropertyChanged("desiredOrder")
				Me.OndesiredOrderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_choices", DbType:="NVarChar(MAX)")>  _
	Public Property choices() As String
		Get
			Return Me._choices
		End Get
		Set
			If (String.Equals(Me._choices, value) = false) Then
				Me.OnchoicesChanging(value)
				Me.SendPropertyChanging
				Me._choices = value
				Me.SendPropertyChanged("choices")
				Me.OnchoicesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_displayOptions", DbType:="NVarChar(50)")>  _
	Public Property displayOptions() As String
		Get
			Return Me._displayOptions
		End Get
		Set
			If (String.Equals(Me._displayOptions, value) = false) Then
				Me.OndisplayOptionsChanging(value)
				Me.SendPropertyChanging
				Me._displayOptions = value
				Me.SendPropertyChanged("displayOptions")
				Me.OndisplayOptionsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_description", DbType:="NVarChar(2000)")>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me.OndescriptionChanging(value)
				Me.SendPropertyChanging
				Me._description = value
				Me.SendPropertyChanged("description")
				Me.OndescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[yes/noDefaultValue]", Storage:="_yes_noDefaultValue", DbType:="NVarChar(50)")>  _
	Public Property yes_noDefaultValue() As String
		Get
			Return Me._yes_noDefaultValue
		End Get
		Set
			If (String.Equals(Me._yes_noDefaultValue, value) = false) Then
				Me.Onyes_noDefaultValueChanging(value)
				Me.SendPropertyChanging
				Me._yes_noDefaultValue = value
				Me.SendPropertyChanged("yes_noDefaultValue")
				Me.Onyes_noDefaultValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_numberDecimalPlace", DbType:="Int")>  _
	Public Property numberDecimalPlace() As System.Nullable(Of Integer)
		Get
			Return Me._numberDecimalPlace
		End Get
		Set
			If (Me._numberDecimalPlace.Equals(value) = false) Then
				Me.OnnumberDecimalPlaceChanging(value)
				Me.SendPropertyChanging
				Me._numberDecimalPlace = value
				Me.SendPropertyChanged("numberDecimalPlace")
				Me.OnnumberDecimalPlaceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_numberDefaultValue", DbType:="VarChar(50)")>  _
	Public Property numberDefaultValue() As String
		Get
			Return Me._numberDefaultValue
		End Get
		Set
			If (String.Equals(Me._numberDefaultValue, value) = false) Then
				Me.OnnumberDefaultValueChanging(value)
				Me.SendPropertyChanging
				Me._numberDefaultValue = value
				Me.SendPropertyChanged("numberDefaultValue")
				Me.OnnumberDefaultValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_showPercentage", DbType:="Bit")>  _
	Public Property showPercentage() As System.Nullable(Of Boolean)
		Get
			Return Me._showPercentage
		End Get
		Set
			If (Me._showPercentage.Equals(value) = false) Then
				Me.OnshowPercentageChanging(value)
				Me.SendPropertyChanging
				Me._showPercentage = value
				Me.SendPropertyChanged("showPercentage")
				Me.OnshowPercentageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateFormat", DbType:="NVarChar(50)")>  _
	Public Property dateFormat() As String
		Get
			Return Me._dateFormat
		End Get
		Set
			If (String.Equals(Me._dateFormat, value) = false) Then
				Me.OndateFormatChanging(value)
				Me.SendPropertyChanging
				Me._dateFormat = value
				Me.SendPropertyChanged("dateFormat")
				Me.OndateFormatChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateDefaultValue", DbType:="NVarChar(50)")>  _
	Public Property dateDefaultValue() As String
		Get
			Return Me._dateDefaultValue
		End Get
		Set
			If (String.Equals(Me._dateDefaultValue, value) = false) Then
				Me.OndateDefaultValueChanging(value)
				Me.SendPropertyChanging
				Me._dateDefaultValue = value
				Me.SendPropertyChanged("dateDefaultValue")
				Me.OndateDefaultValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_timeFormat", DbType:="NVarChar(50)")>  _
	Public Property timeFormat() As String
		Get
			Return Me._timeFormat
		End Get
		Set
			If (String.Equals(Me._timeFormat, value) = false) Then
				Me.OntimeFormatChanging(value)
				Me.SendPropertyChanging
				Me._timeFormat = value
				Me.SendPropertyChanged("timeFormat")
				Me.OntimeFormatChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateDisplay", DbType:="NVarChar(50)")>  _
	Public Property dateDisplay() As String
		Get
			Return Me._dateDisplay
		End Get
		Set
			If (String.Equals(Me._dateDisplay, value) = false) Then
				Me.OndateDisplayChanging(value)
				Me.SendPropertyChanging
				Me._dateDisplay = value
				Me.SendPropertyChanged("dateDisplay")
				Me.OndateDisplayChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_selectedDateVaule", DbType:="SmallDateTime")>  _
	Public Property selectedDateVaule() As System.Nullable(Of Date)
		Get
			Return Me._selectedDateVaule
		End Get
		Set
			If (Me._selectedDateVaule.Equals(value) = false) Then
				Me.OnselectedDateVauleChanging(value)
				Me.SendPropertyChanging
				Me._selectedDateVaule = value
				Me.SendPropertyChanged("selectedDateVaule")
				Me.OnselectedDateVauleChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblActivityOption")>  _
Partial Public Class tblActivityOption
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _activityOptionID As Integer
	
	Private _fieldID As System.Nullable(Of Integer)
	
	Private _order As System.Nullable(Of Integer)
	
	Private _optionName As String
	
	Private _optionValue As String
	
	Private _optionType As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnactivityOptionIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnactivityOptionIDChanged()
    End Sub
    Partial Private Sub OnfieldIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnfieldIDChanged()
    End Sub
    Partial Private Sub OnorderChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnorderChanged()
    End Sub
    Partial Private Sub OnoptionNameChanging(value As String)
    End Sub
    Partial Private Sub OnoptionNameChanged()
    End Sub
    Partial Private Sub OnoptionValueChanging(value As String)
    End Sub
    Partial Private Sub OnoptionValueChanged()
    End Sub
    Partial Private Sub OnoptionTypeChanging(value As String)
    End Sub
    Partial Private Sub OnoptionTypeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_activityOptionID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property activityOptionID() As Integer
		Get
			Return Me._activityOptionID
		End Get
		Set
			If ((Me._activityOptionID = value)  _
						= false) Then
				Me.OnactivityOptionIDChanging(value)
				Me.SendPropertyChanging
				Me._activityOptionID = value
				Me.SendPropertyChanged("activityOptionID")
				Me.OnactivityOptionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fieldID", DbType:="Int")>  _
	Public Property fieldID() As System.Nullable(Of Integer)
		Get
			Return Me._fieldID
		End Get
		Set
			If (Me._fieldID.Equals(value) = false) Then
				Me.OnfieldIDChanging(value)
				Me.SendPropertyChanging
				Me._fieldID = value
				Me.SendPropertyChanged("fieldID")
				Me.OnfieldIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_order", DbType:="Int")>  _
	Public Property [order]() As System.Nullable(Of Integer)
		Get
			Return Me._order
		End Get
		Set
			If (Me._order.Equals(value) = false) Then
				Me.OnorderChanging(value)
				Me.SendPropertyChanging
				Me._order = value
				Me.SendPropertyChanged("[order]")
				Me.OnorderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_optionName", DbType:="NVarChar(50)")>  _
	Public Property optionName() As String
		Get
			Return Me._optionName
		End Get
		Set
			If (String.Equals(Me._optionName, value) = false) Then
				Me.OnoptionNameChanging(value)
				Me.SendPropertyChanging
				Me._optionName = value
				Me.SendPropertyChanged("optionName")
				Me.OnoptionNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_optionValue", DbType:="NVarChar(50)")>  _
	Public Property optionValue() As String
		Get
			Return Me._optionValue
		End Get
		Set
			If (String.Equals(Me._optionValue, value) = false) Then
				Me.OnoptionValueChanging(value)
				Me.SendPropertyChanging
				Me._optionValue = value
				Me.SendPropertyChanged("optionValue")
				Me.OnoptionValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_optionType", DbType:="NVarChar(50)")>  _
	Public Property optionType() As String
		Get
			Return Me._optionType
		End Get
		Set
			If (String.Equals(Me._optionType, value) = false) Then
				Me.OnoptionTypeChanging(value)
				Me.SendPropertyChanging
				Me._optionType = value
				Me.SendPropertyChanged("optionType")
				Me.OnoptionTypeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblActivityType")>  _
Partial Public Class tblActivityType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _activityTypeID As Integer
	
	Private _activityName As String
	
	Private _isDeleted As System.Nullable(Of Boolean)
	
	Private _modifiedBy As String
	
	Private _modifiedDate As System.Nullable(Of Date)
	
	Private _createdBy As String
	
	Private _createdDate As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnactivityTypeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnactivityTypeIDChanged()
    End Sub
    Partial Private Sub OnactivityNameChanging(value As String)
    End Sub
    Partial Private Sub OnactivityNameChanged()
    End Sub
    Partial Private Sub OnisDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnisDeletedChanged()
    End Sub
    Partial Private Sub OnmodifiedByChanging(value As String)
    End Sub
    Partial Private Sub OnmodifiedByChanged()
    End Sub
    Partial Private Sub OnmodifiedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnmodifiedDateChanged()
    End Sub
    Partial Private Sub OncreatedByChanging(value As String)
    End Sub
    Partial Private Sub OncreatedByChanged()
    End Sub
    Partial Private Sub OncreatedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OncreatedDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_activityTypeID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property activityTypeID() As Integer
		Get
			Return Me._activityTypeID
		End Get
		Set
			If ((Me._activityTypeID = value)  _
						= false) Then
				Me.OnactivityTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._activityTypeID = value
				Me.SendPropertyChanged("activityTypeID")
				Me.OnactivityTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_activityName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property activityName() As String
		Get
			Return Me._activityName
		End Get
		Set
			If (String.Equals(Me._activityName, value) = false) Then
				Me.OnactivityNameChanging(value)
				Me.SendPropertyChanging
				Me._activityName = value
				Me.SendPropertyChanged("activityName")
				Me.OnactivityNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_isDeleted", DbType:="Bit")>  _
	Public Property isDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._isDeleted
		End Get
		Set
			If (Me._isDeleted.Equals(value) = false) Then
				Me.OnisDeletedChanging(value)
				Me.SendPropertyChanging
				Me._isDeleted = value
				Me.SendPropertyChanged("isDeleted")
				Me.OnisDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_modifiedBy", DbType:="NVarChar(50)")>  _
	Public Property modifiedBy() As String
		Get
			Return Me._modifiedBy
		End Get
		Set
			If (String.Equals(Me._modifiedBy, value) = false) Then
				Me.OnmodifiedByChanging(value)
				Me.SendPropertyChanging
				Me._modifiedBy = value
				Me.SendPropertyChanged("modifiedBy")
				Me.OnmodifiedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_modifiedDate", DbType:="SmallDateTime")>  _
	Public Property modifiedDate() As System.Nullable(Of Date)
		Get
			Return Me._modifiedDate
		End Get
		Set
			If (Me._modifiedDate.Equals(value) = false) Then
				Me.OnmodifiedDateChanging(value)
				Me.SendPropertyChanging
				Me._modifiedDate = value
				Me.SendPropertyChanged("modifiedDate")
				Me.OnmodifiedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_createdBy", DbType:="NVarChar(50)")>  _
	Public Property createdBy() As String
		Get
			Return Me._createdBy
		End Get
		Set
			If (String.Equals(Me._createdBy, value) = false) Then
				Me.OncreatedByChanging(value)
				Me.SendPropertyChanging
				Me._createdBy = value
				Me.SendPropertyChanged("createdBy")
				Me.OncreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_createdDate", DbType:="SmallDateTime")>  _
	Public Property createdDate() As System.Nullable(Of Date)
		Get
			Return Me._createdDate
		End Get
		Set
			If (Me._createdDate.Equals(value) = false) Then
				Me.OncreatedDateChanging(value)
				Me.SendPropertyChanging
				Me._createdDate = value
				Me.SendPropertyChanged("createdDate")
				Me.OncreatedDateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblAgencyFee")>  _
Partial Public Class tblAgencyFee
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _agencyFeeID As Integer
	
	Private _title As String
	
	Private _enabled As System.Nullable(Of Boolean)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnagencyFeeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnagencyFeeIDChanged()
    End Sub
    Partial Private Sub OntitleChanging(value As String)
    End Sub
    Partial Private Sub OntitleChanged()
    End Sub
    Partial Private Sub OnenabledChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnenabledChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_agencyFeeID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property agencyFeeID() As Integer
		Get
			Return Me._agencyFeeID
		End Get
		Set
			If ((Me._agencyFeeID = value)  _
						= false) Then
				Me.OnagencyFeeIDChanging(value)
				Me.SendPropertyChanging
				Me._agencyFeeID = value
				Me.SendPropertyChanged("agencyFeeID")
				Me.OnagencyFeeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_title", DbType:="NVarChar(50)")>  _
	Public Property title() As String
		Get
			Return Me._title
		End Get
		Set
			If (String.Equals(Me._title, value) = false) Then
				Me.OntitleChanging(value)
				Me.SendPropertyChanging
				Me._title = value
				Me.SendPropertyChanged("title")
				Me.OntitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_enabled", DbType:="Bit")>  _
	Public Property enabled() As System.Nullable(Of Boolean)
		Get
			Return Me._enabled
		End Get
		Set
			If (Me._enabled.Equals(value) = false) Then
				Me.OnenabledChanging(value)
				Me.SendPropertyChanging
				Me._enabled = value
				Me.SendPropertyChanged("enabled")
				Me.OnenabledChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblAmbassador")>  _
Partial Public Class tblAmbassador
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ambassadorID As Integer
	
	Private _userID As String
	
	Private _userName As String
	
	Private _payrollID As String
	
	Private _userGUID As String
	
	Private _EIN As String
	
	Private _Status As String
	
	Private _EmailAddress As String
	
	Private _FirstName As String
	
	Private _LastName As String
	
	Private _NickName As String
	
	Private _Address1 As String
	
	Private _Address2 As String
	
	Private _City As String
	
	Private _State As String
	
	Private _Zip As String
	
	Private _Phone As String
	
	Private _DOB As String
	
	Private _gender As String
	
	Private _citizen As System.Nullable(Of Boolean)
	
	Private _height As String
	
	Private _weight As String
	
	Private _hairColor As String
	
	Private _eyeColor As String
	
	Private _piersings As System.Nullable(Of Boolean)
	
	Private _smartphone As System.Nullable(Of Boolean)
	
	Private _smartPhoneOS As String
	
	Private _availabilityDate As System.Nullable(Of Date)
	
	Private _lgbt As System.Nullable(Of Boolean)
	
	Private _transportation As System.Nullable(Of Boolean)
	
	Private _mile As String
	
	Private _licenseExpirationDate As System.Nullable(Of Date)
	
	Private _latitude As System.Nullable(Of Double)
	
	Private _longitude As System.Nullable(Of Double)
	
	Private _LastLoginDate As String
	
	Private _dateCreated As System.Nullable(Of Date)
	
	Private _modifiedDate As System.Nullable(Of Date)
	
	Private _createdBy As String
	
	Private _modifiedBy As String
	
	Private _headShotUploaded As System.Nullable(Of Boolean)
	
	Private _bodyShotUploaded As System.Nullable(Of Boolean)
	
	Private _resumeUploaded As System.Nullable(Of Boolean)
	
	Private _licenseUploaded As System.Nullable(Of Boolean)
	
	Private _resumeFileType As String
	
	Private _licenseFileType As String
	
	Private _resumeFileName As String
	
	Private _licenseFileName As String
	
	Private _linkedProfile As System.Nullable(Of Boolean)
	
	Private _beer As System.Nullable(Of Boolean)
	
	Private _spirits As System.Nullable(Of Boolean)
	
	Private _wine As System.Nullable(Of Boolean)
	
	Private _ready As System.Nullable(Of Boolean)
	
	Private _other As System.Nullable(Of Boolean)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnambassadorIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnambassadorIDChanged()
    End Sub
    Partial Private Sub OnuserIDChanging(value As String)
    End Sub
    Partial Private Sub OnuserIDChanged()
    End Sub
    Partial Private Sub OnuserNameChanging(value As String)
    End Sub
    Partial Private Sub OnuserNameChanged()
    End Sub
    Partial Private Sub OnpayrollIDChanging(value As String)
    End Sub
    Partial Private Sub OnpayrollIDChanged()
    End Sub
    Partial Private Sub OnuserGUIDChanging(value As String)
    End Sub
    Partial Private Sub OnuserGUIDChanged()
    End Sub
    Partial Private Sub OnEINChanging(value As String)
    End Sub
    Partial Private Sub OnEINChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As String)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnEmailAddressChanging(value As String)
    End Sub
    Partial Private Sub OnEmailAddressChanged()
    End Sub
    Partial Private Sub OnFirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnFirstNameChanged()
    End Sub
    Partial Private Sub OnLastNameChanging(value As String)
    End Sub
    Partial Private Sub OnLastNameChanged()
    End Sub
    Partial Private Sub OnNickNameChanging(value As String)
    End Sub
    Partial Private Sub OnNickNameChanged()
    End Sub
    Partial Private Sub OnAddress1Changing(value As String)
    End Sub
    Partial Private Sub OnAddress1Changed()
    End Sub
    Partial Private Sub OnAddress2Changing(value As String)
    End Sub
    Partial Private Sub OnAddress2Changed()
    End Sub
    Partial Private Sub OnCityChanging(value As String)
    End Sub
    Partial Private Sub OnCityChanged()
    End Sub
    Partial Private Sub OnStateChanging(value As String)
    End Sub
    Partial Private Sub OnStateChanged()
    End Sub
    Partial Private Sub OnZipChanging(value As String)
    End Sub
    Partial Private Sub OnZipChanged()
    End Sub
    Partial Private Sub OnPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneChanged()
    End Sub
    Partial Private Sub OnDOBChanging(value As String)
    End Sub
    Partial Private Sub OnDOBChanged()
    End Sub
    Partial Private Sub OngenderChanging(value As String)
    End Sub
    Partial Private Sub OngenderChanged()
    End Sub
    Partial Private Sub OncitizenChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OncitizenChanged()
    End Sub
    Partial Private Sub OnheightChanging(value As String)
    End Sub
    Partial Private Sub OnheightChanged()
    End Sub
    Partial Private Sub OnweightChanging(value As String)
    End Sub
    Partial Private Sub OnweightChanged()
    End Sub
    Partial Private Sub OnhairColorChanging(value As String)
    End Sub
    Partial Private Sub OnhairColorChanged()
    End Sub
    Partial Private Sub OneyeColorChanging(value As String)
    End Sub
    Partial Private Sub OneyeColorChanged()
    End Sub
    Partial Private Sub OnpiersingsChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnpiersingsChanged()
    End Sub
    Partial Private Sub OnsmartphoneChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnsmartphoneChanged()
    End Sub
    Partial Private Sub OnsmartPhoneOSChanging(value As String)
    End Sub
    Partial Private Sub OnsmartPhoneOSChanged()
    End Sub
    Partial Private Sub OnavailabilityDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnavailabilityDateChanged()
    End Sub
    Partial Private Sub OnlgbtChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnlgbtChanged()
    End Sub
    Partial Private Sub OntransportationChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OntransportationChanged()
    End Sub
    Partial Private Sub OnmileChanging(value As String)
    End Sub
    Partial Private Sub OnmileChanged()
    End Sub
    Partial Private Sub OnlicenseExpirationDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnlicenseExpirationDateChanged()
    End Sub
    Partial Private Sub OnlatitudeChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnlatitudeChanged()
    End Sub
    Partial Private Sub OnlongitudeChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnlongitudeChanged()
    End Sub
    Partial Private Sub OnLastLoginDateChanging(value As String)
    End Sub
    Partial Private Sub OnLastLoginDateChanged()
    End Sub
    Partial Private Sub OndateCreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OndateCreatedChanged()
    End Sub
    Partial Private Sub OnmodifiedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnmodifiedDateChanged()
    End Sub
    Partial Private Sub OncreatedByChanging(value As String)
    End Sub
    Partial Private Sub OncreatedByChanged()
    End Sub
    Partial Private Sub OnmodifiedByChanging(value As String)
    End Sub
    Partial Private Sub OnmodifiedByChanged()
    End Sub
    Partial Private Sub OnheadShotUploadedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnheadShotUploadedChanged()
    End Sub
    Partial Private Sub OnbodyShotUploadedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnbodyShotUploadedChanged()
    End Sub
    Partial Private Sub OnresumeUploadedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnresumeUploadedChanged()
    End Sub
    Partial Private Sub OnlicenseUploadedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnlicenseUploadedChanged()
    End Sub
    Partial Private Sub OnresumeFileTypeChanging(value As String)
    End Sub
    Partial Private Sub OnresumeFileTypeChanged()
    End Sub
    Partial Private Sub OnlicenseFileTypeChanging(value As String)
    End Sub
    Partial Private Sub OnlicenseFileTypeChanged()
    End Sub
    Partial Private Sub OnresumeFileNameChanging(value As String)
    End Sub
    Partial Private Sub OnresumeFileNameChanged()
    End Sub
    Partial Private Sub OnlicenseFileNameChanging(value As String)
    End Sub
    Partial Private Sub OnlicenseFileNameChanged()
    End Sub
    Partial Private Sub OnlinkedProfileChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnlinkedProfileChanged()
    End Sub
    Partial Private Sub OnbeerChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnbeerChanged()
    End Sub
    Partial Private Sub OnspiritsChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnspiritsChanged()
    End Sub
    Partial Private Sub OnwineChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnwineChanged()
    End Sub
    Partial Private Sub OnreadyChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnreadyChanged()
    End Sub
    Partial Private Sub OnotherChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnotherChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ambassadorID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ambassadorID() As Integer
		Get
			Return Me._ambassadorID
		End Get
		Set
			If ((Me._ambassadorID = value)  _
						= false) Then
				Me.OnambassadorIDChanging(value)
				Me.SendPropertyChanging
				Me._ambassadorID = value
				Me.SendPropertyChanged("ambassadorID")
				Me.OnambassadorIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me.OnuserIDChanging(value)
				Me.SendPropertyChanging
				Me._userID = value
				Me.SendPropertyChanged("userID")
				Me.OnuserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userName", DbType:="NVarChar(50)")>  _
	Public Property userName() As String
		Get
			Return Me._userName
		End Get
		Set
			If (String.Equals(Me._userName, value) = false) Then
				Me.OnuserNameChanging(value)
				Me.SendPropertyChanging
				Me._userName = value
				Me.SendPropertyChanged("userName")
				Me.OnuserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_payrollID", DbType:="NVarChar(50)")>  _
	Public Property payrollID() As String
		Get
			Return Me._payrollID
		End Get
		Set
			If (String.Equals(Me._payrollID, value) = false) Then
				Me.OnpayrollIDChanging(value)
				Me.SendPropertyChanging
				Me._payrollID = value
				Me.SendPropertyChanged("payrollID")
				Me.OnpayrollIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userGUID", DbType:="NVarChar(50)")>  _
	Public Property userGUID() As String
		Get
			Return Me._userGUID
		End Get
		Set
			If (String.Equals(Me._userGUID, value) = false) Then
				Me.OnuserGUIDChanging(value)
				Me.SendPropertyChanging
				Me._userGUID = value
				Me.SendPropertyChanged("userGUID")
				Me.OnuserGUIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EIN", DbType:="NVarChar(50)")>  _
	Public Property EIN() As String
		Get
			Return Me._EIN
		End Get
		Set
			If (String.Equals(Me._EIN, value) = false) Then
				Me.OnEINChanging(value)
				Me.SendPropertyChanging
				Me._EIN = value
				Me.SendPropertyChanged("EIN")
				Me.OnEINChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="VarChar(20)")>  _
	Public Property Status() As String
		Get
			Return Me._Status
		End Get
		Set
			If (String.Equals(Me._Status, value) = false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmailAddress", DbType:="NVarChar(50)")>  _
	Public Property EmailAddress() As String
		Get
			Return Me._EmailAddress
		End Get
		Set
			If (String.Equals(Me._EmailAddress, value) = false) Then
				Me.OnEmailAddressChanging(value)
				Me.SendPropertyChanging
				Me._EmailAddress = value
				Me.SendPropertyChanged("EmailAddress")
				Me.OnEmailAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="NVarChar(50)")>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me.OnFirstNameChanging(value)
				Me.SendPropertyChanging
				Me._FirstName = value
				Me.SendPropertyChanged("FirstName")
				Me.OnFirstNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="NVarChar(50)")>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me.OnLastNameChanging(value)
				Me.SendPropertyChanging
				Me._LastName = value
				Me.SendPropertyChanged("LastName")
				Me.OnLastNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NickName", DbType:="NVarChar(50)")>  _
	Public Property NickName() As String
		Get
			Return Me._NickName
		End Get
		Set
			If (String.Equals(Me._NickName, value) = false) Then
				Me.OnNickNameChanging(value)
				Me.SendPropertyChanging
				Me._NickName = value
				Me.SendPropertyChanged("NickName")
				Me.OnNickNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address1", DbType:="NVarChar(50)")>  _
	Public Property Address1() As String
		Get
			Return Me._Address1
		End Get
		Set
			If (String.Equals(Me._Address1, value) = false) Then
				Me.OnAddress1Changing(value)
				Me.SendPropertyChanging
				Me._Address1 = value
				Me.SendPropertyChanged("Address1")
				Me.OnAddress1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address2", DbType:="NVarChar(50)")>  _
	Public Property Address2() As String
		Get
			Return Me._Address2
		End Get
		Set
			If (String.Equals(Me._Address2, value) = false) Then
				Me.OnAddress2Changing(value)
				Me.SendPropertyChanging
				Me._Address2 = value
				Me.SendPropertyChanged("Address2")
				Me.OnAddress2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", DbType:="NVarChar(50)")>  _
	Public Property City() As String
		Get
			Return Me._City
		End Get
		Set
			If (String.Equals(Me._City, value) = false) Then
				Me.OnCityChanging(value)
				Me.SendPropertyChanging
				Me._City = value
				Me.SendPropertyChanged("City")
				Me.OnCityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_State", DbType:="NVarChar(50)")>  _
	Public Property State() As String
		Get
			Return Me._State
		End Get
		Set
			If (String.Equals(Me._State, value) = false) Then
				Me.OnStateChanging(value)
				Me.SendPropertyChanging
				Me._State = value
				Me.SendPropertyChanged("State")
				Me.OnStateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Zip", DbType:="NVarChar(50)")>  _
	Public Property Zip() As String
		Get
			Return Me._Zip
		End Get
		Set
			If (String.Equals(Me._Zip, value) = false) Then
				Me.OnZipChanging(value)
				Me.SendPropertyChanging
				Me._Zip = value
				Me.SendPropertyChanged("Zip")
				Me.OnZipChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone", DbType:="NVarChar(50)")>  _
	Public Property Phone() As String
		Get
			Return Me._Phone
		End Get
		Set
			If (String.Equals(Me._Phone, value) = false) Then
				Me.OnPhoneChanging(value)
				Me.SendPropertyChanging
				Me._Phone = value
				Me.SendPropertyChanged("Phone")
				Me.OnPhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DOB", DbType:="NVarChar(100)")>  _
	Public Property DOB() As String
		Get
			Return Me._DOB
		End Get
		Set
			If (String.Equals(Me._DOB, value) = false) Then
				Me.OnDOBChanging(value)
				Me.SendPropertyChanging
				Me._DOB = value
				Me.SendPropertyChanged("DOB")
				Me.OnDOBChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_gender", DbType:="VarChar(50)")>  _
	Public Property gender() As String
		Get
			Return Me._gender
		End Get
		Set
			If (String.Equals(Me._gender, value) = false) Then
				Me.OngenderChanging(value)
				Me.SendPropertyChanging
				Me._gender = value
				Me.SendPropertyChanged("gender")
				Me.OngenderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_citizen", DbType:="Bit")>  _
	Public Property citizen() As System.Nullable(Of Boolean)
		Get
			Return Me._citizen
		End Get
		Set
			If (Me._citizen.Equals(value) = false) Then
				Me.OncitizenChanging(value)
				Me.SendPropertyChanging
				Me._citizen = value
				Me.SendPropertyChanged("citizen")
				Me.OncitizenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_height", DbType:="VarChar(50)")>  _
	Public Property height() As String
		Get
			Return Me._height
		End Get
		Set
			If (String.Equals(Me._height, value) = false) Then
				Me.OnheightChanging(value)
				Me.SendPropertyChanging
				Me._height = value
				Me.SendPropertyChanged("height")
				Me.OnheightChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_weight", DbType:="VarChar(20)")>  _
	Public Property weight() As String
		Get
			Return Me._weight
		End Get
		Set
			If (String.Equals(Me._weight, value) = false) Then
				Me.OnweightChanging(value)
				Me.SendPropertyChanging
				Me._weight = value
				Me.SendPropertyChanged("weight")
				Me.OnweightChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hairColor", DbType:="VarChar(20)")>  _
	Public Property hairColor() As String
		Get
			Return Me._hairColor
		End Get
		Set
			If (String.Equals(Me._hairColor, value) = false) Then
				Me.OnhairColorChanging(value)
				Me.SendPropertyChanging
				Me._hairColor = value
				Me.SendPropertyChanged("hairColor")
				Me.OnhairColorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eyeColor", DbType:="VarChar(20)")>  _
	Public Property eyeColor() As String
		Get
			Return Me._eyeColor
		End Get
		Set
			If (String.Equals(Me._eyeColor, value) = false) Then
				Me.OneyeColorChanging(value)
				Me.SendPropertyChanging
				Me._eyeColor = value
				Me.SendPropertyChanged("eyeColor")
				Me.OneyeColorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_piersings", DbType:="Bit")>  _
	Public Property piersings() As System.Nullable(Of Boolean)
		Get
			Return Me._piersings
		End Get
		Set
			If (Me._piersings.Equals(value) = false) Then
				Me.OnpiersingsChanging(value)
				Me.SendPropertyChanging
				Me._piersings = value
				Me.SendPropertyChanged("piersings")
				Me.OnpiersingsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_smartphone", DbType:="Bit")>  _
	Public Property smartphone() As System.Nullable(Of Boolean)
		Get
			Return Me._smartphone
		End Get
		Set
			If (Me._smartphone.Equals(value) = false) Then
				Me.OnsmartphoneChanging(value)
				Me.SendPropertyChanging
				Me._smartphone = value
				Me.SendPropertyChanged("smartphone")
				Me.OnsmartphoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_smartPhoneOS", DbType:="NVarChar(50)")>  _
	Public Property smartPhoneOS() As String
		Get
			Return Me._smartPhoneOS
		End Get
		Set
			If (String.Equals(Me._smartPhoneOS, value) = false) Then
				Me.OnsmartPhoneOSChanging(value)
				Me.SendPropertyChanging
				Me._smartPhoneOS = value
				Me.SendPropertyChanged("smartPhoneOS")
				Me.OnsmartPhoneOSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_availabilityDate", DbType:="SmallDateTime")>  _
	Public Property availabilityDate() As System.Nullable(Of Date)
		Get
			Return Me._availabilityDate
		End Get
		Set
			If (Me._availabilityDate.Equals(value) = false) Then
				Me.OnavailabilityDateChanging(value)
				Me.SendPropertyChanging
				Me._availabilityDate = value
				Me.SendPropertyChanged("availabilityDate")
				Me.OnavailabilityDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lgbt", DbType:="Bit")>  _
	Public Property lgbt() As System.Nullable(Of Boolean)
		Get
			Return Me._lgbt
		End Get
		Set
			If (Me._lgbt.Equals(value) = false) Then
				Me.OnlgbtChanging(value)
				Me.SendPropertyChanging
				Me._lgbt = value
				Me.SendPropertyChanged("lgbt")
				Me.OnlgbtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_transportation", DbType:="Bit")>  _
	Public Property transportation() As System.Nullable(Of Boolean)
		Get
			Return Me._transportation
		End Get
		Set
			If (Me._transportation.Equals(value) = false) Then
				Me.OntransportationChanging(value)
				Me.SendPropertyChanging
				Me._transportation = value
				Me.SendPropertyChanged("transportation")
				Me.OntransportationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_mile", DbType:="VarChar(50)")>  _
	Public Property mile() As String
		Get
			Return Me._mile
		End Get
		Set
			If (String.Equals(Me._mile, value) = false) Then
				Me.OnmileChanging(value)
				Me.SendPropertyChanging
				Me._mile = value
				Me.SendPropertyChanged("mile")
				Me.OnmileChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_licenseExpirationDate", DbType:="SmallDateTime")>  _
	Public Property licenseExpirationDate() As System.Nullable(Of Date)
		Get
			Return Me._licenseExpirationDate
		End Get
		Set
			If (Me._licenseExpirationDate.Equals(value) = false) Then
				Me.OnlicenseExpirationDateChanging(value)
				Me.SendPropertyChanging
				Me._licenseExpirationDate = value
				Me.SendPropertyChanged("licenseExpirationDate")
				Me.OnlicenseExpirationDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_latitude", DbType:="Float")>  _
	Public Property latitude() As System.Nullable(Of Double)
		Get
			Return Me._latitude
		End Get
		Set
			If (Me._latitude.Equals(value) = false) Then
				Me.OnlatitudeChanging(value)
				Me.SendPropertyChanging
				Me._latitude = value
				Me.SendPropertyChanged("latitude")
				Me.OnlatitudeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_longitude", DbType:="Float")>  _
	Public Property longitude() As System.Nullable(Of Double)
		Get
			Return Me._longitude
		End Get
		Set
			If (Me._longitude.Equals(value) = false) Then
				Me.OnlongitudeChanging(value)
				Me.SendPropertyChanging
				Me._longitude = value
				Me.SendPropertyChanged("longitude")
				Me.OnlongitudeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastLoginDate", DbType:="NVarChar(100)")>  _
	Public Property LastLoginDate() As String
		Get
			Return Me._LastLoginDate
		End Get
		Set
			If (String.Equals(Me._LastLoginDate, value) = false) Then
				Me.OnLastLoginDateChanging(value)
				Me.SendPropertyChanging
				Me._LastLoginDate = value
				Me.SendPropertyChanged("LastLoginDate")
				Me.OnLastLoginDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateCreated", DbType:="SmallDateTime")>  _
	Public Property dateCreated() As System.Nullable(Of Date)
		Get
			Return Me._dateCreated
		End Get
		Set
			If (Me._dateCreated.Equals(value) = false) Then
				Me.OndateCreatedChanging(value)
				Me.SendPropertyChanging
				Me._dateCreated = value
				Me.SendPropertyChanged("dateCreated")
				Me.OndateCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_modifiedDate", DbType:="SmallDateTime")>  _
	Public Property modifiedDate() As System.Nullable(Of Date)
		Get
			Return Me._modifiedDate
		End Get
		Set
			If (Me._modifiedDate.Equals(value) = false) Then
				Me.OnmodifiedDateChanging(value)
				Me.SendPropertyChanging
				Me._modifiedDate = value
				Me.SendPropertyChanged("modifiedDate")
				Me.OnmodifiedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_createdBy", DbType:="NVarChar(50)")>  _
	Public Property createdBy() As String
		Get
			Return Me._createdBy
		End Get
		Set
			If (String.Equals(Me._createdBy, value) = false) Then
				Me.OncreatedByChanging(value)
				Me.SendPropertyChanging
				Me._createdBy = value
				Me.SendPropertyChanged("createdBy")
				Me.OncreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_modifiedBy", DbType:="NVarChar(50)")>  _
	Public Property modifiedBy() As String
		Get
			Return Me._modifiedBy
		End Get
		Set
			If (String.Equals(Me._modifiedBy, value) = false) Then
				Me.OnmodifiedByChanging(value)
				Me.SendPropertyChanging
				Me._modifiedBy = value
				Me.SendPropertyChanged("modifiedBy")
				Me.OnmodifiedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_headShotUploaded", DbType:="Bit")>  _
	Public Property headShotUploaded() As System.Nullable(Of Boolean)
		Get
			Return Me._headShotUploaded
		End Get
		Set
			If (Me._headShotUploaded.Equals(value) = false) Then
				Me.OnheadShotUploadedChanging(value)
				Me.SendPropertyChanging
				Me._headShotUploaded = value
				Me.SendPropertyChanged("headShotUploaded")
				Me.OnheadShotUploadedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bodyShotUploaded", DbType:="Bit")>  _
	Public Property bodyShotUploaded() As System.Nullable(Of Boolean)
		Get
			Return Me._bodyShotUploaded
		End Get
		Set
			If (Me._bodyShotUploaded.Equals(value) = false) Then
				Me.OnbodyShotUploadedChanging(value)
				Me.SendPropertyChanging
				Me._bodyShotUploaded = value
				Me.SendPropertyChanged("bodyShotUploaded")
				Me.OnbodyShotUploadedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_resumeUploaded", DbType:="Bit")>  _
	Public Property resumeUploaded() As System.Nullable(Of Boolean)
		Get
			Return Me._resumeUploaded
		End Get
		Set
			If (Me._resumeUploaded.Equals(value) = false) Then
				Me.OnresumeUploadedChanging(value)
				Me.SendPropertyChanging
				Me._resumeUploaded = value
				Me.SendPropertyChanged("resumeUploaded")
				Me.OnresumeUploadedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_licenseUploaded", DbType:="Bit")>  _
	Public Property licenseUploaded() As System.Nullable(Of Boolean)
		Get
			Return Me._licenseUploaded
		End Get
		Set
			If (Me._licenseUploaded.Equals(value) = false) Then
				Me.OnlicenseUploadedChanging(value)
				Me.SendPropertyChanging
				Me._licenseUploaded = value
				Me.SendPropertyChanged("licenseUploaded")
				Me.OnlicenseUploadedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_resumeFileType", DbType:="VarChar(150)")>  _
	Public Property resumeFileType() As String
		Get
			Return Me._resumeFileType
		End Get
		Set
			If (String.Equals(Me._resumeFileType, value) = false) Then
				Me.OnresumeFileTypeChanging(value)
				Me.SendPropertyChanging
				Me._resumeFileType = value
				Me.SendPropertyChanged("resumeFileType")
				Me.OnresumeFileTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_licenseFileType", DbType:="VarChar(150)")>  _
	Public Property licenseFileType() As String
		Get
			Return Me._licenseFileType
		End Get
		Set
			If (String.Equals(Me._licenseFileType, value) = false) Then
				Me.OnlicenseFileTypeChanging(value)
				Me.SendPropertyChanging
				Me._licenseFileType = value
				Me.SendPropertyChanged("licenseFileType")
				Me.OnlicenseFileTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_resumeFileName", DbType:="NVarChar(150)")>  _
	Public Property resumeFileName() As String
		Get
			Return Me._resumeFileName
		End Get
		Set
			If (String.Equals(Me._resumeFileName, value) = false) Then
				Me.OnresumeFileNameChanging(value)
				Me.SendPropertyChanging
				Me._resumeFileName = value
				Me.SendPropertyChanged("resumeFileName")
				Me.OnresumeFileNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_licenseFileName", DbType:="NVarChar(150)")>  _
	Public Property licenseFileName() As String
		Get
			Return Me._licenseFileName
		End Get
		Set
			If (String.Equals(Me._licenseFileName, value) = false) Then
				Me.OnlicenseFileNameChanging(value)
				Me.SendPropertyChanging
				Me._licenseFileName = value
				Me.SendPropertyChanged("licenseFileName")
				Me.OnlicenseFileNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_linkedProfile", DbType:="Bit")>  _
	Public Property linkedProfile() As System.Nullable(Of Boolean)
		Get
			Return Me._linkedProfile
		End Get
		Set
			If (Me._linkedProfile.Equals(value) = false) Then
				Me.OnlinkedProfileChanging(value)
				Me.SendPropertyChanging
				Me._linkedProfile = value
				Me.SendPropertyChanged("linkedProfile")
				Me.OnlinkedProfileChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_beer", DbType:="Bit")>  _
	Public Property beer() As System.Nullable(Of Boolean)
		Get
			Return Me._beer
		End Get
		Set
			If (Me._beer.Equals(value) = false) Then
				Me.OnbeerChanging(value)
				Me.SendPropertyChanging
				Me._beer = value
				Me.SendPropertyChanged("beer")
				Me.OnbeerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_spirits", DbType:="Bit")>  _
	Public Property spirits() As System.Nullable(Of Boolean)
		Get
			Return Me._spirits
		End Get
		Set
			If (Me._spirits.Equals(value) = false) Then
				Me.OnspiritsChanging(value)
				Me.SendPropertyChanging
				Me._spirits = value
				Me.SendPropertyChanged("spirits")
				Me.OnspiritsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_wine", DbType:="Bit")>  _
	Public Property wine() As System.Nullable(Of Boolean)
		Get
			Return Me._wine
		End Get
		Set
			If (Me._wine.Equals(value) = false) Then
				Me.OnwineChanging(value)
				Me.SendPropertyChanging
				Me._wine = value
				Me.SendPropertyChanged("wine")
				Me.OnwineChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ready", DbType:="Bit")>  _
	Public Property ready() As System.Nullable(Of Boolean)
		Get
			Return Me._ready
		End Get
		Set
			If (Me._ready.Equals(value) = false) Then
				Me.OnreadyChanging(value)
				Me.SendPropertyChanging
				Me._ready = value
				Me.SendPropertyChanged("ready")
				Me.OnreadyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_other", DbType:="Bit")>  _
	Public Property other() As System.Nullable(Of Boolean)
		Get
			Return Me._other
		End Get
		Set
			If (Me._other.Equals(value) = false) Then
				Me.OnotherChanging(value)
				Me.SendPropertyChanging
				Me._other = value
				Me.SendPropertyChanged("other")
				Me.OnotherChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblAmbassadorBrandCategoryType")>  _
Partial Public Class tblAmbassadorBrandCategoryType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ambassadorBrandsID As Integer
	
	Private _userName As String
	
	Private _brandCategoryID As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnambassadorBrandsIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnambassadorBrandsIDChanged()
    End Sub
    Partial Private Sub OnuserNameChanging(value As String)
    End Sub
    Partial Private Sub OnuserNameChanged()
    End Sub
    Partial Private Sub OnbrandCategoryIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnbrandCategoryIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ambassadorBrandsID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ambassadorBrandsID() As Integer
		Get
			Return Me._ambassadorBrandsID
		End Get
		Set
			If ((Me._ambassadorBrandsID = value)  _
						= false) Then
				Me.OnambassadorBrandsIDChanging(value)
				Me.SendPropertyChanging
				Me._ambassadorBrandsID = value
				Me.SendPropertyChanged("ambassadorBrandsID")
				Me.OnambassadorBrandsIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userName", DbType:="NVarChar(50)")>  _
	Public Property userName() As String
		Get
			Return Me._userName
		End Get
		Set
			If (String.Equals(Me._userName, value) = false) Then
				Me.OnuserNameChanging(value)
				Me.SendPropertyChanging
				Me._userName = value
				Me.SendPropertyChanged("userName")
				Me.OnuserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandCategoryID", DbType:="Int")>  _
	Public Property brandCategoryID() As System.Nullable(Of Integer)
		Get
			Return Me._brandCategoryID
		End Get
		Set
			If (Me._brandCategoryID.Equals(value) = false) Then
				Me.OnbrandCategoryIDChanging(value)
				Me.SendPropertyChanging
				Me._brandCategoryID = value
				Me.SendPropertyChanged("brandCategoryID")
				Me.OnbrandCategoryIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblAmbassadorClient")>  _
Partial Public Class tblAmbassadorClient
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _userClientID As Integer
	
	Private _userID As String
	
	Private _clientID As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnuserClientIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnuserClientIDChanged()
    End Sub
    Partial Private Sub OnuserIDChanging(value As String)
    End Sub
    Partial Private Sub OnuserIDChanged()
    End Sub
    Partial Private Sub OnclientIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnclientIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userClientID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property userClientID() As Integer
		Get
			Return Me._userClientID
		End Get
		Set
			If ((Me._userClientID = value)  _
						= false) Then
				Me.OnuserClientIDChanging(value)
				Me.SendPropertyChanging
				Me._userClientID = value
				Me.SendPropertyChanged("userClientID")
				Me.OnuserClientIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me.OnuserIDChanging(value)
				Me.SendPropertyChanging
				Me._userID = value
				Me.SendPropertyChanged("userID")
				Me.OnuserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", DbType:="Int")>  _
	Public Property clientID() As System.Nullable(Of Integer)
		Get
			Return Me._clientID
		End Get
		Set
			If (Me._clientID.Equals(value) = false) Then
				Me.OnclientIDChanging(value)
				Me.SendPropertyChanging
				Me._clientID = value
				Me.SendPropertyChanged("clientID")
				Me.OnclientIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblAmbassadorDocument")>  _
Partial Public Class tblAmbassadorDocument
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ambassadorFileID As Integer
	
	Private _documentName As String
	
	Private _documentTitle As String
	
	Private _expirationDate As String
	
	Private _category As String
	
	Private _contentType As String
	
	Private _size As System.Nullable(Of Long)
	
	Private _data As System.Data.Linq.Binary
	
	Private _userID As String
	
	Private _dateUploaded As System.Nullable(Of Date)
	
	Private _uploadedBy As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnambassadorFileIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnambassadorFileIDChanged()
    End Sub
    Partial Private Sub OndocumentNameChanging(value As String)
    End Sub
    Partial Private Sub OndocumentNameChanged()
    End Sub
    Partial Private Sub OndocumentTitleChanging(value As String)
    End Sub
    Partial Private Sub OndocumentTitleChanged()
    End Sub
    Partial Private Sub OnexpirationDateChanging(value As String)
    End Sub
    Partial Private Sub OnexpirationDateChanged()
    End Sub
    Partial Private Sub OncategoryChanging(value As String)
    End Sub
    Partial Private Sub OncategoryChanged()
    End Sub
    Partial Private Sub OncontentTypeChanging(value As String)
    End Sub
    Partial Private Sub OncontentTypeChanged()
    End Sub
    Partial Private Sub OnsizeChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnsizeChanged()
    End Sub
    Partial Private Sub OndataChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OndataChanged()
    End Sub
    Partial Private Sub OnuserIDChanging(value As String)
    End Sub
    Partial Private Sub OnuserIDChanged()
    End Sub
    Partial Private Sub OndateUploadedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OndateUploadedChanged()
    End Sub
    Partial Private Sub OnuploadedByChanging(value As String)
    End Sub
    Partial Private Sub OnuploadedByChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ambassadorFileID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ambassadorFileID() As Integer
		Get
			Return Me._ambassadorFileID
		End Get
		Set
			If ((Me._ambassadorFileID = value)  _
						= false) Then
				Me.OnambassadorFileIDChanging(value)
				Me.SendPropertyChanging
				Me._ambassadorFileID = value
				Me.SendPropertyChanged("ambassadorFileID")
				Me.OnambassadorFileIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_documentName", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property documentName() As String
		Get
			Return Me._documentName
		End Get
		Set
			If (String.Equals(Me._documentName, value) = false) Then
				Me.OndocumentNameChanging(value)
				Me.SendPropertyChanging
				Me._documentName = value
				Me.SendPropertyChanged("documentName")
				Me.OndocumentNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_documentTitle", DbType:="NVarChar(100)")>  _
	Public Property documentTitle() As String
		Get
			Return Me._documentTitle
		End Get
		Set
			If (String.Equals(Me._documentTitle, value) = false) Then
				Me.OndocumentTitleChanging(value)
				Me.SendPropertyChanging
				Me._documentTitle = value
				Me.SendPropertyChanged("documentTitle")
				Me.OndocumentTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_expirationDate", DbType:="VarChar(50)")>  _
	Public Property expirationDate() As String
		Get
			Return Me._expirationDate
		End Get
		Set
			If (String.Equals(Me._expirationDate, value) = false) Then
				Me.OnexpirationDateChanging(value)
				Me.SendPropertyChanging
				Me._expirationDate = value
				Me.SendPropertyChanged("expirationDate")
				Me.OnexpirationDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_category", DbType:="NVarChar(50)")>  _
	Public Property category() As String
		Get
			Return Me._category
		End Get
		Set
			If (String.Equals(Me._category, value) = false) Then
				Me.OncategoryChanging(value)
				Me.SendPropertyChanging
				Me._category = value
				Me.SendPropertyChanged("category")
				Me.OncategoryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_contentType", DbType:="VarChar(100)")>  _
	Public Property contentType() As String
		Get
			Return Me._contentType
		End Get
		Set
			If (String.Equals(Me._contentType, value) = false) Then
				Me.OncontentTypeChanging(value)
				Me.SendPropertyChanging
				Me._contentType = value
				Me.SendPropertyChanged("contentType")
				Me.OncontentTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_size", DbType:="BigInt")>  _
	Public Property size() As System.Nullable(Of Long)
		Get
			Return Me._size
		End Get
		Set
			If (Me._size.Equals(value) = false) Then
				Me.OnsizeChanging(value)
				Me.SendPropertyChanging
				Me._size = value
				Me.SendPropertyChanged("size")
				Me.OnsizeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_data", DbType:="VarBinary(MAX) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property data() As System.Data.Linq.Binary
		Get
			Return Me._data
		End Get
		Set
			If (Object.Equals(Me._data, value) = false) Then
				Me.OndataChanging(value)
				Me.SendPropertyChanging
				Me._data = value
				Me.SendPropertyChanged("data")
				Me.OndataChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me.OnuserIDChanging(value)
				Me.SendPropertyChanging
				Me._userID = value
				Me.SendPropertyChanged("userID")
				Me.OnuserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateUploaded", DbType:="SmallDateTime")>  _
	Public Property dateUploaded() As System.Nullable(Of Date)
		Get
			Return Me._dateUploaded
		End Get
		Set
			If (Me._dateUploaded.Equals(value) = false) Then
				Me.OndateUploadedChanging(value)
				Me.SendPropertyChanging
				Me._dateUploaded = value
				Me.SendPropertyChanged("dateUploaded")
				Me.OndateUploadedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_uploadedBy", DbType:="NVarChar(50)")>  _
	Public Property uploadedBy() As String
		Get
			Return Me._uploadedBy
		End Get
		Set
			If (String.Equals(Me._uploadedBy, value) = false) Then
				Me.OnuploadedByChanging(value)
				Me.SendPropertyChanging
				Me._uploadedBy = value
				Me.SendPropertyChanged("uploadedBy")
				Me.OnuploadedByChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblAmbassadorEventRequest")>  _
Partial Public Class tblAmbassadorEventRequest
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _requestID As Integer
	
	Private _userID As String
	
	Private _eventID As System.Nullable(Of Integer)
	
	Private _dateRequested As System.Nullable(Of Date)
	
	Private _requestStatus As System.Nullable(Of Integer)
	
	Private _modifiedBy As String
	
	Private _modifiedDate As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnrequestIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnrequestIDChanged()
    End Sub
    Partial Private Sub OnuserIDChanging(value As String)
    End Sub
    Partial Private Sub OnuserIDChanged()
    End Sub
    Partial Private Sub OneventIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OneventIDChanged()
    End Sub
    Partial Private Sub OndateRequestedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OndateRequestedChanged()
    End Sub
    Partial Private Sub OnrequestStatusChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnrequestStatusChanged()
    End Sub
    Partial Private Sub OnmodifiedByChanging(value As String)
    End Sub
    Partial Private Sub OnmodifiedByChanged()
    End Sub
    Partial Private Sub OnmodifiedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnmodifiedDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_requestID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property requestID() As Integer
		Get
			Return Me._requestID
		End Get
		Set
			If ((Me._requestID = value)  _
						= false) Then
				Me.OnrequestIDChanging(value)
				Me.SendPropertyChanging
				Me._requestID = value
				Me.SendPropertyChanged("requestID")
				Me.OnrequestIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me.OnuserIDChanging(value)
				Me.SendPropertyChanging
				Me._userID = value
				Me.SendPropertyChanged("userID")
				Me.OnuserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int")>  _
	Public Property eventID() As System.Nullable(Of Integer)
		Get
			Return Me._eventID
		End Get
		Set
			If (Me._eventID.Equals(value) = false) Then
				Me.OneventIDChanging(value)
				Me.SendPropertyChanging
				Me._eventID = value
				Me.SendPropertyChanged("eventID")
				Me.OneventIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateRequested", DbType:="SmallDateTime")>  _
	Public Property dateRequested() As System.Nullable(Of Date)
		Get
			Return Me._dateRequested
		End Get
		Set
			If (Me._dateRequested.Equals(value) = false) Then
				Me.OndateRequestedChanging(value)
				Me.SendPropertyChanging
				Me._dateRequested = value
				Me.SendPropertyChanged("dateRequested")
				Me.OndateRequestedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_requestStatus", DbType:="Int")>  _
	Public Property requestStatus() As System.Nullable(Of Integer)
		Get
			Return Me._requestStatus
		End Get
		Set
			If (Me._requestStatus.Equals(value) = false) Then
				Me.OnrequestStatusChanging(value)
				Me.SendPropertyChanging
				Me._requestStatus = value
				Me.SendPropertyChanged("requestStatus")
				Me.OnrequestStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_modifiedBy", DbType:="NVarChar(50)")>  _
	Public Property modifiedBy() As String
		Get
			Return Me._modifiedBy
		End Get
		Set
			If (String.Equals(Me._modifiedBy, value) = false) Then
				Me.OnmodifiedByChanging(value)
				Me.SendPropertyChanging
				Me._modifiedBy = value
				Me.SendPropertyChanged("modifiedBy")
				Me.OnmodifiedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_modifiedDate", DbType:="SmallDateTime")>  _
	Public Property modifiedDate() As System.Nullable(Of Date)
		Get
			Return Me._modifiedDate
		End Get
		Set
			If (Me._modifiedDate.Equals(value) = false) Then
				Me.OnmodifiedDateChanging(value)
				Me.SendPropertyChanging
				Me._modifiedDate = value
				Me.SendPropertyChanged("modifiedDate")
				Me.OnmodifiedDateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblAmbassadorEventType")>  _
Partial Public Class tblAmbassadorEventType
	
	Private _ambassadorEventTypeID As Integer
	
	Private _userName As String
	
	Private _eventTypeID As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ambassadorEventTypeID", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property ambassadorEventTypeID() As Integer
		Get
			Return Me._ambassadorEventTypeID
		End Get
		Set
			If ((Me._ambassadorEventTypeID = value)  _
						= false) Then
				Me._ambassadorEventTypeID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userName", DbType:="NVarChar(50)")>  _
	Public Property userName() As String
		Get
			Return Me._userName
		End Get
		Set
			If (String.Equals(Me._userName, value) = false) Then
				Me._userName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTypeID", DbType:="Int")>  _
	Public Property eventTypeID() As System.Nullable(Of Integer)
		Get
			Return Me._eventTypeID
		End Get
		Set
			If (Me._eventTypeID.Equals(value) = false) Then
				Me._eventTypeID = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblAmbassadorMarket")>  _
Partial Public Class tblAmbassadorMarket
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ambassadorMarketID As Integer
	
	Private _userID As String
	
	Private _marketID As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnambassadorMarketIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnambassadorMarketIDChanged()
    End Sub
    Partial Private Sub OnuserIDChanging(value As String)
    End Sub
    Partial Private Sub OnuserIDChanged()
    End Sub
    Partial Private Sub OnmarketIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnmarketIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ambassadorMarketID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ambassadorMarketID() As Integer
		Get
			Return Me._ambassadorMarketID
		End Get
		Set
			If ((Me._ambassadorMarketID = value)  _
						= false) Then
				Me.OnambassadorMarketIDChanging(value)
				Me.SendPropertyChanging
				Me._ambassadorMarketID = value
				Me.SendPropertyChanged("ambassadorMarketID")
				Me.OnambassadorMarketIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me.OnuserIDChanging(value)
				Me.SendPropertyChanging
				Me._userID = value
				Me.SendPropertyChanged("userID")
				Me.OnuserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="Int")>  _
	Public Property marketID() As System.Nullable(Of Integer)
		Get
			Return Me._marketID
		End Get
		Set
			If (Me._marketID.Equals(value) = false) Then
				Me.OnmarketIDChanging(value)
				Me.SendPropertyChanging
				Me._marketID = value
				Me.SendPropertyChanged("marketID")
				Me.OnmarketIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblAmbassadorNote")>  _
Partial Public Class tblAmbassadorNote
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ambassadorNoteID As Integer
	
	Private _userID As String
	
	Private _comment As String
	
	Private _createdBy As String
	
	Private _createdDate As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnambassadorNoteIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnambassadorNoteIDChanged()
    End Sub
    Partial Private Sub OnuserIDChanging(value As String)
    End Sub
    Partial Private Sub OnuserIDChanged()
    End Sub
    Partial Private Sub OncommentChanging(value As String)
    End Sub
    Partial Private Sub OncommentChanged()
    End Sub
    Partial Private Sub OncreatedByChanging(value As String)
    End Sub
    Partial Private Sub OncreatedByChanged()
    End Sub
    Partial Private Sub OncreatedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OncreatedDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ambassadorNoteID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ambassadorNoteID() As Integer
		Get
			Return Me._ambassadorNoteID
		End Get
		Set
			If ((Me._ambassadorNoteID = value)  _
						= false) Then
				Me.OnambassadorNoteIDChanging(value)
				Me.SendPropertyChanging
				Me._ambassadorNoteID = value
				Me.SendPropertyChanged("ambassadorNoteID")
				Me.OnambassadorNoteIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me.OnuserIDChanging(value)
				Me.SendPropertyChanging
				Me._userID = value
				Me.SendPropertyChanged("userID")
				Me.OnuserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_comment", DbType:="NVarChar(MAX)")>  _
	Public Property comment() As String
		Get
			Return Me._comment
		End Get
		Set
			If (String.Equals(Me._comment, value) = false) Then
				Me.OncommentChanging(value)
				Me.SendPropertyChanging
				Me._comment = value
				Me.SendPropertyChanged("comment")
				Me.OncommentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_createdBy", DbType:="NVarChar(50)")>  _
	Public Property createdBy() As String
		Get
			Return Me._createdBy
		End Get
		Set
			If (String.Equals(Me._createdBy, value) = false) Then
				Me.OncreatedByChanging(value)
				Me.SendPropertyChanging
				Me._createdBy = value
				Me.SendPropertyChanged("createdBy")
				Me.OncreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_createdDate", DbType:="SmallDateTime")>  _
	Public Property createdDate() As System.Nullable(Of Date)
		Get
			Return Me._createdDate
		End Get
		Set
			If (Me._createdDate.Equals(value) = false) Then
				Me.OncreatedDateChanging(value)
				Me.SendPropertyChanging
				Me._createdDate = value
				Me.SendPropertyChanged("createdDate")
				Me.OncreatedDateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblAmbassadorPhoto")>  _
Partial Public Class tblAmbassadorPhoto
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _userID As String
	
	Private _headshot As System.Data.Linq.Binary
	
	Private _bodyshot As System.Data.Linq.Binary
	
	Private _headshot_thumbnail As System.Data.Linq.Binary
	
	Private _bodyshot_thumbnail As System.Data.Linq.Binary
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnuserIDChanging(value As String)
    End Sub
    Partial Private Sub OnuserIDChanged()
    End Sub
    Partial Private Sub OnheadshotChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnheadshotChanged()
    End Sub
    Partial Private Sub OnbodyshotChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnbodyshotChanged()
    End Sub
    Partial Private Sub Onheadshot_thumbnailChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub Onheadshot_thumbnailChanged()
    End Sub
    Partial Private Sub Onbodyshot_thumbnailChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub Onbodyshot_thumbnailChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me.OnuserIDChanging(value)
				Me.SendPropertyChanging
				Me._userID = value
				Me.SendPropertyChanged("userID")
				Me.OnuserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_headshot", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property headshot() As System.Data.Linq.Binary
		Get
			Return Me._headshot
		End Get
		Set
			If (Object.Equals(Me._headshot, value) = false) Then
				Me.OnheadshotChanging(value)
				Me.SendPropertyChanging
				Me._headshot = value
				Me.SendPropertyChanged("headshot")
				Me.OnheadshotChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bodyshot", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property bodyshot() As System.Data.Linq.Binary
		Get
			Return Me._bodyshot
		End Get
		Set
			If (Object.Equals(Me._bodyshot, value) = false) Then
				Me.OnbodyshotChanging(value)
				Me.SendPropertyChanging
				Me._bodyshot = value
				Me.SendPropertyChanged("bodyshot")
				Me.OnbodyshotChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_headshot_thumbnail", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property headshot_thumbnail() As System.Data.Linq.Binary
		Get
			Return Me._headshot_thumbnail
		End Get
		Set
			If (Object.Equals(Me._headshot_thumbnail, value) = false) Then
				Me.Onheadshot_thumbnailChanging(value)
				Me.SendPropertyChanging
				Me._headshot_thumbnail = value
				Me.SendPropertyChanged("headshot_thumbnail")
				Me.Onheadshot_thumbnailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bodyshot_thumbnail", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property bodyshot_thumbnail() As System.Data.Linq.Binary
		Get
			Return Me._bodyshot_thumbnail
		End Get
		Set
			If (Object.Equals(Me._bodyshot_thumbnail, value) = false) Then
				Me.Onbodyshot_thumbnailChanging(value)
				Me.SendPropertyChanging
				Me._bodyshot_thumbnail = value
				Me.SendPropertyChanged("bodyshot_thumbnail")
				Me.Onbodyshot_thumbnailChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblAmbassadorPosition")>  _
Partial Public Class tblAmbassadorPosition
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ambassadorPositionID As Integer
	
	Private _userID As String
	
	Private _positionID As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnambassadorPositionIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnambassadorPositionIDChanged()
    End Sub
    Partial Private Sub OnuserIDChanging(value As String)
    End Sub
    Partial Private Sub OnuserIDChanged()
    End Sub
    Partial Private Sub OnpositionIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnpositionIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ambassadorPositionID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ambassadorPositionID() As Integer
		Get
			Return Me._ambassadorPositionID
		End Get
		Set
			If ((Me._ambassadorPositionID = value)  _
						= false) Then
				Me.OnambassadorPositionIDChanging(value)
				Me.SendPropertyChanging
				Me._ambassadorPositionID = value
				Me.SendPropertyChanged("ambassadorPositionID")
				Me.OnambassadorPositionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me.OnuserIDChanging(value)
				Me.SendPropertyChanging
				Me._userID = value
				Me.SendPropertyChanged("userID")
				Me.OnuserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_positionID", DbType:="Int")>  _
	Public Property positionID() As System.Nullable(Of Integer)
		Get
			Return Me._positionID
		End Get
		Set
			If (Me._positionID.Equals(value) = false) Then
				Me.OnpositionIDChanging(value)
				Me.SendPropertyChanging
				Me._positionID = value
				Me.SendPropertyChanged("positionID")
				Me.OnpositionIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblBrandCategorySubType")>  _
Partial Public Class tblBrandCategorySubType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _categorySubTypeID As Integer
	
	Private _brandCategoryTypeID As System.Nullable(Of Integer)
	
	Private _subCategoryName As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OncategorySubTypeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OncategorySubTypeIDChanged()
    End Sub
    Partial Private Sub OnbrandCategoryTypeIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnbrandCategoryTypeIDChanged()
    End Sub
    Partial Private Sub OnsubCategoryNameChanging(value As String)
    End Sub
    Partial Private Sub OnsubCategoryNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_categorySubTypeID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property categorySubTypeID() As Integer
		Get
			Return Me._categorySubTypeID
		End Get
		Set
			If ((Me._categorySubTypeID = value)  _
						= false) Then
				Me.OncategorySubTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._categorySubTypeID = value
				Me.SendPropertyChanged("categorySubTypeID")
				Me.OncategorySubTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandCategoryTypeID", DbType:="Int")>  _
	Public Property brandCategoryTypeID() As System.Nullable(Of Integer)
		Get
			Return Me._brandCategoryTypeID
		End Get
		Set
			If (Me._brandCategoryTypeID.Equals(value) = false) Then
				Me.OnbrandCategoryTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._brandCategoryTypeID = value
				Me.SendPropertyChanged("brandCategoryTypeID")
				Me.OnbrandCategoryTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_subCategoryName", DbType:="NVarChar(50)")>  _
	Public Property subCategoryName() As String
		Get
			Return Me._subCategoryName
		End Get
		Set
			If (String.Equals(Me._subCategoryName, value) = false) Then
				Me.OnsubCategoryNameChanging(value)
				Me.SendPropertyChanging
				Me._subCategoryName = value
				Me.SendPropertyChanged("subCategoryName")
				Me.OnsubCategoryNameChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblBrandCategoryType")>  _
Partial Public Class tblBrandCategoryType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _brandCategoryTypeID As Integer
	
	Private _brandCategoryID As System.Nullable(Of Integer)
	
	Private _name As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnbrandCategoryTypeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnbrandCategoryTypeIDChanged()
    End Sub
    Partial Private Sub OnbrandCategoryIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnbrandCategoryIDChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandCategoryTypeID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property brandCategoryTypeID() As Integer
		Get
			Return Me._brandCategoryTypeID
		End Get
		Set
			If ((Me._brandCategoryTypeID = value)  _
						= false) Then
				Me.OnbrandCategoryTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._brandCategoryTypeID = value
				Me.SendPropertyChanged("brandCategoryTypeID")
				Me.OnbrandCategoryTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandCategoryID", DbType:="Int")>  _
	Public Property brandCategoryID() As System.Nullable(Of Integer)
		Get
			Return Me._brandCategoryID
		End Get
		Set
			If (Me._brandCategoryID.Equals(value) = false) Then
				Me.OnbrandCategoryIDChanging(value)
				Me.SendPropertyChanging
				Me._brandCategoryID = value
				Me.SendPropertyChanged("brandCategoryID")
				Me.OnbrandCategoryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="NVarChar(50)")>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblBrandDocument")>  _
Partial Public Class tblBrandDocument
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _DocumentID As String
	
	Private _BrandID As Integer
	
	Private _DocumentName As String
	
	Private _FileType As String
	
	Private _DocumentURL As String
	
	Private _ModifiedBy As String
	
	Private _ModifiedDate As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDocumentIDChanging(value As String)
    End Sub
    Partial Private Sub OnDocumentIDChanged()
    End Sub
    Partial Private Sub OnBrandIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnBrandIDChanged()
    End Sub
    Partial Private Sub OnDocumentNameChanging(value As String)
    End Sub
    Partial Private Sub OnDocumentNameChanged()
    End Sub
    Partial Private Sub OnFileTypeChanging(value As String)
    End Sub
    Partial Private Sub OnFileTypeChanged()
    End Sub
    Partial Private Sub OnDocumentURLChanging(value As String)
    End Sub
    Partial Private Sub OnDocumentURLChanged()
    End Sub
    Partial Private Sub OnModifiedByChanging(value As String)
    End Sub
    Partial Private Sub OnModifiedByChanged()
    End Sub
    Partial Private Sub OnModifiedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnModifiedDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DocumentID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property DocumentID() As String
		Get
			Return Me._DocumentID
		End Get
		Set
			If (String.Equals(Me._DocumentID, value) = false) Then
				Me.OnDocumentIDChanging(value)
				Me.SendPropertyChanging
				Me._DocumentID = value
				Me.SendPropertyChanged("DocumentID")
				Me.OnDocumentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BrandID", DbType:="Int NOT NULL")>  _
	Public Property BrandID() As Integer
		Get
			Return Me._BrandID
		End Get
		Set
			If ((Me._BrandID = value)  _
						= false) Then
				Me.OnBrandIDChanging(value)
				Me.SendPropertyChanging
				Me._BrandID = value
				Me.SendPropertyChanged("BrandID")
				Me.OnBrandIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DocumentName", DbType:="VarChar(256)")>  _
	Public Property DocumentName() As String
		Get
			Return Me._DocumentName
		End Get
		Set
			If (String.Equals(Me._DocumentName, value) = false) Then
				Me.OnDocumentNameChanging(value)
				Me.SendPropertyChanging
				Me._DocumentName = value
				Me.SendPropertyChanged("DocumentName")
				Me.OnDocumentNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FileType", DbType:="VarChar(50)")>  _
	Public Property FileType() As String
		Get
			Return Me._FileType
		End Get
		Set
			If (String.Equals(Me._FileType, value) = false) Then
				Me.OnFileTypeChanging(value)
				Me.SendPropertyChanging
				Me._FileType = value
				Me.SendPropertyChanged("FileType")
				Me.OnFileTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DocumentURL", DbType:="NVarChar(1000)")>  _
	Public Property DocumentURL() As String
		Get
			Return Me._DocumentURL
		End Get
		Set
			If (String.Equals(Me._DocumentURL, value) = false) Then
				Me.OnDocumentURLChanging(value)
				Me.SendPropertyChanging
				Me._DocumentURL = value
				Me.SendPropertyChanged("DocumentURL")
				Me.OnDocumentURLChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedBy", DbType:="NVarChar(50)")>  _
	Public Property ModifiedBy() As String
		Get
			Return Me._ModifiedBy
		End Get
		Set
			If (String.Equals(Me._ModifiedBy, value) = false) Then
				Me.OnModifiedByChanging(value)
				Me.SendPropertyChanging
				Me._ModifiedBy = value
				Me.SendPropertyChanged("ModifiedBy")
				Me.OnModifiedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDate", DbType:="SmallDateTime")>  _
	Public Property ModifiedDate() As System.Nullable(Of Date)
		Get
			Return Me._ModifiedDate
		End Get
		Set
			If (Me._ModifiedDate.Equals(value) = false) Then
				Me.OnModifiedDateChanging(value)
				Me.SendPropertyChanging
				Me._ModifiedDate = value
				Me.SendPropertyChanged("ModifiedDate")
				Me.OnModifiedDateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblBrandEventExecution")>  _
Partial Public Class tblBrandEventExecution
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _brandEventExecutionID As Integer
	
	Private _brandID As Integer
	
	Private _eventTypeID As System.Nullable(Of Integer)
	
	Private _attire As String
	
	Private _pos As String
	
	Private _samplingInstructions As String
	
	Private _eventDetails As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnbrandEventExecutionIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnbrandEventExecutionIDChanged()
    End Sub
    Partial Private Sub OnbrandIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnbrandIDChanged()
    End Sub
    Partial Private Sub OneventTypeIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OneventTypeIDChanged()
    End Sub
    Partial Private Sub OnattireChanging(value As String)
    End Sub
    Partial Private Sub OnattireChanged()
    End Sub
    Partial Private Sub OnposChanging(value As String)
    End Sub
    Partial Private Sub OnposChanged()
    End Sub
    Partial Private Sub OnsamplingInstructionsChanging(value As String)
    End Sub
    Partial Private Sub OnsamplingInstructionsChanged()
    End Sub
    Partial Private Sub OneventDetailsChanging(value As String)
    End Sub
    Partial Private Sub OneventDetailsChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandEventExecutionID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property brandEventExecutionID() As Integer
		Get
			Return Me._brandEventExecutionID
		End Get
		Set
			If ((Me._brandEventExecutionID = value)  _
						= false) Then
				Me.OnbrandEventExecutionIDChanging(value)
				Me.SendPropertyChanging
				Me._brandEventExecutionID = value
				Me.SendPropertyChanged("brandEventExecutionID")
				Me.OnbrandEventExecutionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandID", DbType:="Int NOT NULL")>  _
	Public Property brandID() As Integer
		Get
			Return Me._brandID
		End Get
		Set
			If ((Me._brandID = value)  _
						= false) Then
				Me.OnbrandIDChanging(value)
				Me.SendPropertyChanging
				Me._brandID = value
				Me.SendPropertyChanged("brandID")
				Me.OnbrandIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTypeID", DbType:="Int")>  _
	Public Property eventTypeID() As System.Nullable(Of Integer)
		Get
			Return Me._eventTypeID
		End Get
		Set
			If (Me._eventTypeID.Equals(value) = false) Then
				Me.OneventTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._eventTypeID = value
				Me.SendPropertyChanged("eventTypeID")
				Me.OneventTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_attire", DbType:="NVarChar(MAX)")>  _
	Public Property attire() As String
		Get
			Return Me._attire
		End Get
		Set
			If (String.Equals(Me._attire, value) = false) Then
				Me.OnattireChanging(value)
				Me.SendPropertyChanging
				Me._attire = value
				Me.SendPropertyChanged("attire")
				Me.OnattireChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pos", DbType:="NVarChar(MAX)")>  _
	Public Property pos() As String
		Get
			Return Me._pos
		End Get
		Set
			If (String.Equals(Me._pos, value) = false) Then
				Me.OnposChanging(value)
				Me.SendPropertyChanging
				Me._pos = value
				Me.SendPropertyChanged("pos")
				Me.OnposChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_samplingInstructions", DbType:="NVarChar(MAX)")>  _
	Public Property samplingInstructions() As String
		Get
			Return Me._samplingInstructions
		End Get
		Set
			If (String.Equals(Me._samplingInstructions, value) = false) Then
				Me.OnsamplingInstructionsChanging(value)
				Me.SendPropertyChanging
				Me._samplingInstructions = value
				Me.SendPropertyChanged("samplingInstructions")
				Me.OnsamplingInstructionsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventDetails", DbType:="NVarChar(MAX)")>  _
	Public Property eventDetails() As String
		Get
			Return Me._eventDetails
		End Get
		Set
			If (String.Equals(Me._eventDetails, value) = false) Then
				Me.OneventDetailsChanging(value)
				Me.SendPropertyChanging
				Me._eventDetails = value
				Me.SendPropertyChanged("eventDetails")
				Me.OneventDetailsChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblBrandEventTask")>  _
Partial Public Class tblBrandEventTask
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _taskID As Integer
	
	Private _brandID As Integer
	
	Private _taskName As String
	
	Private _category As String
	
	Private _dateDueOffset As System.Nullable(Of Integer)
	
	Private _Note As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OntaskIDChanging(value As Integer)
    End Sub
    Partial Private Sub OntaskIDChanged()
    End Sub
    Partial Private Sub OnbrandIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnbrandIDChanged()
    End Sub
    Partial Private Sub OntaskNameChanging(value As String)
    End Sub
    Partial Private Sub OntaskNameChanged()
    End Sub
    Partial Private Sub OncategoryChanging(value As String)
    End Sub
    Partial Private Sub OncategoryChanged()
    End Sub
    Partial Private Sub OndateDueOffsetChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OndateDueOffsetChanged()
    End Sub
    Partial Private Sub OnNoteChanging(value As String)
    End Sub
    Partial Private Sub OnNoteChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_taskID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property taskID() As Integer
		Get
			Return Me._taskID
		End Get
		Set
			If ((Me._taskID = value)  _
						= false) Then
				Me.OntaskIDChanging(value)
				Me.SendPropertyChanging
				Me._taskID = value
				Me.SendPropertyChanged("taskID")
				Me.OntaskIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandID", DbType:="Int NOT NULL")>  _
	Public Property brandID() As Integer
		Get
			Return Me._brandID
		End Get
		Set
			If ((Me._brandID = value)  _
						= false) Then
				Me.OnbrandIDChanging(value)
				Me.SendPropertyChanging
				Me._brandID = value
				Me.SendPropertyChanged("brandID")
				Me.OnbrandIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_taskName", DbType:="NVarChar(50)")>  _
	Public Property taskName() As String
		Get
			Return Me._taskName
		End Get
		Set
			If (String.Equals(Me._taskName, value) = false) Then
				Me.OntaskNameChanging(value)
				Me.SendPropertyChanging
				Me._taskName = value
				Me.SendPropertyChanged("taskName")
				Me.OntaskNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_category", DbType:="VarChar(50)")>  _
	Public Property category() As String
		Get
			Return Me._category
		End Get
		Set
			If (String.Equals(Me._category, value) = false) Then
				Me.OncategoryChanging(value)
				Me.SendPropertyChanging
				Me._category = value
				Me.SendPropertyChanged("category")
				Me.OncategoryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateDueOffset", DbType:="Int")>  _
	Public Property dateDueOffset() As System.Nullable(Of Integer)
		Get
			Return Me._dateDueOffset
		End Get
		Set
			If (Me._dateDueOffset.Equals(value) = false) Then
				Me.OndateDueOffsetChanging(value)
				Me.SendPropertyChanging
				Me._dateDueOffset = value
				Me.SendPropertyChanged("dateDueOffset")
				Me.OndateDueOffsetChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Note", DbType:="NVarChar(MAX)")>  _
	Public Property Note() As String
		Get
			Return Me._Note
		End Get
		Set
			If (String.Equals(Me._Note, value) = false) Then
				Me.OnNoteChanging(value)
				Me.SendPropertyChanging
				Me._Note = value
				Me.SendPropertyChanged("Note")
				Me.OnNoteChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblBrandGroup")>  _
Partial Public Class tblBrandGroup
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _brandGroupID As Integer
	
	Private _brandGroupName As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnbrandGroupIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnbrandGroupIDChanged()
    End Sub
    Partial Private Sub OnbrandGroupNameChanging(value As String)
    End Sub
    Partial Private Sub OnbrandGroupNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandGroupID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property brandGroupID() As Integer
		Get
			Return Me._brandGroupID
		End Get
		Set
			If ((Me._brandGroupID = value)  _
						= false) Then
				Me.OnbrandGroupIDChanging(value)
				Me.SendPropertyChanging
				Me._brandGroupID = value
				Me.SendPropertyChanged("brandGroupID")
				Me.OnbrandGroupIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandGroupName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property brandGroupName() As String
		Get
			Return Me._brandGroupName
		End Get
		Set
			If (String.Equals(Me._brandGroupName, value) = false) Then
				Me.OnbrandGroupNameChanging(value)
				Me.SendPropertyChanging
				Me._brandGroupName = value
				Me.SendPropertyChanged("brandGroupName")
				Me.OnbrandGroupNameChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblBrandImage")>  _
Partial Public Class tblBrandImage
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _brandImageID As Integer
	
	Private _brandID As System.Nullable(Of Integer)
	
	Private _photo As System.Data.Linq.Binary
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnbrandImageIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnbrandImageIDChanged()
    End Sub
    Partial Private Sub OnbrandIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnbrandIDChanged()
    End Sub
    Partial Private Sub OnphotoChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnphotoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandImageID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property brandImageID() As Integer
		Get
			Return Me._brandImageID
		End Get
		Set
			If ((Me._brandImageID = value)  _
						= false) Then
				Me.OnbrandImageIDChanging(value)
				Me.SendPropertyChanging
				Me._brandImageID = value
				Me.SendPropertyChanged("brandImageID")
				Me.OnbrandImageIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandID", DbType:="Int")>  _
	Public Property brandID() As System.Nullable(Of Integer)
		Get
			Return Me._brandID
		End Get
		Set
			If (Me._brandID.Equals(value) = false) Then
				Me.OnbrandIDChanging(value)
				Me.SendPropertyChanging
				Me._brandID = value
				Me.SendPropertyChanged("brandID")
				Me.OnbrandIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_photo", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property photo() As System.Data.Linq.Binary
		Get
			Return Me._photo
		End Get
		Set
			If (Object.Equals(Me._photo, value) = false) Then
				Me.OnphotoChanging(value)
				Me.SendPropertyChanging
				Me._photo = value
				Me.SendPropertyChanged("photo")
				Me.OnphotoChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblBrandInEvent")>  _
Partial Public Class tblBrandInEvent
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _eventBrandID As Integer
	
	Private _eventID As System.Nullable(Of Integer)
	
	Private _brandID As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OneventBrandIDChanging(value As Integer)
    End Sub
    Partial Private Sub OneventBrandIDChanged()
    End Sub
    Partial Private Sub OneventIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OneventIDChanged()
    End Sub
    Partial Private Sub OnbrandIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnbrandIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventBrandID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property eventBrandID() As Integer
		Get
			Return Me._eventBrandID
		End Get
		Set
			If ((Me._eventBrandID = value)  _
						= false) Then
				Me.OneventBrandIDChanging(value)
				Me.SendPropertyChanging
				Me._eventBrandID = value
				Me.SendPropertyChanged("eventBrandID")
				Me.OneventBrandIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int")>  _
	Public Property eventID() As System.Nullable(Of Integer)
		Get
			Return Me._eventID
		End Get
		Set
			If (Me._eventID.Equals(value) = false) Then
				Me.OneventIDChanging(value)
				Me.SendPropertyChanging
				Me._eventID = value
				Me.SendPropertyChanged("eventID")
				Me.OneventIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandID", DbType:="Int")>  _
	Public Property brandID() As System.Nullable(Of Integer)
		Get
			Return Me._brandID
		End Get
		Set
			If (Me._brandID.Equals(value) = false) Then
				Me.OnbrandIDChanging(value)
				Me.SendPropertyChanging
				Me._brandID = value
				Me.SendPropertyChanged("brandID")
				Me.OnbrandIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblBrandPhoto")>  _
Partial Public Class tblBrandPhoto
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _BrandPhotoID As Integer
	
	Private _photoID As Integer
	
	Private _brandID As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnBrandPhotoIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnBrandPhotoIDChanged()
    End Sub
    Partial Private Sub OnphotoIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnphotoIDChanged()
    End Sub
    Partial Private Sub OnbrandIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnbrandIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BrandPhotoID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property BrandPhotoID() As Integer
		Get
			Return Me._BrandPhotoID
		End Get
		Set
			If ((Me._BrandPhotoID = value)  _
						= false) Then
				Me.OnBrandPhotoIDChanging(value)
				Me.SendPropertyChanging
				Me._BrandPhotoID = value
				Me.SendPropertyChanged("BrandPhotoID")
				Me.OnBrandPhotoIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_photoID", DbType:="Int NOT NULL")>  _
	Public Property photoID() As Integer
		Get
			Return Me._photoID
		End Get
		Set
			If ((Me._photoID = value)  _
						= false) Then
				Me.OnphotoIDChanging(value)
				Me.SendPropertyChanging
				Me._photoID = value
				Me.SendPropertyChanged("photoID")
				Me.OnphotoIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandID", DbType:="Int NOT NULL")>  _
	Public Property brandID() As Integer
		Get
			Return Me._brandID
		End Get
		Set
			If ((Me._brandID = value)  _
						= false) Then
				Me.OnbrandIDChanging(value)
				Me.SendPropertyChanging
				Me._brandID = value
				Me.SendPropertyChanged("brandID")
				Me.OnbrandIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblBrandRecapQuestion")>  _
Partial Public Class tblBrandRecapQuestion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _brandRecapQuestionID As Integer
	
	Private _brandID As Integer
	
	Private _question As String
	
	Private _questionType As String
	
	Private _choices As String
	
	Private _displayOption As String
	
	Private _lines As String
	
	Private _description As String
	
	Private _yes_noDefaultValue As String
	
	Private _numberDecimalPlace As System.Nullable(Of Integer)
	
	Private _numberDefaultValue As String
	
	Private _showPercentage As System.Nullable(Of Boolean)
	
	Private _dateFormat As String
	
	Private _dateDefaultValue As String
	
	Private _timeFormat As String
	
	Private _dateDisplay As String
	
	Private _sortOrder As System.Nullable(Of Integer)
	
	Private _desiredOrder As System.Nullable(Of Integer)
	
	Private _required As System.Nullable(Of Boolean)
	
	Private _digit As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnbrandRecapQuestionIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnbrandRecapQuestionIDChanged()
    End Sub
    Partial Private Sub OnbrandIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnbrandIDChanged()
    End Sub
    Partial Private Sub OnquestionChanging(value As String)
    End Sub
    Partial Private Sub OnquestionChanged()
    End Sub
    Partial Private Sub OnquestionTypeChanging(value As String)
    End Sub
    Partial Private Sub OnquestionTypeChanged()
    End Sub
    Partial Private Sub OnchoicesChanging(value As String)
    End Sub
    Partial Private Sub OnchoicesChanged()
    End Sub
    Partial Private Sub OndisplayOptionChanging(value As String)
    End Sub
    Partial Private Sub OndisplayOptionChanged()
    End Sub
    Partial Private Sub OnlinesChanging(value As String)
    End Sub
    Partial Private Sub OnlinesChanged()
    End Sub
    Partial Private Sub OndescriptionChanging(value As String)
    End Sub
    Partial Private Sub OndescriptionChanged()
    End Sub
    Partial Private Sub Onyes_noDefaultValueChanging(value As String)
    End Sub
    Partial Private Sub Onyes_noDefaultValueChanged()
    End Sub
    Partial Private Sub OnnumberDecimalPlaceChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnnumberDecimalPlaceChanged()
    End Sub
    Partial Private Sub OnnumberDefaultValueChanging(value As String)
    End Sub
    Partial Private Sub OnnumberDefaultValueChanged()
    End Sub
    Partial Private Sub OnshowPercentageChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnshowPercentageChanged()
    End Sub
    Partial Private Sub OndateFormatChanging(value As String)
    End Sub
    Partial Private Sub OndateFormatChanged()
    End Sub
    Partial Private Sub OndateDefaultValueChanging(value As String)
    End Sub
    Partial Private Sub OndateDefaultValueChanged()
    End Sub
    Partial Private Sub OntimeFormatChanging(value As String)
    End Sub
    Partial Private Sub OntimeFormatChanged()
    End Sub
    Partial Private Sub OndateDisplayChanging(value As String)
    End Sub
    Partial Private Sub OndateDisplayChanged()
    End Sub
    Partial Private Sub OnsortOrderChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnsortOrderChanged()
    End Sub
    Partial Private Sub OndesiredOrderChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OndesiredOrderChanged()
    End Sub
    Partial Private Sub OnrequiredChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnrequiredChanged()
    End Sub
    Partial Private Sub OndigitChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OndigitChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandRecapQuestionID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property brandRecapQuestionID() As Integer
		Get
			Return Me._brandRecapQuestionID
		End Get
		Set
			If ((Me._brandRecapQuestionID = value)  _
						= false) Then
				Me.OnbrandRecapQuestionIDChanging(value)
				Me.SendPropertyChanging
				Me._brandRecapQuestionID = value
				Me.SendPropertyChanged("brandRecapQuestionID")
				Me.OnbrandRecapQuestionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandID", DbType:="Int NOT NULL")>  _
	Public Property brandID() As Integer
		Get
			Return Me._brandID
		End Get
		Set
			If ((Me._brandID = value)  _
						= false) Then
				Me.OnbrandIDChanging(value)
				Me.SendPropertyChanging
				Me._brandID = value
				Me.SendPropertyChanged("brandID")
				Me.OnbrandIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_question", DbType:="NVarChar(500)")>  _
	Public Property question() As String
		Get
			Return Me._question
		End Get
		Set
			If (String.Equals(Me._question, value) = false) Then
				Me.OnquestionChanging(value)
				Me.SendPropertyChanging
				Me._question = value
				Me.SendPropertyChanged("question")
				Me.OnquestionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_questionType", DbType:="VarChar(50)")>  _
	Public Property questionType() As String
		Get
			Return Me._questionType
		End Get
		Set
			If (String.Equals(Me._questionType, value) = false) Then
				Me.OnquestionTypeChanging(value)
				Me.SendPropertyChanging
				Me._questionType = value
				Me.SendPropertyChanged("questionType")
				Me.OnquestionTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_choices", DbType:="NVarChar(MAX)")>  _
	Public Property choices() As String
		Get
			Return Me._choices
		End Get
		Set
			If (String.Equals(Me._choices, value) = false) Then
				Me.OnchoicesChanging(value)
				Me.SendPropertyChanging
				Me._choices = value
				Me.SendPropertyChanged("choices")
				Me.OnchoicesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_displayOption", DbType:="NVarChar(50)")>  _
	Public Property displayOption() As String
		Get
			Return Me._displayOption
		End Get
		Set
			If (String.Equals(Me._displayOption, value) = false) Then
				Me.OndisplayOptionChanging(value)
				Me.SendPropertyChanging
				Me._displayOption = value
				Me.SendPropertyChanged("displayOption")
				Me.OndisplayOptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lines", DbType:="VarChar(50)")>  _
	Public Property lines() As String
		Get
			Return Me._lines
		End Get
		Set
			If (String.Equals(Me._lines, value) = false) Then
				Me.OnlinesChanging(value)
				Me.SendPropertyChanging
				Me._lines = value
				Me.SendPropertyChanged("lines")
				Me.OnlinesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_description", DbType:="NVarChar(2000)")>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me.OndescriptionChanging(value)
				Me.SendPropertyChanging
				Me._description = value
				Me.SendPropertyChanged("description")
				Me.OndescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[yes/noDefaultValue]", Storage:="_yes_noDefaultValue", DbType:="NVarChar(50)")>  _
	Public Property yes_noDefaultValue() As String
		Get
			Return Me._yes_noDefaultValue
		End Get
		Set
			If (String.Equals(Me._yes_noDefaultValue, value) = false) Then
				Me.Onyes_noDefaultValueChanging(value)
				Me.SendPropertyChanging
				Me._yes_noDefaultValue = value
				Me.SendPropertyChanged("yes_noDefaultValue")
				Me.Onyes_noDefaultValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_numberDecimalPlace", DbType:="Int")>  _
	Public Property numberDecimalPlace() As System.Nullable(Of Integer)
		Get
			Return Me._numberDecimalPlace
		End Get
		Set
			If (Me._numberDecimalPlace.Equals(value) = false) Then
				Me.OnnumberDecimalPlaceChanging(value)
				Me.SendPropertyChanging
				Me._numberDecimalPlace = value
				Me.SendPropertyChanged("numberDecimalPlace")
				Me.OnnumberDecimalPlaceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_numberDefaultValue", DbType:="VarChar(50)")>  _
	Public Property numberDefaultValue() As String
		Get
			Return Me._numberDefaultValue
		End Get
		Set
			If (String.Equals(Me._numberDefaultValue, value) = false) Then
				Me.OnnumberDefaultValueChanging(value)
				Me.SendPropertyChanging
				Me._numberDefaultValue = value
				Me.SendPropertyChanged("numberDefaultValue")
				Me.OnnumberDefaultValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_showPercentage", DbType:="Bit")>  _
	Public Property showPercentage() As System.Nullable(Of Boolean)
		Get
			Return Me._showPercentage
		End Get
		Set
			If (Me._showPercentage.Equals(value) = false) Then
				Me.OnshowPercentageChanging(value)
				Me.SendPropertyChanging
				Me._showPercentage = value
				Me.SendPropertyChanged("showPercentage")
				Me.OnshowPercentageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateFormat", DbType:="NVarChar(50)")>  _
	Public Property dateFormat() As String
		Get
			Return Me._dateFormat
		End Get
		Set
			If (String.Equals(Me._dateFormat, value) = false) Then
				Me.OndateFormatChanging(value)
				Me.SendPropertyChanging
				Me._dateFormat = value
				Me.SendPropertyChanged("dateFormat")
				Me.OndateFormatChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateDefaultValue", DbType:="NVarChar(50)")>  _
	Public Property dateDefaultValue() As String
		Get
			Return Me._dateDefaultValue
		End Get
		Set
			If (String.Equals(Me._dateDefaultValue, value) = false) Then
				Me.OndateDefaultValueChanging(value)
				Me.SendPropertyChanging
				Me._dateDefaultValue = value
				Me.SendPropertyChanged("dateDefaultValue")
				Me.OndateDefaultValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_timeFormat", DbType:="NVarChar(50)")>  _
	Public Property timeFormat() As String
		Get
			Return Me._timeFormat
		End Get
		Set
			If (String.Equals(Me._timeFormat, value) = false) Then
				Me.OntimeFormatChanging(value)
				Me.SendPropertyChanging
				Me._timeFormat = value
				Me.SendPropertyChanged("timeFormat")
				Me.OntimeFormatChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateDisplay", DbType:="NVarChar(50)")>  _
	Public Property dateDisplay() As String
		Get
			Return Me._dateDisplay
		End Get
		Set
			If (String.Equals(Me._dateDisplay, value) = false) Then
				Me.OndateDisplayChanging(value)
				Me.SendPropertyChanging
				Me._dateDisplay = value
				Me.SendPropertyChanged("dateDisplay")
				Me.OndateDisplayChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sortOrder", DbType:="Int")>  _
	Public Property sortOrder() As System.Nullable(Of Integer)
		Get
			Return Me._sortOrder
		End Get
		Set
			If (Me._sortOrder.Equals(value) = false) Then
				Me.OnsortOrderChanging(value)
				Me.SendPropertyChanging
				Me._sortOrder = value
				Me.SendPropertyChanged("sortOrder")
				Me.OnsortOrderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_desiredOrder", DbType:="Int")>  _
	Public Property desiredOrder() As System.Nullable(Of Integer)
		Get
			Return Me._desiredOrder
		End Get
		Set
			If (Me._desiredOrder.Equals(value) = false) Then
				Me.OndesiredOrderChanging(value)
				Me.SendPropertyChanging
				Me._desiredOrder = value
				Me.SendPropertyChanged("desiredOrder")
				Me.OndesiredOrderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_required", DbType:="Bit")>  _
	Public Property required() As System.Nullable(Of Boolean)
		Get
			Return Me._required
		End Get
		Set
			If (Me._required.Equals(value) = false) Then
				Me.OnrequiredChanging(value)
				Me.SendPropertyChanging
				Me._required = value
				Me.SendPropertyChanged("required")
				Me.OnrequiredChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_digit", DbType:="Int")>  _
	Public Property digit() As System.Nullable(Of Integer)
		Get
			Return Me._digit
		End Get
		Set
			If (Me._digit.Equals(value) = false) Then
				Me.OndigitChanging(value)
				Me.SendPropertyChanging
				Me._digit = value
				Me.SendPropertyChanged("digit")
				Me.OndigitChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblBrandsInRequestedEvent")>  _
Partial Public Class tblBrandsInRequestedEvent
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _brandsInRequestedEventID As Integer
	
	Private _requestedEventID As System.Nullable(Of Integer)
	
	Private _brandID As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnbrandsInRequestedEventIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnbrandsInRequestedEventIDChanged()
    End Sub
    Partial Private Sub OnrequestedEventIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnrequestedEventIDChanged()
    End Sub
    Partial Private Sub OnbrandIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnbrandIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandsInRequestedEventID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property brandsInRequestedEventID() As Integer
		Get
			Return Me._brandsInRequestedEventID
		End Get
		Set
			If ((Me._brandsInRequestedEventID = value)  _
						= false) Then
				Me.OnbrandsInRequestedEventIDChanging(value)
				Me.SendPropertyChanging
				Me._brandsInRequestedEventID = value
				Me.SendPropertyChanged("brandsInRequestedEventID")
				Me.OnbrandsInRequestedEventIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_requestedEventID", DbType:="Int")>  _
	Public Property requestedEventID() As System.Nullable(Of Integer)
		Get
			Return Me._requestedEventID
		End Get
		Set
			If (Me._requestedEventID.Equals(value) = false) Then
				Me.OnrequestedEventIDChanging(value)
				Me.SendPropertyChanging
				Me._requestedEventID = value
				Me.SendPropertyChanged("requestedEventID")
				Me.OnrequestedEventIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandID", DbType:="Int")>  _
	Public Property brandID() As System.Nullable(Of Integer)
		Get
			Return Me._brandID
		End Get
		Set
			If (Me._brandID.Equals(value) = false) Then
				Me.OnbrandIDChanging(value)
				Me.SendPropertyChanging
				Me._brandID = value
				Me.SendPropertyChanged("brandID")
				Me.OnbrandIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblBrandStaffingPosition")>  _
Partial Public Class tblBrandStaffingPosition
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _brandStaffingPositionID As Integer
	
	Private _brandID As Integer
	
	Private _staffingPositionID As System.Nullable(Of Integer)
	
	Private _startTimeOffSet As System.Nullable(Of Integer)
	
	Private _endTimeOffSet As System.Nullable(Of Integer)
	
	Private _assigned As System.Nullable(Of Boolean)
	
	Private _assignedUserName As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnbrandStaffingPositionIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnbrandStaffingPositionIDChanged()
    End Sub
    Partial Private Sub OnbrandIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnbrandIDChanged()
    End Sub
    Partial Private Sub OnstaffingPositionIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnstaffingPositionIDChanged()
    End Sub
    Partial Private Sub OnstartTimeOffSetChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnstartTimeOffSetChanged()
    End Sub
    Partial Private Sub OnendTimeOffSetChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnendTimeOffSetChanged()
    End Sub
    Partial Private Sub OnassignedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnassignedChanged()
    End Sub
    Partial Private Sub OnassignedUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnassignedUserNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandStaffingPositionID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property brandStaffingPositionID() As Integer
		Get
			Return Me._brandStaffingPositionID
		End Get
		Set
			If ((Me._brandStaffingPositionID = value)  _
						= false) Then
				Me.OnbrandStaffingPositionIDChanging(value)
				Me.SendPropertyChanging
				Me._brandStaffingPositionID = value
				Me.SendPropertyChanged("brandStaffingPositionID")
				Me.OnbrandStaffingPositionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandID", DbType:="Int NOT NULL")>  _
	Public Property brandID() As Integer
		Get
			Return Me._brandID
		End Get
		Set
			If ((Me._brandID = value)  _
						= false) Then
				Me.OnbrandIDChanging(value)
				Me.SendPropertyChanging
				Me._brandID = value
				Me.SendPropertyChanged("brandID")
				Me.OnbrandIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_staffingPositionID", DbType:="Int")>  _
	Public Property staffingPositionID() As System.Nullable(Of Integer)
		Get
			Return Me._staffingPositionID
		End Get
		Set
			If (Me._staffingPositionID.Equals(value) = false) Then
				Me.OnstaffingPositionIDChanging(value)
				Me.SendPropertyChanging
				Me._staffingPositionID = value
				Me.SendPropertyChanged("staffingPositionID")
				Me.OnstaffingPositionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_startTimeOffSet", DbType:="Int")>  _
	Public Property startTimeOffSet() As System.Nullable(Of Integer)
		Get
			Return Me._startTimeOffSet
		End Get
		Set
			If (Me._startTimeOffSet.Equals(value) = false) Then
				Me.OnstartTimeOffSetChanging(value)
				Me.SendPropertyChanging
				Me._startTimeOffSet = value
				Me.SendPropertyChanged("startTimeOffSet")
				Me.OnstartTimeOffSetChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_endTimeOffSet", DbType:="Int")>  _
	Public Property endTimeOffSet() As System.Nullable(Of Integer)
		Get
			Return Me._endTimeOffSet
		End Get
		Set
			If (Me._endTimeOffSet.Equals(value) = false) Then
				Me.OnendTimeOffSetChanging(value)
				Me.SendPropertyChanging
				Me._endTimeOffSet = value
				Me.SendPropertyChanged("endTimeOffSet")
				Me.OnendTimeOffSetChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_assigned", DbType:="Bit")>  _
	Public Property assigned() As System.Nullable(Of Boolean)
		Get
			Return Me._assigned
		End Get
		Set
			If (Me._assigned.Equals(value) = false) Then
				Me.OnassignedChanging(value)
				Me.SendPropertyChanging
				Me._assigned = value
				Me.SendPropertyChanged("assigned")
				Me.OnassignedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_assignedUserName", DbType:="NVarChar(50)")>  _
	Public Property assignedUserName() As String
		Get
			Return Me._assignedUserName
		End Get
		Set
			If (String.Equals(Me._assignedUserName, value) = false) Then
				Me.OnassignedUserNameChanging(value)
				Me.SendPropertyChanging
				Me._assignedUserName = value
				Me.SendPropertyChanged("assignedUserName")
				Me.OnassignedUserNameChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblBrandTraining")>  _
Partial Public Class tblBrandTraining
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _brandTrainingID As Integer
	
	Private _brandID As System.Nullable(Of Integer)
	
	Private _curriculumID As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnbrandTrainingIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnbrandTrainingIDChanged()
    End Sub
    Partial Private Sub OnbrandIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnbrandIDChanged()
    End Sub
    Partial Private Sub OncurriculumIDChanging(value As String)
    End Sub
    Partial Private Sub OncurriculumIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandTrainingID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property brandTrainingID() As Integer
		Get
			Return Me._brandTrainingID
		End Get
		Set
			If ((Me._brandTrainingID = value)  _
						= false) Then
				Me.OnbrandTrainingIDChanging(value)
				Me.SendPropertyChanging
				Me._brandTrainingID = value
				Me.SendPropertyChanged("brandTrainingID")
				Me.OnbrandTrainingIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandID", DbType:="Int")>  _
	Public Property brandID() As System.Nullable(Of Integer)
		Get
			Return Me._brandID
		End Get
		Set
			If (Me._brandID.Equals(value) = false) Then
				Me.OnbrandIDChanging(value)
				Me.SendPropertyChanging
				Me._brandID = value
				Me.SendPropertyChanged("brandID")
				Me.OnbrandIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_curriculumID", DbType:="NVarChar(50)")>  _
	Public Property curriculumID() As String
		Get
			Return Me._curriculumID
		End Get
		Set
			If (String.Equals(Me._curriculumID, value) = false) Then
				Me.OncurriculumIDChanging(value)
				Me.SendPropertyChanging
				Me._curriculumID = value
				Me.SendPropertyChanged("curriculumID")
				Me.OncurriculumIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblClientAccount")>  _
Partial Public Class tblClientAccount
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _clientAccountID As Integer
	
	Private _accountID As System.Nullable(Of Integer)
	
	Private _clientID As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnclientAccountIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnclientAccountIDChanged()
    End Sub
    Partial Private Sub OnaccountIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnaccountIDChanged()
    End Sub
    Partial Private Sub OnclientIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnclientIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientAccountID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property clientAccountID() As Integer
		Get
			Return Me._clientAccountID
		End Get
		Set
			If ((Me._clientAccountID = value)  _
						= false) Then
				Me.OnclientAccountIDChanging(value)
				Me.SendPropertyChanging
				Me._clientAccountID = value
				Me.SendPropertyChanged("clientAccountID")
				Me.OnclientAccountIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="Int")>  _
	Public Property accountID() As System.Nullable(Of Integer)
		Get
			Return Me._accountID
		End Get
		Set
			If (Me._accountID.Equals(value) = false) Then
				Me.OnaccountIDChanging(value)
				Me.SendPropertyChanging
				Me._accountID = value
				Me.SendPropertyChanged("accountID")
				Me.OnaccountIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", DbType:="Int")>  _
	Public Property clientID() As System.Nullable(Of Integer)
		Get
			Return Me._clientID
		End Get
		Set
			If (Me._clientID.Equals(value) = false) Then
				Me.OnclientIDChanging(value)
				Me.SendPropertyChanging
				Me._clientID = value
				Me.SendPropertyChanged("clientID")
				Me.OnclientIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblClientAccountType")>  _
Partial Public Class tblClientAccountType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _clientAccountType As Integer
	
	Private _accountTypeID As Integer
	
	Private _clientID As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnclientAccountTypeChanging(value As Integer)
    End Sub
    Partial Private Sub OnclientAccountTypeChanged()
    End Sub
    Partial Private Sub OnaccountTypeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnaccountTypeIDChanged()
    End Sub
    Partial Private Sub OnclientIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnclientIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientAccountType", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property clientAccountType() As Integer
		Get
			Return Me._clientAccountType
		End Get
		Set
			If ((Me._clientAccountType = value)  _
						= false) Then
				Me.OnclientAccountTypeChanging(value)
				Me.SendPropertyChanging
				Me._clientAccountType = value
				Me.SendPropertyChanged("clientAccountType")
				Me.OnclientAccountTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountTypeID", DbType:="Int NOT NULL")>  _
	Public Property accountTypeID() As Integer
		Get
			Return Me._accountTypeID
		End Get
		Set
			If ((Me._accountTypeID = value)  _
						= false) Then
				Me.OnaccountTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._accountTypeID = value
				Me.SendPropertyChanged("accountTypeID")
				Me.OnaccountTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", DbType:="Int NOT NULL")>  _
	Public Property clientID() As Integer
		Get
			Return Me._clientID
		End Get
		Set
			If ((Me._clientID = value)  _
						= false) Then
				Me.OnclientIDChanging(value)
				Me.SendPropertyChanging
				Me._clientID = value
				Me.SendPropertyChanged("clientID")
				Me.OnclientIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblClientActivityType")>  _
Partial Public Class tblClientActivityType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _clientActivityTypeID As Integer
	
	Private _activityTypeID As Integer
	
	Private _clientID As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnclientActivityTypeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnclientActivityTypeIDChanged()
    End Sub
    Partial Private Sub OnactivityTypeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnactivityTypeIDChanged()
    End Sub
    Partial Private Sub OnclientIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnclientIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientActivityTypeID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property clientActivityTypeID() As Integer
		Get
			Return Me._clientActivityTypeID
		End Get
		Set
			If ((Me._clientActivityTypeID = value)  _
						= false) Then
				Me.OnclientActivityTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._clientActivityTypeID = value
				Me.SendPropertyChanged("clientActivityTypeID")
				Me.OnclientActivityTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_activityTypeID", DbType:="Int NOT NULL")>  _
	Public Property activityTypeID() As Integer
		Get
			Return Me._activityTypeID
		End Get
		Set
			If ((Me._activityTypeID = value)  _
						= false) Then
				Me.OnactivityTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._activityTypeID = value
				Me.SendPropertyChanged("activityTypeID")
				Me.OnactivityTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", DbType:="Int NOT NULL")>  _
	Public Property clientID() As Integer
		Get
			Return Me._clientID
		End Get
		Set
			If ((Me._clientID = value)  _
						= false) Then
				Me.OnclientIDChanging(value)
				Me.SendPropertyChanging
				Me._clientID = value
				Me.SendPropertyChanged("clientID")
				Me.OnclientIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblClientEventType")>  _
Partial Public Class tblClientEventType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _clientEventTypeID As Integer
	
	Private _clientID As Integer
	
	Private _eventTypeID As Integer
	
	Private _active As System.Nullable(Of Boolean)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnclientEventTypeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnclientEventTypeIDChanged()
    End Sub
    Partial Private Sub OnclientIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnclientIDChanged()
    End Sub
    Partial Private Sub OneventTypeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OneventTypeIDChanged()
    End Sub
    Partial Private Sub OnactiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnactiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientEventTypeID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property clientEventTypeID() As Integer
		Get
			Return Me._clientEventTypeID
		End Get
		Set
			If ((Me._clientEventTypeID = value)  _
						= false) Then
				Me.OnclientEventTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._clientEventTypeID = value
				Me.SendPropertyChanged("clientEventTypeID")
				Me.OnclientEventTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", DbType:="Int NOT NULL")>  _
	Public Property clientID() As Integer
		Get
			Return Me._clientID
		End Get
		Set
			If ((Me._clientID = value)  _
						= false) Then
				Me.OnclientIDChanging(value)
				Me.SendPropertyChanging
				Me._clientID = value
				Me.SendPropertyChanged("clientID")
				Me.OnclientIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTypeID", DbType:="Int NOT NULL")>  _
	Public Property eventTypeID() As Integer
		Get
			Return Me._eventTypeID
		End Get
		Set
			If ((Me._eventTypeID = value)  _
						= false) Then
				Me.OneventTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._eventTypeID = value
				Me.SendPropertyChanged("eventTypeID")
				Me.OneventTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_active", DbType:="Bit")>  _
	Public Property active() As System.Nullable(Of Boolean)
		Get
			Return Me._active
		End Get
		Set
			If (Me._active.Equals(value) = false) Then
				Me.OnactiveChanging(value)
				Me.SendPropertyChanging
				Me._active = value
				Me.SendPropertyChanged("active")
				Me.OnactiveChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblClientMarket")>  _
Partial Public Class tblClientMarket
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _clientMarketID As Integer
	
	Private _marketID As System.Nullable(Of Integer)
	
	Private _clientID As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnclientMarketIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnclientMarketIDChanged()
    End Sub
    Partial Private Sub OnmarketIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnmarketIDChanged()
    End Sub
    Partial Private Sub OnclientIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnclientIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientMarketID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property clientMarketID() As Integer
		Get
			Return Me._clientMarketID
		End Get
		Set
			If ((Me._clientMarketID = value)  _
						= false) Then
				Me.OnclientMarketIDChanging(value)
				Me.SendPropertyChanging
				Me._clientMarketID = value
				Me.SendPropertyChanged("clientMarketID")
				Me.OnclientMarketIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="Int")>  _
	Public Property marketID() As System.Nullable(Of Integer)
		Get
			Return Me._marketID
		End Get
		Set
			If (Me._marketID.Equals(value) = false) Then
				Me.OnmarketIDChanging(value)
				Me.SendPropertyChanging
				Me._marketID = value
				Me.SendPropertyChanged("marketID")
				Me.OnmarketIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", DbType:="Int")>  _
	Public Property clientID() As System.Nullable(Of Integer)
		Get
			Return Me._clientID
		End Get
		Set
			If (Me._clientID.Equals(value) = false) Then
				Me.OnclientIDChanging(value)
				Me.SendPropertyChanging
				Me._clientID = value
				Me.SendPropertyChanged("clientID")
				Me.OnclientIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblContactType")>  _
Partial Public Class tblContactType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _contactType As Integer
	
	Private _contactTypeName As String
	
	Private _enableEmailUpdates As System.Nullable(Of Boolean)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OncontactTypeChanging(value As Integer)
    End Sub
    Partial Private Sub OncontactTypeChanged()
    End Sub
    Partial Private Sub OncontactTypeNameChanging(value As String)
    End Sub
    Partial Private Sub OncontactTypeNameChanged()
    End Sub
    Partial Private Sub OnenableEmailUpdatesChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnenableEmailUpdatesChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_contactType", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property contactType() As Integer
		Get
			Return Me._contactType
		End Get
		Set
			If ((Me._contactType = value)  _
						= false) Then
				Me.OncontactTypeChanging(value)
				Me.SendPropertyChanging
				Me._contactType = value
				Me.SendPropertyChanged("contactType")
				Me.OncontactTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_contactTypeName", DbType:="NVarChar(50)")>  _
	Public Property contactTypeName() As String
		Get
			Return Me._contactTypeName
		End Get
		Set
			If (String.Equals(Me._contactTypeName, value) = false) Then
				Me.OncontactTypeNameChanging(value)
				Me.SendPropertyChanging
				Me._contactTypeName = value
				Me.SendPropertyChanged("contactTypeName")
				Me.OncontactTypeNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_enableEmailUpdates", DbType:="Bit")>  _
	Public Property enableEmailUpdates() As System.Nullable(Of Boolean)
		Get
			Return Me._enableEmailUpdates
		End Get
		Set
			If (Me._enableEmailUpdates.Equals(value) = false) Then
				Me.OnenableEmailUpdatesChanging(value)
				Me.SendPropertyChanging
				Me._enableEmailUpdates = value
				Me.SendPropertyChanged("enableEmailUpdates")
				Me.OnenableEmailUpdatesChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblCountry")>  _
Partial Public Class tblCountry
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _countryID As Integer
	
	Private _countryName As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OncountryIDChanging(value As Integer)
    End Sub
    Partial Private Sub OncountryIDChanged()
    End Sub
    Partial Private Sub OncountryNameChanging(value As String)
    End Sub
    Partial Private Sub OncountryNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_countryID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property countryID() As Integer
		Get
			Return Me._countryID
		End Get
		Set
			If ((Me._countryID = value)  _
						= false) Then
				Me.OncountryIDChanging(value)
				Me.SendPropertyChanging
				Me._countryID = value
				Me.SendPropertyChanged("countryID")
				Me.OncountryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_countryName", DbType:="NVarChar(50)")>  _
	Public Property countryName() As String
		Get
			Return Me._countryName
		End Get
		Set
			If (String.Equals(Me._countryName, value) = false) Then
				Me.OncountryNameChanging(value)
				Me.SendPropertyChanging
				Me._countryName = value
				Me.SendPropertyChanged("countryName")
				Me.OncountryNameChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblCourseInvitation")>  _
Partial Public Class tblCourseInvitation
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _invitationID As Integer
	
	Private _eventID As System.Nullable(Of Integer)
	
	Private _invitationCode As String
	
	Private _recipientEmail As String
	
	Private _status As String
	
	Private _dateSent As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OninvitationIDChanging(value As Integer)
    End Sub
    Partial Private Sub OninvitationIDChanged()
    End Sub
    Partial Private Sub OneventIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OneventIDChanged()
    End Sub
    Partial Private Sub OninvitationCodeChanging(value As String)
    End Sub
    Partial Private Sub OninvitationCodeChanged()
    End Sub
    Partial Private Sub OnrecipientEmailChanging(value As String)
    End Sub
    Partial Private Sub OnrecipientEmailChanged()
    End Sub
    Partial Private Sub OnstatusChanging(value As String)
    End Sub
    Partial Private Sub OnstatusChanged()
    End Sub
    Partial Private Sub OndateSentChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OndateSentChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_invitationID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property invitationID() As Integer
		Get
			Return Me._invitationID
		End Get
		Set
			If ((Me._invitationID = value)  _
						= false) Then
				Me.OninvitationIDChanging(value)
				Me.SendPropertyChanging
				Me._invitationID = value
				Me.SendPropertyChanged("invitationID")
				Me.OninvitationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int")>  _
	Public Property eventID() As System.Nullable(Of Integer)
		Get
			Return Me._eventID
		End Get
		Set
			If (Me._eventID.Equals(value) = false) Then
				Me.OneventIDChanging(value)
				Me.SendPropertyChanging
				Me._eventID = value
				Me.SendPropertyChanged("eventID")
				Me.OneventIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_invitationCode", DbType:="NVarChar(50)")>  _
	Public Property invitationCode() As String
		Get
			Return Me._invitationCode
		End Get
		Set
			If (String.Equals(Me._invitationCode, value) = false) Then
				Me.OninvitationCodeChanging(value)
				Me.SendPropertyChanging
				Me._invitationCode = value
				Me.SendPropertyChanged("invitationCode")
				Me.OninvitationCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_recipientEmail", DbType:="NVarChar(255)")>  _
	Public Property recipientEmail() As String
		Get
			Return Me._recipientEmail
		End Get
		Set
			If (String.Equals(Me._recipientEmail, value) = false) Then
				Me.OnrecipientEmailChanging(value)
				Me.SendPropertyChanging
				Me._recipientEmail = value
				Me.SendPropertyChanged("recipientEmail")
				Me.OnrecipientEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", DbType:="NVarChar(50)")>  _
	Public Property status() As String
		Get
			Return Me._status
		End Get
		Set
			If (String.Equals(Me._status, value) = false) Then
				Me.OnstatusChanging(value)
				Me.SendPropertyChanging
				Me._status = value
				Me.SendPropertyChanged("status")
				Me.OnstatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateSent", DbType:="SmallDateTime")>  _
	Public Property dateSent() As System.Nullable(Of Date)
		Get
			Return Me._dateSent
		End Get
		Set
			If (Me._dateSent.Equals(value) = false) Then
				Me.OndateSentChanging(value)
				Me.SendPropertyChanging
				Me._dateSent = value
				Me.SendPropertyChanged("dateSent")
				Me.OndateSentChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblDefaultRecapQuestions")>  _
Partial Public Class tblDefaultRecapQuestion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _QuestionID As Integer
	
	Private _Question As String
	
	Private _QuestionType As String
	
	Private _digit As System.Nullable(Of Integer)
	
	Private _required As System.Nullable(Of Boolean)
	
	Private _description As String
	
	Private _reportColumn As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnQuestionIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnQuestionIDChanged()
    End Sub
    Partial Private Sub OnQuestionChanging(value As String)
    End Sub
    Partial Private Sub OnQuestionChanged()
    End Sub
    Partial Private Sub OnQuestionTypeChanging(value As String)
    End Sub
    Partial Private Sub OnQuestionTypeChanged()
    End Sub
    Partial Private Sub OndigitChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OndigitChanged()
    End Sub
    Partial Private Sub OnrequiredChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnrequiredChanged()
    End Sub
    Partial Private Sub OndescriptionChanging(value As String)
    End Sub
    Partial Private Sub OndescriptionChanged()
    End Sub
    Partial Private Sub OnreportColumnChanging(value As String)
    End Sub
    Partial Private Sub OnreportColumnChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QuestionID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property QuestionID() As Integer
		Get
			Return Me._QuestionID
		End Get
		Set
			If ((Me._QuestionID = value)  _
						= false) Then
				Me.OnQuestionIDChanging(value)
				Me.SendPropertyChanging
				Me._QuestionID = value
				Me.SendPropertyChanged("QuestionID")
				Me.OnQuestionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Question", DbType:="NVarChar(256)")>  _
	Public Property Question() As String
		Get
			Return Me._Question
		End Get
		Set
			If (String.Equals(Me._Question, value) = false) Then
				Me.OnQuestionChanging(value)
				Me.SendPropertyChanging
				Me._Question = value
				Me.SendPropertyChanged("Question")
				Me.OnQuestionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QuestionType", DbType:="NVarChar(50)")>  _
	Public Property QuestionType() As String
		Get
			Return Me._QuestionType
		End Get
		Set
			If (String.Equals(Me._QuestionType, value) = false) Then
				Me.OnQuestionTypeChanging(value)
				Me.SendPropertyChanging
				Me._QuestionType = value
				Me.SendPropertyChanged("QuestionType")
				Me.OnQuestionTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_digit", DbType:="Int")>  _
	Public Property digit() As System.Nullable(Of Integer)
		Get
			Return Me._digit
		End Get
		Set
			If (Me._digit.Equals(value) = false) Then
				Me.OndigitChanging(value)
				Me.SendPropertyChanging
				Me._digit = value
				Me.SendPropertyChanged("digit")
				Me.OndigitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_required", DbType:="Bit")>  _
	Public Property required() As System.Nullable(Of Boolean)
		Get
			Return Me._required
		End Get
		Set
			If (Me._required.Equals(value) = false) Then
				Me.OnrequiredChanging(value)
				Me.SendPropertyChanging
				Me._required = value
				Me.SendPropertyChanged("required")
				Me.OnrequiredChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_description", DbType:="NVarChar(2000)")>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me.OndescriptionChanging(value)
				Me.SendPropertyChanging
				Me._description = value
				Me.SendPropertyChanged("description")
				Me.OndescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_reportColumn", DbType:="NVarChar(256)")>  _
	Public Property reportColumn() As String
		Get
			Return Me._reportColumn
		End Get
		Set
			If (String.Equals(Me._reportColumn, value) = false) Then
				Me.OnreportColumnChanging(value)
				Me.SendPropertyChanging
				Me._reportColumn = value
				Me.SendPropertyChanged("reportColumn")
				Me.OnreportColumnChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblDistributor")>  _
Partial Public Class tblDistributor
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _distributorID As Integer
	
	Private _distributorName As String
	
	Private _marketID As System.Nullable(Of Integer)
	
	Private _city As String
	
	Private _supplierID As System.Nullable(Of Integer)
	
	Private _createdBy As String
	
	Private _createdDate As System.Nullable(Of Date)
	
	Private _modifiedBy As String
	
	Private _modifiedDate As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OndistributorIDChanging(value As Integer)
    End Sub
    Partial Private Sub OndistributorIDChanged()
    End Sub
    Partial Private Sub OndistributorNameChanging(value As String)
    End Sub
    Partial Private Sub OndistributorNameChanged()
    End Sub
    Partial Private Sub OnmarketIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnmarketIDChanged()
    End Sub
    Partial Private Sub OncityChanging(value As String)
    End Sub
    Partial Private Sub OncityChanged()
    End Sub
    Partial Private Sub OnsupplierIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnsupplierIDChanged()
    End Sub
    Partial Private Sub OncreatedByChanging(value As String)
    End Sub
    Partial Private Sub OncreatedByChanged()
    End Sub
    Partial Private Sub OncreatedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OncreatedDateChanged()
    End Sub
    Partial Private Sub OnmodifiedByChanging(value As String)
    End Sub
    Partial Private Sub OnmodifiedByChanged()
    End Sub
    Partial Private Sub OnmodifiedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnmodifiedDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_distributorID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property distributorID() As Integer
		Get
			Return Me._distributorID
		End Get
		Set
			If ((Me._distributorID = value)  _
						= false) Then
				Me.OndistributorIDChanging(value)
				Me.SendPropertyChanging
				Me._distributorID = value
				Me.SendPropertyChanged("distributorID")
				Me.OndistributorIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_distributorName", DbType:="NVarChar(50)")>  _
	Public Property distributorName() As String
		Get
			Return Me._distributorName
		End Get
		Set
			If (String.Equals(Me._distributorName, value) = false) Then
				Me.OndistributorNameChanging(value)
				Me.SendPropertyChanging
				Me._distributorName = value
				Me.SendPropertyChanged("distributorName")
				Me.OndistributorNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="Int")>  _
	Public Property marketID() As System.Nullable(Of Integer)
		Get
			Return Me._marketID
		End Get
		Set
			If (Me._marketID.Equals(value) = false) Then
				Me.OnmarketIDChanging(value)
				Me.SendPropertyChanging
				Me._marketID = value
				Me.SendPropertyChanged("marketID")
				Me.OnmarketIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_city", DbType:="NVarChar(50)")>  _
	Public Property city() As String
		Get
			Return Me._city
		End Get
		Set
			If (String.Equals(Me._city, value) = false) Then
				Me.OncityChanging(value)
				Me.SendPropertyChanging
				Me._city = value
				Me.SendPropertyChanged("city")
				Me.OncityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int")>  _
	Public Property supplierID() As System.Nullable(Of Integer)
		Get
			Return Me._supplierID
		End Get
		Set
			If (Me._supplierID.Equals(value) = false) Then
				Me.OnsupplierIDChanging(value)
				Me.SendPropertyChanging
				Me._supplierID = value
				Me.SendPropertyChanged("supplierID")
				Me.OnsupplierIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_createdBy", DbType:="NVarChar(50)")>  _
	Public Property createdBy() As String
		Get
			Return Me._createdBy
		End Get
		Set
			If (String.Equals(Me._createdBy, value) = false) Then
				Me.OncreatedByChanging(value)
				Me.SendPropertyChanging
				Me._createdBy = value
				Me.SendPropertyChanged("createdBy")
				Me.OncreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_createdDate", DbType:="SmallDateTime")>  _
	Public Property createdDate() As System.Nullable(Of Date)
		Get
			Return Me._createdDate
		End Get
		Set
			If (Me._createdDate.Equals(value) = false) Then
				Me.OncreatedDateChanging(value)
				Me.SendPropertyChanging
				Me._createdDate = value
				Me.SendPropertyChanged("createdDate")
				Me.OncreatedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_modifiedBy", DbType:="NVarChar(50)")>  _
	Public Property modifiedBy() As String
		Get
			Return Me._modifiedBy
		End Get
		Set
			If (String.Equals(Me._modifiedBy, value) = false) Then
				Me.OnmodifiedByChanging(value)
				Me.SendPropertyChanging
				Me._modifiedBy = value
				Me.SendPropertyChanged("modifiedBy")
				Me.OnmodifiedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_modifiedDate", DbType:="SmallDateTime")>  _
	Public Property modifiedDate() As System.Nullable(Of Date)
		Get
			Return Me._modifiedDate
		End Get
		Set
			If (Me._modifiedDate.Equals(value) = false) Then
				Me.OnmodifiedDateChanging(value)
				Me.SendPropertyChanging
				Me._modifiedDate = value
				Me.SendPropertyChanged("modifiedDate")
				Me.OnmodifiedDateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblDocuments")>  _
Partial Public Class tblDocument
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _documentID As String
	
	Private _documentName As String
	
	Private _contentType As String
	
	Private _size As Long
	
	Private _data As System.Data.Linq.Binary
	
	Private _accountID As String
	
	Private _eventID As String
	
	Private _brandID As String
	
	Private _dateUploaded As System.Nullable(Of Date)
	
	Private _uploadedBy As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OndocumentIDChanging(value As String)
    End Sub
    Partial Private Sub OndocumentIDChanged()
    End Sub
    Partial Private Sub OndocumentNameChanging(value As String)
    End Sub
    Partial Private Sub OndocumentNameChanged()
    End Sub
    Partial Private Sub OncontentTypeChanging(value As String)
    End Sub
    Partial Private Sub OncontentTypeChanged()
    End Sub
    Partial Private Sub OnsizeChanging(value As Long)
    End Sub
    Partial Private Sub OnsizeChanged()
    End Sub
    Partial Private Sub OndataChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OndataChanged()
    End Sub
    Partial Private Sub OnaccountIDChanging(value As String)
    End Sub
    Partial Private Sub OnaccountIDChanged()
    End Sub
    Partial Private Sub OneventIDChanging(value As String)
    End Sub
    Partial Private Sub OneventIDChanged()
    End Sub
    Partial Private Sub OnbrandIDChanging(value As String)
    End Sub
    Partial Private Sub OnbrandIDChanged()
    End Sub
    Partial Private Sub OndateUploadedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OndateUploadedChanged()
    End Sub
    Partial Private Sub OnuploadedByChanging(value As String)
    End Sub
    Partial Private Sub OnuploadedByChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_documentID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property documentID() As String
		Get
			Return Me._documentID
		End Get
		Set
			If (String.Equals(Me._documentID, value) = false) Then
				Me.OndocumentIDChanging(value)
				Me.SendPropertyChanging
				Me._documentID = value
				Me.SendPropertyChanged("documentID")
				Me.OndocumentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_documentName", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property documentName() As String
		Get
			Return Me._documentName
		End Get
		Set
			If (String.Equals(Me._documentName, value) = false) Then
				Me.OndocumentNameChanging(value)
				Me.SendPropertyChanging
				Me._documentName = value
				Me.SendPropertyChanged("documentName")
				Me.OndocumentNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_contentType", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property contentType() As String
		Get
			Return Me._contentType
		End Get
		Set
			If (String.Equals(Me._contentType, value) = false) Then
				Me.OncontentTypeChanging(value)
				Me.SendPropertyChanging
				Me._contentType = value
				Me.SendPropertyChanged("contentType")
				Me.OncontentTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_size", DbType:="BigInt NOT NULL")>  _
	Public Property size() As Long
		Get
			Return Me._size
		End Get
		Set
			If ((Me._size = value)  _
						= false) Then
				Me.OnsizeChanging(value)
				Me.SendPropertyChanging
				Me._size = value
				Me.SendPropertyChanged("size")
				Me.OnsizeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_data", DbType:="VarBinary(MAX) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property data() As System.Data.Linq.Binary
		Get
			Return Me._data
		End Get
		Set
			If (Object.Equals(Me._data, value) = false) Then
				Me.OndataChanging(value)
				Me.SendPropertyChanging
				Me._data = value
				Me.SendPropertyChanged("data")
				Me.OndataChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="NVarChar(50)")>  _
	Public Property accountID() As String
		Get
			Return Me._accountID
		End Get
		Set
			If (String.Equals(Me._accountID, value) = false) Then
				Me.OnaccountIDChanging(value)
				Me.SendPropertyChanging
				Me._accountID = value
				Me.SendPropertyChanged("accountID")
				Me.OnaccountIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="NVarChar(50)")>  _
	Public Property eventID() As String
		Get
			Return Me._eventID
		End Get
		Set
			If (String.Equals(Me._eventID, value) = false) Then
				Me.OneventIDChanging(value)
				Me.SendPropertyChanging
				Me._eventID = value
				Me.SendPropertyChanged("eventID")
				Me.OneventIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandID", DbType:="NVarChar(50)")>  _
	Public Property brandID() As String
		Get
			Return Me._brandID
		End Get
		Set
			If (String.Equals(Me._brandID, value) = false) Then
				Me.OnbrandIDChanging(value)
				Me.SendPropertyChanging
				Me._brandID = value
				Me.SendPropertyChanged("brandID")
				Me.OnbrandIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateUploaded", DbType:="SmallDateTime")>  _
	Public Property dateUploaded() As System.Nullable(Of Date)
		Get
			Return Me._dateUploaded
		End Get
		Set
			If (Me._dateUploaded.Equals(value) = false) Then
				Me.OndateUploadedChanging(value)
				Me.SendPropertyChanging
				Me._dateUploaded = value
				Me.SendPropertyChanged("dateUploaded")
				Me.OndateUploadedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_uploadedBy", DbType:="NVarChar(50)")>  _
	Public Property uploadedBy() As String
		Get
			Return Me._uploadedBy
		End Get
		Set
			If (String.Equals(Me._uploadedBy, value) = false) Then
				Me.OnuploadedByChanging(value)
				Me.SendPropertyChanging
				Me._uploadedBy = value
				Me.SendPropertyChanged("uploadedBy")
				Me.OnuploadedByChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblEvent")>  _
Partial Public Class tblEvent
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _eventID As Integer
	
	Private _clientID As System.Nullable(Of Integer)
	
	Private _eventTitle As String
	
	Private _eventDate As System.Nullable(Of Date)
	
	Private _eventEndDate As System.Nullable(Of Date)
	
	Private _startTime As System.Nullable(Of Date)
	
	Private _endTime As System.Nullable(Of Date)
	
	Private _supplierID As System.Nullable(Of Integer)
	
	Private _eventTypeID As System.Nullable(Of Integer)
	
	Private _teamID As System.Nullable(Of Integer)
	
	Private _statusID As System.Nullable(Of Integer)
	
	Private _eventDescription As String
	
	Private _locationID As System.Nullable(Of Integer)
	
	Private _marketID As System.Nullable(Of Integer)
	
	Private _programName As String
	
	Private _billableEvent As System.Nullable(Of Boolean)
	
	Private _invoiced As System.Nullable(Of Boolean)
	
	Private _invoiceID As System.Nullable(Of Integer)
	
	Private _attire As String
	
	Private _posRequirements As String
	
	Private _samplingNotes As String
	
	Private _posShippingAddress As String
	
	Private _brandID As System.Nullable(Of Integer)
	
	Private _recapStatus As System.Nullable(Of Integer)
	
	Private _posShippingName As String
	
	Private _posShippingAddress1 As String
	
	Private _posShippingCity As String
	
	Private _posShippingState As String
	
	Private _posShippingZip As String
	
	Private _posShippingLatitude As System.Nullable(Of Double)
	
	Private _posShippingLongtitude As System.Nullable(Of Double)
	
	Private _posKitRequested As System.Nullable(Of Boolean)
	
	Private _posKitShippingNote As String
	
	Private _posShipTo As String
	
	Private _CreatedDate As System.Nullable(Of Date)
	
	Private _ModifiedDate As System.Nullable(Of Date)
	
	Private _CreatedBy As String
	
	Private _ModifiedBy As String
	
	Private _Modified As System.Nullable(Of Boolean)
	
	Private _brandsString As String
	
	Private _createdSource As System.Nullable(Of Byte)
	
	Private _requestedBy As String
	
	Private _distributer As String
	
	Private _purchaseOrderNumber As String
	
	Private _importFileID As System.Nullable(Of Integer)
	
	Private _eventHours As System.Nullable(Of Integer)
	
	Private _eventMinutes As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OneventIDChanging(value As Integer)
    End Sub
    Partial Private Sub OneventIDChanged()
    End Sub
    Partial Private Sub OnclientIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnclientIDChanged()
    End Sub
    Partial Private Sub OneventTitleChanging(value As String)
    End Sub
    Partial Private Sub OneventTitleChanged()
    End Sub
    Partial Private Sub OneventDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OneventDateChanged()
    End Sub
    Partial Private Sub OneventEndDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OneventEndDateChanged()
    End Sub
    Partial Private Sub OnstartTimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnstartTimeChanged()
    End Sub
    Partial Private Sub OnendTimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnendTimeChanged()
    End Sub
    Partial Private Sub OnsupplierIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnsupplierIDChanged()
    End Sub
    Partial Private Sub OneventTypeIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OneventTypeIDChanged()
    End Sub
    Partial Private Sub OnteamIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnteamIDChanged()
    End Sub
    Partial Private Sub OnstatusIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnstatusIDChanged()
    End Sub
    Partial Private Sub OneventDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OneventDescriptionChanged()
    End Sub
    Partial Private Sub OnlocationIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnlocationIDChanged()
    End Sub
    Partial Private Sub OnmarketIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnmarketIDChanged()
    End Sub
    Partial Private Sub OnprogramNameChanging(value As String)
    End Sub
    Partial Private Sub OnprogramNameChanged()
    End Sub
    Partial Private Sub OnbillableEventChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnbillableEventChanged()
    End Sub
    Partial Private Sub OninvoicedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OninvoicedChanged()
    End Sub
    Partial Private Sub OninvoiceIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OninvoiceIDChanged()
    End Sub
    Partial Private Sub OnattireChanging(value As String)
    End Sub
    Partial Private Sub OnattireChanged()
    End Sub
    Partial Private Sub OnposRequirementsChanging(value As String)
    End Sub
    Partial Private Sub OnposRequirementsChanged()
    End Sub
    Partial Private Sub OnsamplingNotesChanging(value As String)
    End Sub
    Partial Private Sub OnsamplingNotesChanged()
    End Sub
    Partial Private Sub OnposShippingAddressChanging(value As String)
    End Sub
    Partial Private Sub OnposShippingAddressChanged()
    End Sub
    Partial Private Sub OnbrandIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnbrandIDChanged()
    End Sub
    Partial Private Sub OnrecapStatusChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnrecapStatusChanged()
    End Sub
    Partial Private Sub OnposShippingNameChanging(value As String)
    End Sub
    Partial Private Sub OnposShippingNameChanged()
    End Sub
    Partial Private Sub OnposShippingAddress1Changing(value As String)
    End Sub
    Partial Private Sub OnposShippingAddress1Changed()
    End Sub
    Partial Private Sub OnposShippingCityChanging(value As String)
    End Sub
    Partial Private Sub OnposShippingCityChanged()
    End Sub
    Partial Private Sub OnposShippingStateChanging(value As String)
    End Sub
    Partial Private Sub OnposShippingStateChanged()
    End Sub
    Partial Private Sub OnposShippingZipChanging(value As String)
    End Sub
    Partial Private Sub OnposShippingZipChanged()
    End Sub
    Partial Private Sub OnposShippingLatitudeChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnposShippingLatitudeChanged()
    End Sub
    Partial Private Sub OnposShippingLongtitudeChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnposShippingLongtitudeChanged()
    End Sub
    Partial Private Sub OnposKitRequestedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnposKitRequestedChanged()
    End Sub
    Partial Private Sub OnposKitShippingNoteChanging(value As String)
    End Sub
    Partial Private Sub OnposKitShippingNoteChanged()
    End Sub
    Partial Private Sub OnposShipToChanging(value As String)
    End Sub
    Partial Private Sub OnposShipToChanged()
    End Sub
    Partial Private Sub OnCreatedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCreatedDateChanged()
    End Sub
    Partial Private Sub OnModifiedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnModifiedDateChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As String)
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnModifiedByChanging(value As String)
    End Sub
    Partial Private Sub OnModifiedByChanged()
    End Sub
    Partial Private Sub OnModifiedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnModifiedChanged()
    End Sub
    Partial Private Sub OnbrandsStringChanging(value As String)
    End Sub
    Partial Private Sub OnbrandsStringChanged()
    End Sub
    Partial Private Sub OncreatedSourceChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OncreatedSourceChanged()
    End Sub
    Partial Private Sub OnrequestedByChanging(value As String)
    End Sub
    Partial Private Sub OnrequestedByChanged()
    End Sub
    Partial Private Sub OndistributerChanging(value As String)
    End Sub
    Partial Private Sub OndistributerChanged()
    End Sub
    Partial Private Sub OnpurchaseOrderNumberChanging(value As String)
    End Sub
    Partial Private Sub OnpurchaseOrderNumberChanged()
    End Sub
    Partial Private Sub OnimportFileIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnimportFileIDChanged()
    End Sub
    Partial Private Sub OneventHoursChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OneventHoursChanged()
    End Sub
    Partial Private Sub OneventMinutesChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OneventMinutesChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me.OneventIDChanging(value)
				Me.SendPropertyChanging
				Me._eventID = value
				Me.SendPropertyChanged("eventID")
				Me.OneventIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", DbType:="Int")>  _
	Public Property clientID() As System.Nullable(Of Integer)
		Get
			Return Me._clientID
		End Get
		Set
			If (Me._clientID.Equals(value) = false) Then
				Me.OnclientIDChanging(value)
				Me.SendPropertyChanging
				Me._clientID = value
				Me.SendPropertyChanged("clientID")
				Me.OnclientIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTitle", DbType:="VarChar(1000)")>  _
	Public Property eventTitle() As String
		Get
			Return Me._eventTitle
		End Get
		Set
			If (String.Equals(Me._eventTitle, value) = false) Then
				Me.OneventTitleChanging(value)
				Me.SendPropertyChanging
				Me._eventTitle = value
				Me.SendPropertyChanged("eventTitle")
				Me.OneventTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventDate", DbType:="SmallDateTime")>  _
	Public Property eventDate() As System.Nullable(Of Date)
		Get
			Return Me._eventDate
		End Get
		Set
			If (Me._eventDate.Equals(value) = false) Then
				Me.OneventDateChanging(value)
				Me.SendPropertyChanging
				Me._eventDate = value
				Me.SendPropertyChanged("eventDate")
				Me.OneventDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventEndDate", DbType:="SmallDateTime")>  _
	Public Property eventEndDate() As System.Nullable(Of Date)
		Get
			Return Me._eventEndDate
		End Get
		Set
			If (Me._eventEndDate.Equals(value) = false) Then
				Me.OneventEndDateChanging(value)
				Me.SendPropertyChanging
				Me._eventEndDate = value
				Me.SendPropertyChanged("eventEndDate")
				Me.OneventEndDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_startTime", DbType:="SmallDateTime")>  _
	Public Property startTime() As System.Nullable(Of Date)
		Get
			Return Me._startTime
		End Get
		Set
			If (Me._startTime.Equals(value) = false) Then
				Me.OnstartTimeChanging(value)
				Me.SendPropertyChanging
				Me._startTime = value
				Me.SendPropertyChanged("startTime")
				Me.OnstartTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_endTime", DbType:="SmallDateTime")>  _
	Public Property endTime() As System.Nullable(Of Date)
		Get
			Return Me._endTime
		End Get
		Set
			If (Me._endTime.Equals(value) = false) Then
				Me.OnendTimeChanging(value)
				Me.SendPropertyChanging
				Me._endTime = value
				Me.SendPropertyChanged("endTime")
				Me.OnendTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int")>  _
	Public Property supplierID() As System.Nullable(Of Integer)
		Get
			Return Me._supplierID
		End Get
		Set
			If (Me._supplierID.Equals(value) = false) Then
				Me.OnsupplierIDChanging(value)
				Me.SendPropertyChanging
				Me._supplierID = value
				Me.SendPropertyChanged("supplierID")
				Me.OnsupplierIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTypeID", DbType:="Int")>  _
	Public Property eventTypeID() As System.Nullable(Of Integer)
		Get
			Return Me._eventTypeID
		End Get
		Set
			If (Me._eventTypeID.Equals(value) = false) Then
				Me.OneventTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._eventTypeID = value
				Me.SendPropertyChanged("eventTypeID")
				Me.OneventTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_teamID", DbType:="Int")>  _
	Public Property teamID() As System.Nullable(Of Integer)
		Get
			Return Me._teamID
		End Get
		Set
			If (Me._teamID.Equals(value) = false) Then
				Me.OnteamIDChanging(value)
				Me.SendPropertyChanging
				Me._teamID = value
				Me.SendPropertyChanged("teamID")
				Me.OnteamIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_statusID", DbType:="Int")>  _
	Public Property statusID() As System.Nullable(Of Integer)
		Get
			Return Me._statusID
		End Get
		Set
			If (Me._statusID.Equals(value) = false) Then
				Me.OnstatusIDChanging(value)
				Me.SendPropertyChanging
				Me._statusID = value
				Me.SendPropertyChanged("statusID")
				Me.OnstatusIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventDescription", DbType:="NVarChar(MAX)")>  _
	Public Property eventDescription() As String
		Get
			Return Me._eventDescription
		End Get
		Set
			If (String.Equals(Me._eventDescription, value) = false) Then
				Me.OneventDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._eventDescription = value
				Me.SendPropertyChanged("eventDescription")
				Me.OneventDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_locationID", DbType:="Int")>  _
	Public Property locationID() As System.Nullable(Of Integer)
		Get
			Return Me._locationID
		End Get
		Set
			If (Me._locationID.Equals(value) = false) Then
				Me.OnlocationIDChanging(value)
				Me.SendPropertyChanging
				Me._locationID = value
				Me.SendPropertyChanged("locationID")
				Me.OnlocationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="Int")>  _
	Public Property marketID() As System.Nullable(Of Integer)
		Get
			Return Me._marketID
		End Get
		Set
			If (Me._marketID.Equals(value) = false) Then
				Me.OnmarketIDChanging(value)
				Me.SendPropertyChanging
				Me._marketID = value
				Me.SendPropertyChanged("marketID")
				Me.OnmarketIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_programName", DbType:="NVarChar(256)")>  _
	Public Property programName() As String
		Get
			Return Me._programName
		End Get
		Set
			If (String.Equals(Me._programName, value) = false) Then
				Me.OnprogramNameChanging(value)
				Me.SendPropertyChanging
				Me._programName = value
				Me.SendPropertyChanged("programName")
				Me.OnprogramNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_billableEvent", DbType:="Bit")>  _
	Public Property billableEvent() As System.Nullable(Of Boolean)
		Get
			Return Me._billableEvent
		End Get
		Set
			If (Me._billableEvent.Equals(value) = false) Then
				Me.OnbillableEventChanging(value)
				Me.SendPropertyChanging
				Me._billableEvent = value
				Me.SendPropertyChanged("billableEvent")
				Me.OnbillableEventChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_invoiced", DbType:="Bit")>  _
	Public Property invoiced() As System.Nullable(Of Boolean)
		Get
			Return Me._invoiced
		End Get
		Set
			If (Me._invoiced.Equals(value) = false) Then
				Me.OninvoicedChanging(value)
				Me.SendPropertyChanging
				Me._invoiced = value
				Me.SendPropertyChanged("invoiced")
				Me.OninvoicedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_invoiceID", DbType:="Int")>  _
	Public Property invoiceID() As System.Nullable(Of Integer)
		Get
			Return Me._invoiceID
		End Get
		Set
			If (Me._invoiceID.Equals(value) = false) Then
				Me.OninvoiceIDChanging(value)
				Me.SendPropertyChanging
				Me._invoiceID = value
				Me.SendPropertyChanged("invoiceID")
				Me.OninvoiceIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_attire", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property attire() As String
		Get
			Return Me._attire
		End Get
		Set
			If (String.Equals(Me._attire, value) = false) Then
				Me.OnattireChanging(value)
				Me.SendPropertyChanging
				Me._attire = value
				Me.SendPropertyChanged("attire")
				Me.OnattireChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_posRequirements", DbType:="NVarChar(MAX)")>  _
	Public Property posRequirements() As String
		Get
			Return Me._posRequirements
		End Get
		Set
			If (String.Equals(Me._posRequirements, value) = false) Then
				Me.OnposRequirementsChanging(value)
				Me.SendPropertyChanging
				Me._posRequirements = value
				Me.SendPropertyChanged("posRequirements")
				Me.OnposRequirementsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_samplingNotes", DbType:="NVarChar(MAX)")>  _
	Public Property samplingNotes() As String
		Get
			Return Me._samplingNotes
		End Get
		Set
			If (String.Equals(Me._samplingNotes, value) = false) Then
				Me.OnsamplingNotesChanging(value)
				Me.SendPropertyChanging
				Me._samplingNotes = value
				Me.SendPropertyChanged("samplingNotes")
				Me.OnsamplingNotesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_posShippingAddress", DbType:="NVarChar(MAX)")>  _
	Public Property posShippingAddress() As String
		Get
			Return Me._posShippingAddress
		End Get
		Set
			If (String.Equals(Me._posShippingAddress, value) = false) Then
				Me.OnposShippingAddressChanging(value)
				Me.SendPropertyChanging
				Me._posShippingAddress = value
				Me.SendPropertyChanged("posShippingAddress")
				Me.OnposShippingAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandID", DbType:="Int")>  _
	Public Property brandID() As System.Nullable(Of Integer)
		Get
			Return Me._brandID
		End Get
		Set
			If (Me._brandID.Equals(value) = false) Then
				Me.OnbrandIDChanging(value)
				Me.SendPropertyChanging
				Me._brandID = value
				Me.SendPropertyChanged("brandID")
				Me.OnbrandIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_recapStatus", DbType:="Int")>  _
	Public Property recapStatus() As System.Nullable(Of Integer)
		Get
			Return Me._recapStatus
		End Get
		Set
			If (Me._recapStatus.Equals(value) = false) Then
				Me.OnrecapStatusChanging(value)
				Me.SendPropertyChanging
				Me._recapStatus = value
				Me.SendPropertyChanged("recapStatus")
				Me.OnrecapStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_posShippingName", DbType:="NVarChar(50)")>  _
	Public Property posShippingName() As String
		Get
			Return Me._posShippingName
		End Get
		Set
			If (String.Equals(Me._posShippingName, value) = false) Then
				Me.OnposShippingNameChanging(value)
				Me.SendPropertyChanging
				Me._posShippingName = value
				Me.SendPropertyChanged("posShippingName")
				Me.OnposShippingNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_posShippingAddress1", DbType:="NVarChar(50)")>  _
	Public Property posShippingAddress1() As String
		Get
			Return Me._posShippingAddress1
		End Get
		Set
			If (String.Equals(Me._posShippingAddress1, value) = false) Then
				Me.OnposShippingAddress1Changing(value)
				Me.SendPropertyChanging
				Me._posShippingAddress1 = value
				Me.SendPropertyChanged("posShippingAddress1")
				Me.OnposShippingAddress1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_posShippingCity", DbType:="NVarChar(50)")>  _
	Public Property posShippingCity() As String
		Get
			Return Me._posShippingCity
		End Get
		Set
			If (String.Equals(Me._posShippingCity, value) = false) Then
				Me.OnposShippingCityChanging(value)
				Me.SendPropertyChanging
				Me._posShippingCity = value
				Me.SendPropertyChanged("posShippingCity")
				Me.OnposShippingCityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_posShippingState", DbType:="NVarChar(50)")>  _
	Public Property posShippingState() As String
		Get
			Return Me._posShippingState
		End Get
		Set
			If (String.Equals(Me._posShippingState, value) = false) Then
				Me.OnposShippingStateChanging(value)
				Me.SendPropertyChanging
				Me._posShippingState = value
				Me.SendPropertyChanged("posShippingState")
				Me.OnposShippingStateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_posShippingZip", DbType:="NVarChar(50)")>  _
	Public Property posShippingZip() As String
		Get
			Return Me._posShippingZip
		End Get
		Set
			If (String.Equals(Me._posShippingZip, value) = false) Then
				Me.OnposShippingZipChanging(value)
				Me.SendPropertyChanging
				Me._posShippingZip = value
				Me.SendPropertyChanged("posShippingZip")
				Me.OnposShippingZipChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_posShippingLatitude", DbType:="Float")>  _
	Public Property posShippingLatitude() As System.Nullable(Of Double)
		Get
			Return Me._posShippingLatitude
		End Get
		Set
			If (Me._posShippingLatitude.Equals(value) = false) Then
				Me.OnposShippingLatitudeChanging(value)
				Me.SendPropertyChanging
				Me._posShippingLatitude = value
				Me.SendPropertyChanged("posShippingLatitude")
				Me.OnposShippingLatitudeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_posShippingLongtitude", DbType:="Float")>  _
	Public Property posShippingLongtitude() As System.Nullable(Of Double)
		Get
			Return Me._posShippingLongtitude
		End Get
		Set
			If (Me._posShippingLongtitude.Equals(value) = false) Then
				Me.OnposShippingLongtitudeChanging(value)
				Me.SendPropertyChanging
				Me._posShippingLongtitude = value
				Me.SendPropertyChanged("posShippingLongtitude")
				Me.OnposShippingLongtitudeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_posKitRequested", DbType:="Bit")>  _
	Public Property posKitRequested() As System.Nullable(Of Boolean)
		Get
			Return Me._posKitRequested
		End Get
		Set
			If (Me._posKitRequested.Equals(value) = false) Then
				Me.OnposKitRequestedChanging(value)
				Me.SendPropertyChanging
				Me._posKitRequested = value
				Me.SendPropertyChanged("posKitRequested")
				Me.OnposKitRequestedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_posKitShippingNote", DbType:="NVarChar(MAX)")>  _
	Public Property posKitShippingNote() As String
		Get
			Return Me._posKitShippingNote
		End Get
		Set
			If (String.Equals(Me._posKitShippingNote, value) = false) Then
				Me.OnposKitShippingNoteChanging(value)
				Me.SendPropertyChanging
				Me._posKitShippingNote = value
				Me.SendPropertyChanged("posKitShippingNote")
				Me.OnposKitShippingNoteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_posShipTo", DbType:="NVarChar(50)")>  _
	Public Property posShipTo() As String
		Get
			Return Me._posShipTo
		End Get
		Set
			If (String.Equals(Me._posShipTo, value) = false) Then
				Me.OnposShipToChanging(value)
				Me.SendPropertyChanging
				Me._posShipTo = value
				Me.SendPropertyChanged("posShipTo")
				Me.OnposShipToChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedDate", DbType:="SmallDateTime")>  _
	Public Property CreatedDate() As System.Nullable(Of Date)
		Get
			Return Me._CreatedDate
		End Get
		Set
			If (Me._CreatedDate.Equals(value) = false) Then
				Me.OnCreatedDateChanging(value)
				Me.SendPropertyChanging
				Me._CreatedDate = value
				Me.SendPropertyChanged("CreatedDate")
				Me.OnCreatedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDate", DbType:="SmallDateTime")>  _
	Public Property ModifiedDate() As System.Nullable(Of Date)
		Get
			Return Me._ModifiedDate
		End Get
		Set
			If (Me._ModifiedDate.Equals(value) = false) Then
				Me.OnModifiedDateChanging(value)
				Me.SendPropertyChanging
				Me._ModifiedDate = value
				Me.SendPropertyChanged("ModifiedDate")
				Me.OnModifiedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="NVarChar(50)")>  _
	Public Property CreatedBy() As String
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (String.Equals(Me._CreatedBy, value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedBy", DbType:="NVarChar(50)")>  _
	Public Property ModifiedBy() As String
		Get
			Return Me._ModifiedBy
		End Get
		Set
			If (String.Equals(Me._ModifiedBy, value) = false) Then
				Me.OnModifiedByChanging(value)
				Me.SendPropertyChanging
				Me._ModifiedBy = value
				Me.SendPropertyChanged("ModifiedBy")
				Me.OnModifiedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Modified", DbType:="Bit")>  _
	Public Property Modified() As System.Nullable(Of Boolean)
		Get
			Return Me._Modified
		End Get
		Set
			If (Me._Modified.Equals(value) = false) Then
				Me.OnModifiedChanging(value)
				Me.SendPropertyChanging
				Me._Modified = value
				Me.SendPropertyChanged("Modified")
				Me.OnModifiedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandsString", DbType:="NVarChar(1000)")>  _
	Public Property brandsString() As String
		Get
			Return Me._brandsString
		End Get
		Set
			If (String.Equals(Me._brandsString, value) = false) Then
				Me.OnbrandsStringChanging(value)
				Me.SendPropertyChanging
				Me._brandsString = value
				Me.SendPropertyChanged("brandsString")
				Me.OnbrandsStringChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_createdSource", DbType:="TinyInt")>  _
	Public Property createdSource() As System.Nullable(Of Byte)
		Get
			Return Me._createdSource
		End Get
		Set
			If (Me._createdSource.Equals(value) = false) Then
				Me.OncreatedSourceChanging(value)
				Me.SendPropertyChanging
				Me._createdSource = value
				Me.SendPropertyChanged("createdSource")
				Me.OncreatedSourceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_requestedBy", DbType:="NVarChar(50)")>  _
	Public Property requestedBy() As String
		Get
			Return Me._requestedBy
		End Get
		Set
			If (String.Equals(Me._requestedBy, value) = false) Then
				Me.OnrequestedByChanging(value)
				Me.SendPropertyChanging
				Me._requestedBy = value
				Me.SendPropertyChanged("requestedBy")
				Me.OnrequestedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_distributer", DbType:="NVarChar(75)")>  _
	Public Property distributer() As String
		Get
			Return Me._distributer
		End Get
		Set
			If (String.Equals(Me._distributer, value) = false) Then
				Me.OndistributerChanging(value)
				Me.SendPropertyChanging
				Me._distributer = value
				Me.SendPropertyChanged("distributer")
				Me.OndistributerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_purchaseOrderNumber", DbType:="NVarChar(20)")>  _
	Public Property purchaseOrderNumber() As String
		Get
			Return Me._purchaseOrderNumber
		End Get
		Set
			If (String.Equals(Me._purchaseOrderNumber, value) = false) Then
				Me.OnpurchaseOrderNumberChanging(value)
				Me.SendPropertyChanging
				Me._purchaseOrderNumber = value
				Me.SendPropertyChanged("purchaseOrderNumber")
				Me.OnpurchaseOrderNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_importFileID", DbType:="Int")>  _
	Public Property importFileID() As System.Nullable(Of Integer)
		Get
			Return Me._importFileID
		End Get
		Set
			If (Me._importFileID.Equals(value) = false) Then
				Me.OnimportFileIDChanging(value)
				Me.SendPropertyChanging
				Me._importFileID = value
				Me.SendPropertyChanged("importFileID")
				Me.OnimportFileIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventHours", DbType:="Int")>  _
	Public Property eventHours() As System.Nullable(Of Integer)
		Get
			Return Me._eventHours
		End Get
		Set
			If (Me._eventHours.Equals(value) = false) Then
				Me.OneventHoursChanging(value)
				Me.SendPropertyChanging
				Me._eventHours = value
				Me.SendPropertyChanged("eventHours")
				Me.OneventHoursChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventMinutes", DbType:="Int")>  _
	Public Property eventMinutes() As System.Nullable(Of Integer)
		Get
			Return Me._eventMinutes
		End Get
		Set
			If (Me._eventMinutes.Equals(value) = false) Then
				Me.OneventMinutesChanging(value)
				Me.SendPropertyChanging
				Me._eventMinutes = value
				Me.SendPropertyChanged("eventMinutes")
				Me.OneventMinutesChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblEventBrandResult")>  _
Partial Public Class tblEventBrandResult
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _eventBrandResultID As Integer
	
	Private _eventID As Integer
	
	Private _brandID As Integer
	
	Private _totalSampled As System.Nullable(Of Decimal)
	
	Private _sampleBottlesUsed As System.Nullable(Of Decimal)
	
	Private _totalSold As System.Nullable(Of Decimal)
	
	Private _sellOut As System.Nullable(Of Boolean)
	
	Private _timeSellOut As String
	
	Private _priceInStore As System.Nullable(Of Decimal)
	
	Private _totalBottlesSold As System.Nullable(Of Decimal)
	
	Private _createdDate As System.Nullable(Of Date)
	
	Private _createdBy As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OneventBrandResultIDChanging(value As Integer)
    End Sub
    Partial Private Sub OneventBrandResultIDChanged()
    End Sub
    Partial Private Sub OneventIDChanging(value As Integer)
    End Sub
    Partial Private Sub OneventIDChanged()
    End Sub
    Partial Private Sub OnbrandIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnbrandIDChanged()
    End Sub
    Partial Private Sub OntotalSampledChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OntotalSampledChanged()
    End Sub
    Partial Private Sub OnsampleBottlesUsedChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnsampleBottlesUsedChanged()
    End Sub
    Partial Private Sub OntotalSoldChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OntotalSoldChanged()
    End Sub
    Partial Private Sub OnsellOutChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnsellOutChanged()
    End Sub
    Partial Private Sub OntimeSellOutChanging(value As String)
    End Sub
    Partial Private Sub OntimeSellOutChanged()
    End Sub
    Partial Private Sub OnpriceInStoreChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnpriceInStoreChanged()
    End Sub
    Partial Private Sub OntotalBottlesSoldChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OntotalBottlesSoldChanged()
    End Sub
    Partial Private Sub OncreatedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OncreatedDateChanged()
    End Sub
    Partial Private Sub OncreatedByChanging(value As String)
    End Sub
    Partial Private Sub OncreatedByChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventBrandResultID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property eventBrandResultID() As Integer
		Get
			Return Me._eventBrandResultID
		End Get
		Set
			If ((Me._eventBrandResultID = value)  _
						= false) Then
				Me.OneventBrandResultIDChanging(value)
				Me.SendPropertyChanging
				Me._eventBrandResultID = value
				Me.SendPropertyChanged("eventBrandResultID")
				Me.OneventBrandResultIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me.OneventIDChanging(value)
				Me.SendPropertyChanging
				Me._eventID = value
				Me.SendPropertyChanged("eventID")
				Me.OneventIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandID", DbType:="Int NOT NULL")>  _
	Public Property brandID() As Integer
		Get
			Return Me._brandID
		End Get
		Set
			If ((Me._brandID = value)  _
						= false) Then
				Me.OnbrandIDChanging(value)
				Me.SendPropertyChanging
				Me._brandID = value
				Me.SendPropertyChanged("brandID")
				Me.OnbrandIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_totalSampled", DbType:="Decimal(18,0)")>  _
	Public Property totalSampled() As System.Nullable(Of Decimal)
		Get
			Return Me._totalSampled
		End Get
		Set
			If (Me._totalSampled.Equals(value) = false) Then
				Me.OntotalSampledChanging(value)
				Me.SendPropertyChanging
				Me._totalSampled = value
				Me.SendPropertyChanged("totalSampled")
				Me.OntotalSampledChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sampleBottlesUsed", DbType:="Decimal(18,0)")>  _
	Public Property sampleBottlesUsed() As System.Nullable(Of Decimal)
		Get
			Return Me._sampleBottlesUsed
		End Get
		Set
			If (Me._sampleBottlesUsed.Equals(value) = false) Then
				Me.OnsampleBottlesUsedChanging(value)
				Me.SendPropertyChanging
				Me._sampleBottlesUsed = value
				Me.SendPropertyChanged("sampleBottlesUsed")
				Me.OnsampleBottlesUsedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_totalSold", DbType:="Decimal(18,0)")>  _
	Public Property totalSold() As System.Nullable(Of Decimal)
		Get
			Return Me._totalSold
		End Get
		Set
			If (Me._totalSold.Equals(value) = false) Then
				Me.OntotalSoldChanging(value)
				Me.SendPropertyChanging
				Me._totalSold = value
				Me.SendPropertyChanged("totalSold")
				Me.OntotalSoldChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sellOut", DbType:="Bit")>  _
	Public Property sellOut() As System.Nullable(Of Boolean)
		Get
			Return Me._sellOut
		End Get
		Set
			If (Me._sellOut.Equals(value) = false) Then
				Me.OnsellOutChanging(value)
				Me.SendPropertyChanging
				Me._sellOut = value
				Me.SendPropertyChanged("sellOut")
				Me.OnsellOutChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_timeSellOut", DbType:="VarChar(50)")>  _
	Public Property timeSellOut() As String
		Get
			Return Me._timeSellOut
		End Get
		Set
			If (String.Equals(Me._timeSellOut, value) = false) Then
				Me.OntimeSellOutChanging(value)
				Me.SendPropertyChanging
				Me._timeSellOut = value
				Me.SendPropertyChanged("timeSellOut")
				Me.OntimeSellOutChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_priceInStore", DbType:="Decimal(18,0)")>  _
	Public Property priceInStore() As System.Nullable(Of Decimal)
		Get
			Return Me._priceInStore
		End Get
		Set
			If (Me._priceInStore.Equals(value) = false) Then
				Me.OnpriceInStoreChanging(value)
				Me.SendPropertyChanging
				Me._priceInStore = value
				Me.SendPropertyChanged("priceInStore")
				Me.OnpriceInStoreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_totalBottlesSold", DbType:="Decimal(18,0)")>  _
	Public Property totalBottlesSold() As System.Nullable(Of Decimal)
		Get
			Return Me._totalBottlesSold
		End Get
		Set
			If (Me._totalBottlesSold.Equals(value) = false) Then
				Me.OntotalBottlesSoldChanging(value)
				Me.SendPropertyChanging
				Me._totalBottlesSold = value
				Me.SendPropertyChanged("totalBottlesSold")
				Me.OntotalBottlesSoldChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_createdDate", DbType:="SmallDateTime")>  _
	Public Property createdDate() As System.Nullable(Of Date)
		Get
			Return Me._createdDate
		End Get
		Set
			If (Me._createdDate.Equals(value) = false) Then
				Me.OncreatedDateChanging(value)
				Me.SendPropertyChanging
				Me._createdDate = value
				Me.SendPropertyChanged("createdDate")
				Me.OncreatedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_createdBy", DbType:="NVarChar(50)")>  _
	Public Property createdBy() As String
		Get
			Return Me._createdBy
		End Get
		Set
			If (String.Equals(Me._createdBy, value) = false) Then
				Me.OncreatedByChanging(value)
				Me.SendPropertyChanging
				Me._createdBy = value
				Me.SendPropertyChanged("createdBy")
				Me.OncreatedByChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblEventCourse")>  _
Partial Public Class tblEventCourse
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _eventCourseID As Integer
	
	Private _eventID As System.Nullable(Of Integer)
	
	Private _CourseTitle As String
	
	Private _curriculumTitle As String
	
	Private _curriculumID As String
	
	Private _contentID As System.Nullable(Of Integer)
	
	Private _testID As String
	
	Private _icon As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OneventCourseIDChanging(value As Integer)
    End Sub
    Partial Private Sub OneventCourseIDChanged()
    End Sub
    Partial Private Sub OneventIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OneventIDChanged()
    End Sub
    Partial Private Sub OnCourseTitleChanging(value As String)
    End Sub
    Partial Private Sub OnCourseTitleChanged()
    End Sub
    Partial Private Sub OncurriculumTitleChanging(value As String)
    End Sub
    Partial Private Sub OncurriculumTitleChanged()
    End Sub
    Partial Private Sub OncurriculumIDChanging(value As String)
    End Sub
    Partial Private Sub OncurriculumIDChanged()
    End Sub
    Partial Private Sub OncontentIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OncontentIDChanged()
    End Sub
    Partial Private Sub OntestIDChanging(value As String)
    End Sub
    Partial Private Sub OntestIDChanged()
    End Sub
    Partial Private Sub OniconChanging(value As String)
    End Sub
    Partial Private Sub OniconChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventCourseID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property eventCourseID() As Integer
		Get
			Return Me._eventCourseID
		End Get
		Set
			If ((Me._eventCourseID = value)  _
						= false) Then
				Me.OneventCourseIDChanging(value)
				Me.SendPropertyChanging
				Me._eventCourseID = value
				Me.SendPropertyChanged("eventCourseID")
				Me.OneventCourseIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int")>  _
	Public Property eventID() As System.Nullable(Of Integer)
		Get
			Return Me._eventID
		End Get
		Set
			If (Me._eventID.Equals(value) = false) Then
				Me.OneventIDChanging(value)
				Me.SendPropertyChanging
				Me._eventID = value
				Me.SendPropertyChanged("eventID")
				Me.OneventIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CourseTitle", DbType:="VarChar(256)")>  _
	Public Property CourseTitle() As String
		Get
			Return Me._CourseTitle
		End Get
		Set
			If (String.Equals(Me._CourseTitle, value) = false) Then
				Me.OnCourseTitleChanging(value)
				Me.SendPropertyChanging
				Me._CourseTitle = value
				Me.SendPropertyChanged("CourseTitle")
				Me.OnCourseTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_curriculumTitle", DbType:="NVarChar(256)")>  _
	Public Property curriculumTitle() As String
		Get
			Return Me._curriculumTitle
		End Get
		Set
			If (String.Equals(Me._curriculumTitle, value) = false) Then
				Me.OncurriculumTitleChanging(value)
				Me.SendPropertyChanging
				Me._curriculumTitle = value
				Me.SendPropertyChanged("curriculumTitle")
				Me.OncurriculumTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_curriculumID", DbType:="NVarChar(50)")>  _
	Public Property curriculumID() As String
		Get
			Return Me._curriculumID
		End Get
		Set
			If (String.Equals(Me._curriculumID, value) = false) Then
				Me.OncurriculumIDChanging(value)
				Me.SendPropertyChanging
				Me._curriculumID = value
				Me.SendPropertyChanged("curriculumID")
				Me.OncurriculumIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_contentID", DbType:="Int")>  _
	Public Property contentID() As System.Nullable(Of Integer)
		Get
			Return Me._contentID
		End Get
		Set
			If (Me._contentID.Equals(value) = false) Then
				Me.OncontentIDChanging(value)
				Me.SendPropertyChanging
				Me._contentID = value
				Me.SendPropertyChanged("contentID")
				Me.OncontentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_testID", DbType:="NVarChar(256)")>  _
	Public Property testID() As String
		Get
			Return Me._testID
		End Get
		Set
			If (String.Equals(Me._testID, value) = false) Then
				Me.OntestIDChanging(value)
				Me.SendPropertyChanging
				Me._testID = value
				Me.SendPropertyChanged("testID")
				Me.OntestIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_icon", DbType:="NVarChar(256)")>  _
	Public Property icon() As String
		Get
			Return Me._icon
		End Get
		Set
			If (String.Equals(Me._icon, value) = false) Then
				Me.OniconChanging(value)
				Me.SendPropertyChanging
				Me._icon = value
				Me.SendPropertyChanged("icon")
				Me.OniconChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblEventDocument")>  _
Partial Public Class tblEventDocument
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _DocumentID As String
	
	Private _EventID As Integer
	
	Private _DocumentName As String
	
	Private _FileType As String
	
	Private _DocumentURL As String
	
	Private _ModifiedBy As String
	
	Private _ModifiedDate As System.Nullable(Of Date)
	
	Private _data As System.Data.Linq.Binary
	
	Private _size As System.Nullable(Of Long)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDocumentIDChanging(value As String)
    End Sub
    Partial Private Sub OnDocumentIDChanged()
    End Sub
    Partial Private Sub OnEventIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnEventIDChanged()
    End Sub
    Partial Private Sub OnDocumentNameChanging(value As String)
    End Sub
    Partial Private Sub OnDocumentNameChanged()
    End Sub
    Partial Private Sub OnFileTypeChanging(value As String)
    End Sub
    Partial Private Sub OnFileTypeChanged()
    End Sub
    Partial Private Sub OnDocumentURLChanging(value As String)
    End Sub
    Partial Private Sub OnDocumentURLChanged()
    End Sub
    Partial Private Sub OnModifiedByChanging(value As String)
    End Sub
    Partial Private Sub OnModifiedByChanged()
    End Sub
    Partial Private Sub OnModifiedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnModifiedDateChanged()
    End Sub
    Partial Private Sub OndataChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OndataChanged()
    End Sub
    Partial Private Sub OnsizeChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnsizeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DocumentID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property DocumentID() As String
		Get
			Return Me._DocumentID
		End Get
		Set
			If (String.Equals(Me._DocumentID, value) = false) Then
				Me.OnDocumentIDChanging(value)
				Me.SendPropertyChanging
				Me._DocumentID = value
				Me.SendPropertyChanged("DocumentID")
				Me.OnDocumentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EventID", DbType:="Int NOT NULL")>  _
	Public Property EventID() As Integer
		Get
			Return Me._EventID
		End Get
		Set
			If ((Me._EventID = value)  _
						= false) Then
				Me.OnEventIDChanging(value)
				Me.SendPropertyChanging
				Me._EventID = value
				Me.SendPropertyChanged("EventID")
				Me.OnEventIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DocumentName", DbType:="VarChar(256)")>  _
	Public Property DocumentName() As String
		Get
			Return Me._DocumentName
		End Get
		Set
			If (String.Equals(Me._DocumentName, value) = false) Then
				Me.OnDocumentNameChanging(value)
				Me.SendPropertyChanging
				Me._DocumentName = value
				Me.SendPropertyChanged("DocumentName")
				Me.OnDocumentNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FileType", DbType:="VarChar(50)")>  _
	Public Property FileType() As String
		Get
			Return Me._FileType
		End Get
		Set
			If (String.Equals(Me._FileType, value) = false) Then
				Me.OnFileTypeChanging(value)
				Me.SendPropertyChanging
				Me._FileType = value
				Me.SendPropertyChanged("FileType")
				Me.OnFileTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DocumentURL", DbType:="NVarChar(1000)")>  _
	Public Property DocumentURL() As String
		Get
			Return Me._DocumentURL
		End Get
		Set
			If (String.Equals(Me._DocumentURL, value) = false) Then
				Me.OnDocumentURLChanging(value)
				Me.SendPropertyChanging
				Me._DocumentURL = value
				Me.SendPropertyChanged("DocumentURL")
				Me.OnDocumentURLChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedBy", DbType:="NVarChar(50)")>  _
	Public Property ModifiedBy() As String
		Get
			Return Me._ModifiedBy
		End Get
		Set
			If (String.Equals(Me._ModifiedBy, value) = false) Then
				Me.OnModifiedByChanging(value)
				Me.SendPropertyChanging
				Me._ModifiedBy = value
				Me.SendPropertyChanged("ModifiedBy")
				Me.OnModifiedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDate", DbType:="SmallDateTime")>  _
	Public Property ModifiedDate() As System.Nullable(Of Date)
		Get
			Return Me._ModifiedDate
		End Get
		Set
			If (Me._ModifiedDate.Equals(value) = false) Then
				Me.OnModifiedDateChanging(value)
				Me.SendPropertyChanging
				Me._ModifiedDate = value
				Me.SendPropertyChanged("ModifiedDate")
				Me.OnModifiedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_data", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property data() As System.Data.Linq.Binary
		Get
			Return Me._data
		End Get
		Set
			If (Object.Equals(Me._data, value) = false) Then
				Me.OndataChanging(value)
				Me.SendPropertyChanging
				Me._data = value
				Me.SendPropertyChanged("data")
				Me.OndataChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_size", DbType:="BigInt")>  _
	Public Property size() As System.Nullable(Of Long)
		Get
			Return Me._size
		End Get
		Set
			If (Me._size.Equals(value) = false) Then
				Me.OnsizeChanging(value)
				Me.SendPropertyChanging
				Me._size = value
				Me.SendPropertyChanged("size")
				Me.OnsizeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblEventDocument_Hidden")>  _
Partial Public Class tblEventDocument_Hidden
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _fileID As String
	
	Private _eventID As Integer
	
	Private _createdBy As String
	
	Private _createdDate As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnfileIDChanging(value As String)
    End Sub
    Partial Private Sub OnfileIDChanged()
    End Sub
    Partial Private Sub OneventIDChanging(value As Integer)
    End Sub
    Partial Private Sub OneventIDChanged()
    End Sub
    Partial Private Sub OncreatedByChanging(value As String)
    End Sub
    Partial Private Sub OncreatedByChanged()
    End Sub
    Partial Private Sub OncreatedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OncreatedDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fileID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property fileID() As String
		Get
			Return Me._fileID
		End Get
		Set
			If (String.Equals(Me._fileID, value) = false) Then
				Me.OnfileIDChanging(value)
				Me.SendPropertyChanging
				Me._fileID = value
				Me.SendPropertyChanged("fileID")
				Me.OnfileIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me.OneventIDChanging(value)
				Me.SendPropertyChanging
				Me._eventID = value
				Me.SendPropertyChanged("eventID")
				Me.OneventIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_createdBy", DbType:="NVarChar(50)")>  _
	Public Property createdBy() As String
		Get
			Return Me._createdBy
		End Get
		Set
			If (String.Equals(Me._createdBy, value) = false) Then
				Me.OncreatedByChanging(value)
				Me.SendPropertyChanging
				Me._createdBy = value
				Me.SendPropertyChanged("createdBy")
				Me.OncreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_createdDate", DbType:="SmallDateTime")>  _
	Public Property createdDate() As System.Nullable(Of Date)
		Get
			Return Me._createdDate
		End Get
		Set
			If (Me._createdDate.Equals(value) = false) Then
				Me.OncreatedDateChanging(value)
				Me.SendPropertyChanging
				Me._createdDate = value
				Me.SendPropertyChanged("createdDate")
				Me.OncreatedDateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblEventExpense")>  _
Partial Public Class tblEventExpense
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _eventExpenseID As Integer
	
	Private _eventStaffingRequirementID As System.Nullable(Of Integer)
	
	Private _expenseTypeID As System.Nullable(Of Integer)
	
	Private _description As String
	
	Private _amount As System.Nullable(Of Decimal)
	
	Private _receipt As System.Data.Linq.Binary
	
	Private _submittedDate As System.Nullable(Of Date)
	
	Private _submittedBy As String
	
	Private _modifiedDate As System.Nullable(Of Date)
	
	Private _modifiedBy As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OneventExpenseIDChanging(value As Integer)
    End Sub
    Partial Private Sub OneventExpenseIDChanged()
    End Sub
    Partial Private Sub OneventStaffingRequirementIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OneventStaffingRequirementIDChanged()
    End Sub
    Partial Private Sub OnexpenseTypeIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnexpenseTypeIDChanged()
    End Sub
    Partial Private Sub OndescriptionChanging(value As String)
    End Sub
    Partial Private Sub OndescriptionChanged()
    End Sub
    Partial Private Sub OnamountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnamountChanged()
    End Sub
    Partial Private Sub OnreceiptChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnreceiptChanged()
    End Sub
    Partial Private Sub OnsubmittedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnsubmittedDateChanged()
    End Sub
    Partial Private Sub OnsubmittedByChanging(value As String)
    End Sub
    Partial Private Sub OnsubmittedByChanged()
    End Sub
    Partial Private Sub OnmodifiedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnmodifiedDateChanged()
    End Sub
    Partial Private Sub OnmodifiedByChanging(value As String)
    End Sub
    Partial Private Sub OnmodifiedByChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventExpenseID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property eventExpenseID() As Integer
		Get
			Return Me._eventExpenseID
		End Get
		Set
			If ((Me._eventExpenseID = value)  _
						= false) Then
				Me.OneventExpenseIDChanging(value)
				Me.SendPropertyChanging
				Me._eventExpenseID = value
				Me.SendPropertyChanged("eventExpenseID")
				Me.OneventExpenseIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventStaffingRequirementID", DbType:="Int")>  _
	Public Property eventStaffingRequirementID() As System.Nullable(Of Integer)
		Get
			Return Me._eventStaffingRequirementID
		End Get
		Set
			If (Me._eventStaffingRequirementID.Equals(value) = false) Then
				Me.OneventStaffingRequirementIDChanging(value)
				Me.SendPropertyChanging
				Me._eventStaffingRequirementID = value
				Me.SendPropertyChanged("eventStaffingRequirementID")
				Me.OneventStaffingRequirementIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_expenseTypeID", DbType:="Int")>  _
	Public Property expenseTypeID() As System.Nullable(Of Integer)
		Get
			Return Me._expenseTypeID
		End Get
		Set
			If (Me._expenseTypeID.Equals(value) = false) Then
				Me.OnexpenseTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._expenseTypeID = value
				Me.SendPropertyChanged("expenseTypeID")
				Me.OnexpenseTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_description", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me.OndescriptionChanging(value)
				Me.SendPropertyChanging
				Me._description = value
				Me.SendPropertyChanged("description")
				Me.OndescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_amount", DbType:="Money")>  _
	Public Property amount() As System.Nullable(Of Decimal)
		Get
			Return Me._amount
		End Get
		Set
			If (Me._amount.Equals(value) = false) Then
				Me.OnamountChanging(value)
				Me.SendPropertyChanging
				Me._amount = value
				Me.SendPropertyChanged("amount")
				Me.OnamountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_receipt", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property receipt() As System.Data.Linq.Binary
		Get
			Return Me._receipt
		End Get
		Set
			If (Object.Equals(Me._receipt, value) = false) Then
				Me.OnreceiptChanging(value)
				Me.SendPropertyChanging
				Me._receipt = value
				Me.SendPropertyChanged("receipt")
				Me.OnreceiptChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_submittedDate", DbType:="SmallDateTime")>  _
	Public Property submittedDate() As System.Nullable(Of Date)
		Get
			Return Me._submittedDate
		End Get
		Set
			If (Me._submittedDate.Equals(value) = false) Then
				Me.OnsubmittedDateChanging(value)
				Me.SendPropertyChanging
				Me._submittedDate = value
				Me.SendPropertyChanged("submittedDate")
				Me.OnsubmittedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_submittedBy", DbType:="NVarChar(50)")>  _
	Public Property submittedBy() As String
		Get
			Return Me._submittedBy
		End Get
		Set
			If (String.Equals(Me._submittedBy, value) = false) Then
				Me.OnsubmittedByChanging(value)
				Me.SendPropertyChanging
				Me._submittedBy = value
				Me.SendPropertyChanged("submittedBy")
				Me.OnsubmittedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_modifiedDate", DbType:="SmallDateTime")>  _
	Public Property modifiedDate() As System.Nullable(Of Date)
		Get
			Return Me._modifiedDate
		End Get
		Set
			If (Me._modifiedDate.Equals(value) = false) Then
				Me.OnmodifiedDateChanging(value)
				Me.SendPropertyChanging
				Me._modifiedDate = value
				Me.SendPropertyChanged("modifiedDate")
				Me.OnmodifiedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_modifiedBy", DbType:="NVarChar(50)")>  _
	Public Property modifiedBy() As String
		Get
			Return Me._modifiedBy
		End Get
		Set
			If (String.Equals(Me._modifiedBy, value) = false) Then
				Me.OnmodifiedByChanging(value)
				Me.SendPropertyChanging
				Me._modifiedBy = value
				Me.SendPropertyChanged("modifiedBy")
				Me.OnmodifiedByChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblEventImport")>  _
Partial Public Class tblEventImport
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _eventImportID As Integer
	
	Private _fileName As String
	
	Private _supplierID As System.Nullable(Of Integer)
	
	Private _createdDate As System.Nullable(Of Date)
	
	Private _createdBy As String
	
	Private _requestedBy As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OneventImportIDChanging(value As Integer)
    End Sub
    Partial Private Sub OneventImportIDChanged()
    End Sub
    Partial Private Sub OnfileNameChanging(value As String)
    End Sub
    Partial Private Sub OnfileNameChanged()
    End Sub
    Partial Private Sub OnsupplierIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnsupplierIDChanged()
    End Sub
    Partial Private Sub OncreatedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OncreatedDateChanged()
    End Sub
    Partial Private Sub OncreatedByChanging(value As String)
    End Sub
    Partial Private Sub OncreatedByChanged()
    End Sub
    Partial Private Sub OnrequestedByChanging(value As String)
    End Sub
    Partial Private Sub OnrequestedByChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventImportID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property eventImportID() As Integer
		Get
			Return Me._eventImportID
		End Get
		Set
			If ((Me._eventImportID = value)  _
						= false) Then
				Me.OneventImportIDChanging(value)
				Me.SendPropertyChanging
				Me._eventImportID = value
				Me.SendPropertyChanged("eventImportID")
				Me.OneventImportIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fileName", DbType:="NVarChar(256)")>  _
	Public Property fileName() As String
		Get
			Return Me._fileName
		End Get
		Set
			If (String.Equals(Me._fileName, value) = false) Then
				Me.OnfileNameChanging(value)
				Me.SendPropertyChanging
				Me._fileName = value
				Me.SendPropertyChanged("fileName")
				Me.OnfileNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int")>  _
	Public Property supplierID() As System.Nullable(Of Integer)
		Get
			Return Me._supplierID
		End Get
		Set
			If (Me._supplierID.Equals(value) = false) Then
				Me.OnsupplierIDChanging(value)
				Me.SendPropertyChanging
				Me._supplierID = value
				Me.SendPropertyChanged("supplierID")
				Me.OnsupplierIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_createdDate", DbType:="SmallDateTime")>  _
	Public Property createdDate() As System.Nullable(Of Date)
		Get
			Return Me._createdDate
		End Get
		Set
			If (Me._createdDate.Equals(value) = false) Then
				Me.OncreatedDateChanging(value)
				Me.SendPropertyChanging
				Me._createdDate = value
				Me.SendPropertyChanged("createdDate")
				Me.OncreatedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_createdBy", DbType:="NVarChar(50)")>  _
	Public Property createdBy() As String
		Get
			Return Me._createdBy
		End Get
		Set
			If (String.Equals(Me._createdBy, value) = false) Then
				Me.OncreatedByChanging(value)
				Me.SendPropertyChanging
				Me._createdBy = value
				Me.SendPropertyChanged("createdBy")
				Me.OncreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_requestedBy", DbType:="NVarChar(50)")>  _
	Public Property requestedBy() As String
		Get
			Return Me._requestedBy
		End Get
		Set
			If (String.Equals(Me._requestedBy, value) = false) Then
				Me.OnrequestedByChanging(value)
				Me.SendPropertyChanging
				Me._requestedBy = value
				Me.SendPropertyChanged("requestedBy")
				Me.OnrequestedByChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblEventLog")>  _
Partial Public Class tblEventLog
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _eventLogID As Integer
	
	Private _eventID As Integer
	
	Private _activity As String
	
	Private _detail As String
	
	Private _createdBy As String
	
	Private _createdDate As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OneventLogIDChanging(value As Integer)
    End Sub
    Partial Private Sub OneventLogIDChanged()
    End Sub
    Partial Private Sub OneventIDChanging(value As Integer)
    End Sub
    Partial Private Sub OneventIDChanged()
    End Sub
    Partial Private Sub OnactivityChanging(value As String)
    End Sub
    Partial Private Sub OnactivityChanged()
    End Sub
    Partial Private Sub OndetailChanging(value As String)
    End Sub
    Partial Private Sub OndetailChanged()
    End Sub
    Partial Private Sub OncreatedByChanging(value As String)
    End Sub
    Partial Private Sub OncreatedByChanged()
    End Sub
    Partial Private Sub OncreatedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OncreatedDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventLogID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property eventLogID() As Integer
		Get
			Return Me._eventLogID
		End Get
		Set
			If ((Me._eventLogID = value)  _
						= false) Then
				Me.OneventLogIDChanging(value)
				Me.SendPropertyChanging
				Me._eventLogID = value
				Me.SendPropertyChanged("eventLogID")
				Me.OneventLogIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me.OneventIDChanging(value)
				Me.SendPropertyChanging
				Me._eventID = value
				Me.SendPropertyChanged("eventID")
				Me.OneventIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_activity", DbType:="NVarChar(1000)")>  _
	Public Property activity() As String
		Get
			Return Me._activity
		End Get
		Set
			If (String.Equals(Me._activity, value) = false) Then
				Me.OnactivityChanging(value)
				Me.SendPropertyChanging
				Me._activity = value
				Me.SendPropertyChanged("activity")
				Me.OnactivityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_detail", DbType:="NVarChar(MAX)")>  _
	Public Property detail() As String
		Get
			Return Me._detail
		End Get
		Set
			If (String.Equals(Me._detail, value) = false) Then
				Me.OndetailChanging(value)
				Me.SendPropertyChanging
				Me._detail = value
				Me.SendPropertyChanged("detail")
				Me.OndetailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_createdBy", DbType:="NVarChar(50)")>  _
	Public Property createdBy() As String
		Get
			Return Me._createdBy
		End Get
		Set
			If (String.Equals(Me._createdBy, value) = false) Then
				Me.OncreatedByChanging(value)
				Me.SendPropertyChanging
				Me._createdBy = value
				Me.SendPropertyChanged("createdBy")
				Me.OncreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_createdDate", DbType:="DateTime")>  _
	Public Property createdDate() As System.Nullable(Of Date)
		Get
			Return Me._createdDate
		End Get
		Set
			If (Me._createdDate.Equals(value) = false) Then
				Me.OncreatedDateChanging(value)
				Me.SendPropertyChanging
				Me._createdDate = value
				Me.SendPropertyChanged("createdDate")
				Me.OncreatedDateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblEventNotes")>  _
Partial Public Class tblEventNote
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _eventNoteID As Integer
	
	Private _eventID As Integer
	
	Private _note As String
	
	Private _createdBy As String
	
	Private _dateCreated As System.Nullable(Of Date)
	
	Private _modifiedBy As String
	
	Private _dateModified As System.Nullable(Of Date)
	
	Private _createdDate As System.Nullable(Of Date)
	
	Private _modifiedDate As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OneventNoteIDChanging(value As Integer)
    End Sub
    Partial Private Sub OneventNoteIDChanged()
    End Sub
    Partial Private Sub OneventIDChanging(value As Integer)
    End Sub
    Partial Private Sub OneventIDChanged()
    End Sub
    Partial Private Sub OnnoteChanging(value As String)
    End Sub
    Partial Private Sub OnnoteChanged()
    End Sub
    Partial Private Sub OncreatedByChanging(value As String)
    End Sub
    Partial Private Sub OncreatedByChanged()
    End Sub
    Partial Private Sub OndateCreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OndateCreatedChanged()
    End Sub
    Partial Private Sub OnmodifiedByChanging(value As String)
    End Sub
    Partial Private Sub OnmodifiedByChanged()
    End Sub
    Partial Private Sub OndateModifiedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OndateModifiedChanged()
    End Sub
    Partial Private Sub OncreatedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OncreatedDateChanged()
    End Sub
    Partial Private Sub OnmodifiedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnmodifiedDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventNoteID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property eventNoteID() As Integer
		Get
			Return Me._eventNoteID
		End Get
		Set
			If ((Me._eventNoteID = value)  _
						= false) Then
				Me.OneventNoteIDChanging(value)
				Me.SendPropertyChanging
				Me._eventNoteID = value
				Me.SendPropertyChanged("eventNoteID")
				Me.OneventNoteIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me.OneventIDChanging(value)
				Me.SendPropertyChanging
				Me._eventID = value
				Me.SendPropertyChanged("eventID")
				Me.OneventIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_note", DbType:="NVarChar(MAX)")>  _
	Public Property note() As String
		Get
			Return Me._note
		End Get
		Set
			If (String.Equals(Me._note, value) = false) Then
				Me.OnnoteChanging(value)
				Me.SendPropertyChanging
				Me._note = value
				Me.SendPropertyChanged("note")
				Me.OnnoteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_createdBy", DbType:="NVarChar(50)")>  _
	Public Property createdBy() As String
		Get
			Return Me._createdBy
		End Get
		Set
			If (String.Equals(Me._createdBy, value) = false) Then
				Me.OncreatedByChanging(value)
				Me.SendPropertyChanging
				Me._createdBy = value
				Me.SendPropertyChanged("createdBy")
				Me.OncreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateCreated", DbType:="SmallDateTime")>  _
	Public Property dateCreated() As System.Nullable(Of Date)
		Get
			Return Me._dateCreated
		End Get
		Set
			If (Me._dateCreated.Equals(value) = false) Then
				Me.OndateCreatedChanging(value)
				Me.SendPropertyChanging
				Me._dateCreated = value
				Me.SendPropertyChanged("dateCreated")
				Me.OndateCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_modifiedBy", DbType:="NVarChar(50)")>  _
	Public Property modifiedBy() As String
		Get
			Return Me._modifiedBy
		End Get
		Set
			If (String.Equals(Me._modifiedBy, value) = false) Then
				Me.OnmodifiedByChanging(value)
				Me.SendPropertyChanging
				Me._modifiedBy = value
				Me.SendPropertyChanged("modifiedBy")
				Me.OnmodifiedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateModified", DbType:="SmallDateTime")>  _
	Public Property dateModified() As System.Nullable(Of Date)
		Get
			Return Me._dateModified
		End Get
		Set
			If (Me._dateModified.Equals(value) = false) Then
				Me.OndateModifiedChanging(value)
				Me.SendPropertyChanging
				Me._dateModified = value
				Me.SendPropertyChanged("dateModified")
				Me.OndateModifiedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_createdDate", DbType:="SmallDateTime")>  _
	Public Property createdDate() As System.Nullable(Of Date)
		Get
			Return Me._createdDate
		End Get
		Set
			If (Me._createdDate.Equals(value) = false) Then
				Me.OncreatedDateChanging(value)
				Me.SendPropertyChanging
				Me._createdDate = value
				Me.SendPropertyChanged("createdDate")
				Me.OncreatedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_modifiedDate", DbType:="SmallDateTime")>  _
	Public Property modifiedDate() As System.Nullable(Of Date)
		Get
			Return Me._modifiedDate
		End Get
		Set
			If (Me._modifiedDate.Equals(value) = false) Then
				Me.OnmodifiedDateChanging(value)
				Me.SendPropertyChanging
				Me._modifiedDate = value
				Me.SendPropertyChanged("modifiedDate")
				Me.OnmodifiedDateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblEventPayment")>  _
Partial Public Class tblEventPayment
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _paymentID As Integer
	
	Private _transactionID As System.Nullable(Of Integer)
	
	Private _status As String
	
	Private _eventStaffingRequirementID As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnpaymentIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnpaymentIDChanged()
    End Sub
    Partial Private Sub OntransactionIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OntransactionIDChanged()
    End Sub
    Partial Private Sub OnstatusChanging(value As String)
    End Sub
    Partial Private Sub OnstatusChanged()
    End Sub
    Partial Private Sub OneventStaffingRequirementIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OneventStaffingRequirementIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property paymentID() As Integer
		Get
			Return Me._paymentID
		End Get
		Set
			If ((Me._paymentID = value)  _
						= false) Then
				Me.OnpaymentIDChanging(value)
				Me.SendPropertyChanging
				Me._paymentID = value
				Me.SendPropertyChanged("paymentID")
				Me.OnpaymentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_transactionID", DbType:="Int")>  _
	Public Property transactionID() As System.Nullable(Of Integer)
		Get
			Return Me._transactionID
		End Get
		Set
			If (Me._transactionID.Equals(value) = false) Then
				Me.OntransactionIDChanging(value)
				Me.SendPropertyChanging
				Me._transactionID = value
				Me.SendPropertyChanged("transactionID")
				Me.OntransactionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", DbType:="VarChar(50)")>  _
	Public Property status() As String
		Get
			Return Me._status
		End Get
		Set
			If (String.Equals(Me._status, value) = false) Then
				Me.OnstatusChanging(value)
				Me.SendPropertyChanging
				Me._status = value
				Me.SendPropertyChanged("status")
				Me.OnstatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventStaffingRequirementID", DbType:="Int")>  _
	Public Property eventStaffingRequirementID() As System.Nullable(Of Integer)
		Get
			Return Me._eventStaffingRequirementID
		End Get
		Set
			If (Me._eventStaffingRequirementID.Equals(value) = false) Then
				Me.OneventStaffingRequirementIDChanging(value)
				Me.SendPropertyChanging
				Me._eventStaffingRequirementID = value
				Me.SendPropertyChanged("eventStaffingRequirementID")
				Me.OneventStaffingRequirementIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblEventRecapQuestions")>  _
Partial Public Class tblEventRecapQuestion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _eventRecapQuestionID As Integer
	
	Private _eventID As System.Nullable(Of Integer)
	
	Private _brandID As System.Nullable(Of Integer)
	
	Private _question As String
	
	Private _questionType As String
	
	Private _recapID As System.Nullable(Of Integer)
	
	Private _recapQuestionID As System.Nullable(Of Integer)
	
	Private _sortorder As System.Nullable(Of Integer)
	
	Private _answer As String
	
	Private _description As String
	
	Private _displayOption As String
	
	Private _lines As String
	
	Private _yes_noDefaultValue As String
	
	Private _numberDecimalPlace As System.Nullable(Of Integer)
	
	Private _numberDefaultValue As String
	
	Private _showPercentage As System.Nullable(Of Boolean)
	
	Private _dateFormat As String
	
	Private _dateDefaultValue As String
	
	Private _timeFormat As String
	
	Private _dateDisplay As String
	
	Private _required As System.Nullable(Of Boolean)
	
	Private _digit As System.Nullable(Of Integer)
	
	Private _createdBy As String
	
	Private _createdDate As System.Nullable(Of Date)
	
	Private _modifiedBy As String
	
	Private _modifiedDate As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OneventRecapQuestionIDChanging(value As Integer)
    End Sub
    Partial Private Sub OneventRecapQuestionIDChanged()
    End Sub
    Partial Private Sub OneventIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OneventIDChanged()
    End Sub
    Partial Private Sub OnbrandIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnbrandIDChanged()
    End Sub
    Partial Private Sub OnquestionChanging(value As String)
    End Sub
    Partial Private Sub OnquestionChanged()
    End Sub
    Partial Private Sub OnquestionTypeChanging(value As String)
    End Sub
    Partial Private Sub OnquestionTypeChanged()
    End Sub
    Partial Private Sub OnrecapIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnrecapIDChanged()
    End Sub
    Partial Private Sub OnrecapQuestionIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnrecapQuestionIDChanged()
    End Sub
    Partial Private Sub OnsortorderChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnsortorderChanged()
    End Sub
    Partial Private Sub OnanswerChanging(value As String)
    End Sub
    Partial Private Sub OnanswerChanged()
    End Sub
    Partial Private Sub OndescriptionChanging(value As String)
    End Sub
    Partial Private Sub OndescriptionChanged()
    End Sub
    Partial Private Sub OndisplayOptionChanging(value As String)
    End Sub
    Partial Private Sub OndisplayOptionChanged()
    End Sub
    Partial Private Sub OnlinesChanging(value As String)
    End Sub
    Partial Private Sub OnlinesChanged()
    End Sub
    Partial Private Sub Onyes_noDefaultValueChanging(value As String)
    End Sub
    Partial Private Sub Onyes_noDefaultValueChanged()
    End Sub
    Partial Private Sub OnnumberDecimalPlaceChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnnumberDecimalPlaceChanged()
    End Sub
    Partial Private Sub OnnumberDefaultValueChanging(value As String)
    End Sub
    Partial Private Sub OnnumberDefaultValueChanged()
    End Sub
    Partial Private Sub OnshowPercentageChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnshowPercentageChanged()
    End Sub
    Partial Private Sub OndateFormatChanging(value As String)
    End Sub
    Partial Private Sub OndateFormatChanged()
    End Sub
    Partial Private Sub OndateDefaultValueChanging(value As String)
    End Sub
    Partial Private Sub OndateDefaultValueChanged()
    End Sub
    Partial Private Sub OntimeFormatChanging(value As String)
    End Sub
    Partial Private Sub OntimeFormatChanged()
    End Sub
    Partial Private Sub OndateDisplayChanging(value As String)
    End Sub
    Partial Private Sub OndateDisplayChanged()
    End Sub
    Partial Private Sub OnrequiredChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnrequiredChanged()
    End Sub
    Partial Private Sub OndigitChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OndigitChanged()
    End Sub
    Partial Private Sub OncreatedByChanging(value As String)
    End Sub
    Partial Private Sub OncreatedByChanged()
    End Sub
    Partial Private Sub OncreatedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OncreatedDateChanged()
    End Sub
    Partial Private Sub OnmodifiedByChanging(value As String)
    End Sub
    Partial Private Sub OnmodifiedByChanged()
    End Sub
    Partial Private Sub OnmodifiedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnmodifiedDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventRecapQuestionID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property eventRecapQuestionID() As Integer
		Get
			Return Me._eventRecapQuestionID
		End Get
		Set
			If ((Me._eventRecapQuestionID = value)  _
						= false) Then
				Me.OneventRecapQuestionIDChanging(value)
				Me.SendPropertyChanging
				Me._eventRecapQuestionID = value
				Me.SendPropertyChanged("eventRecapQuestionID")
				Me.OneventRecapQuestionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int")>  _
	Public Property eventID() As System.Nullable(Of Integer)
		Get
			Return Me._eventID
		End Get
		Set
			If (Me._eventID.Equals(value) = false) Then
				Me.OneventIDChanging(value)
				Me.SendPropertyChanging
				Me._eventID = value
				Me.SendPropertyChanged("eventID")
				Me.OneventIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandID", DbType:="Int")>  _
	Public Property brandID() As System.Nullable(Of Integer)
		Get
			Return Me._brandID
		End Get
		Set
			If (Me._brandID.Equals(value) = false) Then
				Me.OnbrandIDChanging(value)
				Me.SendPropertyChanging
				Me._brandID = value
				Me.SendPropertyChanged("brandID")
				Me.OnbrandIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_question", DbType:="NVarChar(256)")>  _
	Public Property question() As String
		Get
			Return Me._question
		End Get
		Set
			If (String.Equals(Me._question, value) = false) Then
				Me.OnquestionChanging(value)
				Me.SendPropertyChanging
				Me._question = value
				Me.SendPropertyChanged("question")
				Me.OnquestionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_questionType", DbType:="NVarChar(50)")>  _
	Public Property questionType() As String
		Get
			Return Me._questionType
		End Get
		Set
			If (String.Equals(Me._questionType, value) = false) Then
				Me.OnquestionTypeChanging(value)
				Me.SendPropertyChanging
				Me._questionType = value
				Me.SendPropertyChanged("questionType")
				Me.OnquestionTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_recapID", DbType:="Int")>  _
	Public Property recapID() As System.Nullable(Of Integer)
		Get
			Return Me._recapID
		End Get
		Set
			If (Me._recapID.Equals(value) = false) Then
				Me.OnrecapIDChanging(value)
				Me.SendPropertyChanging
				Me._recapID = value
				Me.SendPropertyChanged("recapID")
				Me.OnrecapIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_recapQuestionID", DbType:="Int")>  _
	Public Property recapQuestionID() As System.Nullable(Of Integer)
		Get
			Return Me._recapQuestionID
		End Get
		Set
			If (Me._recapQuestionID.Equals(value) = false) Then
				Me.OnrecapQuestionIDChanging(value)
				Me.SendPropertyChanging
				Me._recapQuestionID = value
				Me.SendPropertyChanged("recapQuestionID")
				Me.OnrecapQuestionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sortorder", DbType:="Int")>  _
	Public Property sortorder() As System.Nullable(Of Integer)
		Get
			Return Me._sortorder
		End Get
		Set
			If (Me._sortorder.Equals(value) = false) Then
				Me.OnsortorderChanging(value)
				Me.SendPropertyChanging
				Me._sortorder = value
				Me.SendPropertyChanged("sortorder")
				Me.OnsortorderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_answer", DbType:="VarChar(MAX)")>  _
	Public Property answer() As String
		Get
			Return Me._answer
		End Get
		Set
			If (String.Equals(Me._answer, value) = false) Then
				Me.OnanswerChanging(value)
				Me.SendPropertyChanging
				Me._answer = value
				Me.SendPropertyChanged("answer")
				Me.OnanswerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_description", DbType:="VarChar(MAX)")>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me.OndescriptionChanging(value)
				Me.SendPropertyChanging
				Me._description = value
				Me.SendPropertyChanged("description")
				Me.OndescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_displayOption", DbType:="NVarChar(50)")>  _
	Public Property displayOption() As String
		Get
			Return Me._displayOption
		End Get
		Set
			If (String.Equals(Me._displayOption, value) = false) Then
				Me.OndisplayOptionChanging(value)
				Me.SendPropertyChanging
				Me._displayOption = value
				Me.SendPropertyChanged("displayOption")
				Me.OndisplayOptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lines", DbType:="VarChar(50)")>  _
	Public Property lines() As String
		Get
			Return Me._lines
		End Get
		Set
			If (String.Equals(Me._lines, value) = false) Then
				Me.OnlinesChanging(value)
				Me.SendPropertyChanging
				Me._lines = value
				Me.SendPropertyChanged("lines")
				Me.OnlinesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[yes/noDefaultValue]", Storage:="_yes_noDefaultValue", DbType:="NVarChar(50)")>  _
	Public Property yes_noDefaultValue() As String
		Get
			Return Me._yes_noDefaultValue
		End Get
		Set
			If (String.Equals(Me._yes_noDefaultValue, value) = false) Then
				Me.Onyes_noDefaultValueChanging(value)
				Me.SendPropertyChanging
				Me._yes_noDefaultValue = value
				Me.SendPropertyChanged("yes_noDefaultValue")
				Me.Onyes_noDefaultValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_numberDecimalPlace", DbType:="Int")>  _
	Public Property numberDecimalPlace() As System.Nullable(Of Integer)
		Get
			Return Me._numberDecimalPlace
		End Get
		Set
			If (Me._numberDecimalPlace.Equals(value) = false) Then
				Me.OnnumberDecimalPlaceChanging(value)
				Me.SendPropertyChanging
				Me._numberDecimalPlace = value
				Me.SendPropertyChanged("numberDecimalPlace")
				Me.OnnumberDecimalPlaceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_numberDefaultValue", DbType:="VarChar(50)")>  _
	Public Property numberDefaultValue() As String
		Get
			Return Me._numberDefaultValue
		End Get
		Set
			If (String.Equals(Me._numberDefaultValue, value) = false) Then
				Me.OnnumberDefaultValueChanging(value)
				Me.SendPropertyChanging
				Me._numberDefaultValue = value
				Me.SendPropertyChanged("numberDefaultValue")
				Me.OnnumberDefaultValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_showPercentage", DbType:="Bit")>  _
	Public Property showPercentage() As System.Nullable(Of Boolean)
		Get
			Return Me._showPercentage
		End Get
		Set
			If (Me._showPercentage.Equals(value) = false) Then
				Me.OnshowPercentageChanging(value)
				Me.SendPropertyChanging
				Me._showPercentage = value
				Me.SendPropertyChanged("showPercentage")
				Me.OnshowPercentageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateFormat", DbType:="NVarChar(50)")>  _
	Public Property dateFormat() As String
		Get
			Return Me._dateFormat
		End Get
		Set
			If (String.Equals(Me._dateFormat, value) = false) Then
				Me.OndateFormatChanging(value)
				Me.SendPropertyChanging
				Me._dateFormat = value
				Me.SendPropertyChanged("dateFormat")
				Me.OndateFormatChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateDefaultValue", DbType:="NVarChar(50)")>  _
	Public Property dateDefaultValue() As String
		Get
			Return Me._dateDefaultValue
		End Get
		Set
			If (String.Equals(Me._dateDefaultValue, value) = false) Then
				Me.OndateDefaultValueChanging(value)
				Me.SendPropertyChanging
				Me._dateDefaultValue = value
				Me.SendPropertyChanged("dateDefaultValue")
				Me.OndateDefaultValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_timeFormat", DbType:="NVarChar(50)")>  _
	Public Property timeFormat() As String
		Get
			Return Me._timeFormat
		End Get
		Set
			If (String.Equals(Me._timeFormat, value) = false) Then
				Me.OntimeFormatChanging(value)
				Me.SendPropertyChanging
				Me._timeFormat = value
				Me.SendPropertyChanged("timeFormat")
				Me.OntimeFormatChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateDisplay", DbType:="NVarChar(50)")>  _
	Public Property dateDisplay() As String
		Get
			Return Me._dateDisplay
		End Get
		Set
			If (String.Equals(Me._dateDisplay, value) = false) Then
				Me.OndateDisplayChanging(value)
				Me.SendPropertyChanging
				Me._dateDisplay = value
				Me.SendPropertyChanged("dateDisplay")
				Me.OndateDisplayChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_required", DbType:="Bit")>  _
	Public Property required() As System.Nullable(Of Boolean)
		Get
			Return Me._required
		End Get
		Set
			If (Me._required.Equals(value) = false) Then
				Me.OnrequiredChanging(value)
				Me.SendPropertyChanging
				Me._required = value
				Me.SendPropertyChanged("required")
				Me.OnrequiredChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_digit", DbType:="Int")>  _
	Public Property digit() As System.Nullable(Of Integer)
		Get
			Return Me._digit
		End Get
		Set
			If (Me._digit.Equals(value) = false) Then
				Me.OndigitChanging(value)
				Me.SendPropertyChanging
				Me._digit = value
				Me.SendPropertyChanged("digit")
				Me.OndigitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_createdBy", DbType:="NVarChar(50)")>  _
	Public Property createdBy() As String
		Get
			Return Me._createdBy
		End Get
		Set
			If (String.Equals(Me._createdBy, value) = false) Then
				Me.OncreatedByChanging(value)
				Me.SendPropertyChanging
				Me._createdBy = value
				Me.SendPropertyChanged("createdBy")
				Me.OncreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_createdDate", DbType:="SmallDateTime")>  _
	Public Property createdDate() As System.Nullable(Of Date)
		Get
			Return Me._createdDate
		End Get
		Set
			If (Me._createdDate.Equals(value) = false) Then
				Me.OncreatedDateChanging(value)
				Me.SendPropertyChanging
				Me._createdDate = value
				Me.SendPropertyChanged("createdDate")
				Me.OncreatedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_modifiedBy", DbType:="NVarChar(50)")>  _
	Public Property modifiedBy() As String
		Get
			Return Me._modifiedBy
		End Get
		Set
			If (String.Equals(Me._modifiedBy, value) = false) Then
				Me.OnmodifiedByChanging(value)
				Me.SendPropertyChanging
				Me._modifiedBy = value
				Me.SendPropertyChanged("modifiedBy")
				Me.OnmodifiedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_modifiedDate", DbType:="SmallDateTime")>  _
	Public Property modifiedDate() As System.Nullable(Of Date)
		Get
			Return Me._modifiedDate
		End Get
		Set
			If (Me._modifiedDate.Equals(value) = false) Then
				Me.OnmodifiedDateChanging(value)
				Me.SendPropertyChanging
				Me._modifiedDate = value
				Me.SendPropertyChanged("modifiedDate")
				Me.OnmodifiedDateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblEventStaffingRequirement")>  _
Partial Public Class tblEventStaffingRequirement
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _RequirementID As Integer
	
	Private _eventID As Integer
	
	Private _positionID As Integer
	
	Private _startTime As System.Nullable(Of Date)
	
	Private _endTime As System.Nullable(Of Date)
	
	Private _checkInTime As System.Nullable(Of Date)
	
	Private _checkInLocationLatitude As String
	
	Private _checkInLocationLongitude As String
	
	Private _assigned As System.Nullable(Of Boolean)
	
	Private _assignedUserName As String
	
	Private _hours As System.Nullable(Of Integer)
	
	Private _rate As System.Nullable(Of Decimal)
	
	Private _billingRate As System.Nullable(Of Decimal)
	
	Private _paymentStatus As String
	
	Private _paymentID As System.Nullable(Of Integer)
	
	Private _transactionID As String
	
	Private _paymentDate As System.Nullable(Of Date)
	
	Private _checkedIn As System.Nullable(Of Boolean)
	
	Private _checkedInDistance As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnRequirementIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnRequirementIDChanged()
    End Sub
    Partial Private Sub OneventIDChanging(value As Integer)
    End Sub
    Partial Private Sub OneventIDChanged()
    End Sub
    Partial Private Sub OnpositionIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnpositionIDChanged()
    End Sub
    Partial Private Sub OnstartTimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnstartTimeChanged()
    End Sub
    Partial Private Sub OnendTimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnendTimeChanged()
    End Sub
    Partial Private Sub OncheckInTimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OncheckInTimeChanged()
    End Sub
    Partial Private Sub OncheckInLocationLatitudeChanging(value As String)
    End Sub
    Partial Private Sub OncheckInLocationLatitudeChanged()
    End Sub
    Partial Private Sub OncheckInLocationLongitudeChanging(value As String)
    End Sub
    Partial Private Sub OncheckInLocationLongitudeChanged()
    End Sub
    Partial Private Sub OnassignedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnassignedChanged()
    End Sub
    Partial Private Sub OnassignedUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnassignedUserNameChanged()
    End Sub
    Partial Private Sub OnhoursChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnhoursChanged()
    End Sub
    Partial Private Sub OnrateChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnrateChanged()
    End Sub
    Partial Private Sub OnbillingRateChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnbillingRateChanged()
    End Sub
    Partial Private Sub OnpaymentStatusChanging(value As String)
    End Sub
    Partial Private Sub OnpaymentStatusChanged()
    End Sub
    Partial Private Sub OnpaymentIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnpaymentIDChanged()
    End Sub
    Partial Private Sub OntransactionIDChanging(value As String)
    End Sub
    Partial Private Sub OntransactionIDChanged()
    End Sub
    Partial Private Sub OnpaymentDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnpaymentDateChanged()
    End Sub
    Partial Private Sub OncheckedInChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OncheckedInChanged()
    End Sub
    Partial Private Sub OncheckedInDistanceChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OncheckedInDistanceChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RequirementID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property RequirementID() As Integer
		Get
			Return Me._RequirementID
		End Get
		Set
			If ((Me._RequirementID = value)  _
						= false) Then
				Me.OnRequirementIDChanging(value)
				Me.SendPropertyChanging
				Me._RequirementID = value
				Me.SendPropertyChanged("RequirementID")
				Me.OnRequirementIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me.OneventIDChanging(value)
				Me.SendPropertyChanging
				Me._eventID = value
				Me.SendPropertyChanged("eventID")
				Me.OneventIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_positionID", DbType:="Int NOT NULL")>  _
	Public Property positionID() As Integer
		Get
			Return Me._positionID
		End Get
		Set
			If ((Me._positionID = value)  _
						= false) Then
				Me.OnpositionIDChanging(value)
				Me.SendPropertyChanging
				Me._positionID = value
				Me.SendPropertyChanged("positionID")
				Me.OnpositionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_startTime", DbType:="SmallDateTime")>  _
	Public Property startTime() As System.Nullable(Of Date)
		Get
			Return Me._startTime
		End Get
		Set
			If (Me._startTime.Equals(value) = false) Then
				Me.OnstartTimeChanging(value)
				Me.SendPropertyChanging
				Me._startTime = value
				Me.SendPropertyChanged("startTime")
				Me.OnstartTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_endTime", DbType:="SmallDateTime")>  _
	Public Property endTime() As System.Nullable(Of Date)
		Get
			Return Me._endTime
		End Get
		Set
			If (Me._endTime.Equals(value) = false) Then
				Me.OnendTimeChanging(value)
				Me.SendPropertyChanging
				Me._endTime = value
				Me.SendPropertyChanged("endTime")
				Me.OnendTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_checkInTime", DbType:="SmallDateTime")>  _
	Public Property checkInTime() As System.Nullable(Of Date)
		Get
			Return Me._checkInTime
		End Get
		Set
			If (Me._checkInTime.Equals(value) = false) Then
				Me.OncheckInTimeChanging(value)
				Me.SendPropertyChanging
				Me._checkInTime = value
				Me.SendPropertyChanged("checkInTime")
				Me.OncheckInTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_checkInLocationLatitude", DbType:="VarChar(50)")>  _
	Public Property checkInLocationLatitude() As String
		Get
			Return Me._checkInLocationLatitude
		End Get
		Set
			If (String.Equals(Me._checkInLocationLatitude, value) = false) Then
				Me.OncheckInLocationLatitudeChanging(value)
				Me.SendPropertyChanging
				Me._checkInLocationLatitude = value
				Me.SendPropertyChanged("checkInLocationLatitude")
				Me.OncheckInLocationLatitudeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_checkInLocationLongitude", DbType:="VarChar(50)")>  _
	Public Property checkInLocationLongitude() As String
		Get
			Return Me._checkInLocationLongitude
		End Get
		Set
			If (String.Equals(Me._checkInLocationLongitude, value) = false) Then
				Me.OncheckInLocationLongitudeChanging(value)
				Me.SendPropertyChanging
				Me._checkInLocationLongitude = value
				Me.SendPropertyChanged("checkInLocationLongitude")
				Me.OncheckInLocationLongitudeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_assigned", DbType:="Bit")>  _
	Public Property assigned() As System.Nullable(Of Boolean)
		Get
			Return Me._assigned
		End Get
		Set
			If (Me._assigned.Equals(value) = false) Then
				Me.OnassignedChanging(value)
				Me.SendPropertyChanging
				Me._assigned = value
				Me.SendPropertyChanged("assigned")
				Me.OnassignedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_assignedUserName", DbType:="NVarChar(50)")>  _
	Public Property assignedUserName() As String
		Get
			Return Me._assignedUserName
		End Get
		Set
			If (String.Equals(Me._assignedUserName, value) = false) Then
				Me.OnassignedUserNameChanging(value)
				Me.SendPropertyChanging
				Me._assignedUserName = value
				Me.SendPropertyChanged("assignedUserName")
				Me.OnassignedUserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hours", DbType:="Int")>  _
	Public Property hours() As System.Nullable(Of Integer)
		Get
			Return Me._hours
		End Get
		Set
			If (Me._hours.Equals(value) = false) Then
				Me.OnhoursChanging(value)
				Me.SendPropertyChanging
				Me._hours = value
				Me.SendPropertyChanged("hours")
				Me.OnhoursChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rate", DbType:="Decimal(18,2)")>  _
	Public Property rate() As System.Nullable(Of Decimal)
		Get
			Return Me._rate
		End Get
		Set
			If (Me._rate.Equals(value) = false) Then
				Me.OnrateChanging(value)
				Me.SendPropertyChanging
				Me._rate = value
				Me.SendPropertyChanged("rate")
				Me.OnrateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_billingRate", DbType:="Decimal(18,2)")>  _
	Public Property billingRate() As System.Nullable(Of Decimal)
		Get
			Return Me._billingRate
		End Get
		Set
			If (Me._billingRate.Equals(value) = false) Then
				Me.OnbillingRateChanging(value)
				Me.SendPropertyChanging
				Me._billingRate = value
				Me.SendPropertyChanged("billingRate")
				Me.OnbillingRateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentStatus", DbType:="VarChar(50)")>  _
	Public Property paymentStatus() As String
		Get
			Return Me._paymentStatus
		End Get
		Set
			If (String.Equals(Me._paymentStatus, value) = false) Then
				Me.OnpaymentStatusChanging(value)
				Me.SendPropertyChanging
				Me._paymentStatus = value
				Me.SendPropertyChanged("paymentStatus")
				Me.OnpaymentStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentID", DbType:="Int")>  _
	Public Property paymentID() As System.Nullable(Of Integer)
		Get
			Return Me._paymentID
		End Get
		Set
			If (Me._paymentID.Equals(value) = false) Then
				Me.OnpaymentIDChanging(value)
				Me.SendPropertyChanging
				Me._paymentID = value
				Me.SendPropertyChanged("paymentID")
				Me.OnpaymentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_transactionID", DbType:="VarChar(50)")>  _
	Public Property transactionID() As String
		Get
			Return Me._transactionID
		End Get
		Set
			If (String.Equals(Me._transactionID, value) = false) Then
				Me.OntransactionIDChanging(value)
				Me.SendPropertyChanging
				Me._transactionID = value
				Me.SendPropertyChanged("transactionID")
				Me.OntransactionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentDate", DbType:="SmallDateTime")>  _
	Public Property paymentDate() As System.Nullable(Of Date)
		Get
			Return Me._paymentDate
		End Get
		Set
			If (Me._paymentDate.Equals(value) = false) Then
				Me.OnpaymentDateChanging(value)
				Me.SendPropertyChanging
				Me._paymentDate = value
				Me.SendPropertyChanged("paymentDate")
				Me.OnpaymentDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_checkedIn", DbType:="Bit")>  _
	Public Property checkedIn() As System.Nullable(Of Boolean)
		Get
			Return Me._checkedIn
		End Get
		Set
			If (Me._checkedIn.Equals(value) = false) Then
				Me.OncheckedInChanging(value)
				Me.SendPropertyChanging
				Me._checkedIn = value
				Me.SendPropertyChanged("checkedIn")
				Me.OncheckedInChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_checkedInDistance", DbType:="Int")>  _
	Public Property checkedInDistance() As System.Nullable(Of Integer)
		Get
			Return Me._checkedInDistance
		End Get
		Set
			If (Me._checkedInDistance.Equals(value) = false) Then
				Me.OncheckedInDistanceChanging(value)
				Me.SendPropertyChanging
				Me._checkedInDistance = value
				Me.SendPropertyChanged("checkedInDistance")
				Me.OncheckedInDistanceChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblEventTrainingInvitation")>  _
Partial Public Class tblEventTrainingInvitation
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _eventTrainingInvitationID As Integer
	
	Private _eventID As System.Nullable(Of Integer)
	
	Private _dateSent As System.Nullable(Of Date)
	
	Private _emailAddress As String
	
	Private _token As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OneventTrainingInvitationIDChanging(value As Integer)
    End Sub
    Partial Private Sub OneventTrainingInvitationIDChanged()
    End Sub
    Partial Private Sub OneventIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OneventIDChanged()
    End Sub
    Partial Private Sub OndateSentChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OndateSentChanged()
    End Sub
    Partial Private Sub OnemailAddressChanging(value As String)
    End Sub
    Partial Private Sub OnemailAddressChanged()
    End Sub
    Partial Private Sub OntokenChanging(value As String)
    End Sub
    Partial Private Sub OntokenChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTrainingInvitationID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property eventTrainingInvitationID() As Integer
		Get
			Return Me._eventTrainingInvitationID
		End Get
		Set
			If ((Me._eventTrainingInvitationID = value)  _
						= false) Then
				Me.OneventTrainingInvitationIDChanging(value)
				Me.SendPropertyChanging
				Me._eventTrainingInvitationID = value
				Me.SendPropertyChanged("eventTrainingInvitationID")
				Me.OneventTrainingInvitationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int")>  _
	Public Property eventID() As System.Nullable(Of Integer)
		Get
			Return Me._eventID
		End Get
		Set
			If (Me._eventID.Equals(value) = false) Then
				Me.OneventIDChanging(value)
				Me.SendPropertyChanging
				Me._eventID = value
				Me.SendPropertyChanged("eventID")
				Me.OneventIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateSent", DbType:="SmallDateTime")>  _
	Public Property dateSent() As System.Nullable(Of Date)
		Get
			Return Me._dateSent
		End Get
		Set
			If (Me._dateSent.Equals(value) = false) Then
				Me.OndateSentChanging(value)
				Me.SendPropertyChanging
				Me._dateSent = value
				Me.SendPropertyChanged("dateSent")
				Me.OndateSentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_emailAddress", DbType:="NVarChar(255)")>  _
	Public Property emailAddress() As String
		Get
			Return Me._emailAddress
		End Get
		Set
			If (String.Equals(Me._emailAddress, value) = false) Then
				Me.OnemailAddressChanging(value)
				Me.SendPropertyChanging
				Me._emailAddress = value
				Me.SendPropertyChanged("emailAddress")
				Me.OnemailAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_token", DbType:="NVarChar(50)")>  _
	Public Property token() As String
		Get
			Return Me._token
		End Get
		Set
			If (String.Equals(Me._token, value) = false) Then
				Me.OntokenChanging(value)
				Me.SendPropertyChanging
				Me._token = value
				Me.SendPropertyChanged("token")
				Me.OntokenChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblEventType")>  _
Partial Public Class tblEventType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _eventTypeID As Integer
	
	Private _eventTypeName As String
	
	Private _allowScheduledEvents As System.Nullable(Of Boolean)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OneventTypeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OneventTypeIDChanged()
    End Sub
    Partial Private Sub OneventTypeNameChanging(value As String)
    End Sub
    Partial Private Sub OneventTypeNameChanged()
    End Sub
    Partial Private Sub OnallowScheduledEventsChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnallowScheduledEventsChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTypeID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property eventTypeID() As Integer
		Get
			Return Me._eventTypeID
		End Get
		Set
			If ((Me._eventTypeID = value)  _
						= false) Then
				Me.OneventTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._eventTypeID = value
				Me.SendPropertyChanged("eventTypeID")
				Me.OneventTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTypeName", DbType:="NVarChar(50)")>  _
	Public Property eventTypeName() As String
		Get
			Return Me._eventTypeName
		End Get
		Set
			If (String.Equals(Me._eventTypeName, value) = false) Then
				Me.OneventTypeNameChanging(value)
				Me.SendPropertyChanging
				Me._eventTypeName = value
				Me.SendPropertyChanged("eventTypeName")
				Me.OneventTypeNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_allowScheduledEvents", DbType:="Bit")>  _
	Public Property allowScheduledEvents() As System.Nullable(Of Boolean)
		Get
			Return Me._allowScheduledEvents
		End Get
		Set
			If (Me._allowScheduledEvents.Equals(value) = false) Then
				Me.OnallowScheduledEventsChanging(value)
				Me.SendPropertyChanging
				Me._allowScheduledEvents = value
				Me.SendPropertyChanged("allowScheduledEvents")
				Me.OnallowScheduledEventsChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblEventTypeRecapQuestion")>  _
Partial Public Class tblEventTypeRecapQuestion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _eventTypeRecapQuestionID As Integer
	
	Private _eventTypeID As Integer
	
	Private _clientID As System.Nullable(Of Integer)
	
	Private _reportID As System.Nullable(Of Integer)
	
	Private _question As String
	
	Private _sortorder As System.Nullable(Of Integer)
	
	Private _questionType As String
	
	Private _choices As String
	
	Private _displayOption As String
	
	Private _lines As String
	
	Private _description As String
	
	Private _yes_noDefaultValue As String
	
	Private _numberDecimalPlace As System.Nullable(Of Integer)
	
	Private _numberDefaultValue As String
	
	Private _showPercentage As System.Nullable(Of Boolean)
	
	Private _dateFormat As String
	
	Private _dateDefaultValue As String
	
	Private _timeFormat As String
	
	Private _dateDisplay As String
	
	Private _desiredOrder As System.Nullable(Of Integer)
	
	Private _required As System.Nullable(Of Boolean)
	
	Private _digit As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OneventTypeRecapQuestionIDChanging(value As Integer)
    End Sub
    Partial Private Sub OneventTypeRecapQuestionIDChanged()
    End Sub
    Partial Private Sub OneventTypeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OneventTypeIDChanged()
    End Sub
    Partial Private Sub OnclientIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnclientIDChanged()
    End Sub
    Partial Private Sub OnreportIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnreportIDChanged()
    End Sub
    Partial Private Sub OnquestionChanging(value As String)
    End Sub
    Partial Private Sub OnquestionChanged()
    End Sub
    Partial Private Sub OnsortorderChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnsortorderChanged()
    End Sub
    Partial Private Sub OnquestionTypeChanging(value As String)
    End Sub
    Partial Private Sub OnquestionTypeChanged()
    End Sub
    Partial Private Sub OnchoicesChanging(value As String)
    End Sub
    Partial Private Sub OnchoicesChanged()
    End Sub
    Partial Private Sub OndisplayOptionChanging(value As String)
    End Sub
    Partial Private Sub OndisplayOptionChanged()
    End Sub
    Partial Private Sub OnlinesChanging(value As String)
    End Sub
    Partial Private Sub OnlinesChanged()
    End Sub
    Partial Private Sub OndescriptionChanging(value As String)
    End Sub
    Partial Private Sub OndescriptionChanged()
    End Sub
    Partial Private Sub Onyes_noDefaultValueChanging(value As String)
    End Sub
    Partial Private Sub Onyes_noDefaultValueChanged()
    End Sub
    Partial Private Sub OnnumberDecimalPlaceChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnnumberDecimalPlaceChanged()
    End Sub
    Partial Private Sub OnnumberDefaultValueChanging(value As String)
    End Sub
    Partial Private Sub OnnumberDefaultValueChanged()
    End Sub
    Partial Private Sub OnshowPercentageChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnshowPercentageChanged()
    End Sub
    Partial Private Sub OndateFormatChanging(value As String)
    End Sub
    Partial Private Sub OndateFormatChanged()
    End Sub
    Partial Private Sub OndateDefaultValueChanging(value As String)
    End Sub
    Partial Private Sub OndateDefaultValueChanged()
    End Sub
    Partial Private Sub OntimeFormatChanging(value As String)
    End Sub
    Partial Private Sub OntimeFormatChanged()
    End Sub
    Partial Private Sub OndateDisplayChanging(value As String)
    End Sub
    Partial Private Sub OndateDisplayChanged()
    End Sub
    Partial Private Sub OndesiredOrderChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OndesiredOrderChanged()
    End Sub
    Partial Private Sub OnrequiredChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnrequiredChanged()
    End Sub
    Partial Private Sub OndigitChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OndigitChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTypeRecapQuestionID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property eventTypeRecapQuestionID() As Integer
		Get
			Return Me._eventTypeRecapQuestionID
		End Get
		Set
			If ((Me._eventTypeRecapQuestionID = value)  _
						= false) Then
				Me.OneventTypeRecapQuestionIDChanging(value)
				Me.SendPropertyChanging
				Me._eventTypeRecapQuestionID = value
				Me.SendPropertyChanged("eventTypeRecapQuestionID")
				Me.OneventTypeRecapQuestionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTypeID", DbType:="Int NOT NULL")>  _
	Public Property eventTypeID() As Integer
		Get
			Return Me._eventTypeID
		End Get
		Set
			If ((Me._eventTypeID = value)  _
						= false) Then
				Me.OneventTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._eventTypeID = value
				Me.SendPropertyChanged("eventTypeID")
				Me.OneventTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", DbType:="Int")>  _
	Public Property clientID() As System.Nullable(Of Integer)
		Get
			Return Me._clientID
		End Get
		Set
			If (Me._clientID.Equals(value) = false) Then
				Me.OnclientIDChanging(value)
				Me.SendPropertyChanging
				Me._clientID = value
				Me.SendPropertyChanged("clientID")
				Me.OnclientIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_reportID", DbType:="Int")>  _
	Public Property reportID() As System.Nullable(Of Integer)
		Get
			Return Me._reportID
		End Get
		Set
			If (Me._reportID.Equals(value) = false) Then
				Me.OnreportIDChanging(value)
				Me.SendPropertyChanging
				Me._reportID = value
				Me.SendPropertyChanged("reportID")
				Me.OnreportIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_question", DbType:="NVarChar(256)")>  _
	Public Property question() As String
		Get
			Return Me._question
		End Get
		Set
			If (String.Equals(Me._question, value) = false) Then
				Me.OnquestionChanging(value)
				Me.SendPropertyChanging
				Me._question = value
				Me.SendPropertyChanged("question")
				Me.OnquestionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sortorder", DbType:="Int")>  _
	Public Property sortorder() As System.Nullable(Of Integer)
		Get
			Return Me._sortorder
		End Get
		Set
			If (Me._sortorder.Equals(value) = false) Then
				Me.OnsortorderChanging(value)
				Me.SendPropertyChanging
				Me._sortorder = value
				Me.SendPropertyChanged("sortorder")
				Me.OnsortorderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_questionType", DbType:="NVarChar(50)")>  _
	Public Property questionType() As String
		Get
			Return Me._questionType
		End Get
		Set
			If (String.Equals(Me._questionType, value) = false) Then
				Me.OnquestionTypeChanging(value)
				Me.SendPropertyChanging
				Me._questionType = value
				Me.SendPropertyChanged("questionType")
				Me.OnquestionTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_choices", DbType:="NVarChar(MAX)")>  _
	Public Property choices() As String
		Get
			Return Me._choices
		End Get
		Set
			If (String.Equals(Me._choices, value) = false) Then
				Me.OnchoicesChanging(value)
				Me.SendPropertyChanging
				Me._choices = value
				Me.SendPropertyChanged("choices")
				Me.OnchoicesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_displayOption", DbType:="NVarChar(50)")>  _
	Public Property displayOption() As String
		Get
			Return Me._displayOption
		End Get
		Set
			If (String.Equals(Me._displayOption, value) = false) Then
				Me.OndisplayOptionChanging(value)
				Me.SendPropertyChanging
				Me._displayOption = value
				Me.SendPropertyChanged("displayOption")
				Me.OndisplayOptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lines", DbType:="VarChar(50)")>  _
	Public Property lines() As String
		Get
			Return Me._lines
		End Get
		Set
			If (String.Equals(Me._lines, value) = false) Then
				Me.OnlinesChanging(value)
				Me.SendPropertyChanging
				Me._lines = value
				Me.SendPropertyChanged("lines")
				Me.OnlinesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_description", DbType:="NVarChar(2000)")>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me.OndescriptionChanging(value)
				Me.SendPropertyChanging
				Me._description = value
				Me.SendPropertyChanged("description")
				Me.OndescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[yes/noDefaultValue]", Storage:="_yes_noDefaultValue", DbType:="NVarChar(50)")>  _
	Public Property yes_noDefaultValue() As String
		Get
			Return Me._yes_noDefaultValue
		End Get
		Set
			If (String.Equals(Me._yes_noDefaultValue, value) = false) Then
				Me.Onyes_noDefaultValueChanging(value)
				Me.SendPropertyChanging
				Me._yes_noDefaultValue = value
				Me.SendPropertyChanged("yes_noDefaultValue")
				Me.Onyes_noDefaultValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_numberDecimalPlace", DbType:="Int")>  _
	Public Property numberDecimalPlace() As System.Nullable(Of Integer)
		Get
			Return Me._numberDecimalPlace
		End Get
		Set
			If (Me._numberDecimalPlace.Equals(value) = false) Then
				Me.OnnumberDecimalPlaceChanging(value)
				Me.SendPropertyChanging
				Me._numberDecimalPlace = value
				Me.SendPropertyChanged("numberDecimalPlace")
				Me.OnnumberDecimalPlaceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_numberDefaultValue", DbType:="VarChar(50)")>  _
	Public Property numberDefaultValue() As String
		Get
			Return Me._numberDefaultValue
		End Get
		Set
			If (String.Equals(Me._numberDefaultValue, value) = false) Then
				Me.OnnumberDefaultValueChanging(value)
				Me.SendPropertyChanging
				Me._numberDefaultValue = value
				Me.SendPropertyChanged("numberDefaultValue")
				Me.OnnumberDefaultValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_showPercentage", DbType:="Bit")>  _
	Public Property showPercentage() As System.Nullable(Of Boolean)
		Get
			Return Me._showPercentage
		End Get
		Set
			If (Me._showPercentage.Equals(value) = false) Then
				Me.OnshowPercentageChanging(value)
				Me.SendPropertyChanging
				Me._showPercentage = value
				Me.SendPropertyChanged("showPercentage")
				Me.OnshowPercentageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateFormat", DbType:="NVarChar(50)")>  _
	Public Property dateFormat() As String
		Get
			Return Me._dateFormat
		End Get
		Set
			If (String.Equals(Me._dateFormat, value) = false) Then
				Me.OndateFormatChanging(value)
				Me.SendPropertyChanging
				Me._dateFormat = value
				Me.SendPropertyChanged("dateFormat")
				Me.OndateFormatChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateDefaultValue", DbType:="NVarChar(50)")>  _
	Public Property dateDefaultValue() As String
		Get
			Return Me._dateDefaultValue
		End Get
		Set
			If (String.Equals(Me._dateDefaultValue, value) = false) Then
				Me.OndateDefaultValueChanging(value)
				Me.SendPropertyChanging
				Me._dateDefaultValue = value
				Me.SendPropertyChanged("dateDefaultValue")
				Me.OndateDefaultValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_timeFormat", DbType:="NVarChar(50)")>  _
	Public Property timeFormat() As String
		Get
			Return Me._timeFormat
		End Get
		Set
			If (String.Equals(Me._timeFormat, value) = false) Then
				Me.OntimeFormatChanging(value)
				Me.SendPropertyChanging
				Me._timeFormat = value
				Me.SendPropertyChanged("timeFormat")
				Me.OntimeFormatChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateDisplay", DbType:="NVarChar(50)")>  _
	Public Property dateDisplay() As String
		Get
			Return Me._dateDisplay
		End Get
		Set
			If (String.Equals(Me._dateDisplay, value) = false) Then
				Me.OndateDisplayChanging(value)
				Me.SendPropertyChanging
				Me._dateDisplay = value
				Me.SendPropertyChanged("dateDisplay")
				Me.OndateDisplayChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_desiredOrder", DbType:="Int")>  _
	Public Property desiredOrder() As System.Nullable(Of Integer)
		Get
			Return Me._desiredOrder
		End Get
		Set
			If (Me._desiredOrder.Equals(value) = false) Then
				Me.OndesiredOrderChanging(value)
				Me.SendPropertyChanging
				Me._desiredOrder = value
				Me.SendPropertyChanged("desiredOrder")
				Me.OndesiredOrderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_required", DbType:="Bit")>  _
	Public Property required() As System.Nullable(Of Boolean)
		Get
			Return Me._required
		End Get
		Set
			If (Me._required.Equals(value) = false) Then
				Me.OnrequiredChanging(value)
				Me.SendPropertyChanging
				Me._required = value
				Me.SendPropertyChanged("required")
				Me.OnrequiredChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_digit", DbType:="Int")>  _
	Public Property digit() As System.Nullable(Of Integer)
		Get
			Return Me._digit
		End Get
		Set
			If (Me._digit.Equals(value) = false) Then
				Me.OndigitChanging(value)
				Me.SendPropertyChanging
				Me._digit = value
				Me.SendPropertyChanged("digit")
				Me.OndigitChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblEventTypeTask")>  _
Partial Public Class tblEventTypeTask
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _eventTypeTaskID As Integer
	
	Private _eventTypeID As Integer
	
	Private _taskTitle As String
	
	Private _dateDueOffset As System.Nullable(Of Integer)
	
	Private _notes As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OneventTypeTaskIDChanging(value As Integer)
    End Sub
    Partial Private Sub OneventTypeTaskIDChanged()
    End Sub
    Partial Private Sub OneventTypeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OneventTypeIDChanged()
    End Sub
    Partial Private Sub OntaskTitleChanging(value As String)
    End Sub
    Partial Private Sub OntaskTitleChanged()
    End Sub
    Partial Private Sub OndateDueOffsetChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OndateDueOffsetChanged()
    End Sub
    Partial Private Sub OnnotesChanging(value As String)
    End Sub
    Partial Private Sub OnnotesChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTypeTaskID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property eventTypeTaskID() As Integer
		Get
			Return Me._eventTypeTaskID
		End Get
		Set
			If ((Me._eventTypeTaskID = value)  _
						= false) Then
				Me.OneventTypeTaskIDChanging(value)
				Me.SendPropertyChanging
				Me._eventTypeTaskID = value
				Me.SendPropertyChanged("eventTypeTaskID")
				Me.OneventTypeTaskIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTypeID", DbType:="Int NOT NULL")>  _
	Public Property eventTypeID() As Integer
		Get
			Return Me._eventTypeID
		End Get
		Set
			If ((Me._eventTypeID = value)  _
						= false) Then
				Me.OneventTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._eventTypeID = value
				Me.SendPropertyChanged("eventTypeID")
				Me.OneventTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_taskTitle", DbType:="NVarChar(256)")>  _
	Public Property taskTitle() As String
		Get
			Return Me._taskTitle
		End Get
		Set
			If (String.Equals(Me._taskTitle, value) = false) Then
				Me.OntaskTitleChanging(value)
				Me.SendPropertyChanging
				Me._taskTitle = value
				Me.SendPropertyChanged("taskTitle")
				Me.OntaskTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateDueOffset", DbType:="Int")>  _
	Public Property dateDueOffset() As System.Nullable(Of Integer)
		Get
			Return Me._dateDueOffset
		End Get
		Set
			If (Me._dateDueOffset.Equals(value) = false) Then
				Me.OndateDueOffsetChanging(value)
				Me.SendPropertyChanging
				Me._dateDueOffset = value
				Me.SendPropertyChanged("dateDueOffset")
				Me.OndateDueOffsetChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_notes", DbType:="NVarChar(MAX)")>  _
	Public Property notes() As String
		Get
			Return Me._notes
		End Get
		Set
			If (String.Equals(Me._notes, value) = false) Then
				Me.OnnotesChanging(value)
				Me.SendPropertyChanging
				Me._notes = value
				Me.SendPropertyChanged("notes")
				Me.OnnotesChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblEventWeather")>  _
Partial Public Class tblEventWeather
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _weatherInfoID As Integer
	
	Private _eventID As String
	
	Private _cityName As String
	
	Private _weatherDate As System.Nullable(Of Date)
	
	Private _lowTemp As String
	
	Private _highTemp As String
	
	Private _dayTemp As String
	
	Private _nightTemp As String
	
	Private _condition As String
	
	Private _icon As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnweatherInfoIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnweatherInfoIDChanged()
    End Sub
    Partial Private Sub OneventIDChanging(value As String)
    End Sub
    Partial Private Sub OneventIDChanged()
    End Sub
    Partial Private Sub OncityNameChanging(value As String)
    End Sub
    Partial Private Sub OncityNameChanged()
    End Sub
    Partial Private Sub OnweatherDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnweatherDateChanged()
    End Sub
    Partial Private Sub OnlowTempChanging(value As String)
    End Sub
    Partial Private Sub OnlowTempChanged()
    End Sub
    Partial Private Sub OnhighTempChanging(value As String)
    End Sub
    Partial Private Sub OnhighTempChanged()
    End Sub
    Partial Private Sub OndayTempChanging(value As String)
    End Sub
    Partial Private Sub OndayTempChanged()
    End Sub
    Partial Private Sub OnnightTempChanging(value As String)
    End Sub
    Partial Private Sub OnnightTempChanged()
    End Sub
    Partial Private Sub OnconditionChanging(value As String)
    End Sub
    Partial Private Sub OnconditionChanged()
    End Sub
    Partial Private Sub OniconChanging(value As String)
    End Sub
    Partial Private Sub OniconChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_weatherInfoID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property weatherInfoID() As Integer
		Get
			Return Me._weatherInfoID
		End Get
		Set
			If ((Me._weatherInfoID = value)  _
						= false) Then
				Me.OnweatherInfoIDChanging(value)
				Me.SendPropertyChanging
				Me._weatherInfoID = value
				Me.SendPropertyChanged("weatherInfoID")
				Me.OnweatherInfoIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property eventID() As String
		Get
			Return Me._eventID
		End Get
		Set
			If (String.Equals(Me._eventID, value) = false) Then
				Me.OneventIDChanging(value)
				Me.SendPropertyChanging
				Me._eventID = value
				Me.SendPropertyChanged("eventID")
				Me.OneventIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cityName", DbType:="NVarChar(50)")>  _
	Public Property cityName() As String
		Get
			Return Me._cityName
		End Get
		Set
			If (String.Equals(Me._cityName, value) = false) Then
				Me.OncityNameChanging(value)
				Me.SendPropertyChanging
				Me._cityName = value
				Me.SendPropertyChanged("cityName")
				Me.OncityNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_weatherDate", DbType:="SmallDateTime")>  _
	Public Property weatherDate() As System.Nullable(Of Date)
		Get
			Return Me._weatherDate
		End Get
		Set
			If (Me._weatherDate.Equals(value) = false) Then
				Me.OnweatherDateChanging(value)
				Me.SendPropertyChanging
				Me._weatherDate = value
				Me.SendPropertyChanged("weatherDate")
				Me.OnweatherDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lowTemp", DbType:="VarChar(50)")>  _
	Public Property lowTemp() As String
		Get
			Return Me._lowTemp
		End Get
		Set
			If (String.Equals(Me._lowTemp, value) = false) Then
				Me.OnlowTempChanging(value)
				Me.SendPropertyChanging
				Me._lowTemp = value
				Me.SendPropertyChanged("lowTemp")
				Me.OnlowTempChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_highTemp", DbType:="VarChar(50)")>  _
	Public Property highTemp() As String
		Get
			Return Me._highTemp
		End Get
		Set
			If (String.Equals(Me._highTemp, value) = false) Then
				Me.OnhighTempChanging(value)
				Me.SendPropertyChanging
				Me._highTemp = value
				Me.SendPropertyChanged("highTemp")
				Me.OnhighTempChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dayTemp", DbType:="VarChar(50)")>  _
	Public Property dayTemp() As String
		Get
			Return Me._dayTemp
		End Get
		Set
			If (String.Equals(Me._dayTemp, value) = false) Then
				Me.OndayTempChanging(value)
				Me.SendPropertyChanging
				Me._dayTemp = value
				Me.SendPropertyChanged("dayTemp")
				Me.OndayTempChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nightTemp", DbType:="VarChar(50)")>  _
	Public Property nightTemp() As String
		Get
			Return Me._nightTemp
		End Get
		Set
			If (String.Equals(Me._nightTemp, value) = false) Then
				Me.OnnightTempChanging(value)
				Me.SendPropertyChanging
				Me._nightTemp = value
				Me.SendPropertyChanged("nightTemp")
				Me.OnnightTempChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_condition", DbType:="NVarChar(50)")>  _
	Public Property condition() As String
		Get
			Return Me._condition
		End Get
		Set
			If (String.Equals(Me._condition, value) = false) Then
				Me.OnconditionChanging(value)
				Me.SendPropertyChanging
				Me._condition = value
				Me.SendPropertyChanged("condition")
				Me.OnconditionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_icon", DbType:="NVarChar(50)")>  _
	Public Property icon() As String
		Get
			Return Me._icon
		End Get
		Set
			If (String.Equals(Me._icon, value) = false) Then
				Me.OniconChanging(value)
				Me.SendPropertyChanging
				Me._icon = value
				Me.SendPropertyChanged("icon")
				Me.OniconChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblExpenseType")>  _
Partial Public Class tblExpenseType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _expenseTypeID As Integer
	
	Private _expenseTypeTitle As String
	
	Private _sort As System.Nullable(Of Integer)
	
	Private _active As System.Nullable(Of Boolean)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnexpenseTypeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnexpenseTypeIDChanged()
    End Sub
    Partial Private Sub OnexpenseTypeTitleChanging(value As String)
    End Sub
    Partial Private Sub OnexpenseTypeTitleChanged()
    End Sub
    Partial Private Sub OnsortChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnsortChanged()
    End Sub
    Partial Private Sub OnactiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnactiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_expenseTypeID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property expenseTypeID() As Integer
		Get
			Return Me._expenseTypeID
		End Get
		Set
			If ((Me._expenseTypeID = value)  _
						= false) Then
				Me.OnexpenseTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._expenseTypeID = value
				Me.SendPropertyChanged("expenseTypeID")
				Me.OnexpenseTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_expenseTypeTitle", DbType:="NVarChar(256)")>  _
	Public Property expenseTypeTitle() As String
		Get
			Return Me._expenseTypeTitle
		End Get
		Set
			If (String.Equals(Me._expenseTypeTitle, value) = false) Then
				Me.OnexpenseTypeTitleChanging(value)
				Me.SendPropertyChanging
				Me._expenseTypeTitle = value
				Me.SendPropertyChanged("expenseTypeTitle")
				Me.OnexpenseTypeTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sort", DbType:="Int")>  _
	Public Property sort() As System.Nullable(Of Integer)
		Get
			Return Me._sort
		End Get
		Set
			If (Me._sort.Equals(value) = false) Then
				Me.OnsortChanging(value)
				Me.SendPropertyChanging
				Me._sort = value
				Me.SendPropertyChanged("sort")
				Me.OnsortChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_active", DbType:="Bit")>  _
	Public Property active() As System.Nullable(Of Boolean)
		Get
			Return Me._active
		End Get
		Set
			If (Me._active.Equals(value) = false) Then
				Me.OnactiveChanging(value)
				Me.SendPropertyChanging
				Me._active = value
				Me.SendPropertyChanged("active")
				Me.OnactiveChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblHelpfulLocations")>  _
Partial Public Class tblHelpfulLocation
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _locationID As Integer
	
	Private _title As String
	
	Private _locationType As System.Nullable(Of Integer)
	
	Private _accountID As System.Nullable(Of Integer)
	
	Private _latitude As String
	
	Private _longitude As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnlocationIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnlocationIDChanged()
    End Sub
    Partial Private Sub OntitleChanging(value As String)
    End Sub
    Partial Private Sub OntitleChanged()
    End Sub
    Partial Private Sub OnlocationTypeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnlocationTypeChanged()
    End Sub
    Partial Private Sub OnaccountIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnaccountIDChanged()
    End Sub
    Partial Private Sub OnlatitudeChanging(value As String)
    End Sub
    Partial Private Sub OnlatitudeChanged()
    End Sub
    Partial Private Sub OnlongitudeChanging(value As String)
    End Sub
    Partial Private Sub OnlongitudeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_locationID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property locationID() As Integer
		Get
			Return Me._locationID
		End Get
		Set
			If ((Me._locationID = value)  _
						= false) Then
				Me.OnlocationIDChanging(value)
				Me.SendPropertyChanging
				Me._locationID = value
				Me.SendPropertyChanged("locationID")
				Me.OnlocationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_title", DbType:="NVarChar(50)")>  _
	Public Property title() As String
		Get
			Return Me._title
		End Get
		Set
			If (String.Equals(Me._title, value) = false) Then
				Me.OntitleChanging(value)
				Me.SendPropertyChanging
				Me._title = value
				Me.SendPropertyChanged("title")
				Me.OntitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_locationType", DbType:="Int")>  _
	Public Property locationType() As System.Nullable(Of Integer)
		Get
			Return Me._locationType
		End Get
		Set
			If (Me._locationType.Equals(value) = false) Then
				Me.OnlocationTypeChanging(value)
				Me.SendPropertyChanging
				Me._locationType = value
				Me.SendPropertyChanged("locationType")
				Me.OnlocationTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="Int")>  _
	Public Property accountID() As System.Nullable(Of Integer)
		Get
			Return Me._accountID
		End Get
		Set
			If (Me._accountID.Equals(value) = false) Then
				Me.OnaccountIDChanging(value)
				Me.SendPropertyChanging
				Me._accountID = value
				Me.SendPropertyChanged("accountID")
				Me.OnaccountIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_latitude", DbType:="NVarChar(50)")>  _
	Public Property latitude() As String
		Get
			Return Me._latitude
		End Get
		Set
			If (String.Equals(Me._latitude, value) = false) Then
				Me.OnlatitudeChanging(value)
				Me.SendPropertyChanging
				Me._latitude = value
				Me.SendPropertyChanged("latitude")
				Me.OnlatitudeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_longitude", DbType:="NVarChar(50)")>  _
	Public Property longitude() As String
		Get
			Return Me._longitude
		End Get
		Set
			If (String.Equals(Me._longitude, value) = false) Then
				Me.OnlongitudeChanging(value)
				Me.SendPropertyChanging
				Me._longitude = value
				Me.SendPropertyChanged("longitude")
				Me.OnlongitudeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblInventory")>  _
Partial Public Class tblInventory
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _inventoryID As Integer
	
	Private _itemID As Integer
	
	Private _date As System.Nullable(Of Date)
	
	Private _action As String
	
	Private _quantity As System.Nullable(Of Integer)
	
	Private _location As String
	
	Private _balance As System.Nullable(Of Integer)
	
	Private _note As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OninventoryIDChanging(value As Integer)
    End Sub
    Partial Private Sub OninventoryIDChanged()
    End Sub
    Partial Private Sub OnitemIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnitemIDChanged()
    End Sub
    Partial Private Sub OndateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OndateChanged()
    End Sub
    Partial Private Sub OnactionChanging(value As String)
    End Sub
    Partial Private Sub OnactionChanged()
    End Sub
    Partial Private Sub OnquantityChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnquantityChanged()
    End Sub
    Partial Private Sub OnlocationChanging(value As String)
    End Sub
    Partial Private Sub OnlocationChanged()
    End Sub
    Partial Private Sub OnbalanceChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnbalanceChanged()
    End Sub
    Partial Private Sub OnnoteChanging(value As String)
    End Sub
    Partial Private Sub OnnoteChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_inventoryID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property inventoryID() As Integer
		Get
			Return Me._inventoryID
		End Get
		Set
			If ((Me._inventoryID = value)  _
						= false) Then
				Me.OninventoryIDChanging(value)
				Me.SendPropertyChanging
				Me._inventoryID = value
				Me.SendPropertyChanged("inventoryID")
				Me.OninventoryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_itemID", DbType:="Int NOT NULL")>  _
	Public Property itemID() As Integer
		Get
			Return Me._itemID
		End Get
		Set
			If ((Me._itemID = value)  _
						= false) Then
				Me.OnitemIDChanging(value)
				Me.SendPropertyChanging
				Me._itemID = value
				Me.SendPropertyChanged("itemID")
				Me.OnitemIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="date", Storage:="_date", DbType:="SmallDateTime")>  _
	Public Property [date]() As System.Nullable(Of Date)
		Get
			Return Me._date
		End Get
		Set
			If (Me._date.Equals(value) = false) Then
				Me.OndateChanging(value)
				Me.SendPropertyChanging
				Me._date = value
				Me.SendPropertyChanged("[date]")
				Me.OndateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_action", DbType:="VarChar(50)")>  _
	Public Property action() As String
		Get
			Return Me._action
		End Get
		Set
			If (String.Equals(Me._action, value) = false) Then
				Me.OnactionChanging(value)
				Me.SendPropertyChanging
				Me._action = value
				Me.SendPropertyChanged("action")
				Me.OnactionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_quantity", DbType:="Int")>  _
	Public Property quantity() As System.Nullable(Of Integer)
		Get
			Return Me._quantity
		End Get
		Set
			If (Me._quantity.Equals(value) = false) Then
				Me.OnquantityChanging(value)
				Me.SendPropertyChanging
				Me._quantity = value
				Me.SendPropertyChanged("quantity")
				Me.OnquantityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_location", DbType:="VarChar(50)")>  _
	Public Property location() As String
		Get
			Return Me._location
		End Get
		Set
			If (String.Equals(Me._location, value) = false) Then
				Me.OnlocationChanging(value)
				Me.SendPropertyChanging
				Me._location = value
				Me.SendPropertyChanged("location")
				Me.OnlocationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_balance", DbType:="Int")>  _
	Public Property balance() As System.Nullable(Of Integer)
		Get
			Return Me._balance
		End Get
		Set
			If (Me._balance.Equals(value) = false) Then
				Me.OnbalanceChanging(value)
				Me.SendPropertyChanging
				Me._balance = value
				Me.SendPropertyChanged("balance")
				Me.OnbalanceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_note", DbType:="NVarChar(MAX)")>  _
	Public Property note() As String
		Get
			Return Me._note
		End Get
		Set
			If (String.Equals(Me._note, value) = false) Then
				Me.OnnoteChanging(value)
				Me.SendPropertyChanging
				Me._note = value
				Me.SendPropertyChanged("note")
				Me.OnnoteChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblInventoryItem")>  _
Partial Public Class tblInventoryItem
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _itemID As Integer
	
	Private _itemName As String
	
	Private _brandID As Integer
	
	Private _inGroup As System.Nullable(Of Boolean)
	
	Private _retailPrice As System.Nullable(Of Decimal)
	
	Private _packageSize As String
	
	Private _unitsInKit As System.Nullable(Of Integer)
	
	Private _photoUrl As String
	
	Private _usage As System.Nullable(Of Integer)
	
	Private _returnToInventory As System.Nullable(Of Boolean)
	
	Private _vendorURL As String
	
	Private _productID As String
	
	Private _costPerUnit As System.Nullable(Of Decimal)
	
	Private _packageShippingSize As String
	
	Private _packageShippingWeight As String
	
	Private _image As System.Data.Linq.Binary
	
	Private _thumbnail As System.Data.Linq.Binary
	
	Private _offPremiseKit As System.Nullable(Of Boolean)
	
	Private _onPremiseKit As System.Nullable(Of Boolean)
	
	Private _accountPlacement As System.Nullable(Of Boolean)
	
	Private _giveaway As System.Nullable(Of Boolean)
	
	Private _accountGift As System.Nullable(Of Boolean)
	
	Private _shippingNotes As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnitemIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnitemIDChanged()
    End Sub
    Partial Private Sub OnitemNameChanging(value As String)
    End Sub
    Partial Private Sub OnitemNameChanged()
    End Sub
    Partial Private Sub OnbrandIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnbrandIDChanged()
    End Sub
    Partial Private Sub OninGroupChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OninGroupChanged()
    End Sub
    Partial Private Sub OnretailPriceChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnretailPriceChanged()
    End Sub
    Partial Private Sub OnpackageSizeChanging(value As String)
    End Sub
    Partial Private Sub OnpackageSizeChanged()
    End Sub
    Partial Private Sub OnunitsInKitChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnunitsInKitChanged()
    End Sub
    Partial Private Sub OnphotoUrlChanging(value As String)
    End Sub
    Partial Private Sub OnphotoUrlChanged()
    End Sub
    Partial Private Sub OnusageChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnusageChanged()
    End Sub
    Partial Private Sub OnreturnToInventoryChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnreturnToInventoryChanged()
    End Sub
    Partial Private Sub OnvendorURLChanging(value As String)
    End Sub
    Partial Private Sub OnvendorURLChanged()
    End Sub
    Partial Private Sub OnproductIDChanging(value As String)
    End Sub
    Partial Private Sub OnproductIDChanged()
    End Sub
    Partial Private Sub OncostPerUnitChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OncostPerUnitChanged()
    End Sub
    Partial Private Sub OnpackageShippingSizeChanging(value As String)
    End Sub
    Partial Private Sub OnpackageShippingSizeChanged()
    End Sub
    Partial Private Sub OnpackageShippingWeightChanging(value As String)
    End Sub
    Partial Private Sub OnpackageShippingWeightChanged()
    End Sub
    Partial Private Sub OnimageChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnimageChanged()
    End Sub
    Partial Private Sub OnthumbnailChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnthumbnailChanged()
    End Sub
    Partial Private Sub OnoffPremiseKitChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnoffPremiseKitChanged()
    End Sub
    Partial Private Sub OnonPremiseKitChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnonPremiseKitChanged()
    End Sub
    Partial Private Sub OnaccountPlacementChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnaccountPlacementChanged()
    End Sub
    Partial Private Sub OngiveawayChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OngiveawayChanged()
    End Sub
    Partial Private Sub OnaccountGiftChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnaccountGiftChanged()
    End Sub
    Partial Private Sub OnshippingNotesChanging(value As String)
    End Sub
    Partial Private Sub OnshippingNotesChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_itemID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property itemID() As Integer
		Get
			Return Me._itemID
		End Get
		Set
			If ((Me._itemID = value)  _
						= false) Then
				Me.OnitemIDChanging(value)
				Me.SendPropertyChanging
				Me._itemID = value
				Me.SendPropertyChanged("itemID")
				Me.OnitemIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_itemName", DbType:="NVarChar(50)")>  _
	Public Property itemName() As String
		Get
			Return Me._itemName
		End Get
		Set
			If (String.Equals(Me._itemName, value) = false) Then
				Me.OnitemNameChanging(value)
				Me.SendPropertyChanging
				Me._itemName = value
				Me.SendPropertyChanged("itemName")
				Me.OnitemNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandID", DbType:="Int NOT NULL")>  _
	Public Property brandID() As Integer
		Get
			Return Me._brandID
		End Get
		Set
			If ((Me._brandID = value)  _
						= false) Then
				Me.OnbrandIDChanging(value)
				Me.SendPropertyChanging
				Me._brandID = value
				Me.SendPropertyChanged("brandID")
				Me.OnbrandIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_inGroup", DbType:="Bit")>  _
	Public Property inGroup() As System.Nullable(Of Boolean)
		Get
			Return Me._inGroup
		End Get
		Set
			If (Me._inGroup.Equals(value) = false) Then
				Me.OninGroupChanging(value)
				Me.SendPropertyChanging
				Me._inGroup = value
				Me.SendPropertyChanged("inGroup")
				Me.OninGroupChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_retailPrice", DbType:="Decimal(6,2)")>  _
	Public Property retailPrice() As System.Nullable(Of Decimal)
		Get
			Return Me._retailPrice
		End Get
		Set
			If (Me._retailPrice.Equals(value) = false) Then
				Me.OnretailPriceChanging(value)
				Me.SendPropertyChanging
				Me._retailPrice = value
				Me.SendPropertyChanged("retailPrice")
				Me.OnretailPriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_packageSize", DbType:="VarChar(50)")>  _
	Public Property packageSize() As String
		Get
			Return Me._packageSize
		End Get
		Set
			If (String.Equals(Me._packageSize, value) = false) Then
				Me.OnpackageSizeChanging(value)
				Me.SendPropertyChanging
				Me._packageSize = value
				Me.SendPropertyChanged("packageSize")
				Me.OnpackageSizeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_unitsInKit", DbType:="Int")>  _
	Public Property unitsInKit() As System.Nullable(Of Integer)
		Get
			Return Me._unitsInKit
		End Get
		Set
			If (Me._unitsInKit.Equals(value) = false) Then
				Me.OnunitsInKitChanging(value)
				Me.SendPropertyChanging
				Me._unitsInKit = value
				Me.SendPropertyChanged("unitsInKit")
				Me.OnunitsInKitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_photoUrl", DbType:="VarChar(256)")>  _
	Public Property photoUrl() As String
		Get
			Return Me._photoUrl
		End Get
		Set
			If (String.Equals(Me._photoUrl, value) = false) Then
				Me.OnphotoUrlChanging(value)
				Me.SendPropertyChanging
				Me._photoUrl = value
				Me.SendPropertyChanged("photoUrl")
				Me.OnphotoUrlChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_usage", DbType:="Int")>  _
	Public Property usage() As System.Nullable(Of Integer)
		Get
			Return Me._usage
		End Get
		Set
			If (Me._usage.Equals(value) = false) Then
				Me.OnusageChanging(value)
				Me.SendPropertyChanging
				Me._usage = value
				Me.SendPropertyChanged("usage")
				Me.OnusageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_returnToInventory", DbType:="Bit")>  _
	Public Property returnToInventory() As System.Nullable(Of Boolean)
		Get
			Return Me._returnToInventory
		End Get
		Set
			If (Me._returnToInventory.Equals(value) = false) Then
				Me.OnreturnToInventoryChanging(value)
				Me.SendPropertyChanging
				Me._returnToInventory = value
				Me.SendPropertyChanged("returnToInventory")
				Me.OnreturnToInventoryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_vendorURL", DbType:="NVarChar(256)")>  _
	Public Property vendorURL() As String
		Get
			Return Me._vendorURL
		End Get
		Set
			If (String.Equals(Me._vendorURL, value) = false) Then
				Me.OnvendorURLChanging(value)
				Me.SendPropertyChanging
				Me._vendorURL = value
				Me.SendPropertyChanged("vendorURL")
				Me.OnvendorURLChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_productID", DbType:="VarChar(50)")>  _
	Public Property productID() As String
		Get
			Return Me._productID
		End Get
		Set
			If (String.Equals(Me._productID, value) = false) Then
				Me.OnproductIDChanging(value)
				Me.SendPropertyChanging
				Me._productID = value
				Me.SendPropertyChanged("productID")
				Me.OnproductIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_costPerUnit", DbType:="Decimal(6,2)")>  _
	Public Property costPerUnit() As System.Nullable(Of Decimal)
		Get
			Return Me._costPerUnit
		End Get
		Set
			If (Me._costPerUnit.Equals(value) = false) Then
				Me.OncostPerUnitChanging(value)
				Me.SendPropertyChanging
				Me._costPerUnit = value
				Me.SendPropertyChanged("costPerUnit")
				Me.OncostPerUnitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_packageShippingSize", DbType:="VarChar(50)")>  _
	Public Property packageShippingSize() As String
		Get
			Return Me._packageShippingSize
		End Get
		Set
			If (String.Equals(Me._packageShippingSize, value) = false) Then
				Me.OnpackageShippingSizeChanging(value)
				Me.SendPropertyChanging
				Me._packageShippingSize = value
				Me.SendPropertyChanged("packageShippingSize")
				Me.OnpackageShippingSizeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_packageShippingWeight", DbType:="VarChar(50)")>  _
	Public Property packageShippingWeight() As String
		Get
			Return Me._packageShippingWeight
		End Get
		Set
			If (String.Equals(Me._packageShippingWeight, value) = false) Then
				Me.OnpackageShippingWeightChanging(value)
				Me.SendPropertyChanging
				Me._packageShippingWeight = value
				Me.SendPropertyChanged("packageShippingWeight")
				Me.OnpackageShippingWeightChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_image", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property image() As System.Data.Linq.Binary
		Get
			Return Me._image
		End Get
		Set
			If (Object.Equals(Me._image, value) = false) Then
				Me.OnimageChanging(value)
				Me.SendPropertyChanging
				Me._image = value
				Me.SendPropertyChanged("image")
				Me.OnimageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_thumbnail", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property thumbnail() As System.Data.Linq.Binary
		Get
			Return Me._thumbnail
		End Get
		Set
			If (Object.Equals(Me._thumbnail, value) = false) Then
				Me.OnthumbnailChanging(value)
				Me.SendPropertyChanging
				Me._thumbnail = value
				Me.SendPropertyChanged("thumbnail")
				Me.OnthumbnailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_offPremiseKit", DbType:="Bit")>  _
	Public Property offPremiseKit() As System.Nullable(Of Boolean)
		Get
			Return Me._offPremiseKit
		End Get
		Set
			If (Me._offPremiseKit.Equals(value) = false) Then
				Me.OnoffPremiseKitChanging(value)
				Me.SendPropertyChanging
				Me._offPremiseKit = value
				Me.SendPropertyChanged("offPremiseKit")
				Me.OnoffPremiseKitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_onPremiseKit", DbType:="Bit")>  _
	Public Property onPremiseKit() As System.Nullable(Of Boolean)
		Get
			Return Me._onPremiseKit
		End Get
		Set
			If (Me._onPremiseKit.Equals(value) = false) Then
				Me.OnonPremiseKitChanging(value)
				Me.SendPropertyChanging
				Me._onPremiseKit = value
				Me.SendPropertyChanged("onPremiseKit")
				Me.OnonPremiseKitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountPlacement", DbType:="Bit")>  _
	Public Property accountPlacement() As System.Nullable(Of Boolean)
		Get
			Return Me._accountPlacement
		End Get
		Set
			If (Me._accountPlacement.Equals(value) = false) Then
				Me.OnaccountPlacementChanging(value)
				Me.SendPropertyChanging
				Me._accountPlacement = value
				Me.SendPropertyChanged("accountPlacement")
				Me.OnaccountPlacementChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_giveaway", DbType:="Bit")>  _
	Public Property giveaway() As System.Nullable(Of Boolean)
		Get
			Return Me._giveaway
		End Get
		Set
			If (Me._giveaway.Equals(value) = false) Then
				Me.OngiveawayChanging(value)
				Me.SendPropertyChanging
				Me._giveaway = value
				Me.SendPropertyChanged("giveaway")
				Me.OngiveawayChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountGift", DbType:="Bit")>  _
	Public Property accountGift() As System.Nullable(Of Boolean)
		Get
			Return Me._accountGift
		End Get
		Set
			If (Me._accountGift.Equals(value) = false) Then
				Me.OnaccountGiftChanging(value)
				Me.SendPropertyChanging
				Me._accountGift = value
				Me.SendPropertyChanged("accountGift")
				Me.OnaccountGiftChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_shippingNotes", DbType:="NVarChar(MAX)")>  _
	Public Property shippingNotes() As String
		Get
			Return Me._shippingNotes
		End Get
		Set
			If (String.Equals(Me._shippingNotes, value) = false) Then
				Me.OnshippingNotesChanging(value)
				Me.SendPropertyChanging
				Me._shippingNotes = value
				Me.SendPropertyChanged("shippingNotes")
				Me.OnshippingNotesChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblInvoice")>  _
Partial Public Class tblInvoice
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _invoiceID As Long
	
	Private _billingInvoiceID As System.Nullable(Of Long)
	
	Private _clientID As System.Nullable(Of Integer)
	
	Private _BillTo As String
	
	Private _supplierID As System.Nullable(Of Integer)
	
	Private _invoiceDate As System.Nullable(Of Date)
	
	Private _terms As String
	
	Private _AdditionalTerms As String
	
	Private _PO As String
	
	Private _LateFee As String
	
	Private _dueDate As System.Nullable(Of Date)
	
	Private _status As String
	
	Private _amount As System.Nullable(Of Decimal)
	
	Private _createdBy As String
	
	Private _modifiedBy As String
	
	Private _modifiedDate As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OninvoiceIDChanging(value As Long)
    End Sub
    Partial Private Sub OninvoiceIDChanged()
    End Sub
    Partial Private Sub OnbillingInvoiceIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnbillingInvoiceIDChanged()
    End Sub
    Partial Private Sub OnclientIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnclientIDChanged()
    End Sub
    Partial Private Sub OnBillToChanging(value As String)
    End Sub
    Partial Private Sub OnBillToChanged()
    End Sub
    Partial Private Sub OnsupplierIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnsupplierIDChanged()
    End Sub
    Partial Private Sub OninvoiceDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OninvoiceDateChanged()
    End Sub
    Partial Private Sub OntermsChanging(value As String)
    End Sub
    Partial Private Sub OntermsChanged()
    End Sub
    Partial Private Sub OnAdditionalTermsChanging(value As String)
    End Sub
    Partial Private Sub OnAdditionalTermsChanged()
    End Sub
    Partial Private Sub OnPOChanging(value As String)
    End Sub
    Partial Private Sub OnPOChanged()
    End Sub
    Partial Private Sub OnLateFeeChanging(value As String)
    End Sub
    Partial Private Sub OnLateFeeChanged()
    End Sub
    Partial Private Sub OndueDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OndueDateChanged()
    End Sub
    Partial Private Sub OnstatusChanging(value As String)
    End Sub
    Partial Private Sub OnstatusChanged()
    End Sub
    Partial Private Sub OnamountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnamountChanged()
    End Sub
    Partial Private Sub OncreatedByChanging(value As String)
    End Sub
    Partial Private Sub OncreatedByChanged()
    End Sub
    Partial Private Sub OnmodifiedByChanging(value As String)
    End Sub
    Partial Private Sub OnmodifiedByChanged()
    End Sub
    Partial Private Sub OnmodifiedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnmodifiedDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_invoiceID", DbType:="BigInt NOT NULL", IsPrimaryKey:=true)>  _
	Public Property invoiceID() As Long
		Get
			Return Me._invoiceID
		End Get
		Set
			If ((Me._invoiceID = value)  _
						= false) Then
				Me.OninvoiceIDChanging(value)
				Me.SendPropertyChanging
				Me._invoiceID = value
				Me.SendPropertyChanged("invoiceID")
				Me.OninvoiceIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_billingInvoiceID", DbType:="BigInt")>  _
	Public Property billingInvoiceID() As System.Nullable(Of Long)
		Get
			Return Me._billingInvoiceID
		End Get
		Set
			If (Me._billingInvoiceID.Equals(value) = false) Then
				Me.OnbillingInvoiceIDChanging(value)
				Me.SendPropertyChanging
				Me._billingInvoiceID = value
				Me.SendPropertyChanged("billingInvoiceID")
				Me.OnbillingInvoiceIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", DbType:="Int")>  _
	Public Property clientID() As System.Nullable(Of Integer)
		Get
			Return Me._clientID
		End Get
		Set
			If (Me._clientID.Equals(value) = false) Then
				Me.OnclientIDChanging(value)
				Me.SendPropertyChanging
				Me._clientID = value
				Me.SendPropertyChanged("clientID")
				Me.OnclientIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BillTo", DbType:="NVarChar(MAX)")>  _
	Public Property BillTo() As String
		Get
			Return Me._BillTo
		End Get
		Set
			If (String.Equals(Me._BillTo, value) = false) Then
				Me.OnBillToChanging(value)
				Me.SendPropertyChanging
				Me._BillTo = value
				Me.SendPropertyChanged("BillTo")
				Me.OnBillToChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int")>  _
	Public Property supplierID() As System.Nullable(Of Integer)
		Get
			Return Me._supplierID
		End Get
		Set
			If (Me._supplierID.Equals(value) = false) Then
				Me.OnsupplierIDChanging(value)
				Me.SendPropertyChanging
				Me._supplierID = value
				Me.SendPropertyChanged("supplierID")
				Me.OnsupplierIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_invoiceDate", DbType:="SmallDateTime")>  _
	Public Property invoiceDate() As System.Nullable(Of Date)
		Get
			Return Me._invoiceDate
		End Get
		Set
			If (Me._invoiceDate.Equals(value) = false) Then
				Me.OninvoiceDateChanging(value)
				Me.SendPropertyChanging
				Me._invoiceDate = value
				Me.SendPropertyChanged("invoiceDate")
				Me.OninvoiceDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_terms", DbType:="NVarChar(50)")>  _
	Public Property terms() As String
		Get
			Return Me._terms
		End Get
		Set
			If (String.Equals(Me._terms, value) = false) Then
				Me.OntermsChanging(value)
				Me.SendPropertyChanging
				Me._terms = value
				Me.SendPropertyChanged("terms")
				Me.OntermsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AdditionalTerms", DbType:="NVarChar(MAX)")>  _
	Public Property AdditionalTerms() As String
		Get
			Return Me._AdditionalTerms
		End Get
		Set
			If (String.Equals(Me._AdditionalTerms, value) = false) Then
				Me.OnAdditionalTermsChanging(value)
				Me.SendPropertyChanging
				Me._AdditionalTerms = value
				Me.SendPropertyChanged("AdditionalTerms")
				Me.OnAdditionalTermsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PO", DbType:="NVarChar(50)")>  _
	Public Property PO() As String
		Get
			Return Me._PO
		End Get
		Set
			If (String.Equals(Me._PO, value) = false) Then
				Me.OnPOChanging(value)
				Me.SendPropertyChanging
				Me._PO = value
				Me.SendPropertyChanged("PO")
				Me.OnPOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LateFee", DbType:="NVarChar(50)")>  _
	Public Property LateFee() As String
		Get
			Return Me._LateFee
		End Get
		Set
			If (String.Equals(Me._LateFee, value) = false) Then
				Me.OnLateFeeChanging(value)
				Me.SendPropertyChanging
				Me._LateFee = value
				Me.SendPropertyChanged("LateFee")
				Me.OnLateFeeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dueDate", DbType:="SmallDateTime")>  _
	Public Property dueDate() As System.Nullable(Of Date)
		Get
			Return Me._dueDate
		End Get
		Set
			If (Me._dueDate.Equals(value) = false) Then
				Me.OndueDateChanging(value)
				Me.SendPropertyChanging
				Me._dueDate = value
				Me.SendPropertyChanged("dueDate")
				Me.OndueDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", DbType:="VarChar(50)")>  _
	Public Property status() As String
		Get
			Return Me._status
		End Get
		Set
			If (String.Equals(Me._status, value) = false) Then
				Me.OnstatusChanging(value)
				Me.SendPropertyChanging
				Me._status = value
				Me.SendPropertyChanged("status")
				Me.OnstatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_amount", DbType:="Decimal(18,2)")>  _
	Public Property amount() As System.Nullable(Of Decimal)
		Get
			Return Me._amount
		End Get
		Set
			If (Me._amount.Equals(value) = false) Then
				Me.OnamountChanging(value)
				Me.SendPropertyChanging
				Me._amount = value
				Me.SendPropertyChanged("amount")
				Me.OnamountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_createdBy", DbType:="NVarChar(50)")>  _
	Public Property createdBy() As String
		Get
			Return Me._createdBy
		End Get
		Set
			If (String.Equals(Me._createdBy, value) = false) Then
				Me.OncreatedByChanging(value)
				Me.SendPropertyChanging
				Me._createdBy = value
				Me.SendPropertyChanged("createdBy")
				Me.OncreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_modifiedBy", DbType:="NVarChar(50)")>  _
	Public Property modifiedBy() As String
		Get
			Return Me._modifiedBy
		End Get
		Set
			If (String.Equals(Me._modifiedBy, value) = false) Then
				Me.OnmodifiedByChanging(value)
				Me.SendPropertyChanging
				Me._modifiedBy = value
				Me.SendPropertyChanged("modifiedBy")
				Me.OnmodifiedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_modifiedDate", DbType:="SmallDateTime")>  _
	Public Property modifiedDate() As System.Nullable(Of Date)
		Get
			Return Me._modifiedDate
		End Get
		Set
			If (Me._modifiedDate.Equals(value) = false) Then
				Me.OnmodifiedDateChanging(value)
				Me.SendPropertyChanging
				Me._modifiedDate = value
				Me.SendPropertyChanged("modifiedDate")
				Me.OnmodifiedDateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblInvoiceBatch")>  _
Partial Public Class tblInvoiceBatch
	
	Private _batchID As Integer
	
	Private _dateTimeStamp As Date
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_batchID", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property batchID() As Integer
		Get
			Return Me._batchID
		End Get
		Set
			If ((Me._batchID = value)  _
						= false) Then
				Me._batchID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateTimeStamp", DbType:="SmallDateTime NOT NULL")>  _
	Public Property dateTimeStamp() As Date
		Get
			Return Me._dateTimeStamp
		End Get
		Set
			If ((Me._dateTimeStamp = value)  _
						= false) Then
				Me._dateTimeStamp = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblInvoiceHeader")>  _
Partial Public Class tblInvoiceHeader
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _invoiceID As Integer
	
	Private _revisionNumber As Byte
	
	Private _invoiceDate As Date
	
	Private _dueDate As Date
	
	Private _invoiceNumber As String
	
	Private _supplierID As Integer
	
	Private _marketID As System.Nullable(Of Integer)
	
	Private _terms As String
	
	Private _taxID As String
	
	Private _billToName As String
	
	Private _billToAddress As String
	
	Private _billToPhone As String
	
	Private _companyAddress As String
	
	Private _companyEmail As String
	
	Private _SubTotal As Decimal
	
	Private _TaxAmt As Decimal
	
	Private _agencyFee As Decimal
	
	Private _TotalDue As Decimal
	
	Private _Comment As String
	
	Private _rowguid As System.Guid
	
	Private _ModifiedDate As Date
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OninvoiceIDChanging(value As Integer)
    End Sub
    Partial Private Sub OninvoiceIDChanged()
    End Sub
    Partial Private Sub OnrevisionNumberChanging(value As Byte)
    End Sub
    Partial Private Sub OnrevisionNumberChanged()
    End Sub
    Partial Private Sub OninvoiceDateChanging(value As Date)
    End Sub
    Partial Private Sub OninvoiceDateChanged()
    End Sub
    Partial Private Sub OndueDateChanging(value As Date)
    End Sub
    Partial Private Sub OndueDateChanged()
    End Sub
    Partial Private Sub OninvoiceNumberChanging(value As String)
    End Sub
    Partial Private Sub OninvoiceNumberChanged()
    End Sub
    Partial Private Sub OnsupplierIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnsupplierIDChanged()
    End Sub
    Partial Private Sub OnmarketIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnmarketIDChanged()
    End Sub
    Partial Private Sub OntermsChanging(value As String)
    End Sub
    Partial Private Sub OntermsChanged()
    End Sub
    Partial Private Sub OntaxIDChanging(value As String)
    End Sub
    Partial Private Sub OntaxIDChanged()
    End Sub
    Partial Private Sub OnbillToNameChanging(value As String)
    End Sub
    Partial Private Sub OnbillToNameChanged()
    End Sub
    Partial Private Sub OnbillToAddressChanging(value As String)
    End Sub
    Partial Private Sub OnbillToAddressChanged()
    End Sub
    Partial Private Sub OnbillToPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnbillToPhoneChanged()
    End Sub
    Partial Private Sub OncompanyAddressChanging(value As String)
    End Sub
    Partial Private Sub OncompanyAddressChanged()
    End Sub
    Partial Private Sub OncompanyEmailChanging(value As String)
    End Sub
    Partial Private Sub OncompanyEmailChanged()
    End Sub
    Partial Private Sub OnSubTotalChanging(value As Decimal)
    End Sub
    Partial Private Sub OnSubTotalChanged()
    End Sub
    Partial Private Sub OnTaxAmtChanging(value As Decimal)
    End Sub
    Partial Private Sub OnTaxAmtChanged()
    End Sub
    Partial Private Sub OnagencyFeeChanging(value As Decimal)
    End Sub
    Partial Private Sub OnagencyFeeChanged()
    End Sub
    Partial Private Sub OnTotalDueChanging(value As Decimal)
    End Sub
    Partial Private Sub OnTotalDueChanged()
    End Sub
    Partial Private Sub OnCommentChanging(value As String)
    End Sub
    Partial Private Sub OnCommentChanged()
    End Sub
    Partial Private Sub OnrowguidChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnrowguidChanged()
    End Sub
    Partial Private Sub OnModifiedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnModifiedDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_invoiceID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property invoiceID() As Integer
		Get
			Return Me._invoiceID
		End Get
		Set
			If ((Me._invoiceID = value)  _
						= false) Then
				Me.OninvoiceIDChanging(value)
				Me.SendPropertyChanging
				Me._invoiceID = value
				Me.SendPropertyChanged("invoiceID")
				Me.OninvoiceIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_revisionNumber", DbType:="TinyInt NOT NULL")>  _
	Public Property revisionNumber() As Byte
		Get
			Return Me._revisionNumber
		End Get
		Set
			If ((Me._revisionNumber = value)  _
						= false) Then
				Me.OnrevisionNumberChanging(value)
				Me.SendPropertyChanging
				Me._revisionNumber = value
				Me.SendPropertyChanged("revisionNumber")
				Me.OnrevisionNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_invoiceDate", DbType:="DateTime NOT NULL")>  _
	Public Property invoiceDate() As Date
		Get
			Return Me._invoiceDate
		End Get
		Set
			If ((Me._invoiceDate = value)  _
						= false) Then
				Me.OninvoiceDateChanging(value)
				Me.SendPropertyChanging
				Me._invoiceDate = value
				Me.SendPropertyChanged("invoiceDate")
				Me.OninvoiceDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dueDate", DbType:="DateTime NOT NULL")>  _
	Public Property dueDate() As Date
		Get
			Return Me._dueDate
		End Get
		Set
			If ((Me._dueDate = value)  _
						= false) Then
				Me.OndueDateChanging(value)
				Me.SendPropertyChanging
				Me._dueDate = value
				Me.SendPropertyChanged("dueDate")
				Me.OndueDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_invoiceNumber", AutoSync:=AutoSync.Always, DbType:="NVarChar(25) NOT NULL", CanBeNull:=false, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property invoiceNumber() As String
		Get
			Return Me._invoiceNumber
		End Get
		Set
			If (String.Equals(Me._invoiceNumber, value) = false) Then
				Me.OninvoiceNumberChanging(value)
				Me.SendPropertyChanging
				Me._invoiceNumber = value
				Me.SendPropertyChanged("invoiceNumber")
				Me.OninvoiceNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int NOT NULL")>  _
	Public Property supplierID() As Integer
		Get
			Return Me._supplierID
		End Get
		Set
			If ((Me._supplierID = value)  _
						= false) Then
				Me.OnsupplierIDChanging(value)
				Me.SendPropertyChanging
				Me._supplierID = value
				Me.SendPropertyChanged("supplierID")
				Me.OnsupplierIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="Int")>  _
	Public Property marketID() As System.Nullable(Of Integer)
		Get
			Return Me._marketID
		End Get
		Set
			If (Me._marketID.Equals(value) = false) Then
				Me.OnmarketIDChanging(value)
				Me.SendPropertyChanging
				Me._marketID = value
				Me.SendPropertyChanged("marketID")
				Me.OnmarketIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_terms", DbType:="NVarChar(50)")>  _
	Public Property terms() As String
		Get
			Return Me._terms
		End Get
		Set
			If (String.Equals(Me._terms, value) = false) Then
				Me.OntermsChanging(value)
				Me.SendPropertyChanging
				Me._terms = value
				Me.SendPropertyChanged("terms")
				Me.OntermsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_taxID", DbType:="NVarChar(50)")>  _
	Public Property taxID() As String
		Get
			Return Me._taxID
		End Get
		Set
			If (String.Equals(Me._taxID, value) = false) Then
				Me.OntaxIDChanging(value)
				Me.SendPropertyChanging
				Me._taxID = value
				Me.SendPropertyChanged("taxID")
				Me.OntaxIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_billToName", DbType:="NVarChar(50)")>  _
	Public Property billToName() As String
		Get
			Return Me._billToName
		End Get
		Set
			If (String.Equals(Me._billToName, value) = false) Then
				Me.OnbillToNameChanging(value)
				Me.SendPropertyChanging
				Me._billToName = value
				Me.SendPropertyChanged("billToName")
				Me.OnbillToNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_billToAddress", DbType:="NVarChar(50)")>  _
	Public Property billToAddress() As String
		Get
			Return Me._billToAddress
		End Get
		Set
			If (String.Equals(Me._billToAddress, value) = false) Then
				Me.OnbillToAddressChanging(value)
				Me.SendPropertyChanging
				Me._billToAddress = value
				Me.SendPropertyChanged("billToAddress")
				Me.OnbillToAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_billToPhone", DbType:="NVarChar(50)")>  _
	Public Property billToPhone() As String
		Get
			Return Me._billToPhone
		End Get
		Set
			If (String.Equals(Me._billToPhone, value) = false) Then
				Me.OnbillToPhoneChanging(value)
				Me.SendPropertyChanging
				Me._billToPhone = value
				Me.SendPropertyChanged("billToPhone")
				Me.OnbillToPhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_companyAddress", DbType:="NVarChar(50)")>  _
	Public Property companyAddress() As String
		Get
			Return Me._companyAddress
		End Get
		Set
			If (String.Equals(Me._companyAddress, value) = false) Then
				Me.OncompanyAddressChanging(value)
				Me.SendPropertyChanging
				Me._companyAddress = value
				Me.SendPropertyChanged("companyAddress")
				Me.OncompanyAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_companyEmail", DbType:="NVarChar(50)")>  _
	Public Property companyEmail() As String
		Get
			Return Me._companyEmail
		End Get
		Set
			If (String.Equals(Me._companyEmail, value) = false) Then
				Me.OncompanyEmailChanging(value)
				Me.SendPropertyChanging
				Me._companyEmail = value
				Me.SendPropertyChanged("companyEmail")
				Me.OncompanyEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubTotal", DbType:="Money NOT NULL")>  _
	Public Property SubTotal() As Decimal
		Get
			Return Me._SubTotal
		End Get
		Set
			If ((Me._SubTotal = value)  _
						= false) Then
				Me.OnSubTotalChanging(value)
				Me.SendPropertyChanging
				Me._SubTotal = value
				Me.SendPropertyChanged("SubTotal")
				Me.OnSubTotalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TaxAmt", DbType:="Money NOT NULL")>  _
	Public Property TaxAmt() As Decimal
		Get
			Return Me._TaxAmt
		End Get
		Set
			If ((Me._TaxAmt = value)  _
						= false) Then
				Me.OnTaxAmtChanging(value)
				Me.SendPropertyChanging
				Me._TaxAmt = value
				Me.SendPropertyChanged("TaxAmt")
				Me.OnTaxAmtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_agencyFee", DbType:="Money NOT NULL")>  _
	Public Property agencyFee() As Decimal
		Get
			Return Me._agencyFee
		End Get
		Set
			If ((Me._agencyFee = value)  _
						= false) Then
				Me.OnagencyFeeChanging(value)
				Me.SendPropertyChanging
				Me._agencyFee = value
				Me.SendPropertyChanged("agencyFee")
				Me.OnagencyFeeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalDue", AutoSync:=AutoSync.Always, DbType:="Money NOT NULL", IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property TotalDue() As Decimal
		Get
			Return Me._TotalDue
		End Get
		Set
			If ((Me._TotalDue = value)  _
						= false) Then
				Me.OnTotalDueChanging(value)
				Me.SendPropertyChanging
				Me._TotalDue = value
				Me.SendPropertyChanged("TotalDue")
				Me.OnTotalDueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Comment", DbType:="NVarChar(128)")>  _
	Public Property Comment() As String
		Get
			Return Me._Comment
		End Get
		Set
			If (String.Equals(Me._Comment, value) = false) Then
				Me.OnCommentChanging(value)
				Me.SendPropertyChanging
				Me._Comment = value
				Me.SendPropertyChanged("Comment")
				Me.OnCommentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rowguid", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property rowguid() As System.Guid
		Get
			Return Me._rowguid
		End Get
		Set
			If ((Me._rowguid = value)  _
						= false) Then
				Me.OnrowguidChanging(value)
				Me.SendPropertyChanging
				Me._rowguid = value
				Me.SendPropertyChanged("rowguid")
				Me.OnrowguidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDate", DbType:="DateTime NOT NULL")>  _
	Public Property ModifiedDate() As Date
		Get
			Return Me._ModifiedDate
		End Get
		Set
			If ((Me._ModifiedDate = value)  _
						= false) Then
				Me.OnModifiedDateChanging(value)
				Me.SendPropertyChanging
				Me._ModifiedDate = value
				Me.SendPropertyChanged("ModifiedDate")
				Me.OnModifiedDateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblLoadBingMap")>  _
Partial Public Class tblLoadBingMap
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _loadBingMapID As Integer
	
	Private _page As String
	
	Private _count As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnloadBingMapIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnloadBingMapIDChanged()
    End Sub
    Partial Private Sub OnpageChanging(value As String)
    End Sub
    Partial Private Sub OnpageChanged()
    End Sub
    Partial Private Sub OncountChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OncountChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_loadBingMapID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property loadBingMapID() As Integer
		Get
			Return Me._loadBingMapID
		End Get
		Set
			If ((Me._loadBingMapID = value)  _
						= false) Then
				Me.OnloadBingMapIDChanging(value)
				Me.SendPropertyChanging
				Me._loadBingMapID = value
				Me.SendPropertyChanged("loadBingMapID")
				Me.OnloadBingMapIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_page", DbType:="NVarChar(50)")>  _
	Public Property page() As String
		Get
			Return Me._page
		End Get
		Set
			If (String.Equals(Me._page, value) = false) Then
				Me.OnpageChanging(value)
				Me.SendPropertyChanging
				Me._page = value
				Me.SendPropertyChanged("page")
				Me.OnpageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_count", DbType:="Int")>  _
	Public Property count() As System.Nullable(Of Integer)
		Get
			Return Me._count
		End Get
		Set
			If (Me._count.Equals(value) = false) Then
				Me.OncountChanging(value)
				Me.SendPropertyChanging
				Me._count = value
				Me.SendPropertyChanged("count")
				Me.OncountChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblLogFile")>  _
Partial Public Class tblLogFile
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _logID As Integer
	
	Private _logText As String
	
	Private _dateCreated As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnlogIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnlogIDChanged()
    End Sub
    Partial Private Sub OnlogTextChanging(value As String)
    End Sub
    Partial Private Sub OnlogTextChanged()
    End Sub
    Partial Private Sub OndateCreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OndateCreatedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_logID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property logID() As Integer
		Get
			Return Me._logID
		End Get
		Set
			If ((Me._logID = value)  _
						= false) Then
				Me.OnlogIDChanging(value)
				Me.SendPropertyChanging
				Me._logID = value
				Me.SendPropertyChanged("logID")
				Me.OnlogIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_logText", DbType:="NVarChar(MAX)")>  _
	Public Property logText() As String
		Get
			Return Me._logText
		End Get
		Set
			If (String.Equals(Me._logText, value) = false) Then
				Me.OnlogTextChanging(value)
				Me.SendPropertyChanging
				Me._logText = value
				Me.SendPropertyChanged("logText")
				Me.OnlogTextChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateCreated", DbType:="SmallDateTime")>  _
	Public Property dateCreated() As System.Nullable(Of Date)
		Get
			Return Me._dateCreated
		End Get
		Set
			If (Me._dateCreated.Equals(value) = false) Then
				Me.OndateCreatedChanging(value)
				Me.SendPropertyChanging
				Me._dateCreated = value
				Me.SendPropertyChanged("dateCreated")
				Me.OndateCreatedChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblMarket")>  _
Partial Public Class tblMarket
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _marketID As Integer
	
	Private _marketName As String
	
	Private _active As System.Nullable(Of Boolean)
	
	Private _regionID As System.Nullable(Of Integer)
	
	Private _marketCode As String
	
	Private _parentMarketID As String
	
	Private _latitude As System.Nullable(Of Double)
	
	Private _longitude As System.Nullable(Of Double)
	
	Private _TimeZone As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnmarketIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnmarketIDChanged()
    End Sub
    Partial Private Sub OnmarketNameChanging(value As String)
    End Sub
    Partial Private Sub OnmarketNameChanged()
    End Sub
    Partial Private Sub OnactiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnactiveChanged()
    End Sub
    Partial Private Sub OnregionIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnregionIDChanged()
    End Sub
    Partial Private Sub OnmarketCodeChanging(value As String)
    End Sub
    Partial Private Sub OnmarketCodeChanged()
    End Sub
    Partial Private Sub OnparentMarketIDChanging(value As String)
    End Sub
    Partial Private Sub OnparentMarketIDChanged()
    End Sub
    Partial Private Sub OnlatitudeChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnlatitudeChanged()
    End Sub
    Partial Private Sub OnlongitudeChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnlongitudeChanged()
    End Sub
    Partial Private Sub OnTimeZoneChanging(value As String)
    End Sub
    Partial Private Sub OnTimeZoneChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="Int NOT NULL")>  _
	Public Property marketID() As Integer
		Get
			Return Me._marketID
		End Get
		Set
			If ((Me._marketID = value)  _
						= false) Then
				Me.OnmarketIDChanging(value)
				Me.SendPropertyChanging
				Me._marketID = value
				Me.SendPropertyChanged("marketID")
				Me.OnmarketIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketName", DbType:="VarChar(50)")>  _
	Public Property marketName() As String
		Get
			Return Me._marketName
		End Get
		Set
			If (String.Equals(Me._marketName, value) = false) Then
				Me.OnmarketNameChanging(value)
				Me.SendPropertyChanging
				Me._marketName = value
				Me.SendPropertyChanged("marketName")
				Me.OnmarketNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_active", DbType:="Bit")>  _
	Public Property active() As System.Nullable(Of Boolean)
		Get
			Return Me._active
		End Get
		Set
			If (Me._active.Equals(value) = false) Then
				Me.OnactiveChanging(value)
				Me.SendPropertyChanging
				Me._active = value
				Me.SendPropertyChanged("active")
				Me.OnactiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_regionID", DbType:="Int")>  _
	Public Property regionID() As System.Nullable(Of Integer)
		Get
			Return Me._regionID
		End Get
		Set
			If (Me._regionID.Equals(value) = false) Then
				Me.OnregionIDChanging(value)
				Me.SendPropertyChanging
				Me._regionID = value
				Me.SendPropertyChanged("regionID")
				Me.OnregionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketCode", DbType:="VarChar(50)")>  _
	Public Property marketCode() As String
		Get
			Return Me._marketCode
		End Get
		Set
			If (String.Equals(Me._marketCode, value) = false) Then
				Me.OnmarketCodeChanging(value)
				Me.SendPropertyChanging
				Me._marketCode = value
				Me.SendPropertyChanged("marketCode")
				Me.OnmarketCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_parentMarketID", DbType:="NVarChar(50)")>  _
	Public Property parentMarketID() As String
		Get
			Return Me._parentMarketID
		End Get
		Set
			If (String.Equals(Me._parentMarketID, value) = false) Then
				Me.OnparentMarketIDChanging(value)
				Me.SendPropertyChanging
				Me._parentMarketID = value
				Me.SendPropertyChanged("parentMarketID")
				Me.OnparentMarketIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_latitude", DbType:="Float")>  _
	Public Property latitude() As System.Nullable(Of Double)
		Get
			Return Me._latitude
		End Get
		Set
			If (Me._latitude.Equals(value) = false) Then
				Me.OnlatitudeChanging(value)
				Me.SendPropertyChanging
				Me._latitude = value
				Me.SendPropertyChanged("latitude")
				Me.OnlatitudeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_longitude", DbType:="Float")>  _
	Public Property longitude() As System.Nullable(Of Double)
		Get
			Return Me._longitude
		End Get
		Set
			If (Me._longitude.Equals(value) = false) Then
				Me.OnlongitudeChanging(value)
				Me.SendPropertyChanging
				Me._longitude = value
				Me.SendPropertyChanged("longitude")
				Me.OnlongitudeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TimeZone", DbType:="NVarChar(100)")>  _
	Public Property TimeZone() As String
		Get
			Return Me._TimeZone
		End Get
		Set
			If (String.Equals(Me._TimeZone, value) = false) Then
				Me.OnTimeZoneChanging(value)
				Me.SendPropertyChanging
				Me._TimeZone = value
				Me.SendPropertyChanged("TimeZone")
				Me.OnTimeZoneChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblMessage")>  _
Partial Public Class tblMessage
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _messageID As Integer
	
	Private _messageTitle As String
	
	Private _messageText As String
	
	Private _modifiedBy As String
	
	Private _modifiedDate As System.Nullable(Of Date)
	
	Private _subject As String
	
	Private _fromAddress As String
	
	Private _fromName As String
	
	Private _description As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnmessageIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnmessageIDChanged()
    End Sub
    Partial Private Sub OnmessageTitleChanging(value As String)
    End Sub
    Partial Private Sub OnmessageTitleChanged()
    End Sub
    Partial Private Sub OnmessageTextChanging(value As String)
    End Sub
    Partial Private Sub OnmessageTextChanged()
    End Sub
    Partial Private Sub OnmodifiedByChanging(value As String)
    End Sub
    Partial Private Sub OnmodifiedByChanged()
    End Sub
    Partial Private Sub OnmodifiedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnmodifiedDateChanged()
    End Sub
    Partial Private Sub OnsubjectChanging(value As String)
    End Sub
    Partial Private Sub OnsubjectChanged()
    End Sub
    Partial Private Sub OnfromAddressChanging(value As String)
    End Sub
    Partial Private Sub OnfromAddressChanged()
    End Sub
    Partial Private Sub OnfromNameChanging(value As String)
    End Sub
    Partial Private Sub OnfromNameChanged()
    End Sub
    Partial Private Sub OndescriptionChanging(value As String)
    End Sub
    Partial Private Sub OndescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_messageID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property messageID() As Integer
		Get
			Return Me._messageID
		End Get
		Set
			If ((Me._messageID = value)  _
						= false) Then
				Me.OnmessageIDChanging(value)
				Me.SendPropertyChanging
				Me._messageID = value
				Me.SendPropertyChanged("messageID")
				Me.OnmessageIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_messageTitle", DbType:="NVarChar(50)")>  _
	Public Property messageTitle() As String
		Get
			Return Me._messageTitle
		End Get
		Set
			If (String.Equals(Me._messageTitle, value) = false) Then
				Me.OnmessageTitleChanging(value)
				Me.SendPropertyChanging
				Me._messageTitle = value
				Me.SendPropertyChanged("messageTitle")
				Me.OnmessageTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_messageText", DbType:="NVarChar(MAX)")>  _
	Public Property messageText() As String
		Get
			Return Me._messageText
		End Get
		Set
			If (String.Equals(Me._messageText, value) = false) Then
				Me.OnmessageTextChanging(value)
				Me.SendPropertyChanging
				Me._messageText = value
				Me.SendPropertyChanged("messageText")
				Me.OnmessageTextChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_modifiedBy", DbType:="NVarChar(50)")>  _
	Public Property modifiedBy() As String
		Get
			Return Me._modifiedBy
		End Get
		Set
			If (String.Equals(Me._modifiedBy, value) = false) Then
				Me.OnmodifiedByChanging(value)
				Me.SendPropertyChanging
				Me._modifiedBy = value
				Me.SendPropertyChanged("modifiedBy")
				Me.OnmodifiedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_modifiedDate", DbType:="SmallDateTime")>  _
	Public Property modifiedDate() As System.Nullable(Of Date)
		Get
			Return Me._modifiedDate
		End Get
		Set
			If (Me._modifiedDate.Equals(value) = false) Then
				Me.OnmodifiedDateChanging(value)
				Me.SendPropertyChanging
				Me._modifiedDate = value
				Me.SendPropertyChanged("modifiedDate")
				Me.OnmodifiedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_subject", DbType:="NVarChar(256)")>  _
	Public Property subject() As String
		Get
			Return Me._subject
		End Get
		Set
			If (String.Equals(Me._subject, value) = false) Then
				Me.OnsubjectChanging(value)
				Me.SendPropertyChanging
				Me._subject = value
				Me.SendPropertyChanged("subject")
				Me.OnsubjectChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fromAddress", DbType:="NVarChar(256)")>  _
	Public Property fromAddress() As String
		Get
			Return Me._fromAddress
		End Get
		Set
			If (String.Equals(Me._fromAddress, value) = false) Then
				Me.OnfromAddressChanging(value)
				Me.SendPropertyChanging
				Me._fromAddress = value
				Me.SendPropertyChanged("fromAddress")
				Me.OnfromAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fromName", DbType:="NVarChar(256)")>  _
	Public Property fromName() As String
		Get
			Return Me._fromName
		End Get
		Set
			If (String.Equals(Me._fromName, value) = false) Then
				Me.OnfromNameChanging(value)
				Me.SendPropertyChanging
				Me._fromName = value
				Me.SendPropertyChanged("fromName")
				Me.OnfromNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_description", DbType:="NVarChar(2000)")>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me.OndescriptionChanging(value)
				Me.SendPropertyChanging
				Me._description = value
				Me.SendPropertyChanged("description")
				Me.OndescriptionChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblMessageBcc")>  _
Partial Public Class tblMessageBcc
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _messagebccID As Integer
	
	Private _messageID As Integer
	
	Private _bccAddress As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnmessagebccIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnmessagebccIDChanged()
    End Sub
    Partial Private Sub OnmessageIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnmessageIDChanged()
    End Sub
    Partial Private Sub OnbccAddressChanging(value As String)
    End Sub
    Partial Private Sub OnbccAddressChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_messagebccID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property messagebccID() As Integer
		Get
			Return Me._messagebccID
		End Get
		Set
			If ((Me._messagebccID = value)  _
						= false) Then
				Me.OnmessagebccIDChanging(value)
				Me.SendPropertyChanging
				Me._messagebccID = value
				Me.SendPropertyChanged("messagebccID")
				Me.OnmessagebccIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_messageID", DbType:="Int NOT NULL")>  _
	Public Property messageID() As Integer
		Get
			Return Me._messageID
		End Get
		Set
			If ((Me._messageID = value)  _
						= false) Then
				Me.OnmessageIDChanging(value)
				Me.SendPropertyChanging
				Me._messageID = value
				Me.SendPropertyChanged("messageID")
				Me.OnmessageIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bccAddress", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property bccAddress() As String
		Get
			Return Me._bccAddress
		End Get
		Set
			If (String.Equals(Me._bccAddress, value) = false) Then
				Me.OnbccAddressChanging(value)
				Me.SendPropertyChanging
				Me._bccAddress = value
				Me.SendPropertyChanged("bccAddress")
				Me.OnbccAddressChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblMessageColumn")>  _
Partial Public Class tblMessageColumn
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _messageColumnID As Integer
	
	Private _messageID As Integer
	
	Private _columnTitle As String
	
	Private _columnField As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnmessageColumnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnmessageColumnIDChanged()
    End Sub
    Partial Private Sub OnmessageIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnmessageIDChanged()
    End Sub
    Partial Private Sub OncolumnTitleChanging(value As String)
    End Sub
    Partial Private Sub OncolumnTitleChanged()
    End Sub
    Partial Private Sub OncolumnFieldChanging(value As String)
    End Sub
    Partial Private Sub OncolumnFieldChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_messageColumnID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property messageColumnID() As Integer
		Get
			Return Me._messageColumnID
		End Get
		Set
			If ((Me._messageColumnID = value)  _
						= false) Then
				Me.OnmessageColumnIDChanging(value)
				Me.SendPropertyChanging
				Me._messageColumnID = value
				Me.SendPropertyChanged("messageColumnID")
				Me.OnmessageColumnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_messageID", DbType:="Int NOT NULL")>  _
	Public Property messageID() As Integer
		Get
			Return Me._messageID
		End Get
		Set
			If ((Me._messageID = value)  _
						= false) Then
				Me.OnmessageIDChanging(value)
				Me.SendPropertyChanging
				Me._messageID = value
				Me.SendPropertyChanged("messageID")
				Me.OnmessageIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_columnTitle", DbType:="NVarChar(50)")>  _
	Public Property columnTitle() As String
		Get
			Return Me._columnTitle
		End Get
		Set
			If (String.Equals(Me._columnTitle, value) = false) Then
				Me.OncolumnTitleChanging(value)
				Me.SendPropertyChanging
				Me._columnTitle = value
				Me.SendPropertyChanged("columnTitle")
				Me.OncolumnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_columnField", DbType:="NVarChar(50)")>  _
	Public Property columnField() As String
		Get
			Return Me._columnField
		End Get
		Set
			If (String.Equals(Me._columnField, value) = false) Then
				Me.OncolumnFieldChanging(value)
				Me.SendPropertyChanging
				Me._columnField = value
				Me.SendPropertyChanged("columnField")
				Me.OncolumnFieldChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblPayment")>  _
Partial Public Class tblPayment
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _paymentID As Integer
	
	Private _dateSubmitted As System.Nullable(Of Date)
	
	Private _fromDate As System.Nullable(Of Date)
	
	Private _toDate As System.Nullable(Of Date)
	
	Private _submittedBy As String
	
	Private _payrollName As String
	
	Private _clientID As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnpaymentIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnpaymentIDChanged()
    End Sub
    Partial Private Sub OndateSubmittedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OndateSubmittedChanged()
    End Sub
    Partial Private Sub OnfromDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnfromDateChanged()
    End Sub
    Partial Private Sub OntoDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OntoDateChanged()
    End Sub
    Partial Private Sub OnsubmittedByChanging(value As String)
    End Sub
    Partial Private Sub OnsubmittedByChanged()
    End Sub
    Partial Private Sub OnpayrollNameChanging(value As String)
    End Sub
    Partial Private Sub OnpayrollNameChanged()
    End Sub
    Partial Private Sub OnclientIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnclientIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property paymentID() As Integer
		Get
			Return Me._paymentID
		End Get
		Set
			If ((Me._paymentID = value)  _
						= false) Then
				Me.OnpaymentIDChanging(value)
				Me.SendPropertyChanging
				Me._paymentID = value
				Me.SendPropertyChanged("paymentID")
				Me.OnpaymentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateSubmitted", DbType:="SmallDateTime")>  _
	Public Property dateSubmitted() As System.Nullable(Of Date)
		Get
			Return Me._dateSubmitted
		End Get
		Set
			If (Me._dateSubmitted.Equals(value) = false) Then
				Me.OndateSubmittedChanging(value)
				Me.SendPropertyChanging
				Me._dateSubmitted = value
				Me.SendPropertyChanged("dateSubmitted")
				Me.OndateSubmittedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fromDate", DbType:="SmallDateTime")>  _
	Public Property fromDate() As System.Nullable(Of Date)
		Get
			Return Me._fromDate
		End Get
		Set
			If (Me._fromDate.Equals(value) = false) Then
				Me.OnfromDateChanging(value)
				Me.SendPropertyChanging
				Me._fromDate = value
				Me.SendPropertyChanged("fromDate")
				Me.OnfromDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_toDate", DbType:="SmallDateTime")>  _
	Public Property toDate() As System.Nullable(Of Date)
		Get
			Return Me._toDate
		End Get
		Set
			If (Me._toDate.Equals(value) = false) Then
				Me.OntoDateChanging(value)
				Me.SendPropertyChanging
				Me._toDate = value
				Me.SendPropertyChanged("toDate")
				Me.OntoDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_submittedBy", DbType:="NVarChar(50)")>  _
	Public Property submittedBy() As String
		Get
			Return Me._submittedBy
		End Get
		Set
			If (String.Equals(Me._submittedBy, value) = false) Then
				Me.OnsubmittedByChanging(value)
				Me.SendPropertyChanging
				Me._submittedBy = value
				Me.SendPropertyChanged("submittedBy")
				Me.OnsubmittedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_payrollName", DbType:="NVarChar(50)")>  _
	Public Property payrollName() As String
		Get
			Return Me._payrollName
		End Get
		Set
			If (String.Equals(Me._payrollName, value) = false) Then
				Me.OnpayrollNameChanging(value)
				Me.SendPropertyChanging
				Me._payrollName = value
				Me.SendPropertyChanged("payrollName")
				Me.OnpayrollNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", DbType:="Int")>  _
	Public Property clientID() As System.Nullable(Of Integer)
		Get
			Return Me._clientID
		End Get
		Set
			If (Me._clientID.Equals(value) = false) Then
				Me.OnclientIDChanging(value)
				Me.SendPropertyChanging
				Me._clientID = value
				Me.SendPropertyChanged("clientID")
				Me.OnclientIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblPhoto")>  _
Partial Public Class tblPhoto
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _photoID As Integer
	
	Private _photoTitle As String
	
	Private _fileName As String
	
	Private _photoDescription As String
	
	Private _Image As System.Data.Linq.Binary
	
	Private _ThumbImage As System.Data.Linq.Binary
	
	Private _SmallImage As System.Data.Linq.Binary
	
	Private _LargeImage As System.Data.Linq.Binary
	
	Private _accountID As String
	
	Private _eventID As String
	
	Private _brandID As String
	
	Private _marketID As String
	
	Private _keywords As String
	
	Private _tag As String
	
	Private _dateUploaded As System.Nullable(Of Date)
	
	Private _uploadedBy As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnphotoIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnphotoIDChanged()
    End Sub
    Partial Private Sub OnphotoTitleChanging(value As String)
    End Sub
    Partial Private Sub OnphotoTitleChanged()
    End Sub
    Partial Private Sub OnfileNameChanging(value As String)
    End Sub
    Partial Private Sub OnfileNameChanged()
    End Sub
    Partial Private Sub OnphotoDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnphotoDescriptionChanged()
    End Sub
    Partial Private Sub OnImageChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnImageChanged()
    End Sub
    Partial Private Sub OnThumbImageChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnThumbImageChanged()
    End Sub
    Partial Private Sub OnSmallImageChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnSmallImageChanged()
    End Sub
    Partial Private Sub OnLargeImageChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnLargeImageChanged()
    End Sub
    Partial Private Sub OnaccountIDChanging(value As String)
    End Sub
    Partial Private Sub OnaccountIDChanged()
    End Sub
    Partial Private Sub OneventIDChanging(value As String)
    End Sub
    Partial Private Sub OneventIDChanged()
    End Sub
    Partial Private Sub OnbrandIDChanging(value As String)
    End Sub
    Partial Private Sub OnbrandIDChanged()
    End Sub
    Partial Private Sub OnmarketIDChanging(value As String)
    End Sub
    Partial Private Sub OnmarketIDChanged()
    End Sub
    Partial Private Sub OnkeywordsChanging(value As String)
    End Sub
    Partial Private Sub OnkeywordsChanged()
    End Sub
    Partial Private Sub OntagChanging(value As String)
    End Sub
    Partial Private Sub OntagChanged()
    End Sub
    Partial Private Sub OndateUploadedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OndateUploadedChanged()
    End Sub
    Partial Private Sub OnuploadedByChanging(value As String)
    End Sub
    Partial Private Sub OnuploadedByChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_photoID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property photoID() As Integer
		Get
			Return Me._photoID
		End Get
		Set
			If ((Me._photoID = value)  _
						= false) Then
				Me.OnphotoIDChanging(value)
				Me.SendPropertyChanging
				Me._photoID = value
				Me.SendPropertyChanged("photoID")
				Me.OnphotoIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_photoTitle", DbType:="VarChar(255)")>  _
	Public Property photoTitle() As String
		Get
			Return Me._photoTitle
		End Get
		Set
			If (String.Equals(Me._photoTitle, value) = false) Then
				Me.OnphotoTitleChanging(value)
				Me.SendPropertyChanging
				Me._photoTitle = value
				Me.SendPropertyChanged("photoTitle")
				Me.OnphotoTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fileName", DbType:="VarChar(255)")>  _
	Public Property fileName() As String
		Get
			Return Me._fileName
		End Get
		Set
			If (String.Equals(Me._fileName, value) = false) Then
				Me.OnfileNameChanging(value)
				Me.SendPropertyChanging
				Me._fileName = value
				Me.SendPropertyChanged("fileName")
				Me.OnfileNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_photoDescription", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property photoDescription() As String
		Get
			Return Me._photoDescription
		End Get
		Set
			If (String.Equals(Me._photoDescription, value) = false) Then
				Me.OnphotoDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._photoDescription = value
				Me.SendPropertyChanged("photoDescription")
				Me.OnphotoDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Image", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Image() As System.Data.Linq.Binary
		Get
			Return Me._Image
		End Get
		Set
			If (Object.Equals(Me._Image, value) = false) Then
				Me.OnImageChanging(value)
				Me.SendPropertyChanging
				Me._Image = value
				Me.SendPropertyChanged("Image")
				Me.OnImageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ThumbImage", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ThumbImage() As System.Data.Linq.Binary
		Get
			Return Me._ThumbImage
		End Get
		Set
			If (Object.Equals(Me._ThumbImage, value) = false) Then
				Me.OnThumbImageChanging(value)
				Me.SendPropertyChanging
				Me._ThumbImage = value
				Me.SendPropertyChanged("ThumbImage")
				Me.OnThumbImageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SmallImage", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property SmallImage() As System.Data.Linq.Binary
		Get
			Return Me._SmallImage
		End Get
		Set
			If (Object.Equals(Me._SmallImage, value) = false) Then
				Me.OnSmallImageChanging(value)
				Me.SendPropertyChanging
				Me._SmallImage = value
				Me.SendPropertyChanged("SmallImage")
				Me.OnSmallImageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LargeImage", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property LargeImage() As System.Data.Linq.Binary
		Get
			Return Me._LargeImage
		End Get
		Set
			If (Object.Equals(Me._LargeImage, value) = false) Then
				Me.OnLargeImageChanging(value)
				Me.SendPropertyChanging
				Me._LargeImage = value
				Me.SendPropertyChanged("LargeImage")
				Me.OnLargeImageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="NVarChar(50)")>  _
	Public Property accountID() As String
		Get
			Return Me._accountID
		End Get
		Set
			If (String.Equals(Me._accountID, value) = false) Then
				Me.OnaccountIDChanging(value)
				Me.SendPropertyChanging
				Me._accountID = value
				Me.SendPropertyChanged("accountID")
				Me.OnaccountIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="NVarChar(50)")>  _
	Public Property eventID() As String
		Get
			Return Me._eventID
		End Get
		Set
			If (String.Equals(Me._eventID, value) = false) Then
				Me.OneventIDChanging(value)
				Me.SendPropertyChanging
				Me._eventID = value
				Me.SendPropertyChanged("eventID")
				Me.OneventIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandID", DbType:="NVarChar(50)")>  _
	Public Property brandID() As String
		Get
			Return Me._brandID
		End Get
		Set
			If (String.Equals(Me._brandID, value) = false) Then
				Me.OnbrandIDChanging(value)
				Me.SendPropertyChanging
				Me._brandID = value
				Me.SendPropertyChanged("brandID")
				Me.OnbrandIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="NVarChar(50)")>  _
	Public Property marketID() As String
		Get
			Return Me._marketID
		End Get
		Set
			If (String.Equals(Me._marketID, value) = false) Then
				Me.OnmarketIDChanging(value)
				Me.SendPropertyChanging
				Me._marketID = value
				Me.SendPropertyChanged("marketID")
				Me.OnmarketIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_keywords", DbType:="NVarChar(1000)")>  _
	Public Property keywords() As String
		Get
			Return Me._keywords
		End Get
		Set
			If (String.Equals(Me._keywords, value) = false) Then
				Me.OnkeywordsChanging(value)
				Me.SendPropertyChanging
				Me._keywords = value
				Me.SendPropertyChanged("keywords")
				Me.OnkeywordsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tag", DbType:="NVarChar(500)")>  _
	Public Property tag() As String
		Get
			Return Me._tag
		End Get
		Set
			If (String.Equals(Me._tag, value) = false) Then
				Me.OntagChanging(value)
				Me.SendPropertyChanging
				Me._tag = value
				Me.SendPropertyChanged("tag")
				Me.OntagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateUploaded", DbType:="SmallDateTime")>  _
	Public Property dateUploaded() As System.Nullable(Of Date)
		Get
			Return Me._dateUploaded
		End Get
		Set
			If (Me._dateUploaded.Equals(value) = false) Then
				Me.OndateUploadedChanging(value)
				Me.SendPropertyChanging
				Me._dateUploaded = value
				Me.SendPropertyChanged("dateUploaded")
				Me.OndateUploadedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_uploadedBy", DbType:="VarChar(50)")>  _
	Public Property uploadedBy() As String
		Get
			Return Me._uploadedBy
		End Get
		Set
			If (String.Equals(Me._uploadedBy, value) = false) Then
				Me.OnuploadedByChanging(value)
				Me.SendPropertyChanging
				Me._uploadedBy = value
				Me.SendPropertyChanged("uploadedBy")
				Me.OnuploadedByChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblPhotoBin")>  _
Partial Public Class tblPhotoBin
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _photoBinID As Integer
	
	Private _userID As String
	
	Private _sessionID As String
	
	Private _photoID As Integer
	
	Private _dateCreated As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnphotoBinIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnphotoBinIDChanged()
    End Sub
    Partial Private Sub OnuserIDChanging(value As String)
    End Sub
    Partial Private Sub OnuserIDChanged()
    End Sub
    Partial Private Sub OnsessionIDChanging(value As String)
    End Sub
    Partial Private Sub OnsessionIDChanged()
    End Sub
    Partial Private Sub OnphotoIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnphotoIDChanged()
    End Sub
    Partial Private Sub OndateCreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OndateCreatedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_photoBinID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property photoBinID() As Integer
		Get
			Return Me._photoBinID
		End Get
		Set
			If ((Me._photoBinID = value)  _
						= false) Then
				Me.OnphotoBinIDChanging(value)
				Me.SendPropertyChanging
				Me._photoBinID = value
				Me.SendPropertyChanged("photoBinID")
				Me.OnphotoBinIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me.OnuserIDChanging(value)
				Me.SendPropertyChanging
				Me._userID = value
				Me.SendPropertyChanged("userID")
				Me.OnuserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sessionID", DbType:="NVarChar(50)")>  _
	Public Property sessionID() As String
		Get
			Return Me._sessionID
		End Get
		Set
			If (String.Equals(Me._sessionID, value) = false) Then
				Me.OnsessionIDChanging(value)
				Me.SendPropertyChanging
				Me._sessionID = value
				Me.SendPropertyChanged("sessionID")
				Me.OnsessionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_photoID", DbType:="Int NOT NULL")>  _
	Public Property photoID() As Integer
		Get
			Return Me._photoID
		End Get
		Set
			If ((Me._photoID = value)  _
						= false) Then
				Me.OnphotoIDChanging(value)
				Me.SendPropertyChanging
				Me._photoID = value
				Me.SendPropertyChanged("photoID")
				Me.OnphotoIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateCreated", DbType:="SmallDateTime")>  _
	Public Property dateCreated() As System.Nullable(Of Date)
		Get
			Return Me._dateCreated
		End Get
		Set
			If (Me._dateCreated.Equals(value) = false) Then
				Me.OndateCreatedChanging(value)
				Me.SendPropertyChanging
				Me._dateCreated = value
				Me.SendPropertyChanged("dateCreated")
				Me.OndateCreatedChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblPosKit")>  _
Partial Public Class tblPosKit
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _kitID As Integer
	
	Private _eventID As System.Nullable(Of Integer)
	
	Private _status As String
	
	Private _shippedDate As System.Nullable(Of Date)
	
	Private _shippedBy As String
	
	Private _shippedType As String
	
	Private _trackingNumber As String
	
	Private _shippingAddress As String
	
	Private _shippingAddress2 As String
	
	Private _shippingCity As String
	
	Private _shippingState As String
	
	Private _shippingZip As String
	
	Private _shippingAttName As String
	
	Private _shipTo As String
	
	Private _notes As String
	
	Private _createdBy As String
	
	Private _createdDate As System.Nullable(Of Date)
	
	Private _modifiedBy As String
	
	Private _modifiedDate As System.Nullable(Of Date)
	
	Private _shippingVendorID As System.Nullable(Of Integer)
	
	Private _shippingMethodID As System.Nullable(Of Integer)
	
	Private _shippingCost As System.Nullable(Of Decimal)
	
	Private _handlingFee As System.Nullable(Of Decimal)
	
	Private _returnTrackingNumber As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnkitIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnkitIDChanged()
    End Sub
    Partial Private Sub OneventIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OneventIDChanged()
    End Sub
    Partial Private Sub OnstatusChanging(value As String)
    End Sub
    Partial Private Sub OnstatusChanged()
    End Sub
    Partial Private Sub OnshippedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnshippedDateChanged()
    End Sub
    Partial Private Sub OnshippedByChanging(value As String)
    End Sub
    Partial Private Sub OnshippedByChanged()
    End Sub
    Partial Private Sub OnshippedTypeChanging(value As String)
    End Sub
    Partial Private Sub OnshippedTypeChanged()
    End Sub
    Partial Private Sub OntrackingNumberChanging(value As String)
    End Sub
    Partial Private Sub OntrackingNumberChanged()
    End Sub
    Partial Private Sub OnshippingAddressChanging(value As String)
    End Sub
    Partial Private Sub OnshippingAddressChanged()
    End Sub
    Partial Private Sub OnshippingAddress2Changing(value As String)
    End Sub
    Partial Private Sub OnshippingAddress2Changed()
    End Sub
    Partial Private Sub OnshippingCityChanging(value As String)
    End Sub
    Partial Private Sub OnshippingCityChanged()
    End Sub
    Partial Private Sub OnshippingStateChanging(value As String)
    End Sub
    Partial Private Sub OnshippingStateChanged()
    End Sub
    Partial Private Sub OnshippingZipChanging(value As String)
    End Sub
    Partial Private Sub OnshippingZipChanged()
    End Sub
    Partial Private Sub OnshippingAttNameChanging(value As String)
    End Sub
    Partial Private Sub OnshippingAttNameChanged()
    End Sub
    Partial Private Sub OnshipToChanging(value As String)
    End Sub
    Partial Private Sub OnshipToChanged()
    End Sub
    Partial Private Sub OnnotesChanging(value As String)
    End Sub
    Partial Private Sub OnnotesChanged()
    End Sub
    Partial Private Sub OncreatedByChanging(value As String)
    End Sub
    Partial Private Sub OncreatedByChanged()
    End Sub
    Partial Private Sub OncreatedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OncreatedDateChanged()
    End Sub
    Partial Private Sub OnmodifiedByChanging(value As String)
    End Sub
    Partial Private Sub OnmodifiedByChanged()
    End Sub
    Partial Private Sub OnmodifiedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnmodifiedDateChanged()
    End Sub
    Partial Private Sub OnshippingVendorIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnshippingVendorIDChanged()
    End Sub
    Partial Private Sub OnshippingMethodIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnshippingMethodIDChanged()
    End Sub
    Partial Private Sub OnshippingCostChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnshippingCostChanged()
    End Sub
    Partial Private Sub OnhandlingFeeChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnhandlingFeeChanged()
    End Sub
    Partial Private Sub OnreturnTrackingNumberChanging(value As String)
    End Sub
    Partial Private Sub OnreturnTrackingNumberChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_kitID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property kitID() As Integer
		Get
			Return Me._kitID
		End Get
		Set
			If ((Me._kitID = value)  _
						= false) Then
				Me.OnkitIDChanging(value)
				Me.SendPropertyChanging
				Me._kitID = value
				Me.SendPropertyChanged("kitID")
				Me.OnkitIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int")>  _
	Public Property eventID() As System.Nullable(Of Integer)
		Get
			Return Me._eventID
		End Get
		Set
			If (Me._eventID.Equals(value) = false) Then
				Me.OneventIDChanging(value)
				Me.SendPropertyChanging
				Me._eventID = value
				Me.SendPropertyChanged("eventID")
				Me.OneventIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", DbType:="NVarChar(50)")>  _
	Public Property status() As String
		Get
			Return Me._status
		End Get
		Set
			If (String.Equals(Me._status, value) = false) Then
				Me.OnstatusChanging(value)
				Me.SendPropertyChanging
				Me._status = value
				Me.SendPropertyChanged("status")
				Me.OnstatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_shippedDate", DbType:="SmallDateTime")>  _
	Public Property shippedDate() As System.Nullable(Of Date)
		Get
			Return Me._shippedDate
		End Get
		Set
			If (Me._shippedDate.Equals(value) = false) Then
				Me.OnshippedDateChanging(value)
				Me.SendPropertyChanging
				Me._shippedDate = value
				Me.SendPropertyChanged("shippedDate")
				Me.OnshippedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_shippedBy", DbType:="NVarChar(50)")>  _
	Public Property shippedBy() As String
		Get
			Return Me._shippedBy
		End Get
		Set
			If (String.Equals(Me._shippedBy, value) = false) Then
				Me.OnshippedByChanging(value)
				Me.SendPropertyChanging
				Me._shippedBy = value
				Me.SendPropertyChanged("shippedBy")
				Me.OnshippedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_shippedType", DbType:="NVarChar(50)")>  _
	Public Property shippedType() As String
		Get
			Return Me._shippedType
		End Get
		Set
			If (String.Equals(Me._shippedType, value) = false) Then
				Me.OnshippedTypeChanging(value)
				Me.SendPropertyChanging
				Me._shippedType = value
				Me.SendPropertyChanged("shippedType")
				Me.OnshippedTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_trackingNumber", DbType:="NVarChar(150)")>  _
	Public Property trackingNumber() As String
		Get
			Return Me._trackingNumber
		End Get
		Set
			If (String.Equals(Me._trackingNumber, value) = false) Then
				Me.OntrackingNumberChanging(value)
				Me.SendPropertyChanging
				Me._trackingNumber = value
				Me.SendPropertyChanged("trackingNumber")
				Me.OntrackingNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_shippingAddress", DbType:="NVarChar(50)")>  _
	Public Property shippingAddress() As String
		Get
			Return Me._shippingAddress
		End Get
		Set
			If (String.Equals(Me._shippingAddress, value) = false) Then
				Me.OnshippingAddressChanging(value)
				Me.SendPropertyChanging
				Me._shippingAddress = value
				Me.SendPropertyChanged("shippingAddress")
				Me.OnshippingAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_shippingAddress2", DbType:="NVarChar(50)")>  _
	Public Property shippingAddress2() As String
		Get
			Return Me._shippingAddress2
		End Get
		Set
			If (String.Equals(Me._shippingAddress2, value) = false) Then
				Me.OnshippingAddress2Changing(value)
				Me.SendPropertyChanging
				Me._shippingAddress2 = value
				Me.SendPropertyChanged("shippingAddress2")
				Me.OnshippingAddress2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_shippingCity", DbType:="NVarChar(50)")>  _
	Public Property shippingCity() As String
		Get
			Return Me._shippingCity
		End Get
		Set
			If (String.Equals(Me._shippingCity, value) = false) Then
				Me.OnshippingCityChanging(value)
				Me.SendPropertyChanging
				Me._shippingCity = value
				Me.SendPropertyChanged("shippingCity")
				Me.OnshippingCityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_shippingState", DbType:="NVarChar(50)")>  _
	Public Property shippingState() As String
		Get
			Return Me._shippingState
		End Get
		Set
			If (String.Equals(Me._shippingState, value) = false) Then
				Me.OnshippingStateChanging(value)
				Me.SendPropertyChanging
				Me._shippingState = value
				Me.SendPropertyChanged("shippingState")
				Me.OnshippingStateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_shippingZip", DbType:="VarChar(50)")>  _
	Public Property shippingZip() As String
		Get
			Return Me._shippingZip
		End Get
		Set
			If (String.Equals(Me._shippingZip, value) = false) Then
				Me.OnshippingZipChanging(value)
				Me.SendPropertyChanging
				Me._shippingZip = value
				Me.SendPropertyChanged("shippingZip")
				Me.OnshippingZipChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_shippingAttName", DbType:="NVarChar(50)")>  _
	Public Property shippingAttName() As String
		Get
			Return Me._shippingAttName
		End Get
		Set
			If (String.Equals(Me._shippingAttName, value) = false) Then
				Me.OnshippingAttNameChanging(value)
				Me.SendPropertyChanging
				Me._shippingAttName = value
				Me.SendPropertyChanged("shippingAttName")
				Me.OnshippingAttNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_shipTo", DbType:="NVarChar(50)")>  _
	Public Property shipTo() As String
		Get
			Return Me._shipTo
		End Get
		Set
			If (String.Equals(Me._shipTo, value) = false) Then
				Me.OnshipToChanging(value)
				Me.SendPropertyChanging
				Me._shipTo = value
				Me.SendPropertyChanged("shipTo")
				Me.OnshipToChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_notes", DbType:="NVarChar(MAX)")>  _
	Public Property notes() As String
		Get
			Return Me._notes
		End Get
		Set
			If (String.Equals(Me._notes, value) = false) Then
				Me.OnnotesChanging(value)
				Me.SendPropertyChanging
				Me._notes = value
				Me.SendPropertyChanged("notes")
				Me.OnnotesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_createdBy", DbType:="NVarChar(50)")>  _
	Public Property createdBy() As String
		Get
			Return Me._createdBy
		End Get
		Set
			If (String.Equals(Me._createdBy, value) = false) Then
				Me.OncreatedByChanging(value)
				Me.SendPropertyChanging
				Me._createdBy = value
				Me.SendPropertyChanged("createdBy")
				Me.OncreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_createdDate", DbType:="SmallDateTime")>  _
	Public Property createdDate() As System.Nullable(Of Date)
		Get
			Return Me._createdDate
		End Get
		Set
			If (Me._createdDate.Equals(value) = false) Then
				Me.OncreatedDateChanging(value)
				Me.SendPropertyChanging
				Me._createdDate = value
				Me.SendPropertyChanged("createdDate")
				Me.OncreatedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_modifiedBy", DbType:="NVarChar(50)")>  _
	Public Property modifiedBy() As String
		Get
			Return Me._modifiedBy
		End Get
		Set
			If (String.Equals(Me._modifiedBy, value) = false) Then
				Me.OnmodifiedByChanging(value)
				Me.SendPropertyChanging
				Me._modifiedBy = value
				Me.SendPropertyChanged("modifiedBy")
				Me.OnmodifiedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_modifiedDate", DbType:="SmallDateTime")>  _
	Public Property modifiedDate() As System.Nullable(Of Date)
		Get
			Return Me._modifiedDate
		End Get
		Set
			If (Me._modifiedDate.Equals(value) = false) Then
				Me.OnmodifiedDateChanging(value)
				Me.SendPropertyChanging
				Me._modifiedDate = value
				Me.SendPropertyChanged("modifiedDate")
				Me.OnmodifiedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_shippingVendorID", DbType:="Int")>  _
	Public Property shippingVendorID() As System.Nullable(Of Integer)
		Get
			Return Me._shippingVendorID
		End Get
		Set
			If (Me._shippingVendorID.Equals(value) = false) Then
				Me.OnshippingVendorIDChanging(value)
				Me.SendPropertyChanging
				Me._shippingVendorID = value
				Me.SendPropertyChanged("shippingVendorID")
				Me.OnshippingVendorIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_shippingMethodID", DbType:="Int")>  _
	Public Property shippingMethodID() As System.Nullable(Of Integer)
		Get
			Return Me._shippingMethodID
		End Get
		Set
			If (Me._shippingMethodID.Equals(value) = false) Then
				Me.OnshippingMethodIDChanging(value)
				Me.SendPropertyChanging
				Me._shippingMethodID = value
				Me.SendPropertyChanged("shippingMethodID")
				Me.OnshippingMethodIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_shippingCost", DbType:="Decimal(6,2)")>  _
	Public Property shippingCost() As System.Nullable(Of Decimal)
		Get
			Return Me._shippingCost
		End Get
		Set
			If (Me._shippingCost.Equals(value) = false) Then
				Me.OnshippingCostChanging(value)
				Me.SendPropertyChanging
				Me._shippingCost = value
				Me.SendPropertyChanged("shippingCost")
				Me.OnshippingCostChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_handlingFee", DbType:="Decimal(6,2)")>  _
	Public Property handlingFee() As System.Nullable(Of Decimal)
		Get
			Return Me._handlingFee
		End Get
		Set
			If (Me._handlingFee.Equals(value) = false) Then
				Me.OnhandlingFeeChanging(value)
				Me.SendPropertyChanging
				Me._handlingFee = value
				Me.SendPropertyChanged("handlingFee")
				Me.OnhandlingFeeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_returnTrackingNumber", DbType:="NVarChar(150)")>  _
	Public Property returnTrackingNumber() As String
		Get
			Return Me._returnTrackingNumber
		End Get
		Set
			If (String.Equals(Me._returnTrackingNumber, value) = false) Then
				Me.OnreturnTrackingNumberChanging(value)
				Me.SendPropertyChanging
				Me._returnTrackingNumber = value
				Me.SendPropertyChanged("returnTrackingNumber")
				Me.OnreturnTrackingNumberChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblPosKitItem")>  _
Partial Public Class tblPosKitItem
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PosKitItemID As Integer
	
	Private _kitID As System.Nullable(Of Integer)
	
	Private _itemID As System.Nullable(Of Integer)
	
	Private _itemName As String
	
	Private _qty As System.Nullable(Of Integer)
	
	Private _price As System.Nullable(Of Decimal)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPosKitItemIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnPosKitItemIDChanged()
    End Sub
    Partial Private Sub OnkitIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnkitIDChanged()
    End Sub
    Partial Private Sub OnitemIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnitemIDChanged()
    End Sub
    Partial Private Sub OnitemNameChanging(value As String)
    End Sub
    Partial Private Sub OnitemNameChanged()
    End Sub
    Partial Private Sub OnqtyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnqtyChanged()
    End Sub
    Partial Private Sub OnpriceChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnpriceChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PosKitItemID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property PosKitItemID() As Integer
		Get
			Return Me._PosKitItemID
		End Get
		Set
			If ((Me._PosKitItemID = value)  _
						= false) Then
				Me.OnPosKitItemIDChanging(value)
				Me.SendPropertyChanging
				Me._PosKitItemID = value
				Me.SendPropertyChanged("PosKitItemID")
				Me.OnPosKitItemIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_kitID", DbType:="Int")>  _
	Public Property kitID() As System.Nullable(Of Integer)
		Get
			Return Me._kitID
		End Get
		Set
			If (Me._kitID.Equals(value) = false) Then
				Me.OnkitIDChanging(value)
				Me.SendPropertyChanging
				Me._kitID = value
				Me.SendPropertyChanged("kitID")
				Me.OnkitIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_itemID", DbType:="Int")>  _
	Public Property itemID() As System.Nullable(Of Integer)
		Get
			Return Me._itemID
		End Get
		Set
			If (Me._itemID.Equals(value) = false) Then
				Me.OnitemIDChanging(value)
				Me.SendPropertyChanging
				Me._itemID = value
				Me.SendPropertyChanged("itemID")
				Me.OnitemIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_itemName", DbType:="NVarChar(150)")>  _
	Public Property itemName() As String
		Get
			Return Me._itemName
		End Get
		Set
			If (String.Equals(Me._itemName, value) = false) Then
				Me.OnitemNameChanging(value)
				Me.SendPropertyChanging
				Me._itemName = value
				Me.SendPropertyChanged("itemName")
				Me.OnitemNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_qty", DbType:="Int")>  _
	Public Property qty() As System.Nullable(Of Integer)
		Get
			Return Me._qty
		End Get
		Set
			If (Me._qty.Equals(value) = false) Then
				Me.OnqtyChanging(value)
				Me.SendPropertyChanging
				Me._qty = value
				Me.SendPropertyChanged("qty")
				Me.OnqtyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_price", DbType:="Decimal(6,2)")>  _
	Public Property price() As System.Nullable(Of Decimal)
		Get
			Return Me._price
		End Get
		Set
			If (Me._price.Equals(value) = false) Then
				Me.OnpriceChanging(value)
				Me.SendPropertyChanging
				Me._price = value
				Me.SendPropertyChanged("price")
				Me.OnpriceChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblPosShippingCost")>  _
Partial Public Class tblPosShippingCost
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _posShippingCostID As Integer
	
	Private _kitID As System.Nullable(Of Integer)
	
	Private _category As String
	
	Private _description As String
	
	Private _cost As System.Nullable(Of Decimal)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnposShippingCostIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnposShippingCostIDChanged()
    End Sub
    Partial Private Sub OnkitIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnkitIDChanged()
    End Sub
    Partial Private Sub OncategoryChanging(value As String)
    End Sub
    Partial Private Sub OncategoryChanged()
    End Sub
    Partial Private Sub OndescriptionChanging(value As String)
    End Sub
    Partial Private Sub OndescriptionChanged()
    End Sub
    Partial Private Sub OncostChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OncostChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_posShippingCostID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property posShippingCostID() As Integer
		Get
			Return Me._posShippingCostID
		End Get
		Set
			If ((Me._posShippingCostID = value)  _
						= false) Then
				Me.OnposShippingCostIDChanging(value)
				Me.SendPropertyChanging
				Me._posShippingCostID = value
				Me.SendPropertyChanged("posShippingCostID")
				Me.OnposShippingCostIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_kitID", DbType:="Int")>  _
	Public Property kitID() As System.Nullable(Of Integer)
		Get
			Return Me._kitID
		End Get
		Set
			If (Me._kitID.Equals(value) = false) Then
				Me.OnkitIDChanging(value)
				Me.SendPropertyChanging
				Me._kitID = value
				Me.SendPropertyChanged("kitID")
				Me.OnkitIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_category", DbType:="NVarChar(50)")>  _
	Public Property category() As String
		Get
			Return Me._category
		End Get
		Set
			If (String.Equals(Me._category, value) = false) Then
				Me.OncategoryChanging(value)
				Me.SendPropertyChanging
				Me._category = value
				Me.SendPropertyChanged("category")
				Me.OncategoryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_description", DbType:="NVarChar(50)")>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me.OndescriptionChanging(value)
				Me.SendPropertyChanging
				Me._description = value
				Me.SendPropertyChanged("description")
				Me.OndescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cost", DbType:="Decimal(6,2)")>  _
	Public Property cost() As System.Nullable(Of Decimal)
		Get
			Return Me._cost
		End Get
		Set
			If (Me._cost.Equals(value) = false) Then
				Me.OncostChanging(value)
				Me.SendPropertyChanging
				Me._cost = value
				Me.SendPropertyChanged("cost")
				Me.OncostChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblProfile")>  _
Partial Public Class tblProfile
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _profileID As Integer
	
	Private _userID As String
	
	Private _IsStaff As System.Nullable(Of Boolean)
	
	Private _staffID As System.Nullable(Of Integer)
	
	Private _firstName As String
	
	Private _lastName As String
	
	Private _nickName As String
	
	Private _profilePhoto As System.Data.Linq.Binary
	
	Private _lastLoginDate As System.Nullable(Of Date)
	
	Private _lastActivityDate As System.Nullable(Of Date)
	
	Private _IsOnline As System.Nullable(Of Boolean)
	
	Private _timeZone As String
	
	Private _enableAllMarkets As System.Nullable(Of Boolean)
	
	Private _enableAllClients As System.Nullable(Of Boolean)
	
	Private _enableAllSuppliers As System.Nullable(Of Boolean)
	
	Private _role As String
	
	Private _teamID As System.Nullable(Of Integer)
	
	Private _hasLoggedIn As System.Nullable(Of Boolean)
	
	Private _userGUID As String
	
	Private _userName As String
	
	Private _currentClientID As System.Nullable(Of Integer)
	
	Private _status As System.Nullable(Of Integer)
	
	Private _modifiedBy As String
	
	Private _modifiedDate As System.Nullable(Of Date)
	
	Private _lastPageLanding As String
	
	Private _IsMobileDevice As System.Nullable(Of Boolean)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnprofileIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnprofileIDChanged()
    End Sub
    Partial Private Sub OnuserIDChanging(value As String)
    End Sub
    Partial Private Sub OnuserIDChanged()
    End Sub
    Partial Private Sub OnIsStaffChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsStaffChanged()
    End Sub
    Partial Private Sub OnstaffIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnstaffIDChanged()
    End Sub
    Partial Private Sub OnfirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnfirstNameChanged()
    End Sub
    Partial Private Sub OnlastNameChanging(value As String)
    End Sub
    Partial Private Sub OnlastNameChanged()
    End Sub
    Partial Private Sub OnnickNameChanging(value As String)
    End Sub
    Partial Private Sub OnnickNameChanged()
    End Sub
    Partial Private Sub OnprofilePhotoChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnprofilePhotoChanged()
    End Sub
    Partial Private Sub OnlastLoginDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnlastLoginDateChanged()
    End Sub
    Partial Private Sub OnlastActivityDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnlastActivityDateChanged()
    End Sub
    Partial Private Sub OnIsOnlineChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsOnlineChanged()
    End Sub
    Partial Private Sub OntimeZoneChanging(value As String)
    End Sub
    Partial Private Sub OntimeZoneChanged()
    End Sub
    Partial Private Sub OnenableAllMarketsChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnenableAllMarketsChanged()
    End Sub
    Partial Private Sub OnenableAllClientsChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnenableAllClientsChanged()
    End Sub
    Partial Private Sub OnenableAllSuppliersChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnenableAllSuppliersChanged()
    End Sub
    Partial Private Sub OnroleChanging(value As String)
    End Sub
    Partial Private Sub OnroleChanged()
    End Sub
    Partial Private Sub OnteamIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnteamIDChanged()
    End Sub
    Partial Private Sub OnhasLoggedInChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnhasLoggedInChanged()
    End Sub
    Partial Private Sub OnuserGUIDChanging(value As String)
    End Sub
    Partial Private Sub OnuserGUIDChanged()
    End Sub
    Partial Private Sub OnuserNameChanging(value As String)
    End Sub
    Partial Private Sub OnuserNameChanged()
    End Sub
    Partial Private Sub OncurrentClientIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OncurrentClientIDChanged()
    End Sub
    Partial Private Sub OnstatusChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnstatusChanged()
    End Sub
    Partial Private Sub OnmodifiedByChanging(value As String)
    End Sub
    Partial Private Sub OnmodifiedByChanged()
    End Sub
    Partial Private Sub OnmodifiedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnmodifiedDateChanged()
    End Sub
    Partial Private Sub OnlastPageLandingChanging(value As String)
    End Sub
    Partial Private Sub OnlastPageLandingChanged()
    End Sub
    Partial Private Sub OnIsMobileDeviceChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsMobileDeviceChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_profileID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property profileID() As Integer
		Get
			Return Me._profileID
		End Get
		Set
			If ((Me._profileID = value)  _
						= false) Then
				Me.OnprofileIDChanging(value)
				Me.SendPropertyChanging
				Me._profileID = value
				Me.SendPropertyChanged("profileID")
				Me.OnprofileIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me.OnuserIDChanging(value)
				Me.SendPropertyChanging
				Me._userID = value
				Me.SendPropertyChanged("userID")
				Me.OnuserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsStaff", DbType:="Bit")>  _
	Public Property IsStaff() As System.Nullable(Of Boolean)
		Get
			Return Me._IsStaff
		End Get
		Set
			If (Me._IsStaff.Equals(value) = false) Then
				Me.OnIsStaffChanging(value)
				Me.SendPropertyChanging
				Me._IsStaff = value
				Me.SendPropertyChanged("IsStaff")
				Me.OnIsStaffChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_staffID", DbType:="Int")>  _
	Public Property staffID() As System.Nullable(Of Integer)
		Get
			Return Me._staffID
		End Get
		Set
			If (Me._staffID.Equals(value) = false) Then
				Me.OnstaffIDChanging(value)
				Me.SendPropertyChanging
				Me._staffID = value
				Me.SendPropertyChanged("staffID")
				Me.OnstaffIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_firstName", DbType:="NVarChar(50)")>  _
	Public Property firstName() As String
		Get
			Return Me._firstName
		End Get
		Set
			If (String.Equals(Me._firstName, value) = false) Then
				Me.OnfirstNameChanging(value)
				Me.SendPropertyChanging
				Me._firstName = value
				Me.SendPropertyChanged("firstName")
				Me.OnfirstNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lastName", DbType:="NVarChar(50)")>  _
	Public Property lastName() As String
		Get
			Return Me._lastName
		End Get
		Set
			If (String.Equals(Me._lastName, value) = false) Then
				Me.OnlastNameChanging(value)
				Me.SendPropertyChanging
				Me._lastName = value
				Me.SendPropertyChanged("lastName")
				Me.OnlastNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nickName", DbType:="NVarChar(50)")>  _
	Public Property nickName() As String
		Get
			Return Me._nickName
		End Get
		Set
			If (String.Equals(Me._nickName, value) = false) Then
				Me.OnnickNameChanging(value)
				Me.SendPropertyChanging
				Me._nickName = value
				Me.SendPropertyChanged("nickName")
				Me.OnnickNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_profilePhoto", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property profilePhoto() As System.Data.Linq.Binary
		Get
			Return Me._profilePhoto
		End Get
		Set
			If (Object.Equals(Me._profilePhoto, value) = false) Then
				Me.OnprofilePhotoChanging(value)
				Me.SendPropertyChanging
				Me._profilePhoto = value
				Me.SendPropertyChanged("profilePhoto")
				Me.OnprofilePhotoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lastLoginDate", DbType:="SmallDateTime")>  _
	Public Property lastLoginDate() As System.Nullable(Of Date)
		Get
			Return Me._lastLoginDate
		End Get
		Set
			If (Me._lastLoginDate.Equals(value) = false) Then
				Me.OnlastLoginDateChanging(value)
				Me.SendPropertyChanging
				Me._lastLoginDate = value
				Me.SendPropertyChanged("lastLoginDate")
				Me.OnlastLoginDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lastActivityDate", DbType:="SmallDateTime")>  _
	Public Property lastActivityDate() As System.Nullable(Of Date)
		Get
			Return Me._lastActivityDate
		End Get
		Set
			If (Me._lastActivityDate.Equals(value) = false) Then
				Me.OnlastActivityDateChanging(value)
				Me.SendPropertyChanging
				Me._lastActivityDate = value
				Me.SendPropertyChanged("lastActivityDate")
				Me.OnlastActivityDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsOnline", DbType:="Bit")>  _
	Public Property IsOnline() As System.Nullable(Of Boolean)
		Get
			Return Me._IsOnline
		End Get
		Set
			If (Me._IsOnline.Equals(value) = false) Then
				Me.OnIsOnlineChanging(value)
				Me.SendPropertyChanging
				Me._IsOnline = value
				Me.SendPropertyChanged("IsOnline")
				Me.OnIsOnlineChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_timeZone", DbType:="NVarChar(50)")>  _
	Public Property timeZone() As String
		Get
			Return Me._timeZone
		End Get
		Set
			If (String.Equals(Me._timeZone, value) = false) Then
				Me.OntimeZoneChanging(value)
				Me.SendPropertyChanging
				Me._timeZone = value
				Me.SendPropertyChanged("timeZone")
				Me.OntimeZoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_enableAllMarkets", DbType:="Bit")>  _
	Public Property enableAllMarkets() As System.Nullable(Of Boolean)
		Get
			Return Me._enableAllMarkets
		End Get
		Set
			If (Me._enableAllMarkets.Equals(value) = false) Then
				Me.OnenableAllMarketsChanging(value)
				Me.SendPropertyChanging
				Me._enableAllMarkets = value
				Me.SendPropertyChanged("enableAllMarkets")
				Me.OnenableAllMarketsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_enableAllClients", DbType:="Bit")>  _
	Public Property enableAllClients() As System.Nullable(Of Boolean)
		Get
			Return Me._enableAllClients
		End Get
		Set
			If (Me._enableAllClients.Equals(value) = false) Then
				Me.OnenableAllClientsChanging(value)
				Me.SendPropertyChanging
				Me._enableAllClients = value
				Me.SendPropertyChanged("enableAllClients")
				Me.OnenableAllClientsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_enableAllSuppliers", DbType:="Bit")>  _
	Public Property enableAllSuppliers() As System.Nullable(Of Boolean)
		Get
			Return Me._enableAllSuppliers
		End Get
		Set
			If (Me._enableAllSuppliers.Equals(value) = false) Then
				Me.OnenableAllSuppliersChanging(value)
				Me.SendPropertyChanging
				Me._enableAllSuppliers = value
				Me.SendPropertyChanged("enableAllSuppliers")
				Me.OnenableAllSuppliersChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_role", DbType:="NVarChar(50)")>  _
	Public Property role() As String
		Get
			Return Me._role
		End Get
		Set
			If (String.Equals(Me._role, value) = false) Then
				Me.OnroleChanging(value)
				Me.SendPropertyChanging
				Me._role = value
				Me.SendPropertyChanged("role")
				Me.OnroleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_teamID", DbType:="Int")>  _
	Public Property teamID() As System.Nullable(Of Integer)
		Get
			Return Me._teamID
		End Get
		Set
			If (Me._teamID.Equals(value) = false) Then
				Me.OnteamIDChanging(value)
				Me.SendPropertyChanging
				Me._teamID = value
				Me.SendPropertyChanged("teamID")
				Me.OnteamIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hasLoggedIn", DbType:="Bit")>  _
	Public Property hasLoggedIn() As System.Nullable(Of Boolean)
		Get
			Return Me._hasLoggedIn
		End Get
		Set
			If (Me._hasLoggedIn.Equals(value) = false) Then
				Me.OnhasLoggedInChanging(value)
				Me.SendPropertyChanging
				Me._hasLoggedIn = value
				Me.SendPropertyChanged("hasLoggedIn")
				Me.OnhasLoggedInChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userGUID", DbType:="NVarChar(50)")>  _
	Public Property userGUID() As String
		Get
			Return Me._userGUID
		End Get
		Set
			If (String.Equals(Me._userGUID, value) = false) Then
				Me.OnuserGUIDChanging(value)
				Me.SendPropertyChanging
				Me._userGUID = value
				Me.SendPropertyChanged("userGUID")
				Me.OnuserGUIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userName", DbType:="NVarChar(50)")>  _
	Public Property userName() As String
		Get
			Return Me._userName
		End Get
		Set
			If (String.Equals(Me._userName, value) = false) Then
				Me.OnuserNameChanging(value)
				Me.SendPropertyChanging
				Me._userName = value
				Me.SendPropertyChanged("userName")
				Me.OnuserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_currentClientID", DbType:="Int")>  _
	Public Property currentClientID() As System.Nullable(Of Integer)
		Get
			Return Me._currentClientID
		End Get
		Set
			If (Me._currentClientID.Equals(value) = false) Then
				Me.OncurrentClientIDChanging(value)
				Me.SendPropertyChanging
				Me._currentClientID = value
				Me.SendPropertyChanged("currentClientID")
				Me.OncurrentClientIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", DbType:="Int")>  _
	Public Property status() As System.Nullable(Of Integer)
		Get
			Return Me._status
		End Get
		Set
			If (Me._status.Equals(value) = false) Then
				Me.OnstatusChanging(value)
				Me.SendPropertyChanging
				Me._status = value
				Me.SendPropertyChanged("status")
				Me.OnstatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_modifiedBy", DbType:="NVarChar(50)")>  _
	Public Property modifiedBy() As String
		Get
			Return Me._modifiedBy
		End Get
		Set
			If (String.Equals(Me._modifiedBy, value) = false) Then
				Me.OnmodifiedByChanging(value)
				Me.SendPropertyChanging
				Me._modifiedBy = value
				Me.SendPropertyChanged("modifiedBy")
				Me.OnmodifiedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_modifiedDate", DbType:="SmallDateTime")>  _
	Public Property modifiedDate() As System.Nullable(Of Date)
		Get
			Return Me._modifiedDate
		End Get
		Set
			If (Me._modifiedDate.Equals(value) = false) Then
				Me.OnmodifiedDateChanging(value)
				Me.SendPropertyChanging
				Me._modifiedDate = value
				Me.SendPropertyChanged("modifiedDate")
				Me.OnmodifiedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lastPageLanding", DbType:="NVarChar(256)")>  _
	Public Property lastPageLanding() As String
		Get
			Return Me._lastPageLanding
		End Get
		Set
			If (String.Equals(Me._lastPageLanding, value) = false) Then
				Me.OnlastPageLandingChanging(value)
				Me.SendPropertyChanging
				Me._lastPageLanding = value
				Me.SendPropertyChanged("lastPageLanding")
				Me.OnlastPageLandingChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsMobileDevice", DbType:="Bit")>  _
	Public Property IsMobileDevice() As System.Nullable(Of Boolean)
		Get
			Return Me._IsMobileDevice
		End Get
		Set
			If (Me._IsMobileDevice.Equals(value) = false) Then
				Me.OnIsMobileDeviceChanging(value)
				Me.SendPropertyChanging
				Me._IsMobileDevice = value
				Me.SendPropertyChanged("IsMobileDevice")
				Me.OnIsMobileDeviceChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblPurchaseOrder")>  _
Partial Public Class tblPurchaseOrder
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _purchaseOrderID As Integer
	
	Private _purchaseOrderNumber As String
	
	Private _supplierID As Integer
	
	Private _poAmount As System.Nullable(Of Decimal)
	
	Private _poBalance As System.Nullable(Of Decimal)
	
	Private _requestorName As String
	
	Private _requestorEmail As String
	
	Private _dateIssued As System.Nullable(Of Date)
	
	Private _createdDate As System.Nullable(Of Date)
	
	Private _createdBy As String
	
	Private _modifiedDate As System.Nullable(Of Date)
	
	Private _modifiedBy As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnpurchaseOrderIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnpurchaseOrderIDChanged()
    End Sub
    Partial Private Sub OnpurchaseOrderNumberChanging(value As String)
    End Sub
    Partial Private Sub OnpurchaseOrderNumberChanged()
    End Sub
    Partial Private Sub OnsupplierIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnsupplierIDChanged()
    End Sub
    Partial Private Sub OnpoAmountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnpoAmountChanged()
    End Sub
    Partial Private Sub OnpoBalanceChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnpoBalanceChanged()
    End Sub
    Partial Private Sub OnrequestorNameChanging(value As String)
    End Sub
    Partial Private Sub OnrequestorNameChanged()
    End Sub
    Partial Private Sub OnrequestorEmailChanging(value As String)
    End Sub
    Partial Private Sub OnrequestorEmailChanged()
    End Sub
    Partial Private Sub OndateIssuedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OndateIssuedChanged()
    End Sub
    Partial Private Sub OncreatedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OncreatedDateChanged()
    End Sub
    Partial Private Sub OncreatedByChanging(value As String)
    End Sub
    Partial Private Sub OncreatedByChanged()
    End Sub
    Partial Private Sub OnmodifiedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnmodifiedDateChanged()
    End Sub
    Partial Private Sub OnmodifiedByChanging(value As String)
    End Sub
    Partial Private Sub OnmodifiedByChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_purchaseOrderID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property purchaseOrderID() As Integer
		Get
			Return Me._purchaseOrderID
		End Get
		Set
			If ((Me._purchaseOrderID = value)  _
						= false) Then
				Me.OnpurchaseOrderIDChanging(value)
				Me.SendPropertyChanging
				Me._purchaseOrderID = value
				Me.SendPropertyChanged("purchaseOrderID")
				Me.OnpurchaseOrderIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_purchaseOrderNumber", DbType:="NVarChar(20)")>  _
	Public Property purchaseOrderNumber() As String
		Get
			Return Me._purchaseOrderNumber
		End Get
		Set
			If (String.Equals(Me._purchaseOrderNumber, value) = false) Then
				Me.OnpurchaseOrderNumberChanging(value)
				Me.SendPropertyChanging
				Me._purchaseOrderNumber = value
				Me.SendPropertyChanged("purchaseOrderNumber")
				Me.OnpurchaseOrderNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int NOT NULL")>  _
	Public Property supplierID() As Integer
		Get
			Return Me._supplierID
		End Get
		Set
			If ((Me._supplierID = value)  _
						= false) Then
				Me.OnsupplierIDChanging(value)
				Me.SendPropertyChanging
				Me._supplierID = value
				Me.SendPropertyChanged("supplierID")
				Me.OnsupplierIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_poAmount", DbType:="Decimal(19,4)")>  _
	Public Property poAmount() As System.Nullable(Of Decimal)
		Get
			Return Me._poAmount
		End Get
		Set
			If (Me._poAmount.Equals(value) = false) Then
				Me.OnpoAmountChanging(value)
				Me.SendPropertyChanging
				Me._poAmount = value
				Me.SendPropertyChanged("poAmount")
				Me.OnpoAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_poBalance", DbType:="Decimal(19,4)")>  _
	Public Property poBalance() As System.Nullable(Of Decimal)
		Get
			Return Me._poBalance
		End Get
		Set
			If (Me._poBalance.Equals(value) = false) Then
				Me.OnpoBalanceChanging(value)
				Me.SendPropertyChanging
				Me._poBalance = value
				Me.SendPropertyChanged("poBalance")
				Me.OnpoBalanceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_requestorName", DbType:="NVarChar(50)")>  _
	Public Property requestorName() As String
		Get
			Return Me._requestorName
		End Get
		Set
			If (String.Equals(Me._requestorName, value) = false) Then
				Me.OnrequestorNameChanging(value)
				Me.SendPropertyChanging
				Me._requestorName = value
				Me.SendPropertyChanged("requestorName")
				Me.OnrequestorNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_requestorEmail", DbType:="NVarChar(100)")>  _
	Public Property requestorEmail() As String
		Get
			Return Me._requestorEmail
		End Get
		Set
			If (String.Equals(Me._requestorEmail, value) = false) Then
				Me.OnrequestorEmailChanging(value)
				Me.SendPropertyChanging
				Me._requestorEmail = value
				Me.SendPropertyChanged("requestorEmail")
				Me.OnrequestorEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateIssued", DbType:="SmallDateTime")>  _
	Public Property dateIssued() As System.Nullable(Of Date)
		Get
			Return Me._dateIssued
		End Get
		Set
			If (Me._dateIssued.Equals(value) = false) Then
				Me.OndateIssuedChanging(value)
				Me.SendPropertyChanging
				Me._dateIssued = value
				Me.SendPropertyChanged("dateIssued")
				Me.OndateIssuedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_createdDate", DbType:="SmallDateTime")>  _
	Public Property createdDate() As System.Nullable(Of Date)
		Get
			Return Me._createdDate
		End Get
		Set
			If (Me._createdDate.Equals(value) = false) Then
				Me.OncreatedDateChanging(value)
				Me.SendPropertyChanging
				Me._createdDate = value
				Me.SendPropertyChanged("createdDate")
				Me.OncreatedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_createdBy", DbType:="NVarChar(50)")>  _
	Public Property createdBy() As String
		Get
			Return Me._createdBy
		End Get
		Set
			If (String.Equals(Me._createdBy, value) = false) Then
				Me.OncreatedByChanging(value)
				Me.SendPropertyChanging
				Me._createdBy = value
				Me.SendPropertyChanged("createdBy")
				Me.OncreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_modifiedDate", DbType:="SmallDateTime")>  _
	Public Property modifiedDate() As System.Nullable(Of Date)
		Get
			Return Me._modifiedDate
		End Get
		Set
			If (Me._modifiedDate.Equals(value) = false) Then
				Me.OnmodifiedDateChanging(value)
				Me.SendPropertyChanging
				Me._modifiedDate = value
				Me.SendPropertyChanged("modifiedDate")
				Me.OnmodifiedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_modifiedBy", DbType:="NVarChar(50)")>  _
	Public Property modifiedBy() As String
		Get
			Return Me._modifiedBy
		End Get
		Set
			If (String.Equals(Me._modifiedBy, value) = false) Then
				Me.OnmodifiedByChanging(value)
				Me.SendPropertyChanging
				Me._modifiedBy = value
				Me.SendPropertyChanged("modifiedBy")
				Me.OnmodifiedByChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblRecapOption")>  _
Partial Public Class tblRecapOption
	
	Private _recapOptionID As Integer
	
	Private _fieldID As System.Nullable(Of Integer)
	
	Private _order As System.Nullable(Of Integer)
	
	Private _optionName As String
	
	Private _optionValue As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_recapOptionID", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property recapOptionID() As Integer
		Get
			Return Me._recapOptionID
		End Get
		Set
			If ((Me._recapOptionID = value)  _
						= false) Then
				Me._recapOptionID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fieldID", DbType:="Int")>  _
	Public Property fieldID() As System.Nullable(Of Integer)
		Get
			Return Me._fieldID
		End Get
		Set
			If (Me._fieldID.Equals(value) = false) Then
				Me._fieldID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_order", DbType:="Int")>  _
	Public Property [order]() As System.Nullable(Of Integer)
		Get
			Return Me._order
		End Get
		Set
			If (Me._order.Equals(value) = false) Then
				Me._order = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_optionName", DbType:="NVarChar(50)")>  _
	Public Property optionName() As String
		Get
			Return Me._optionName
		End Get
		Set
			If (String.Equals(Me._optionName, value) = false) Then
				Me._optionName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_optionValue", DbType:="NVarChar(50)")>  _
	Public Property optionValue() As String
		Get
			Return Me._optionValue
		End Get
		Set
			If (String.Equals(Me._optionValue, value) = false) Then
				Me._optionValue = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblRecapQuestionOptions")>  _
Partial Public Class tblRecapQuestionOption
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _optionID As Integer
	
	Private _brandRecapQuestionID As Integer
	
	Private _option As String
	
	Private _sortOrder As System.Nullable(Of Integer)
	
	Private _optionType As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnoptionIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnoptionIDChanged()
    End Sub
    Partial Private Sub OnbrandRecapQuestionIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnbrandRecapQuestionIDChanged()
    End Sub
    Partial Private Sub OnoptionChanging(value As String)
    End Sub
    Partial Private Sub OnoptionChanged()
    End Sub
    Partial Private Sub OnsortOrderChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnsortOrderChanged()
    End Sub
    Partial Private Sub OnoptionTypeChanging(value As String)
    End Sub
    Partial Private Sub OnoptionTypeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_optionID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property optionID() As Integer
		Get
			Return Me._optionID
		End Get
		Set
			If ((Me._optionID = value)  _
						= false) Then
				Me.OnoptionIDChanging(value)
				Me.SendPropertyChanging
				Me._optionID = value
				Me.SendPropertyChanged("optionID")
				Me.OnoptionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandRecapQuestionID", DbType:="Int NOT NULL")>  _
	Public Property brandRecapQuestionID() As Integer
		Get
			Return Me._brandRecapQuestionID
		End Get
		Set
			If ((Me._brandRecapQuestionID = value)  _
						= false) Then
				Me.OnbrandRecapQuestionIDChanging(value)
				Me.SendPropertyChanging
				Me._brandRecapQuestionID = value
				Me.SendPropertyChanged("brandRecapQuestionID")
				Me.OnbrandRecapQuestionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_option", DbType:="NVarChar(50)")>  _
	Public Property [option]() As String
		Get
			Return Me._option
		End Get
		Set
			If (String.Equals(Me._option, value) = false) Then
				Me.OnoptionChanging(value)
				Me.SendPropertyChanging
				Me._option = value
				Me.SendPropertyChanged("[option]")
				Me.OnoptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sortOrder", DbType:="Int")>  _
	Public Property sortOrder() As System.Nullable(Of Integer)
		Get
			Return Me._sortOrder
		End Get
		Set
			If (Me._sortOrder.Equals(value) = false) Then
				Me.OnsortOrderChanging(value)
				Me.SendPropertyChanging
				Me._sortOrder = value
				Me.SendPropertyChanged("sortOrder")
				Me.OnsortOrderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_optionType", DbType:="VarChar(50)")>  _
	Public Property optionType() As String
		Get
			Return Me._optionType
		End Get
		Set
			If (String.Equals(Me._optionType, value) = false) Then
				Me.OnoptionTypeChanging(value)
				Me.SendPropertyChanging
				Me._optionType = value
				Me.SendPropertyChanged("optionType")
				Me.OnoptionTypeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblRegion")>  _
Partial Public Class tblRegion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _regionID As String
	
	Private _regionName As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnregionIDChanging(value As String)
    End Sub
    Partial Private Sub OnregionIDChanged()
    End Sub
    Partial Private Sub OnregionNameChanging(value As String)
    End Sub
    Partial Private Sub OnregionNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_regionID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property regionID() As String
		Get
			Return Me._regionID
		End Get
		Set
			If (String.Equals(Me._regionID, value) = false) Then
				Me.OnregionIDChanging(value)
				Me.SendPropertyChanging
				Me._regionID = value
				Me.SendPropertyChanged("regionID")
				Me.OnregionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_regionName", DbType:="VarChar(50)")>  _
	Public Property regionName() As String
		Get
			Return Me._regionName
		End Get
		Set
			If (String.Equals(Me._regionName, value) = false) Then
				Me.OnregionNameChanging(value)
				Me.SendPropertyChanging
				Me._regionName = value
				Me.SendPropertyChanged("regionName")
				Me.OnregionNameChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblRequestedEvent")>  _
Partial Public Class tblRequestedEvent
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _requestedEventID As Integer
	
	Private _clientID As System.Nullable(Of Integer)
	
	Private _eventTitle As String
	
	Private _eventDate As System.Nullable(Of Date)
	
	Private _eventEndDate As System.Nullable(Of Date)
	
	Private _startTime As System.Nullable(Of Date)
	
	Private _endTime As System.Nullable(Of Date)
	
	Private _supplierID As System.Nullable(Of Integer)
	
	Private _eventTypeID As System.Nullable(Of Integer)
	
	Private _eventDescription As String
	
	Private _locationName As String
	
	Private _locationCity As String
	
	Private _locationState As String
	
	Private _locationZip As String
	
	Private _CreatedDate As System.Nullable(Of Date)
	
	Private _ModifiedDate As System.Nullable(Of Date)
	
	Private _CreatedBy As String
	
	Private _ModifiedBy As String
	
	Private _Modified As System.Nullable(Of Boolean)
	
	Private _CreatedByEmail As String
	
	Private _locationAddress As String
	
	Private _latitude As System.Nullable(Of Double)
	
	Private _longitude As System.Nullable(Of Double)
	
	Private _matchedLocationID As System.Nullable(Of Integer)
	
	Private _requestType As String
	
	Private _deleted As System.Nullable(Of Date)
	
	Private _eventID As System.Nullable(Of Integer)
	
	Private _teamID As System.Nullable(Of Integer)
	
	Private _distributer As String
	
	Private _importFileName As String
	
	Private _BA_Count As System.Nullable(Of Integer)
	
	Private _importFileID As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnrequestedEventIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnrequestedEventIDChanged()
    End Sub
    Partial Private Sub OnclientIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnclientIDChanged()
    End Sub
    Partial Private Sub OneventTitleChanging(value As String)
    End Sub
    Partial Private Sub OneventTitleChanged()
    End Sub
    Partial Private Sub OneventDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OneventDateChanged()
    End Sub
    Partial Private Sub OneventEndDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OneventEndDateChanged()
    End Sub
    Partial Private Sub OnstartTimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnstartTimeChanged()
    End Sub
    Partial Private Sub OnendTimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnendTimeChanged()
    End Sub
    Partial Private Sub OnsupplierIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnsupplierIDChanged()
    End Sub
    Partial Private Sub OneventTypeIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OneventTypeIDChanged()
    End Sub
    Partial Private Sub OneventDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OneventDescriptionChanged()
    End Sub
    Partial Private Sub OnlocationNameChanging(value As String)
    End Sub
    Partial Private Sub OnlocationNameChanged()
    End Sub
    Partial Private Sub OnlocationCityChanging(value As String)
    End Sub
    Partial Private Sub OnlocationCityChanged()
    End Sub
    Partial Private Sub OnlocationStateChanging(value As String)
    End Sub
    Partial Private Sub OnlocationStateChanged()
    End Sub
    Partial Private Sub OnlocationZipChanging(value As String)
    End Sub
    Partial Private Sub OnlocationZipChanged()
    End Sub
    Partial Private Sub OnCreatedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCreatedDateChanged()
    End Sub
    Partial Private Sub OnModifiedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnModifiedDateChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As String)
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnModifiedByChanging(value As String)
    End Sub
    Partial Private Sub OnModifiedByChanged()
    End Sub
    Partial Private Sub OnModifiedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnModifiedChanged()
    End Sub
    Partial Private Sub OnCreatedByEmailChanging(value As String)
    End Sub
    Partial Private Sub OnCreatedByEmailChanged()
    End Sub
    Partial Private Sub OnlocationAddressChanging(value As String)
    End Sub
    Partial Private Sub OnlocationAddressChanged()
    End Sub
    Partial Private Sub OnlatitudeChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnlatitudeChanged()
    End Sub
    Partial Private Sub OnlongitudeChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnlongitudeChanged()
    End Sub
    Partial Private Sub OnmatchedLocationIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnmatchedLocationIDChanged()
    End Sub
    Partial Private Sub OnrequestTypeChanging(value As String)
    End Sub
    Partial Private Sub OnrequestTypeChanged()
    End Sub
    Partial Private Sub OndeletedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OndeletedChanged()
    End Sub
    Partial Private Sub OneventIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OneventIDChanged()
    End Sub
    Partial Private Sub OnteamIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnteamIDChanged()
    End Sub
    Partial Private Sub OndistributerChanging(value As String)
    End Sub
    Partial Private Sub OndistributerChanged()
    End Sub
    Partial Private Sub OnimportFileNameChanging(value As String)
    End Sub
    Partial Private Sub OnimportFileNameChanged()
    End Sub
    Partial Private Sub OnBA_CountChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnBA_CountChanged()
    End Sub
    Partial Private Sub OnimportFileIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnimportFileIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_requestedEventID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property requestedEventID() As Integer
		Get
			Return Me._requestedEventID
		End Get
		Set
			If ((Me._requestedEventID = value)  _
						= false) Then
				Me.OnrequestedEventIDChanging(value)
				Me.SendPropertyChanging
				Me._requestedEventID = value
				Me.SendPropertyChanged("requestedEventID")
				Me.OnrequestedEventIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", DbType:="Int")>  _
	Public Property clientID() As System.Nullable(Of Integer)
		Get
			Return Me._clientID
		End Get
		Set
			If (Me._clientID.Equals(value) = false) Then
				Me.OnclientIDChanging(value)
				Me.SendPropertyChanging
				Me._clientID = value
				Me.SendPropertyChanged("clientID")
				Me.OnclientIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTitle", DbType:="VarChar(1000)")>  _
	Public Property eventTitle() As String
		Get
			Return Me._eventTitle
		End Get
		Set
			If (String.Equals(Me._eventTitle, value) = false) Then
				Me.OneventTitleChanging(value)
				Me.SendPropertyChanging
				Me._eventTitle = value
				Me.SendPropertyChanged("eventTitle")
				Me.OneventTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventDate", DbType:="SmallDateTime")>  _
	Public Property eventDate() As System.Nullable(Of Date)
		Get
			Return Me._eventDate
		End Get
		Set
			If (Me._eventDate.Equals(value) = false) Then
				Me.OneventDateChanging(value)
				Me.SendPropertyChanging
				Me._eventDate = value
				Me.SendPropertyChanged("eventDate")
				Me.OneventDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventEndDate", DbType:="SmallDateTime")>  _
	Public Property eventEndDate() As System.Nullable(Of Date)
		Get
			Return Me._eventEndDate
		End Get
		Set
			If (Me._eventEndDate.Equals(value) = false) Then
				Me.OneventEndDateChanging(value)
				Me.SendPropertyChanging
				Me._eventEndDate = value
				Me.SendPropertyChanged("eventEndDate")
				Me.OneventEndDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_startTime", DbType:="SmallDateTime")>  _
	Public Property startTime() As System.Nullable(Of Date)
		Get
			Return Me._startTime
		End Get
		Set
			If (Me._startTime.Equals(value) = false) Then
				Me.OnstartTimeChanging(value)
				Me.SendPropertyChanging
				Me._startTime = value
				Me.SendPropertyChanged("startTime")
				Me.OnstartTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_endTime", DbType:="SmallDateTime")>  _
	Public Property endTime() As System.Nullable(Of Date)
		Get
			Return Me._endTime
		End Get
		Set
			If (Me._endTime.Equals(value) = false) Then
				Me.OnendTimeChanging(value)
				Me.SendPropertyChanging
				Me._endTime = value
				Me.SendPropertyChanged("endTime")
				Me.OnendTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int")>  _
	Public Property supplierID() As System.Nullable(Of Integer)
		Get
			Return Me._supplierID
		End Get
		Set
			If (Me._supplierID.Equals(value) = false) Then
				Me.OnsupplierIDChanging(value)
				Me.SendPropertyChanging
				Me._supplierID = value
				Me.SendPropertyChanged("supplierID")
				Me.OnsupplierIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTypeID", DbType:="Int")>  _
	Public Property eventTypeID() As System.Nullable(Of Integer)
		Get
			Return Me._eventTypeID
		End Get
		Set
			If (Me._eventTypeID.Equals(value) = false) Then
				Me.OneventTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._eventTypeID = value
				Me.SendPropertyChanged("eventTypeID")
				Me.OneventTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventDescription", DbType:="NVarChar(MAX)")>  _
	Public Property eventDescription() As String
		Get
			Return Me._eventDescription
		End Get
		Set
			If (String.Equals(Me._eventDescription, value) = false) Then
				Me.OneventDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._eventDescription = value
				Me.SendPropertyChanged("eventDescription")
				Me.OneventDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_locationName", DbType:="NVarChar(256)")>  _
	Public Property locationName() As String
		Get
			Return Me._locationName
		End Get
		Set
			If (String.Equals(Me._locationName, value) = false) Then
				Me.OnlocationNameChanging(value)
				Me.SendPropertyChanging
				Me._locationName = value
				Me.SendPropertyChanged("locationName")
				Me.OnlocationNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_locationCity", DbType:="NVarChar(256)")>  _
	Public Property locationCity() As String
		Get
			Return Me._locationCity
		End Get
		Set
			If (String.Equals(Me._locationCity, value) = false) Then
				Me.OnlocationCityChanging(value)
				Me.SendPropertyChanging
				Me._locationCity = value
				Me.SendPropertyChanged("locationCity")
				Me.OnlocationCityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_locationState", DbType:="NVarChar(256)")>  _
	Public Property locationState() As String
		Get
			Return Me._locationState
		End Get
		Set
			If (String.Equals(Me._locationState, value) = false) Then
				Me.OnlocationStateChanging(value)
				Me.SendPropertyChanging
				Me._locationState = value
				Me.SendPropertyChanged("locationState")
				Me.OnlocationStateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_locationZip", DbType:="NVarChar(256)")>  _
	Public Property locationZip() As String
		Get
			Return Me._locationZip
		End Get
		Set
			If (String.Equals(Me._locationZip, value) = false) Then
				Me.OnlocationZipChanging(value)
				Me.SendPropertyChanging
				Me._locationZip = value
				Me.SendPropertyChanged("locationZip")
				Me.OnlocationZipChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedDate", DbType:="SmallDateTime")>  _
	Public Property CreatedDate() As System.Nullable(Of Date)
		Get
			Return Me._CreatedDate
		End Get
		Set
			If (Me._CreatedDate.Equals(value) = false) Then
				Me.OnCreatedDateChanging(value)
				Me.SendPropertyChanging
				Me._CreatedDate = value
				Me.SendPropertyChanged("CreatedDate")
				Me.OnCreatedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDate", DbType:="SmallDateTime")>  _
	Public Property ModifiedDate() As System.Nullable(Of Date)
		Get
			Return Me._ModifiedDate
		End Get
		Set
			If (Me._ModifiedDate.Equals(value) = false) Then
				Me.OnModifiedDateChanging(value)
				Me.SendPropertyChanging
				Me._ModifiedDate = value
				Me.SendPropertyChanged("ModifiedDate")
				Me.OnModifiedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="NVarChar(50)")>  _
	Public Property CreatedBy() As String
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (String.Equals(Me._CreatedBy, value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedBy", DbType:="NVarChar(50)")>  _
	Public Property ModifiedBy() As String
		Get
			Return Me._ModifiedBy
		End Get
		Set
			If (String.Equals(Me._ModifiedBy, value) = false) Then
				Me.OnModifiedByChanging(value)
				Me.SendPropertyChanging
				Me._ModifiedBy = value
				Me.SendPropertyChanged("ModifiedBy")
				Me.OnModifiedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Modified", DbType:="Bit")>  _
	Public Property Modified() As System.Nullable(Of Boolean)
		Get
			Return Me._Modified
		End Get
		Set
			If (Me._Modified.Equals(value) = false) Then
				Me.OnModifiedChanging(value)
				Me.SendPropertyChanging
				Me._Modified = value
				Me.SendPropertyChanged("Modified")
				Me.OnModifiedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedByEmail", DbType:="NVarChar(256)")>  _
	Public Property CreatedByEmail() As String
		Get
			Return Me._CreatedByEmail
		End Get
		Set
			If (String.Equals(Me._CreatedByEmail, value) = false) Then
				Me.OnCreatedByEmailChanging(value)
				Me.SendPropertyChanging
				Me._CreatedByEmail = value
				Me.SendPropertyChanged("CreatedByEmail")
				Me.OnCreatedByEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_locationAddress", DbType:="NVarChar(256)")>  _
	Public Property locationAddress() As String
		Get
			Return Me._locationAddress
		End Get
		Set
			If (String.Equals(Me._locationAddress, value) = false) Then
				Me.OnlocationAddressChanging(value)
				Me.SendPropertyChanging
				Me._locationAddress = value
				Me.SendPropertyChanged("locationAddress")
				Me.OnlocationAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_latitude", DbType:="Float")>  _
	Public Property latitude() As System.Nullable(Of Double)
		Get
			Return Me._latitude
		End Get
		Set
			If (Me._latitude.Equals(value) = false) Then
				Me.OnlatitudeChanging(value)
				Me.SendPropertyChanging
				Me._latitude = value
				Me.SendPropertyChanged("latitude")
				Me.OnlatitudeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_longitude", DbType:="Float")>  _
	Public Property longitude() As System.Nullable(Of Double)
		Get
			Return Me._longitude
		End Get
		Set
			If (Me._longitude.Equals(value) = false) Then
				Me.OnlongitudeChanging(value)
				Me.SendPropertyChanging
				Me._longitude = value
				Me.SendPropertyChanged("longitude")
				Me.OnlongitudeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_matchedLocationID", DbType:="Int")>  _
	Public Property matchedLocationID() As System.Nullable(Of Integer)
		Get
			Return Me._matchedLocationID
		End Get
		Set
			If (Me._matchedLocationID.Equals(value) = false) Then
				Me.OnmatchedLocationIDChanging(value)
				Me.SendPropertyChanging
				Me._matchedLocationID = value
				Me.SendPropertyChanged("matchedLocationID")
				Me.OnmatchedLocationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_requestType", DbType:="VarChar(50)")>  _
	Public Property requestType() As String
		Get
			Return Me._requestType
		End Get
		Set
			If (String.Equals(Me._requestType, value) = false) Then
				Me.OnrequestTypeChanging(value)
				Me.SendPropertyChanging
				Me._requestType = value
				Me.SendPropertyChanged("requestType")
				Me.OnrequestTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_deleted", DbType:="SmallDateTime")>  _
	Public Property deleted() As System.Nullable(Of Date)
		Get
			Return Me._deleted
		End Get
		Set
			If (Me._deleted.Equals(value) = false) Then
				Me.OndeletedChanging(value)
				Me.SendPropertyChanging
				Me._deleted = value
				Me.SendPropertyChanged("deleted")
				Me.OndeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int")>  _
	Public Property eventID() As System.Nullable(Of Integer)
		Get
			Return Me._eventID
		End Get
		Set
			If (Me._eventID.Equals(value) = false) Then
				Me.OneventIDChanging(value)
				Me.SendPropertyChanging
				Me._eventID = value
				Me.SendPropertyChanged("eventID")
				Me.OneventIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_teamID", DbType:="Int")>  _
	Public Property teamID() As System.Nullable(Of Integer)
		Get
			Return Me._teamID
		End Get
		Set
			If (Me._teamID.Equals(value) = false) Then
				Me.OnteamIDChanging(value)
				Me.SendPropertyChanging
				Me._teamID = value
				Me.SendPropertyChanged("teamID")
				Me.OnteamIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_distributer", DbType:="NVarChar(75)")>  _
	Public Property distributer() As String
		Get
			Return Me._distributer
		End Get
		Set
			If (String.Equals(Me._distributer, value) = false) Then
				Me.OndistributerChanging(value)
				Me.SendPropertyChanging
				Me._distributer = value
				Me.SendPropertyChanged("distributer")
				Me.OndistributerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_importFileName", DbType:="NVarChar(50)")>  _
	Public Property importFileName() As String
		Get
			Return Me._importFileName
		End Get
		Set
			If (String.Equals(Me._importFileName, value) = false) Then
				Me.OnimportFileNameChanging(value)
				Me.SendPropertyChanging
				Me._importFileName = value
				Me.SendPropertyChanged("importFileName")
				Me.OnimportFileNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BA_Count", DbType:="Int")>  _
	Public Property BA_Count() As System.Nullable(Of Integer)
		Get
			Return Me._BA_Count
		End Get
		Set
			If (Me._BA_Count.Equals(value) = false) Then
				Me.OnBA_CountChanging(value)
				Me.SendPropertyChanging
				Me._BA_Count = value
				Me.SendPropertyChanged("BA_Count")
				Me.OnBA_CountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_importFileID", DbType:="Int")>  _
	Public Property importFileID() As System.Nullable(Of Integer)
		Get
			Return Me._importFileID
		End Get
		Set
			If (Me._importFileID.Equals(value) = false) Then
				Me.OnimportFileIDChanging(value)
				Me.SendPropertyChanging
				Me._importFileID = value
				Me.SendPropertyChanged("importFileID")
				Me.OnimportFileIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblShippingVendor")>  _
Partial Public Class tblShippingVendor
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ShippingVendorID As Integer
	
	Private _ShippingVendorName As String
	
	Private _TrackingURL As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnShippingVendorIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnShippingVendorIDChanged()
    End Sub
    Partial Private Sub OnShippingVendorNameChanging(value As String)
    End Sub
    Partial Private Sub OnShippingVendorNameChanged()
    End Sub
    Partial Private Sub OnTrackingURLChanging(value As String)
    End Sub
    Partial Private Sub OnTrackingURLChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShippingVendorID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ShippingVendorID() As Integer
		Get
			Return Me._ShippingVendorID
		End Get
		Set
			If ((Me._ShippingVendorID = value)  _
						= false) Then
				Me.OnShippingVendorIDChanging(value)
				Me.SendPropertyChanging
				Me._ShippingVendorID = value
				Me.SendPropertyChanged("ShippingVendorID")
				Me.OnShippingVendorIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShippingVendorName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property ShippingVendorName() As String
		Get
			Return Me._ShippingVendorName
		End Get
		Set
			If (String.Equals(Me._ShippingVendorName, value) = false) Then
				Me.OnShippingVendorNameChanging(value)
				Me.SendPropertyChanging
				Me._ShippingVendorName = value
				Me.SendPropertyChanged("ShippingVendorName")
				Me.OnShippingVendorNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TrackingURL", DbType:="NVarChar(500)")>  _
	Public Property TrackingURL() As String
		Get
			Return Me._TrackingURL
		End Get
		Set
			If (String.Equals(Me._TrackingURL, value) = false) Then
				Me.OnTrackingURLChanging(value)
				Me.SendPropertyChanging
				Me._TrackingURL = value
				Me.SendPropertyChanged("TrackingURL")
				Me.OnTrackingURLChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblSiteLogin")>  _
Partial Public Class tblSiteLogin
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _siteLoginID As Integer
	
	Private _userID As String
	
	Private _IsFirstLogin As System.Nullable(Of Boolean)
	
	Private _loginDate As System.Nullable(Of Date)
	
	Private _ipAddress As String
	
	Private _browser As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnsiteLoginIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnsiteLoginIDChanged()
    End Sub
    Partial Private Sub OnuserIDChanging(value As String)
    End Sub
    Partial Private Sub OnuserIDChanged()
    End Sub
    Partial Private Sub OnIsFirstLoginChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsFirstLoginChanged()
    End Sub
    Partial Private Sub OnloginDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnloginDateChanged()
    End Sub
    Partial Private Sub OnipAddressChanging(value As String)
    End Sub
    Partial Private Sub OnipAddressChanged()
    End Sub
    Partial Private Sub OnbrowserChanging(value As String)
    End Sub
    Partial Private Sub OnbrowserChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_siteLoginID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property siteLoginID() As Integer
		Get
			Return Me._siteLoginID
		End Get
		Set
			If ((Me._siteLoginID = value)  _
						= false) Then
				Me.OnsiteLoginIDChanging(value)
				Me.SendPropertyChanging
				Me._siteLoginID = value
				Me.SendPropertyChanged("siteLoginID")
				Me.OnsiteLoginIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me.OnuserIDChanging(value)
				Me.SendPropertyChanging
				Me._userID = value
				Me.SendPropertyChanged("userID")
				Me.OnuserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsFirstLogin", DbType:="Bit")>  _
	Public Property IsFirstLogin() As System.Nullable(Of Boolean)
		Get
			Return Me._IsFirstLogin
		End Get
		Set
			If (Me._IsFirstLogin.Equals(value) = false) Then
				Me.OnIsFirstLoginChanging(value)
				Me.SendPropertyChanging
				Me._IsFirstLogin = value
				Me.SendPropertyChanged("IsFirstLogin")
				Me.OnIsFirstLoginChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_loginDate", DbType:="SmallDateTime")>  _
	Public Property loginDate() As System.Nullable(Of Date)
		Get
			Return Me._loginDate
		End Get
		Set
			If (Me._loginDate.Equals(value) = false) Then
				Me.OnloginDateChanging(value)
				Me.SendPropertyChanging
				Me._loginDate = value
				Me.SendPropertyChanged("loginDate")
				Me.OnloginDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ipAddress", DbType:="NVarChar(50)")>  _
	Public Property ipAddress() As String
		Get
			Return Me._ipAddress
		End Get
		Set
			If (String.Equals(Me._ipAddress, value) = false) Then
				Me.OnipAddressChanging(value)
				Me.SendPropertyChanging
				Me._ipAddress = value
				Me.SendPropertyChanged("ipAddress")
				Me.OnipAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_browser", DbType:="NVarChar(50)")>  _
	Public Property browser() As String
		Get
			Return Me._browser
		End Get
		Set
			If (String.Equals(Me._browser, value) = false) Then
				Me.OnbrowserChanging(value)
				Me.SendPropertyChanging
				Me._browser = value
				Me.SendPropertyChanged("browser")
				Me.OnbrowserChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblSiteSettings")>  _
Partial Public Class tblSiteSetting
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _SiteName As String
	
	Private _PrintLogoURL As String
	
	Private _SettingName As String
	
	Private _SettingValue As String
	
	Private _SiteID As System.Nullable(Of Integer)
	
	Private _DefaultFromAddress As String
	
	Private _DeafultFromName As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnSiteNameChanging(value As String)
    End Sub
    Partial Private Sub OnSiteNameChanged()
    End Sub
    Partial Private Sub OnPrintLogoURLChanging(value As String)
    End Sub
    Partial Private Sub OnPrintLogoURLChanged()
    End Sub
    Partial Private Sub OnSettingNameChanging(value As String)
    End Sub
    Partial Private Sub OnSettingNameChanged()
    End Sub
    Partial Private Sub OnSettingValueChanging(value As String)
    End Sub
    Partial Private Sub OnSettingValueChanged()
    End Sub
    Partial Private Sub OnSiteIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSiteIDChanged()
    End Sub
    Partial Private Sub OnDefaultFromAddressChanging(value As String)
    End Sub
    Partial Private Sub OnDefaultFromAddressChanged()
    End Sub
    Partial Private Sub OnDeafultFromNameChanging(value As String)
    End Sub
    Partial Private Sub OnDeafultFromNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteName", DbType:="NVarChar(50)")>  _
	Public Property SiteName() As String
		Get
			Return Me._SiteName
		End Get
		Set
			If (String.Equals(Me._SiteName, value) = false) Then
				Me.OnSiteNameChanging(value)
				Me.SendPropertyChanging
				Me._SiteName = value
				Me.SendPropertyChanged("SiteName")
				Me.OnSiteNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PrintLogoURL", DbType:="NVarChar(256)")>  _
	Public Property PrintLogoURL() As String
		Get
			Return Me._PrintLogoURL
		End Get
		Set
			If (String.Equals(Me._PrintLogoURL, value) = false) Then
				Me.OnPrintLogoURLChanging(value)
				Me.SendPropertyChanging
				Me._PrintLogoURL = value
				Me.SendPropertyChanged("PrintLogoURL")
				Me.OnPrintLogoURLChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SettingName", DbType:="NVarChar(50)")>  _
	Public Property SettingName() As String
		Get
			Return Me._SettingName
		End Get
		Set
			If (String.Equals(Me._SettingName, value) = false) Then
				Me.OnSettingNameChanging(value)
				Me.SendPropertyChanging
				Me._SettingName = value
				Me.SendPropertyChanged("SettingName")
				Me.OnSettingNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SettingValue", DbType:="NVarChar(MAX)")>  _
	Public Property SettingValue() As String
		Get
			Return Me._SettingValue
		End Get
		Set
			If (String.Equals(Me._SettingValue, value) = false) Then
				Me.OnSettingValueChanging(value)
				Me.SendPropertyChanging
				Me._SettingValue = value
				Me.SendPropertyChanged("SettingValue")
				Me.OnSettingValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteID", DbType:="Int")>  _
	Public Property SiteID() As System.Nullable(Of Integer)
		Get
			Return Me._SiteID
		End Get
		Set
			If (Me._SiteID.Equals(value) = false) Then
				Me.OnSiteIDChanging(value)
				Me.SendPropertyChanging
				Me._SiteID = value
				Me.SendPropertyChanged("SiteID")
				Me.OnSiteIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DefaultFromAddress", DbType:="NVarChar(256)")>  _
	Public Property DefaultFromAddress() As String
		Get
			Return Me._DefaultFromAddress
		End Get
		Set
			If (String.Equals(Me._DefaultFromAddress, value) = false) Then
				Me.OnDefaultFromAddressChanging(value)
				Me.SendPropertyChanging
				Me._DefaultFromAddress = value
				Me.SendPropertyChanged("DefaultFromAddress")
				Me.OnDefaultFromAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeafultFromName", DbType:="NVarChar(256)")>  _
	Public Property DeafultFromName() As String
		Get
			Return Me._DeafultFromName
		End Get
		Set
			If (String.Equals(Me._DeafultFromName, value) = false) Then
				Me.OnDeafultFromNameChanging(value)
				Me.SendPropertyChanging
				Me._DeafultFromName = value
				Me.SendPropertyChanged("DeafultFromName")
				Me.OnDeafultFromNameChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblStaff")>  _
Partial Public Class tblStaff
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _staffID As Integer
	
	Private _userID As String
	
	Private _firstName As String
	
	Private _lastName As String
	
	Private _city As String
	
	Private _state As String
	
	Private _zip As String
	
	Private _phone As String
	
	Private _latitude As System.Nullable(Of Double)
	
	Private _longitude As System.Nullable(Of Double)
	
	Private _profilePhoto As System.Data.Linq.Binary
	
	Private _lastLoginDate As System.Nullable(Of Date)
	
	Private _IsOnline As System.Nullable(Of Boolean)
	
	Private _timeZone As String
	
	Private _enableAllMarkets As System.Nullable(Of Boolean)
	
	Private _enableAllClients As System.Nullable(Of Boolean)
	
	Private _enableAllSuppliers As System.Nullable(Of Boolean)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnstaffIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnstaffIDChanged()
    End Sub
    Partial Private Sub OnuserIDChanging(value As String)
    End Sub
    Partial Private Sub OnuserIDChanged()
    End Sub
    Partial Private Sub OnfirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnfirstNameChanged()
    End Sub
    Partial Private Sub OnlastNameChanging(value As String)
    End Sub
    Partial Private Sub OnlastNameChanged()
    End Sub
    Partial Private Sub OncityChanging(value As String)
    End Sub
    Partial Private Sub OncityChanged()
    End Sub
    Partial Private Sub OnstateChanging(value As String)
    End Sub
    Partial Private Sub OnstateChanged()
    End Sub
    Partial Private Sub OnzipChanging(value As String)
    End Sub
    Partial Private Sub OnzipChanged()
    End Sub
    Partial Private Sub OnphoneChanging(value As String)
    End Sub
    Partial Private Sub OnphoneChanged()
    End Sub
    Partial Private Sub OnlatitudeChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnlatitudeChanged()
    End Sub
    Partial Private Sub OnlongitudeChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnlongitudeChanged()
    End Sub
    Partial Private Sub OnprofilePhotoChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnprofilePhotoChanged()
    End Sub
    Partial Private Sub OnlastLoginDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnlastLoginDateChanged()
    End Sub
    Partial Private Sub OnIsOnlineChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsOnlineChanged()
    End Sub
    Partial Private Sub OntimeZoneChanging(value As String)
    End Sub
    Partial Private Sub OntimeZoneChanged()
    End Sub
    Partial Private Sub OnenableAllMarketsChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnenableAllMarketsChanged()
    End Sub
    Partial Private Sub OnenableAllClientsChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnenableAllClientsChanged()
    End Sub
    Partial Private Sub OnenableAllSuppliersChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnenableAllSuppliersChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_staffID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property staffID() As Integer
		Get
			Return Me._staffID
		End Get
		Set
			If ((Me._staffID = value)  _
						= false) Then
				Me.OnstaffIDChanging(value)
				Me.SendPropertyChanging
				Me._staffID = value
				Me.SendPropertyChanged("staffID")
				Me.OnstaffIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me.OnuserIDChanging(value)
				Me.SendPropertyChanging
				Me._userID = value
				Me.SendPropertyChanged("userID")
				Me.OnuserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_firstName", DbType:="NVarChar(50)")>  _
	Public Property firstName() As String
		Get
			Return Me._firstName
		End Get
		Set
			If (String.Equals(Me._firstName, value) = false) Then
				Me.OnfirstNameChanging(value)
				Me.SendPropertyChanging
				Me._firstName = value
				Me.SendPropertyChanged("firstName")
				Me.OnfirstNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lastName", DbType:="NVarChar(50)")>  _
	Public Property lastName() As String
		Get
			Return Me._lastName
		End Get
		Set
			If (String.Equals(Me._lastName, value) = false) Then
				Me.OnlastNameChanging(value)
				Me.SendPropertyChanging
				Me._lastName = value
				Me.SendPropertyChanged("lastName")
				Me.OnlastNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_city", DbType:="NVarChar(50)")>  _
	Public Property city() As String
		Get
			Return Me._city
		End Get
		Set
			If (String.Equals(Me._city, value) = false) Then
				Me.OncityChanging(value)
				Me.SendPropertyChanging
				Me._city = value
				Me.SendPropertyChanged("city")
				Me.OncityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_state", DbType:="NVarChar(50)")>  _
	Public Property state() As String
		Get
			Return Me._state
		End Get
		Set
			If (String.Equals(Me._state, value) = false) Then
				Me.OnstateChanging(value)
				Me.SendPropertyChanging
				Me._state = value
				Me.SendPropertyChanged("state")
				Me.OnstateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_zip", DbType:="NVarChar(50)")>  _
	Public Property zip() As String
		Get
			Return Me._zip
		End Get
		Set
			If (String.Equals(Me._zip, value) = false) Then
				Me.OnzipChanging(value)
				Me.SendPropertyChanging
				Me._zip = value
				Me.SendPropertyChanged("zip")
				Me.OnzipChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_phone", DbType:="NVarChar(50)")>  _
	Public Property phone() As String
		Get
			Return Me._phone
		End Get
		Set
			If (String.Equals(Me._phone, value) = false) Then
				Me.OnphoneChanging(value)
				Me.SendPropertyChanging
				Me._phone = value
				Me.SendPropertyChanged("phone")
				Me.OnphoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_latitude", DbType:="Float")>  _
	Public Property latitude() As System.Nullable(Of Double)
		Get
			Return Me._latitude
		End Get
		Set
			If (Me._latitude.Equals(value) = false) Then
				Me.OnlatitudeChanging(value)
				Me.SendPropertyChanging
				Me._latitude = value
				Me.SendPropertyChanged("latitude")
				Me.OnlatitudeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_longitude", DbType:="Float")>  _
	Public Property longitude() As System.Nullable(Of Double)
		Get
			Return Me._longitude
		End Get
		Set
			If (Me._longitude.Equals(value) = false) Then
				Me.OnlongitudeChanging(value)
				Me.SendPropertyChanging
				Me._longitude = value
				Me.SendPropertyChanged("longitude")
				Me.OnlongitudeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_profilePhoto", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property profilePhoto() As System.Data.Linq.Binary
		Get
			Return Me._profilePhoto
		End Get
		Set
			If (Object.Equals(Me._profilePhoto, value) = false) Then
				Me.OnprofilePhotoChanging(value)
				Me.SendPropertyChanging
				Me._profilePhoto = value
				Me.SendPropertyChanged("profilePhoto")
				Me.OnprofilePhotoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lastLoginDate", DbType:="SmallDateTime")>  _
	Public Property lastLoginDate() As System.Nullable(Of Date)
		Get
			Return Me._lastLoginDate
		End Get
		Set
			If (Me._lastLoginDate.Equals(value) = false) Then
				Me.OnlastLoginDateChanging(value)
				Me.SendPropertyChanging
				Me._lastLoginDate = value
				Me.SendPropertyChanged("lastLoginDate")
				Me.OnlastLoginDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsOnline", DbType:="Bit")>  _
	Public Property IsOnline() As System.Nullable(Of Boolean)
		Get
			Return Me._IsOnline
		End Get
		Set
			If (Me._IsOnline.Equals(value) = false) Then
				Me.OnIsOnlineChanging(value)
				Me.SendPropertyChanging
				Me._IsOnline = value
				Me.SendPropertyChanged("IsOnline")
				Me.OnIsOnlineChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_timeZone", DbType:="NVarChar(50)")>  _
	Public Property timeZone() As String
		Get
			Return Me._timeZone
		End Get
		Set
			If (String.Equals(Me._timeZone, value) = false) Then
				Me.OntimeZoneChanging(value)
				Me.SendPropertyChanging
				Me._timeZone = value
				Me.SendPropertyChanged("timeZone")
				Me.OntimeZoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_enableAllMarkets", DbType:="Bit")>  _
	Public Property enableAllMarkets() As System.Nullable(Of Boolean)
		Get
			Return Me._enableAllMarkets
		End Get
		Set
			If (Me._enableAllMarkets.Equals(value) = false) Then
				Me.OnenableAllMarketsChanging(value)
				Me.SendPropertyChanging
				Me._enableAllMarkets = value
				Me.SendPropertyChanged("enableAllMarkets")
				Me.OnenableAllMarketsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_enableAllClients", DbType:="Bit")>  _
	Public Property enableAllClients() As System.Nullable(Of Boolean)
		Get
			Return Me._enableAllClients
		End Get
		Set
			If (Me._enableAllClients.Equals(value) = false) Then
				Me.OnenableAllClientsChanging(value)
				Me.SendPropertyChanging
				Me._enableAllClients = value
				Me.SendPropertyChanged("enableAllClients")
				Me.OnenableAllClientsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_enableAllSuppliers", DbType:="Bit")>  _
	Public Property enableAllSuppliers() As System.Nullable(Of Boolean)
		Get
			Return Me._enableAllSuppliers
		End Get
		Set
			If (Me._enableAllSuppliers.Equals(value) = false) Then
				Me.OnenableAllSuppliersChanging(value)
				Me.SendPropertyChanging
				Me._enableAllSuppliers = value
				Me.SendPropertyChanged("enableAllSuppliers")
				Me.OnenableAllSuppliersChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblStaffClient")>  _
Partial Public Class tblStaffClient
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _staffClientID As Integer
	
	Private _userID As String
	
	Private _clientID As Integer
	
	Private _IsDefault As System.Nullable(Of Boolean)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnstaffClientIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnstaffClientIDChanged()
    End Sub
    Partial Private Sub OnuserIDChanging(value As String)
    End Sub
    Partial Private Sub OnuserIDChanged()
    End Sub
    Partial Private Sub OnclientIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnclientIDChanged()
    End Sub
    Partial Private Sub OnIsDefaultChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDefaultChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_staffClientID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property staffClientID() As Integer
		Get
			Return Me._staffClientID
		End Get
		Set
			If ((Me._staffClientID = value)  _
						= false) Then
				Me.OnstaffClientIDChanging(value)
				Me.SendPropertyChanging
				Me._staffClientID = value
				Me.SendPropertyChanged("staffClientID")
				Me.OnstaffClientIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me.OnuserIDChanging(value)
				Me.SendPropertyChanging
				Me._userID = value
				Me.SendPropertyChanged("userID")
				Me.OnuserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", DbType:="Int NOT NULL")>  _
	Public Property clientID() As Integer
		Get
			Return Me._clientID
		End Get
		Set
			If ((Me._clientID = value)  _
						= false) Then
				Me.OnclientIDChanging(value)
				Me.SendPropertyChanging
				Me._clientID = value
				Me.SendPropertyChanged("clientID")
				Me.OnclientIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDefault", DbType:="Bit")>  _
	Public Property IsDefault() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDefault
		End Get
		Set
			If (Me._IsDefault.Equals(value) = false) Then
				Me.OnIsDefaultChanging(value)
				Me.SendPropertyChanging
				Me._IsDefault = value
				Me.SendPropertyChanged("IsDefault")
				Me.OnIsDefaultChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblStaffInClient")>  _
Partial Public Class tblStaffInClient
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _staffInClientID As Integer
	
	Private _userID As String
	
	Private _clientID As Integer
	
	Private _IsDefault As System.Nullable(Of Boolean)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnstaffInClientIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnstaffInClientIDChanged()
    End Sub
    Partial Private Sub OnuserIDChanging(value As String)
    End Sub
    Partial Private Sub OnuserIDChanged()
    End Sub
    Partial Private Sub OnclientIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnclientIDChanged()
    End Sub
    Partial Private Sub OnIsDefaultChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDefaultChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_staffInClientID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property staffInClientID() As Integer
		Get
			Return Me._staffInClientID
		End Get
		Set
			If ((Me._staffInClientID = value)  _
						= false) Then
				Me.OnstaffInClientIDChanging(value)
				Me.SendPropertyChanging
				Me._staffInClientID = value
				Me.SendPropertyChanged("staffInClientID")
				Me.OnstaffInClientIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me.OnuserIDChanging(value)
				Me.SendPropertyChanging
				Me._userID = value
				Me.SendPropertyChanged("userID")
				Me.OnuserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", DbType:="Int NOT NULL")>  _
	Public Property clientID() As Integer
		Get
			Return Me._clientID
		End Get
		Set
			If ((Me._clientID = value)  _
						= false) Then
				Me.OnclientIDChanging(value)
				Me.SendPropertyChanging
				Me._clientID = value
				Me.SendPropertyChanged("clientID")
				Me.OnclientIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDefault", DbType:="Bit")>  _
	Public Property IsDefault() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDefault
		End Get
		Set
			If (Me._IsDefault.Equals(value) = false) Then
				Me.OnIsDefaultChanging(value)
				Me.SendPropertyChanging
				Me._IsDefault = value
				Me.SendPropertyChanged("IsDefault")
				Me.OnIsDefaultChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblStaffingPosition")>  _
Partial Public Class tblStaffingPosition
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _staffingPositionID As Integer
	
	Private _positionTitle As String
	
	Private _active As System.Nullable(Of Boolean)
	
	Private _payRate As System.Nullable(Of Decimal)
	
	Private _billingRate As System.Nullable(Of Decimal)
	
	Private _canAddExpenses As System.Nullable(Of Boolean)
	
	Private _canAddMedia As System.Nullable(Of Boolean)
	
	Private _allowRecap As System.Nullable(Of Boolean)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnstaffingPositionIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnstaffingPositionIDChanged()
    End Sub
    Partial Private Sub OnpositionTitleChanging(value As String)
    End Sub
    Partial Private Sub OnpositionTitleChanged()
    End Sub
    Partial Private Sub OnactiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnactiveChanged()
    End Sub
    Partial Private Sub OnpayRateChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnpayRateChanged()
    End Sub
    Partial Private Sub OnbillingRateChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnbillingRateChanged()
    End Sub
    Partial Private Sub OncanAddExpensesChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OncanAddExpensesChanged()
    End Sub
    Partial Private Sub OncanAddMediaChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OncanAddMediaChanged()
    End Sub
    Partial Private Sub OnallowRecapChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnallowRecapChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_staffingPositionID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property staffingPositionID() As Integer
		Get
			Return Me._staffingPositionID
		End Get
		Set
			If ((Me._staffingPositionID = value)  _
						= false) Then
				Me.OnstaffingPositionIDChanging(value)
				Me.SendPropertyChanging
				Me._staffingPositionID = value
				Me.SendPropertyChanged("staffingPositionID")
				Me.OnstaffingPositionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_positionTitle", DbType:="NVarChar(50)")>  _
	Public Property positionTitle() As String
		Get
			Return Me._positionTitle
		End Get
		Set
			If (String.Equals(Me._positionTitle, value) = false) Then
				Me.OnpositionTitleChanging(value)
				Me.SendPropertyChanging
				Me._positionTitle = value
				Me.SendPropertyChanged("positionTitle")
				Me.OnpositionTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_active", DbType:="Bit")>  _
	Public Property active() As System.Nullable(Of Boolean)
		Get
			Return Me._active
		End Get
		Set
			If (Me._active.Equals(value) = false) Then
				Me.OnactiveChanging(value)
				Me.SendPropertyChanging
				Me._active = value
				Me.SendPropertyChanged("active")
				Me.OnactiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_payRate", DbType:="Decimal(18,2)")>  _
	Public Property payRate() As System.Nullable(Of Decimal)
		Get
			Return Me._payRate
		End Get
		Set
			If (Me._payRate.Equals(value) = false) Then
				Me.OnpayRateChanging(value)
				Me.SendPropertyChanging
				Me._payRate = value
				Me.SendPropertyChanged("payRate")
				Me.OnpayRateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_billingRate", DbType:="Decimal(18,2)")>  _
	Public Property billingRate() As System.Nullable(Of Decimal)
		Get
			Return Me._billingRate
		End Get
		Set
			If (Me._billingRate.Equals(value) = false) Then
				Me.OnbillingRateChanging(value)
				Me.SendPropertyChanging
				Me._billingRate = value
				Me.SendPropertyChanged("billingRate")
				Me.OnbillingRateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_canAddExpenses", DbType:="Bit")>  _
	Public Property canAddExpenses() As System.Nullable(Of Boolean)
		Get
			Return Me._canAddExpenses
		End Get
		Set
			If (Me._canAddExpenses.Equals(value) = false) Then
				Me.OncanAddExpensesChanging(value)
				Me.SendPropertyChanging
				Me._canAddExpenses = value
				Me.SendPropertyChanged("canAddExpenses")
				Me.OncanAddExpensesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_canAddMedia", DbType:="Bit")>  _
	Public Property canAddMedia() As System.Nullable(Of Boolean)
		Get
			Return Me._canAddMedia
		End Get
		Set
			If (Me._canAddMedia.Equals(value) = false) Then
				Me.OncanAddMediaChanging(value)
				Me.SendPropertyChanging
				Me._canAddMedia = value
				Me.SendPropertyChanged("canAddMedia")
				Me.OncanAddMediaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_allowRecap", DbType:="Bit")>  _
	Public Property allowRecap() As System.Nullable(Of Boolean)
		Get
			Return Me._allowRecap
		End Get
		Set
			If (Me._allowRecap.Equals(value) = false) Then
				Me.OnallowRecapChanging(value)
				Me.SendPropertyChanging
				Me._allowRecap = value
				Me.SendPropertyChanged("allowRecap")
				Me.OnallowRecapChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblStaffInMarket")>  _
Partial Public Class tblStaffInMarket
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _staffInMarketID As Integer
	
	Private _staffID As Integer
	
	Private _marketID As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnstaffInMarketIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnstaffInMarketIDChanged()
    End Sub
    Partial Private Sub OnstaffIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnstaffIDChanged()
    End Sub
    Partial Private Sub OnmarketIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnmarketIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_staffInMarketID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property staffInMarketID() As Integer
		Get
			Return Me._staffInMarketID
		End Get
		Set
			If ((Me._staffInMarketID = value)  _
						= false) Then
				Me.OnstaffInMarketIDChanging(value)
				Me.SendPropertyChanging
				Me._staffInMarketID = value
				Me.SendPropertyChanged("staffInMarketID")
				Me.OnstaffInMarketIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_staffID", DbType:="Int NOT NULL")>  _
	Public Property staffID() As Integer
		Get
			Return Me._staffID
		End Get
		Set
			If ((Me._staffID = value)  _
						= false) Then
				Me.OnstaffIDChanging(value)
				Me.SendPropertyChanging
				Me._staffID = value
				Me.SendPropertyChanged("staffID")
				Me.OnstaffIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="Int NOT NULL")>  _
	Public Property marketID() As Integer
		Get
			Return Me._marketID
		End Get
		Set
			If ((Me._marketID = value)  _
						= false) Then
				Me.OnmarketIDChanging(value)
				Me.SendPropertyChanging
				Me._marketID = value
				Me.SendPropertyChanged("marketID")
				Me.OnmarketIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblStaffInPosition")>  _
Partial Public Class tblStaffInPosition
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _staffInPositionID As Integer
	
	Private _staffID As Integer
	
	Private _positionID As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnstaffInPositionIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnstaffInPositionIDChanged()
    End Sub
    Partial Private Sub OnstaffIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnstaffIDChanged()
    End Sub
    Partial Private Sub OnpositionIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnpositionIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_staffInPositionID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property staffInPositionID() As Integer
		Get
			Return Me._staffInPositionID
		End Get
		Set
			If ((Me._staffInPositionID = value)  _
						= false) Then
				Me.OnstaffInPositionIDChanging(value)
				Me.SendPropertyChanging
				Me._staffInPositionID = value
				Me.SendPropertyChanged("staffInPositionID")
				Me.OnstaffInPositionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_staffID", DbType:="Int NOT NULL")>  _
	Public Property staffID() As Integer
		Get
			Return Me._staffID
		End Get
		Set
			If ((Me._staffID = value)  _
						= false) Then
				Me.OnstaffIDChanging(value)
				Me.SendPropertyChanging
				Me._staffID = value
				Me.SendPropertyChanged("staffID")
				Me.OnstaffIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_positionID", DbType:="Int NOT NULL")>  _
	Public Property positionID() As Integer
		Get
			Return Me._positionID
		End Get
		Set
			If ((Me._positionID = value)  _
						= false) Then
				Me.OnpositionIDChanging(value)
				Me.SendPropertyChanging
				Me._positionID = value
				Me.SendPropertyChanged("positionID")
				Me.OnpositionIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblStaffMarket")>  _
Partial Public Class tblStaffMarket
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _staffMarketID As Integer
	
	Private _userID As String
	
	Private _marketID As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnstaffMarketIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnstaffMarketIDChanged()
    End Sub
    Partial Private Sub OnuserIDChanging(value As String)
    End Sub
    Partial Private Sub OnuserIDChanged()
    End Sub
    Partial Private Sub OnmarketIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnmarketIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_staffMarketID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property staffMarketID() As Integer
		Get
			Return Me._staffMarketID
		End Get
		Set
			If ((Me._staffMarketID = value)  _
						= false) Then
				Me.OnstaffMarketIDChanging(value)
				Me.SendPropertyChanging
				Me._staffMarketID = value
				Me.SendPropertyChanged("staffMarketID")
				Me.OnstaffMarketIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me.OnuserIDChanging(value)
				Me.SendPropertyChanging
				Me._userID = value
				Me.SendPropertyChanged("userID")
				Me.OnuserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="Int NOT NULL")>  _
	Public Property marketID() As Integer
		Get
			Return Me._marketID
		End Get
		Set
			If ((Me._marketID = value)  _
						= false) Then
				Me.OnmarketIDChanging(value)
				Me.SendPropertyChanging
				Me._marketID = value
				Me.SendPropertyChanged("marketID")
				Me.OnmarketIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblStaffSupplier")>  _
Partial Public Class tblStaffSupplier
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _staffSupplierID As Integer
	
	Private _userID As String
	
	Private _supplierID As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnstaffSupplierIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnstaffSupplierIDChanged()
    End Sub
    Partial Private Sub OnuserIDChanging(value As String)
    End Sub
    Partial Private Sub OnuserIDChanged()
    End Sub
    Partial Private Sub OnsupplierIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnsupplierIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_staffSupplierID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property staffSupplierID() As Integer
		Get
			Return Me._staffSupplierID
		End Get
		Set
			If ((Me._staffSupplierID = value)  _
						= false) Then
				Me.OnstaffSupplierIDChanging(value)
				Me.SendPropertyChanging
				Me._staffSupplierID = value
				Me.SendPropertyChanged("staffSupplierID")
				Me.OnstaffSupplierIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me.OnuserIDChanging(value)
				Me.SendPropertyChanging
				Me._userID = value
				Me.SendPropertyChanged("userID")
				Me.OnuserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int NOT NULL")>  _
	Public Property supplierID() As Integer
		Get
			Return Me._supplierID
		End Get
		Set
			If ((Me._supplierID = value)  _
						= false) Then
				Me.OnsupplierIDChanging(value)
				Me.SendPropertyChanging
				Me._supplierID = value
				Me.SendPropertyChanged("supplierID")
				Me.OnsupplierIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblStaffTeam")>  _
Partial Public Class tblStaffTeam
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _staffTeamID As Integer
	
	Private _userID As String
	
	Private _teamID As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnstaffTeamIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnstaffTeamIDChanged()
    End Sub
    Partial Private Sub OnuserIDChanging(value As String)
    End Sub
    Partial Private Sub OnuserIDChanged()
    End Sub
    Partial Private Sub OnteamIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnteamIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_staffTeamID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property staffTeamID() As Integer
		Get
			Return Me._staffTeamID
		End Get
		Set
			If ((Me._staffTeamID = value)  _
						= false) Then
				Me.OnstaffTeamIDChanging(value)
				Me.SendPropertyChanging
				Me._staffTeamID = value
				Me.SendPropertyChanged("staffTeamID")
				Me.OnstaffTeamIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me.OnuserIDChanging(value)
				Me.SendPropertyChanging
				Me._userID = value
				Me.SendPropertyChanged("userID")
				Me.OnuserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_teamID", DbType:="Int NOT NULL")>  _
	Public Property teamID() As Integer
		Get
			Return Me._teamID
		End Get
		Set
			If ((Me._teamID = value)  _
						= false) Then
				Me.OnteamIDChanging(value)
				Me.SendPropertyChanging
				Me._teamID = value
				Me.SendPropertyChanged("teamID")
				Me.OnteamIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblStates")>  _
Partial Public Class tblState
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _StateCode As String
	
	Private _StateName As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnStateCodeChanging(value As String)
    End Sub
    Partial Private Sub OnStateCodeChanged()
    End Sub
    Partial Private Sub OnStateNameChanging(value As String)
    End Sub
    Partial Private Sub OnStateNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StateCode", DbType:="Char(2) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property StateCode() As String
		Get
			Return Me._StateCode
		End Get
		Set
			If (String.Equals(Me._StateCode, value) = false) Then
				Me.OnStateCodeChanging(value)
				Me.SendPropertyChanging
				Me._StateCode = value
				Me.SendPropertyChanged("StateCode")
				Me.OnStateCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StateName", DbType:="VarChar(250) NOT NULL", CanBeNull:=false)>  _
	Public Property StateName() As String
		Get
			Return Me._StateName
		End Get
		Set
			If (String.Equals(Me._StateName, value) = false) Then
				Me.OnStateNameChanging(value)
				Me.SendPropertyChanging
				Me._StateName = value
				Me.SendPropertyChanged("StateName")
				Me.OnStateNameChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblStatus")>  _
Partial Public Class tblStatus
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _statusID As Integer
	
	Private _statusName As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnstatusIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnstatusIDChanged()
    End Sub
    Partial Private Sub OnstatusNameChanging(value As String)
    End Sub
    Partial Private Sub OnstatusNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_statusID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property statusID() As Integer
		Get
			Return Me._statusID
		End Get
		Set
			If ((Me._statusID = value)  _
						= false) Then
				Me.OnstatusIDChanging(value)
				Me.SendPropertyChanging
				Me._statusID = value
				Me.SendPropertyChanged("statusID")
				Me.OnstatusIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_statusName", DbType:="NVarChar(50)")>  _
	Public Property statusName() As String
		Get
			Return Me._statusName
		End Get
		Set
			If (String.Equals(Me._statusName, value) = false) Then
				Me.OnstatusNameChanging(value)
				Me.SendPropertyChanging
				Me._statusName = value
				Me.SendPropertyChanged("statusName")
				Me.OnstatusNameChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblSupplierBillingRate")>  _
Partial Public Class tblSupplierBillingRate
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _BillingRateID As Integer
	
	Private _SupplierID As Integer
	
	Private _RelatedItemID As System.Nullable(Of Integer)
	
	Private _Rate As System.Nullable(Of Decimal)
	
	Private _RateType As System.Nullable(Of Integer)
	
	Private _BillingRateType As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnBillingRateIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnBillingRateIDChanged()
    End Sub
    Partial Private Sub OnSupplierIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSupplierIDChanged()
    End Sub
    Partial Private Sub OnRelatedItemIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRelatedItemIDChanged()
    End Sub
    Partial Private Sub OnRateChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnRateChanged()
    End Sub
    Partial Private Sub OnRateTypeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRateTypeChanged()
    End Sub
    Partial Private Sub OnBillingRateTypeChanging(value As String)
    End Sub
    Partial Private Sub OnBillingRateTypeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BillingRateID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property BillingRateID() As Integer
		Get
			Return Me._BillingRateID
		End Get
		Set
			If ((Me._BillingRateID = value)  _
						= false) Then
				Me.OnBillingRateIDChanging(value)
				Me.SendPropertyChanging
				Me._BillingRateID = value
				Me.SendPropertyChanged("BillingRateID")
				Me.OnBillingRateIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SupplierID", DbType:="Int NOT NULL")>  _
	Public Property SupplierID() As Integer
		Get
			Return Me._SupplierID
		End Get
		Set
			If ((Me._SupplierID = value)  _
						= false) Then
				Me.OnSupplierIDChanging(value)
				Me.SendPropertyChanging
				Me._SupplierID = value
				Me.SendPropertyChanged("SupplierID")
				Me.OnSupplierIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RelatedItemID", DbType:="Int")>  _
	Public Property RelatedItemID() As System.Nullable(Of Integer)
		Get
			Return Me._RelatedItemID
		End Get
		Set
			If (Me._RelatedItemID.Equals(value) = false) Then
				Me.OnRelatedItemIDChanging(value)
				Me.SendPropertyChanging
				Me._RelatedItemID = value
				Me.SendPropertyChanged("RelatedItemID")
				Me.OnRelatedItemIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Rate", DbType:="Decimal(6,2)")>  _
	Public Property Rate() As System.Nullable(Of Decimal)
		Get
			Return Me._Rate
		End Get
		Set
			If (Me._Rate.Equals(value) = false) Then
				Me.OnRateChanging(value)
				Me.SendPropertyChanging
				Me._Rate = value
				Me.SendPropertyChanged("Rate")
				Me.OnRateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RateType", DbType:="Int")>  _
	Public Property RateType() As System.Nullable(Of Integer)
		Get
			Return Me._RateType
		End Get
		Set
			If (Me._RateType.Equals(value) = false) Then
				Me.OnRateTypeChanging(value)
				Me.SendPropertyChanging
				Me._RateType = value
				Me.SendPropertyChanged("RateType")
				Me.OnRateTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BillingRateType", DbType:="VarChar(50)")>  _
	Public Property BillingRateType() As String
		Get
			Return Me._BillingRateType
		End Get
		Set
			If (String.Equals(Me._BillingRateType, value) = false) Then
				Me.OnBillingRateTypeChanging(value)
				Me.SendPropertyChanging
				Me._BillingRateType = value
				Me.SendPropertyChanged("BillingRateType")
				Me.OnBillingRateTypeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblSupplierBillingRate_MarketSucharge")>  _
Partial Public Class tblSupplierBillingRate_MarketSucharge
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _BillingRateID As Integer
	
	Private _SupplierID As System.Nullable(Of Integer)
	
	Private _MarketID As System.Nullable(Of Integer)
	
	Private _Rate As System.Nullable(Of Integer)
	
	Private _RateType As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnBillingRateIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnBillingRateIDChanged()
    End Sub
    Partial Private Sub OnSupplierIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSupplierIDChanged()
    End Sub
    Partial Private Sub OnMarketIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnMarketIDChanged()
    End Sub
    Partial Private Sub OnRateChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRateChanged()
    End Sub
    Partial Private Sub OnRateTypeChanging(value As String)
    End Sub
    Partial Private Sub OnRateTypeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BillingRateID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property BillingRateID() As Integer
		Get
			Return Me._BillingRateID
		End Get
		Set
			If ((Me._BillingRateID = value)  _
						= false) Then
				Me.OnBillingRateIDChanging(value)
				Me.SendPropertyChanging
				Me._BillingRateID = value
				Me.SendPropertyChanged("BillingRateID")
				Me.OnBillingRateIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SupplierID", DbType:="Int")>  _
	Public Property SupplierID() As System.Nullable(Of Integer)
		Get
			Return Me._SupplierID
		End Get
		Set
			If (Me._SupplierID.Equals(value) = false) Then
				Me.OnSupplierIDChanging(value)
				Me.SendPropertyChanging
				Me._SupplierID = value
				Me.SendPropertyChanged("SupplierID")
				Me.OnSupplierIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MarketID", DbType:="Int")>  _
	Public Property MarketID() As System.Nullable(Of Integer)
		Get
			Return Me._MarketID
		End Get
		Set
			If (Me._MarketID.Equals(value) = false) Then
				Me.OnMarketIDChanging(value)
				Me.SendPropertyChanging
				Me._MarketID = value
				Me.SendPropertyChanged("MarketID")
				Me.OnMarketIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Rate", DbType:="Int")>  _
	Public Property Rate() As System.Nullable(Of Integer)
		Get
			Return Me._Rate
		End Get
		Set
			If (Me._Rate.Equals(value) = false) Then
				Me.OnRateChanging(value)
				Me.SendPropertyChanging
				Me._Rate = value
				Me.SendPropertyChanged("Rate")
				Me.OnRateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RateType", DbType:="VarChar(50)")>  _
	Public Property RateType() As String
		Get
			Return Me._RateType
		End Get
		Set
			If (String.Equals(Me._RateType, value) = false) Then
				Me.OnRateTypeChanging(value)
				Me.SendPropertyChanging
				Me._RateType = value
				Me.SendPropertyChanged("RateType")
				Me.OnRateTypeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblSupplierBudgetQuestion")>  _
Partial Public Class tblSupplierBudgetQuestion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _supplierBudgetQuestionID As Integer
	
	Private _supplierID As Integer
	
	Private _question As String
	
	Private _questionType As String
	
	Private _choices As String
	
	Private _displayOption As String
	
	Private _lines As String
	
	Private _description As String
	
	Private _yes_noDefaultValue As String
	
	Private _numberDecimalPlace As System.Nullable(Of Integer)
	
	Private _numberDefaultValue As String
	
	Private _showPercentage As System.Nullable(Of Boolean)
	
	Private _dateFormat As String
	
	Private _dateDefaultValue As String
	
	Private _timeFormat As String
	
	Private _dateDisplay As String
	
	Private _sortOrder As System.Nullable(Of Integer)
	
	Private _desiredOrder As System.Nullable(Of Integer)
	
	Private _required As System.Nullable(Of Boolean)
	
	Private _digit As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnsupplierBudgetQuestionIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnsupplierBudgetQuestionIDChanged()
    End Sub
    Partial Private Sub OnsupplierIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnsupplierIDChanged()
    End Sub
    Partial Private Sub OnquestionChanging(value As String)
    End Sub
    Partial Private Sub OnquestionChanged()
    End Sub
    Partial Private Sub OnquestionTypeChanging(value As String)
    End Sub
    Partial Private Sub OnquestionTypeChanged()
    End Sub
    Partial Private Sub OnchoicesChanging(value As String)
    End Sub
    Partial Private Sub OnchoicesChanged()
    End Sub
    Partial Private Sub OndisplayOptionChanging(value As String)
    End Sub
    Partial Private Sub OndisplayOptionChanged()
    End Sub
    Partial Private Sub OnlinesChanging(value As String)
    End Sub
    Partial Private Sub OnlinesChanged()
    End Sub
    Partial Private Sub OndescriptionChanging(value As String)
    End Sub
    Partial Private Sub OndescriptionChanged()
    End Sub
    Partial Private Sub Onyes_noDefaultValueChanging(value As String)
    End Sub
    Partial Private Sub Onyes_noDefaultValueChanged()
    End Sub
    Partial Private Sub OnnumberDecimalPlaceChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnnumberDecimalPlaceChanged()
    End Sub
    Partial Private Sub OnnumberDefaultValueChanging(value As String)
    End Sub
    Partial Private Sub OnnumberDefaultValueChanged()
    End Sub
    Partial Private Sub OnshowPercentageChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnshowPercentageChanged()
    End Sub
    Partial Private Sub OndateFormatChanging(value As String)
    End Sub
    Partial Private Sub OndateFormatChanged()
    End Sub
    Partial Private Sub OndateDefaultValueChanging(value As String)
    End Sub
    Partial Private Sub OndateDefaultValueChanged()
    End Sub
    Partial Private Sub OntimeFormatChanging(value As String)
    End Sub
    Partial Private Sub OntimeFormatChanged()
    End Sub
    Partial Private Sub OndateDisplayChanging(value As String)
    End Sub
    Partial Private Sub OndateDisplayChanged()
    End Sub
    Partial Private Sub OnsortOrderChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnsortOrderChanged()
    End Sub
    Partial Private Sub OndesiredOrderChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OndesiredOrderChanged()
    End Sub
    Partial Private Sub OnrequiredChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnrequiredChanged()
    End Sub
    Partial Private Sub OndigitChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OndigitChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierBudgetQuestionID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property supplierBudgetQuestionID() As Integer
		Get
			Return Me._supplierBudgetQuestionID
		End Get
		Set
			If ((Me._supplierBudgetQuestionID = value)  _
						= false) Then
				Me.OnsupplierBudgetQuestionIDChanging(value)
				Me.SendPropertyChanging
				Me._supplierBudgetQuestionID = value
				Me.SendPropertyChanged("supplierBudgetQuestionID")
				Me.OnsupplierBudgetQuestionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int NOT NULL")>  _
	Public Property supplierID() As Integer
		Get
			Return Me._supplierID
		End Get
		Set
			If ((Me._supplierID = value)  _
						= false) Then
				Me.OnsupplierIDChanging(value)
				Me.SendPropertyChanging
				Me._supplierID = value
				Me.SendPropertyChanged("supplierID")
				Me.OnsupplierIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_question", DbType:="NVarChar(500)")>  _
	Public Property question() As String
		Get
			Return Me._question
		End Get
		Set
			If (String.Equals(Me._question, value) = false) Then
				Me.OnquestionChanging(value)
				Me.SendPropertyChanging
				Me._question = value
				Me.SendPropertyChanged("question")
				Me.OnquestionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_questionType", DbType:="VarChar(50)")>  _
	Public Property questionType() As String
		Get
			Return Me._questionType
		End Get
		Set
			If (String.Equals(Me._questionType, value) = false) Then
				Me.OnquestionTypeChanging(value)
				Me.SendPropertyChanging
				Me._questionType = value
				Me.SendPropertyChanged("questionType")
				Me.OnquestionTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_choices", DbType:="NVarChar(MAX)")>  _
	Public Property choices() As String
		Get
			Return Me._choices
		End Get
		Set
			If (String.Equals(Me._choices, value) = false) Then
				Me.OnchoicesChanging(value)
				Me.SendPropertyChanging
				Me._choices = value
				Me.SendPropertyChanged("choices")
				Me.OnchoicesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_displayOption", DbType:="NVarChar(50)")>  _
	Public Property displayOption() As String
		Get
			Return Me._displayOption
		End Get
		Set
			If (String.Equals(Me._displayOption, value) = false) Then
				Me.OndisplayOptionChanging(value)
				Me.SendPropertyChanging
				Me._displayOption = value
				Me.SendPropertyChanged("displayOption")
				Me.OndisplayOptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lines", DbType:="VarChar(50)")>  _
	Public Property lines() As String
		Get
			Return Me._lines
		End Get
		Set
			If (String.Equals(Me._lines, value) = false) Then
				Me.OnlinesChanging(value)
				Me.SendPropertyChanging
				Me._lines = value
				Me.SendPropertyChanged("lines")
				Me.OnlinesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_description", DbType:="NVarChar(2000)")>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me.OndescriptionChanging(value)
				Me.SendPropertyChanging
				Me._description = value
				Me.SendPropertyChanged("description")
				Me.OndescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[yes/noDefaultValue]", Storage:="_yes_noDefaultValue", DbType:="NVarChar(50)")>  _
	Public Property yes_noDefaultValue() As String
		Get
			Return Me._yes_noDefaultValue
		End Get
		Set
			If (String.Equals(Me._yes_noDefaultValue, value) = false) Then
				Me.Onyes_noDefaultValueChanging(value)
				Me.SendPropertyChanging
				Me._yes_noDefaultValue = value
				Me.SendPropertyChanged("yes_noDefaultValue")
				Me.Onyes_noDefaultValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_numberDecimalPlace", DbType:="Int")>  _
	Public Property numberDecimalPlace() As System.Nullable(Of Integer)
		Get
			Return Me._numberDecimalPlace
		End Get
		Set
			If (Me._numberDecimalPlace.Equals(value) = false) Then
				Me.OnnumberDecimalPlaceChanging(value)
				Me.SendPropertyChanging
				Me._numberDecimalPlace = value
				Me.SendPropertyChanged("numberDecimalPlace")
				Me.OnnumberDecimalPlaceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_numberDefaultValue", DbType:="VarChar(50)")>  _
	Public Property numberDefaultValue() As String
		Get
			Return Me._numberDefaultValue
		End Get
		Set
			If (String.Equals(Me._numberDefaultValue, value) = false) Then
				Me.OnnumberDefaultValueChanging(value)
				Me.SendPropertyChanging
				Me._numberDefaultValue = value
				Me.SendPropertyChanged("numberDefaultValue")
				Me.OnnumberDefaultValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_showPercentage", DbType:="Bit")>  _
	Public Property showPercentage() As System.Nullable(Of Boolean)
		Get
			Return Me._showPercentage
		End Get
		Set
			If (Me._showPercentage.Equals(value) = false) Then
				Me.OnshowPercentageChanging(value)
				Me.SendPropertyChanging
				Me._showPercentage = value
				Me.SendPropertyChanged("showPercentage")
				Me.OnshowPercentageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateFormat", DbType:="NVarChar(50)")>  _
	Public Property dateFormat() As String
		Get
			Return Me._dateFormat
		End Get
		Set
			If (String.Equals(Me._dateFormat, value) = false) Then
				Me.OndateFormatChanging(value)
				Me.SendPropertyChanging
				Me._dateFormat = value
				Me.SendPropertyChanged("dateFormat")
				Me.OndateFormatChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateDefaultValue", DbType:="NVarChar(50)")>  _
	Public Property dateDefaultValue() As String
		Get
			Return Me._dateDefaultValue
		End Get
		Set
			If (String.Equals(Me._dateDefaultValue, value) = false) Then
				Me.OndateDefaultValueChanging(value)
				Me.SendPropertyChanging
				Me._dateDefaultValue = value
				Me.SendPropertyChanged("dateDefaultValue")
				Me.OndateDefaultValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_timeFormat", DbType:="NVarChar(50)")>  _
	Public Property timeFormat() As String
		Get
			Return Me._timeFormat
		End Get
		Set
			If (String.Equals(Me._timeFormat, value) = false) Then
				Me.OntimeFormatChanging(value)
				Me.SendPropertyChanging
				Me._timeFormat = value
				Me.SendPropertyChanged("timeFormat")
				Me.OntimeFormatChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateDisplay", DbType:="NVarChar(50)")>  _
	Public Property dateDisplay() As String
		Get
			Return Me._dateDisplay
		End Get
		Set
			If (String.Equals(Me._dateDisplay, value) = false) Then
				Me.OndateDisplayChanging(value)
				Me.SendPropertyChanging
				Me._dateDisplay = value
				Me.SendPropertyChanged("dateDisplay")
				Me.OndateDisplayChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sortOrder", DbType:="Int")>  _
	Public Property sortOrder() As System.Nullable(Of Integer)
		Get
			Return Me._sortOrder
		End Get
		Set
			If (Me._sortOrder.Equals(value) = false) Then
				Me.OnsortOrderChanging(value)
				Me.SendPropertyChanging
				Me._sortOrder = value
				Me.SendPropertyChanged("sortOrder")
				Me.OnsortOrderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_desiredOrder", DbType:="Int")>  _
	Public Property desiredOrder() As System.Nullable(Of Integer)
		Get
			Return Me._desiredOrder
		End Get
		Set
			If (Me._desiredOrder.Equals(value) = false) Then
				Me.OndesiredOrderChanging(value)
				Me.SendPropertyChanging
				Me._desiredOrder = value
				Me.SendPropertyChanged("desiredOrder")
				Me.OndesiredOrderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_required", DbType:="Bit")>  _
	Public Property required() As System.Nullable(Of Boolean)
		Get
			Return Me._required
		End Get
		Set
			If (Me._required.Equals(value) = false) Then
				Me.OnrequiredChanging(value)
				Me.SendPropertyChanging
				Me._required = value
				Me.SendPropertyChanged("required")
				Me.OnrequiredChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_digit", DbType:="Int")>  _
	Public Property digit() As System.Nullable(Of Integer)
		Get
			Return Me._digit
		End Get
		Set
			If (Me._digit.Equals(value) = false) Then
				Me.OndigitChanging(value)
				Me.SendPropertyChanging
				Me._digit = value
				Me.SendPropertyChanged("digit")
				Me.OndigitChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblSupplierBudgetQuestionOptions")>  _
Partial Public Class tblSupplierBudgetQuestionOption
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _optionID As Integer
	
	Private _supplierBudgetQuestionID As Integer
	
	Private _option As String
	
	Private _sortOrder As System.Nullable(Of Integer)
	
	Private _optionType As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnoptionIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnoptionIDChanged()
    End Sub
    Partial Private Sub OnsupplierBudgetQuestionIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnsupplierBudgetQuestionIDChanged()
    End Sub
    Partial Private Sub OnoptionChanging(value As String)
    End Sub
    Partial Private Sub OnoptionChanged()
    End Sub
    Partial Private Sub OnsortOrderChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnsortOrderChanged()
    End Sub
    Partial Private Sub OnoptionTypeChanging(value As String)
    End Sub
    Partial Private Sub OnoptionTypeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_optionID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property optionID() As Integer
		Get
			Return Me._optionID
		End Get
		Set
			If ((Me._optionID = value)  _
						= false) Then
				Me.OnoptionIDChanging(value)
				Me.SendPropertyChanging
				Me._optionID = value
				Me.SendPropertyChanged("optionID")
				Me.OnoptionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierBudgetQuestionID", DbType:="Int NOT NULL")>  _
	Public Property supplierBudgetQuestionID() As Integer
		Get
			Return Me._supplierBudgetQuestionID
		End Get
		Set
			If ((Me._supplierBudgetQuestionID = value)  _
						= false) Then
				Me.OnsupplierBudgetQuestionIDChanging(value)
				Me.SendPropertyChanging
				Me._supplierBudgetQuestionID = value
				Me.SendPropertyChanged("supplierBudgetQuestionID")
				Me.OnsupplierBudgetQuestionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_option", DbType:="NVarChar(50)")>  _
	Public Property [option]() As String
		Get
			Return Me._option
		End Get
		Set
			If (String.Equals(Me._option, value) = false) Then
				Me.OnoptionChanging(value)
				Me.SendPropertyChanging
				Me._option = value
				Me.SendPropertyChanged("[option]")
				Me.OnoptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sortOrder", DbType:="Int")>  _
	Public Property sortOrder() As System.Nullable(Of Integer)
		Get
			Return Me._sortOrder
		End Get
		Set
			If (Me._sortOrder.Equals(value) = false) Then
				Me.OnsortOrderChanging(value)
				Me.SendPropertyChanging
				Me._sortOrder = value
				Me.SendPropertyChanged("sortOrder")
				Me.OnsortOrderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_optionType", DbType:="VarChar(50)")>  _
	Public Property optionType() As String
		Get
			Return Me._optionType
		End Get
		Set
			If (String.Equals(Me._optionType, value) = false) Then
				Me.OnoptionTypeChanging(value)
				Me.SendPropertyChanging
				Me._optionType = value
				Me.SendPropertyChanged("optionType")
				Me.OnoptionTypeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblSupplierBudgetQuestionResult")>  _
Partial Public Class tblSupplierBudgetQuestionResult
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _supplierBudgetQuestionResultID As Integer
	
	Private _eventID As System.Nullable(Of Integer)
	
	Private _fieldID As System.Nullable(Of Integer)
	
	Private _question As String
	
	Private _answer As String
	
	Private _order As System.Nullable(Of Integer)
	
	Private _fieldType As String
	
	Private _rows As System.Nullable(Of Integer)
	
	Private _options As String
	
	Private _displayOptions As String
	
	Private _description As String
	
	Private _yes_noDefaultValue As String
	
	Private _numberDecimalPlace As System.Nullable(Of Integer)
	
	Private _numberDefaultValue As String
	
	Private _showPercentage As System.Nullable(Of Boolean)
	
	Private _dateFormat As String
	
	Private _dateDefaultValue As String
	
	Private _timeFormat As String
	
	Private _dateDisplay As String
	
	Private _selectedDateVaule As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnsupplierBudgetQuestionResultIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnsupplierBudgetQuestionResultIDChanged()
    End Sub
    Partial Private Sub OneventIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OneventIDChanged()
    End Sub
    Partial Private Sub OnfieldIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnfieldIDChanged()
    End Sub
    Partial Private Sub OnquestionChanging(value As String)
    End Sub
    Partial Private Sub OnquestionChanged()
    End Sub
    Partial Private Sub OnanswerChanging(value As String)
    End Sub
    Partial Private Sub OnanswerChanged()
    End Sub
    Partial Private Sub OnorderChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnorderChanged()
    End Sub
    Partial Private Sub OnfieldTypeChanging(value As String)
    End Sub
    Partial Private Sub OnfieldTypeChanged()
    End Sub
    Partial Private Sub OnrowsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnrowsChanged()
    End Sub
    Partial Private Sub OnoptionsChanging(value As String)
    End Sub
    Partial Private Sub OnoptionsChanged()
    End Sub
    Partial Private Sub OndisplayOptionsChanging(value As String)
    End Sub
    Partial Private Sub OndisplayOptionsChanged()
    End Sub
    Partial Private Sub OndescriptionChanging(value As String)
    End Sub
    Partial Private Sub OndescriptionChanged()
    End Sub
    Partial Private Sub Onyes_noDefaultValueChanging(value As String)
    End Sub
    Partial Private Sub Onyes_noDefaultValueChanged()
    End Sub
    Partial Private Sub OnnumberDecimalPlaceChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnnumberDecimalPlaceChanged()
    End Sub
    Partial Private Sub OnnumberDefaultValueChanging(value As String)
    End Sub
    Partial Private Sub OnnumberDefaultValueChanged()
    End Sub
    Partial Private Sub OnshowPercentageChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnshowPercentageChanged()
    End Sub
    Partial Private Sub OndateFormatChanging(value As String)
    End Sub
    Partial Private Sub OndateFormatChanged()
    End Sub
    Partial Private Sub OndateDefaultValueChanging(value As String)
    End Sub
    Partial Private Sub OndateDefaultValueChanged()
    End Sub
    Partial Private Sub OntimeFormatChanging(value As String)
    End Sub
    Partial Private Sub OntimeFormatChanged()
    End Sub
    Partial Private Sub OndateDisplayChanging(value As String)
    End Sub
    Partial Private Sub OndateDisplayChanged()
    End Sub
    Partial Private Sub OnselectedDateVauleChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnselectedDateVauleChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierBudgetQuestionResultID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property supplierBudgetQuestionResultID() As Integer
		Get
			Return Me._supplierBudgetQuestionResultID
		End Get
		Set
			If ((Me._supplierBudgetQuestionResultID = value)  _
						= false) Then
				Me.OnsupplierBudgetQuestionResultIDChanging(value)
				Me.SendPropertyChanging
				Me._supplierBudgetQuestionResultID = value
				Me.SendPropertyChanged("supplierBudgetQuestionResultID")
				Me.OnsupplierBudgetQuestionResultIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int")>  _
	Public Property eventID() As System.Nullable(Of Integer)
		Get
			Return Me._eventID
		End Get
		Set
			If (Me._eventID.Equals(value) = false) Then
				Me.OneventIDChanging(value)
				Me.SendPropertyChanging
				Me._eventID = value
				Me.SendPropertyChanged("eventID")
				Me.OneventIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fieldID", DbType:="Int")>  _
	Public Property fieldID() As System.Nullable(Of Integer)
		Get
			Return Me._fieldID
		End Get
		Set
			If (Me._fieldID.Equals(value) = false) Then
				Me.OnfieldIDChanging(value)
				Me.SendPropertyChanging
				Me._fieldID = value
				Me.SendPropertyChanged("fieldID")
				Me.OnfieldIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_question", DbType:="VarChar(256)")>  _
	Public Property question() As String
		Get
			Return Me._question
		End Get
		Set
			If (String.Equals(Me._question, value) = false) Then
				Me.OnquestionChanging(value)
				Me.SendPropertyChanging
				Me._question = value
				Me.SendPropertyChanged("question")
				Me.OnquestionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_answer", DbType:="VarChar(MAX)")>  _
	Public Property answer() As String
		Get
			Return Me._answer
		End Get
		Set
			If (String.Equals(Me._answer, value) = false) Then
				Me.OnanswerChanging(value)
				Me.SendPropertyChanging
				Me._answer = value
				Me.SendPropertyChanged("answer")
				Me.OnanswerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_order", DbType:="Int")>  _
	Public Property [order]() As System.Nullable(Of Integer)
		Get
			Return Me._order
		End Get
		Set
			If (Me._order.Equals(value) = false) Then
				Me.OnorderChanging(value)
				Me.SendPropertyChanging
				Me._order = value
				Me.SendPropertyChanged("[order]")
				Me.OnorderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fieldType", DbType:="VarChar(50)")>  _
	Public Property fieldType() As String
		Get
			Return Me._fieldType
		End Get
		Set
			If (String.Equals(Me._fieldType, value) = false) Then
				Me.OnfieldTypeChanging(value)
				Me.SendPropertyChanging
				Me._fieldType = value
				Me.SendPropertyChanged("fieldType")
				Me.OnfieldTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rows", DbType:="Int")>  _
	Public Property rows() As System.Nullable(Of Integer)
		Get
			Return Me._rows
		End Get
		Set
			If (Me._rows.Equals(value) = false) Then
				Me.OnrowsChanging(value)
				Me.SendPropertyChanging
				Me._rows = value
				Me.SendPropertyChanged("rows")
				Me.OnrowsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_options", DbType:="VarChar(50)")>  _
	Public Property options() As String
		Get
			Return Me._options
		End Get
		Set
			If (String.Equals(Me._options, value) = false) Then
				Me.OnoptionsChanging(value)
				Me.SendPropertyChanging
				Me._options = value
				Me.SendPropertyChanged("options")
				Me.OnoptionsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_displayOptions", DbType:="NVarChar(50)")>  _
	Public Property displayOptions() As String
		Get
			Return Me._displayOptions
		End Get
		Set
			If (String.Equals(Me._displayOptions, value) = false) Then
				Me.OndisplayOptionsChanging(value)
				Me.SendPropertyChanging
				Me._displayOptions = value
				Me.SendPropertyChanged("displayOptions")
				Me.OndisplayOptionsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_description", DbType:="NVarChar(2000)")>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me.OndescriptionChanging(value)
				Me.SendPropertyChanging
				Me._description = value
				Me.SendPropertyChanged("description")
				Me.OndescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[yes/noDefaultValue]", Storage:="_yes_noDefaultValue", DbType:="NVarChar(50)")>  _
	Public Property yes_noDefaultValue() As String
		Get
			Return Me._yes_noDefaultValue
		End Get
		Set
			If (String.Equals(Me._yes_noDefaultValue, value) = false) Then
				Me.Onyes_noDefaultValueChanging(value)
				Me.SendPropertyChanging
				Me._yes_noDefaultValue = value
				Me.SendPropertyChanged("yes_noDefaultValue")
				Me.Onyes_noDefaultValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_numberDecimalPlace", DbType:="Int")>  _
	Public Property numberDecimalPlace() As System.Nullable(Of Integer)
		Get
			Return Me._numberDecimalPlace
		End Get
		Set
			If (Me._numberDecimalPlace.Equals(value) = false) Then
				Me.OnnumberDecimalPlaceChanging(value)
				Me.SendPropertyChanging
				Me._numberDecimalPlace = value
				Me.SendPropertyChanged("numberDecimalPlace")
				Me.OnnumberDecimalPlaceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_numberDefaultValue", DbType:="VarChar(50)")>  _
	Public Property numberDefaultValue() As String
		Get
			Return Me._numberDefaultValue
		End Get
		Set
			If (String.Equals(Me._numberDefaultValue, value) = false) Then
				Me.OnnumberDefaultValueChanging(value)
				Me.SendPropertyChanging
				Me._numberDefaultValue = value
				Me.SendPropertyChanged("numberDefaultValue")
				Me.OnnumberDefaultValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_showPercentage", DbType:="Bit")>  _
	Public Property showPercentage() As System.Nullable(Of Boolean)
		Get
			Return Me._showPercentage
		End Get
		Set
			If (Me._showPercentage.Equals(value) = false) Then
				Me.OnshowPercentageChanging(value)
				Me.SendPropertyChanging
				Me._showPercentage = value
				Me.SendPropertyChanged("showPercentage")
				Me.OnshowPercentageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateFormat", DbType:="NVarChar(50)")>  _
	Public Property dateFormat() As String
		Get
			Return Me._dateFormat
		End Get
		Set
			If (String.Equals(Me._dateFormat, value) = false) Then
				Me.OndateFormatChanging(value)
				Me.SendPropertyChanging
				Me._dateFormat = value
				Me.SendPropertyChanged("dateFormat")
				Me.OndateFormatChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateDefaultValue", DbType:="NVarChar(50)")>  _
	Public Property dateDefaultValue() As String
		Get
			Return Me._dateDefaultValue
		End Get
		Set
			If (String.Equals(Me._dateDefaultValue, value) = false) Then
				Me.OndateDefaultValueChanging(value)
				Me.SendPropertyChanging
				Me._dateDefaultValue = value
				Me.SendPropertyChanged("dateDefaultValue")
				Me.OndateDefaultValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_timeFormat", DbType:="NVarChar(50)")>  _
	Public Property timeFormat() As String
		Get
			Return Me._timeFormat
		End Get
		Set
			If (String.Equals(Me._timeFormat, value) = false) Then
				Me.OntimeFormatChanging(value)
				Me.SendPropertyChanging
				Me._timeFormat = value
				Me.SendPropertyChanged("timeFormat")
				Me.OntimeFormatChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateDisplay", DbType:="NVarChar(50)")>  _
	Public Property dateDisplay() As String
		Get
			Return Me._dateDisplay
		End Get
		Set
			If (String.Equals(Me._dateDisplay, value) = false) Then
				Me.OndateDisplayChanging(value)
				Me.SendPropertyChanging
				Me._dateDisplay = value
				Me.SendPropertyChanged("dateDisplay")
				Me.OndateDisplayChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_selectedDateVaule", DbType:="SmallDateTime")>  _
	Public Property selectedDateVaule() As System.Nullable(Of Date)
		Get
			Return Me._selectedDateVaule
		End Get
		Set
			If (Me._selectedDateVaule.Equals(value) = false) Then
				Me.OnselectedDateVauleChanging(value)
				Me.SendPropertyChanging
				Me._selectedDateVaule = value
				Me.SendPropertyChanged("selectedDateVaule")
				Me.OnselectedDateVauleChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblSupplierDocument")>  _
Partial Public Class tblSupplierDocument
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _DocumentID As String
	
	Private _SupplierID As Integer
	
	Private _DocumentName As String
	
	Private _FileType As String
	
	Private _DocumentURL As String
	
	Private _ModifiedBy As String
	
	Private _ModifiedDate As System.Nullable(Of Date)
	
	Private _data As System.Data.Linq.Binary
	
	Private _size As System.Nullable(Of Long)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDocumentIDChanging(value As String)
    End Sub
    Partial Private Sub OnDocumentIDChanged()
    End Sub
    Partial Private Sub OnSupplierIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSupplierIDChanged()
    End Sub
    Partial Private Sub OnDocumentNameChanging(value As String)
    End Sub
    Partial Private Sub OnDocumentNameChanged()
    End Sub
    Partial Private Sub OnFileTypeChanging(value As String)
    End Sub
    Partial Private Sub OnFileTypeChanged()
    End Sub
    Partial Private Sub OnDocumentURLChanging(value As String)
    End Sub
    Partial Private Sub OnDocumentURLChanged()
    End Sub
    Partial Private Sub OnModifiedByChanging(value As String)
    End Sub
    Partial Private Sub OnModifiedByChanged()
    End Sub
    Partial Private Sub OnModifiedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnModifiedDateChanged()
    End Sub
    Partial Private Sub OndataChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OndataChanged()
    End Sub
    Partial Private Sub OnsizeChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnsizeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DocumentID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property DocumentID() As String
		Get
			Return Me._DocumentID
		End Get
		Set
			If (String.Equals(Me._DocumentID, value) = false) Then
				Me.OnDocumentIDChanging(value)
				Me.SendPropertyChanging
				Me._DocumentID = value
				Me.SendPropertyChanged("DocumentID")
				Me.OnDocumentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SupplierID", DbType:="Int NOT NULL")>  _
	Public Property SupplierID() As Integer
		Get
			Return Me._SupplierID
		End Get
		Set
			If ((Me._SupplierID = value)  _
						= false) Then
				Me.OnSupplierIDChanging(value)
				Me.SendPropertyChanging
				Me._SupplierID = value
				Me.SendPropertyChanged("SupplierID")
				Me.OnSupplierIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DocumentName", DbType:="VarChar(256)")>  _
	Public Property DocumentName() As String
		Get
			Return Me._DocumentName
		End Get
		Set
			If (String.Equals(Me._DocumentName, value) = false) Then
				Me.OnDocumentNameChanging(value)
				Me.SendPropertyChanging
				Me._DocumentName = value
				Me.SendPropertyChanged("DocumentName")
				Me.OnDocumentNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FileType", DbType:="VarChar(50)")>  _
	Public Property FileType() As String
		Get
			Return Me._FileType
		End Get
		Set
			If (String.Equals(Me._FileType, value) = false) Then
				Me.OnFileTypeChanging(value)
				Me.SendPropertyChanging
				Me._FileType = value
				Me.SendPropertyChanged("FileType")
				Me.OnFileTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DocumentURL", DbType:="NVarChar(1000)")>  _
	Public Property DocumentURL() As String
		Get
			Return Me._DocumentURL
		End Get
		Set
			If (String.Equals(Me._DocumentURL, value) = false) Then
				Me.OnDocumentURLChanging(value)
				Me.SendPropertyChanging
				Me._DocumentURL = value
				Me.SendPropertyChanged("DocumentURL")
				Me.OnDocumentURLChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedBy", DbType:="NVarChar(50)")>  _
	Public Property ModifiedBy() As String
		Get
			Return Me._ModifiedBy
		End Get
		Set
			If (String.Equals(Me._ModifiedBy, value) = false) Then
				Me.OnModifiedByChanging(value)
				Me.SendPropertyChanging
				Me._ModifiedBy = value
				Me.SendPropertyChanged("ModifiedBy")
				Me.OnModifiedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDate", DbType:="SmallDateTime")>  _
	Public Property ModifiedDate() As System.Nullable(Of Date)
		Get
			Return Me._ModifiedDate
		End Get
		Set
			If (Me._ModifiedDate.Equals(value) = false) Then
				Me.OnModifiedDateChanging(value)
				Me.SendPropertyChanging
				Me._ModifiedDate = value
				Me.SendPropertyChanged("ModifiedDate")
				Me.OnModifiedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_data", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property data() As System.Data.Linq.Binary
		Get
			Return Me._data
		End Get
		Set
			If (Object.Equals(Me._data, value) = false) Then
				Me.OndataChanging(value)
				Me.SendPropertyChanging
				Me._data = value
				Me.SendPropertyChanged("data")
				Me.OndataChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_size", DbType:="BigInt")>  _
	Public Property size() As System.Nullable(Of Long)
		Get
			Return Me._size
		End Get
		Set
			If (Me._size.Equals(value) = false) Then
				Me.OnsizeChanging(value)
				Me.SendPropertyChanging
				Me._size = value
				Me.SendPropertyChanged("size")
				Me.OnsizeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblTeam")>  _
Partial Public Class tblTeam
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _teamID As Integer
	
	Private _teamName As String
	
	Private _clientID As System.Nullable(Of Integer)
	
	Private _active As System.Nullable(Of Boolean)
	
	Private _enableAllMarkets As System.Nullable(Of Boolean)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnteamIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnteamIDChanged()
    End Sub
    Partial Private Sub OnteamNameChanging(value As String)
    End Sub
    Partial Private Sub OnteamNameChanged()
    End Sub
    Partial Private Sub OnclientIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnclientIDChanged()
    End Sub
    Partial Private Sub OnactiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnactiveChanged()
    End Sub
    Partial Private Sub OnenableAllMarketsChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnenableAllMarketsChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_teamID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property teamID() As Integer
		Get
			Return Me._teamID
		End Get
		Set
			If ((Me._teamID = value)  _
						= false) Then
				Me.OnteamIDChanging(value)
				Me.SendPropertyChanging
				Me._teamID = value
				Me.SendPropertyChanged("teamID")
				Me.OnteamIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_teamName", DbType:="NVarChar(50)")>  _
	Public Property teamName() As String
		Get
			Return Me._teamName
		End Get
		Set
			If (String.Equals(Me._teamName, value) = false) Then
				Me.OnteamNameChanging(value)
				Me.SendPropertyChanging
				Me._teamName = value
				Me.SendPropertyChanged("teamName")
				Me.OnteamNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", DbType:="Int")>  _
	Public Property clientID() As System.Nullable(Of Integer)
		Get
			Return Me._clientID
		End Get
		Set
			If (Me._clientID.Equals(value) = false) Then
				Me.OnclientIDChanging(value)
				Me.SendPropertyChanging
				Me._clientID = value
				Me.SendPropertyChanged("clientID")
				Me.OnclientIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_active", DbType:="Bit")>  _
	Public Property active() As System.Nullable(Of Boolean)
		Get
			Return Me._active
		End Get
		Set
			If (Me._active.Equals(value) = false) Then
				Me.OnactiveChanging(value)
				Me.SendPropertyChanging
				Me._active = value
				Me.SendPropertyChanged("active")
				Me.OnactiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_enableAllMarkets", DbType:="Bit")>  _
	Public Property enableAllMarkets() As System.Nullable(Of Boolean)
		Get
			Return Me._enableAllMarkets
		End Get
		Set
			If (Me._enableAllMarkets.Equals(value) = false) Then
				Me.OnenableAllMarketsChanging(value)
				Me.SendPropertyChanging
				Me._enableAllMarkets = value
				Me.SendPropertyChanged("enableAllMarkets")
				Me.OnenableAllMarketsChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblTeamMarket")>  _
Partial Public Class tblTeamMarket
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _teamMarketID As Integer
	
	Private _teamID As Integer
	
	Private _marketID As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnteamMarketIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnteamMarketIDChanged()
    End Sub
    Partial Private Sub OnteamIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnteamIDChanged()
    End Sub
    Partial Private Sub OnmarketIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnmarketIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_teamMarketID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property teamMarketID() As Integer
		Get
			Return Me._teamMarketID
		End Get
		Set
			If ((Me._teamMarketID = value)  _
						= false) Then
				Me.OnteamMarketIDChanging(value)
				Me.SendPropertyChanging
				Me._teamMarketID = value
				Me.SendPropertyChanged("teamMarketID")
				Me.OnteamMarketIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_teamID", DbType:="Int NOT NULL")>  _
	Public Property teamID() As Integer
		Get
			Return Me._teamID
		End Get
		Set
			If ((Me._teamID = value)  _
						= false) Then
				Me.OnteamIDChanging(value)
				Me.SendPropertyChanging
				Me._teamID = value
				Me.SendPropertyChanged("teamID")
				Me.OnteamIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="Int NOT NULL")>  _
	Public Property marketID() As Integer
		Get
			Return Me._marketID
		End Get
		Set
			If ((Me._marketID = value)  _
						= false) Then
				Me.OnmarketIDChanging(value)
				Me.SendPropertyChanging
				Me._marketID = value
				Me.SendPropertyChanged("marketID")
				Me.OnmarketIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblTrainingResult")>  _
Partial Public Class tblTrainingResult
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _trainingResultID As Integer
	
	Private _courseGroupID As String
	
	Private _userID As String
	
	Private _score As String
	
	Private _dateCompleted As System.Nullable(Of Date)
	
	Private _expirationDate As System.Nullable(Of Date)
	
	Private _testName As String
	
	Private _result As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OntrainingResultIDChanging(value As Integer)
    End Sub
    Partial Private Sub OntrainingResultIDChanged()
    End Sub
    Partial Private Sub OncourseGroupIDChanging(value As String)
    End Sub
    Partial Private Sub OncourseGroupIDChanged()
    End Sub
    Partial Private Sub OnuserIDChanging(value As String)
    End Sub
    Partial Private Sub OnuserIDChanged()
    End Sub
    Partial Private Sub OnscoreChanging(value As String)
    End Sub
    Partial Private Sub OnscoreChanged()
    End Sub
    Partial Private Sub OndateCompletedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OndateCompletedChanged()
    End Sub
    Partial Private Sub OnexpirationDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnexpirationDateChanged()
    End Sub
    Partial Private Sub OntestNameChanging(value As String)
    End Sub
    Partial Private Sub OntestNameChanged()
    End Sub
    Partial Private Sub OnresultChanging(value As String)
    End Sub
    Partial Private Sub OnresultChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_trainingResultID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property trainingResultID() As Integer
		Get
			Return Me._trainingResultID
		End Get
		Set
			If ((Me._trainingResultID = value)  _
						= false) Then
				Me.OntrainingResultIDChanging(value)
				Me.SendPropertyChanging
				Me._trainingResultID = value
				Me.SendPropertyChanged("trainingResultID")
				Me.OntrainingResultIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_courseGroupID", DbType:="NVarChar(50)")>  _
	Public Property courseGroupID() As String
		Get
			Return Me._courseGroupID
		End Get
		Set
			If (String.Equals(Me._courseGroupID, value) = false) Then
				Me.OncourseGroupIDChanging(value)
				Me.SendPropertyChanging
				Me._courseGroupID = value
				Me.SendPropertyChanged("courseGroupID")
				Me.OncourseGroupIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me.OnuserIDChanging(value)
				Me.SendPropertyChanging
				Me._userID = value
				Me.SendPropertyChanged("userID")
				Me.OnuserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_score", DbType:="NVarChar(50)")>  _
	Public Property score() As String
		Get
			Return Me._score
		End Get
		Set
			If (String.Equals(Me._score, value) = false) Then
				Me.OnscoreChanging(value)
				Me.SendPropertyChanging
				Me._score = value
				Me.SendPropertyChanged("score")
				Me.OnscoreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateCompleted", DbType:="SmallDateTime")>  _
	Public Property dateCompleted() As System.Nullable(Of Date)
		Get
			Return Me._dateCompleted
		End Get
		Set
			If (Me._dateCompleted.Equals(value) = false) Then
				Me.OndateCompletedChanging(value)
				Me.SendPropertyChanging
				Me._dateCompleted = value
				Me.SendPropertyChanged("dateCompleted")
				Me.OndateCompletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_expirationDate", DbType:="SmallDateTime")>  _
	Public Property expirationDate() As System.Nullable(Of Date)
		Get
			Return Me._expirationDate
		End Get
		Set
			If (Me._expirationDate.Equals(value) = false) Then
				Me.OnexpirationDateChanging(value)
				Me.SendPropertyChanging
				Me._expirationDate = value
				Me.SendPropertyChanged("expirationDate")
				Me.OnexpirationDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_testName", DbType:="NVarChar(255)")>  _
	Public Property testName() As String
		Get
			Return Me._testName
		End Get
		Set
			If (String.Equals(Me._testName, value) = false) Then
				Me.OntestNameChanging(value)
				Me.SendPropertyChanging
				Me._testName = value
				Me.SendPropertyChanged("testName")
				Me.OntestNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_result", DbType:="NVarChar(50)")>  _
	Public Property result() As String
		Get
			Return Me._result
		End Get
		Set
			If (String.Equals(Me._result, value) = false) Then
				Me.OnresultChanging(value)
				Me.SendPropertyChanging
				Me._result = value
				Me.SendPropertyChanged("result")
				Me.OnresultChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblUser")>  _
Partial Public Class tblUser
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _userID As String
	
	Private _FirstName As String
	
	Private _LastName As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnuserIDChanging(value As String)
    End Sub
    Partial Private Sub OnuserIDChanged()
    End Sub
    Partial Private Sub OnFirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnFirstNameChanged()
    End Sub
    Partial Private Sub OnLastNameChanging(value As String)
    End Sub
    Partial Private Sub OnLastNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me.OnuserIDChanging(value)
				Me.SendPropertyChanging
				Me._userID = value
				Me.SendPropertyChanged("userID")
				Me.OnuserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="NVarChar(50)")>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me.OnFirstNameChanging(value)
				Me.SendPropertyChanging
				Me._FirstName = value
				Me.SendPropertyChanged("FirstName")
				Me.OnFirstNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="NVarChar(50)")>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me.OnLastNameChanging(value)
				Me.SendPropertyChanging
				Me._LastName = value
				Me.SendPropertyChanged("LastName")
				Me.OnLastNameChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblUserClient")>  _
Partial Public Class tblUserClient
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _userClientID As Integer
	
	Private _userID As String
	
	Private _clientID As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnuserClientIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnuserClientIDChanged()
    End Sub
    Partial Private Sub OnuserIDChanging(value As String)
    End Sub
    Partial Private Sub OnuserIDChanged()
    End Sub
    Partial Private Sub OnclientIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnclientIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userClientID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property userClientID() As Integer
		Get
			Return Me._userClientID
		End Get
		Set
			If ((Me._userClientID = value)  _
						= false) Then
				Me.OnuserClientIDChanging(value)
				Me.SendPropertyChanging
				Me._userClientID = value
				Me.SendPropertyChanged("userClientID")
				Me.OnuserClientIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me.OnuserIDChanging(value)
				Me.SendPropertyChanging
				Me._userID = value
				Me.SendPropertyChanged("userID")
				Me.OnuserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", DbType:="Int")>  _
	Public Property clientID() As System.Nullable(Of Integer)
		Get
			Return Me._clientID
		End Get
		Set
			If (Me._clientID.Equals(value) = false) Then
				Me.OnclientIDChanging(value)
				Me.SendPropertyChanging
				Me._clientID = value
				Me.SendPropertyChanged("clientID")
				Me.OnclientIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblUserMarket")>  _
Partial Public Class tblUserMarket
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _userMarketID As Integer
	
	Private _userID As String
	
	Private _marketID As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnuserMarketIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnuserMarketIDChanged()
    End Sub
    Partial Private Sub OnuserIDChanging(value As String)
    End Sub
    Partial Private Sub OnuserIDChanged()
    End Sub
    Partial Private Sub OnmarketIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnmarketIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userMarketID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property userMarketID() As Integer
		Get
			Return Me._userMarketID
		End Get
		Set
			If ((Me._userMarketID = value)  _
						= false) Then
				Me.OnuserMarketIDChanging(value)
				Me.SendPropertyChanging
				Me._userMarketID = value
				Me.SendPropertyChanged("userMarketID")
				Me.OnuserMarketIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me.OnuserIDChanging(value)
				Me.SendPropertyChanging
				Me._userID = value
				Me.SendPropertyChanged("userID")
				Me.OnuserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="Int")>  _
	Public Property marketID() As System.Nullable(Of Integer)
		Get
			Return Me._marketID
		End Get
		Set
			If (Me._marketID.Equals(value) = false) Then
				Me.OnmarketIDChanging(value)
				Me.SendPropertyChanging
				Me._marketID = value
				Me.SendPropertyChanged("marketID")
				Me.OnmarketIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblUserTeam")>  _
Partial Public Class tblUserTeam
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _userTeamID As Integer
	
	Private _userID As String
	
	Private _teamID As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnuserTeamIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnuserTeamIDChanged()
    End Sub
    Partial Private Sub OnuserIDChanging(value As String)
    End Sub
    Partial Private Sub OnuserIDChanged()
    End Sub
    Partial Private Sub OnteamIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnteamIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userTeamID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property userTeamID() As Integer
		Get
			Return Me._userTeamID
		End Get
		Set
			If ((Me._userTeamID = value)  _
						= false) Then
				Me.OnuserTeamIDChanging(value)
				Me.SendPropertyChanging
				Me._userTeamID = value
				Me.SendPropertyChanged("userTeamID")
				Me.OnuserTeamIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me.OnuserIDChanging(value)
				Me.SendPropertyChanging
				Me._userID = value
				Me.SendPropertyChanged("userID")
				Me.OnuserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_teamID", DbType:="Int")>  _
	Public Property teamID() As System.Nullable(Of Integer)
		Get
			Return Me._teamID
		End Get
		Set
			If (Me._teamID.Equals(value) = false) Then
				Me.OnteamIDChanging(value)
				Me.SendPropertyChanging
				Me._teamID = value
				Me.SendPropertyChanged("teamID")
				Me.OnteamIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblWeatherInfo")>  _
Partial Public Class tblWeatherInfo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _weatherInfoID As Integer
	
	Private _stateName As String
	
	Private _cityName As String
	
	Private _weatherDate As System.Nullable(Of Date)
	
	Private _lowTemp As String
	
	Private _highTemp As String
	
	Private _dayTemp As String
	
	Private _nightTemp As String
	
	Private _condition As String
	
	Private _icon As String
	
	Private _location As String
	
	Private _day As String
	
	Private _dayNumber As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnweatherInfoIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnweatherInfoIDChanged()
    End Sub
    Partial Private Sub OnstateNameChanging(value As String)
    End Sub
    Partial Private Sub OnstateNameChanged()
    End Sub
    Partial Private Sub OncityNameChanging(value As String)
    End Sub
    Partial Private Sub OncityNameChanged()
    End Sub
    Partial Private Sub OnweatherDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnweatherDateChanged()
    End Sub
    Partial Private Sub OnlowTempChanging(value As String)
    End Sub
    Partial Private Sub OnlowTempChanged()
    End Sub
    Partial Private Sub OnhighTempChanging(value As String)
    End Sub
    Partial Private Sub OnhighTempChanged()
    End Sub
    Partial Private Sub OndayTempChanging(value As String)
    End Sub
    Partial Private Sub OndayTempChanged()
    End Sub
    Partial Private Sub OnnightTempChanging(value As String)
    End Sub
    Partial Private Sub OnnightTempChanged()
    End Sub
    Partial Private Sub OnconditionChanging(value As String)
    End Sub
    Partial Private Sub OnconditionChanged()
    End Sub
    Partial Private Sub OniconChanging(value As String)
    End Sub
    Partial Private Sub OniconChanged()
    End Sub
    Partial Private Sub OnlocationChanging(value As String)
    End Sub
    Partial Private Sub OnlocationChanged()
    End Sub
    Partial Private Sub OndayChanging(value As String)
    End Sub
    Partial Private Sub OndayChanged()
    End Sub
    Partial Private Sub OndayNumberChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OndayNumberChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_weatherInfoID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property weatherInfoID() As Integer
		Get
			Return Me._weatherInfoID
		End Get
		Set
			If ((Me._weatherInfoID = value)  _
						= false) Then
				Me.OnweatherInfoIDChanging(value)
				Me.SendPropertyChanging
				Me._weatherInfoID = value
				Me.SendPropertyChanged("weatherInfoID")
				Me.OnweatherInfoIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_stateName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property stateName() As String
		Get
			Return Me._stateName
		End Get
		Set
			If (String.Equals(Me._stateName, value) = false) Then
				Me.OnstateNameChanging(value)
				Me.SendPropertyChanging
				Me._stateName = value
				Me.SendPropertyChanged("stateName")
				Me.OnstateNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cityName", DbType:="NVarChar(50)")>  _
	Public Property cityName() As String
		Get
			Return Me._cityName
		End Get
		Set
			If (String.Equals(Me._cityName, value) = false) Then
				Me.OncityNameChanging(value)
				Me.SendPropertyChanging
				Me._cityName = value
				Me.SendPropertyChanged("cityName")
				Me.OncityNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_weatherDate", DbType:="SmallDateTime")>  _
	Public Property weatherDate() As System.Nullable(Of Date)
		Get
			Return Me._weatherDate
		End Get
		Set
			If (Me._weatherDate.Equals(value) = false) Then
				Me.OnweatherDateChanging(value)
				Me.SendPropertyChanging
				Me._weatherDate = value
				Me.SendPropertyChanged("weatherDate")
				Me.OnweatherDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lowTemp", DbType:="VarChar(50)")>  _
	Public Property lowTemp() As String
		Get
			Return Me._lowTemp
		End Get
		Set
			If (String.Equals(Me._lowTemp, value) = false) Then
				Me.OnlowTempChanging(value)
				Me.SendPropertyChanging
				Me._lowTemp = value
				Me.SendPropertyChanged("lowTemp")
				Me.OnlowTempChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_highTemp", DbType:="VarChar(50)")>  _
	Public Property highTemp() As String
		Get
			Return Me._highTemp
		End Get
		Set
			If (String.Equals(Me._highTemp, value) = false) Then
				Me.OnhighTempChanging(value)
				Me.SendPropertyChanging
				Me._highTemp = value
				Me.SendPropertyChanged("highTemp")
				Me.OnhighTempChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dayTemp", DbType:="VarChar(50)")>  _
	Public Property dayTemp() As String
		Get
			Return Me._dayTemp
		End Get
		Set
			If (String.Equals(Me._dayTemp, value) = false) Then
				Me.OndayTempChanging(value)
				Me.SendPropertyChanging
				Me._dayTemp = value
				Me.SendPropertyChanged("dayTemp")
				Me.OndayTempChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nightTemp", DbType:="VarChar(50)")>  _
	Public Property nightTemp() As String
		Get
			Return Me._nightTemp
		End Get
		Set
			If (String.Equals(Me._nightTemp, value) = false) Then
				Me.OnnightTempChanging(value)
				Me.SendPropertyChanging
				Me._nightTemp = value
				Me.SendPropertyChanged("nightTemp")
				Me.OnnightTempChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_condition", DbType:="NVarChar(50)")>  _
	Public Property condition() As String
		Get
			Return Me._condition
		End Get
		Set
			If (String.Equals(Me._condition, value) = false) Then
				Me.OnconditionChanging(value)
				Me.SendPropertyChanging
				Me._condition = value
				Me.SendPropertyChanged("condition")
				Me.OnconditionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_icon", DbType:="NVarChar(50)")>  _
	Public Property icon() As String
		Get
			Return Me._icon
		End Get
		Set
			If (String.Equals(Me._icon, value) = false) Then
				Me.OniconChanging(value)
				Me.SendPropertyChanging
				Me._icon = value
				Me.SendPropertyChanged("icon")
				Me.OniconChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_location", DbType:="NVarChar(50)")>  _
	Public Property location() As String
		Get
			Return Me._location
		End Get
		Set
			If (String.Equals(Me._location, value) = false) Then
				Me.OnlocationChanging(value)
				Me.SendPropertyChanging
				Me._location = value
				Me.SendPropertyChanged("location")
				Me.OnlocationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_day", DbType:="NVarChar(50)")>  _
	Public Property day() As String
		Get
			Return Me._day
		End Get
		Set
			If (String.Equals(Me._day, value) = false) Then
				Me.OndayChanging(value)
				Me.SendPropertyChanging
				Me._day = value
				Me.SendPropertyChanged("day")
				Me.OndayChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dayNumber", DbType:="Int")>  _
	Public Property dayNumber() As System.Nullable(Of Integer)
		Get
			Return Me._dayNumber
		End Get
		Set
			If (Me._dayNumber.Equals(value) = false) Then
				Me.OndayNumberChanging(value)
				Me.SendPropertyChanging
				Me._dayNumber = value
				Me.SendPropertyChanged("dayNumber")
				Me.OndayNumberChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.temp_Accounts")>  _
Partial Public Class temp_Account
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _AccountID As System.Nullable(Of Integer)
	
	Private _VPID As System.Nullable(Of Integer)
	
	Private _AccountName As String
	
	Private _StreetAddress1 As String
	
	Private _City As String
	
	Private _State As String
	
	Private _Zip As String
	
	Private _AccountType As String
	
	Private _MarketName As String
	
	Private _AccountStatus As String
	
	Private _LastActivity As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnAccountIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAccountIDChanged()
    End Sub
    Partial Private Sub OnVPIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnVPIDChanged()
    End Sub
    Partial Private Sub OnAccountNameChanging(value As String)
    End Sub
    Partial Private Sub OnAccountNameChanged()
    End Sub
    Partial Private Sub OnStreetAddress1Changing(value As String)
    End Sub
    Partial Private Sub OnStreetAddress1Changed()
    End Sub
    Partial Private Sub OnCityChanging(value As String)
    End Sub
    Partial Private Sub OnCityChanged()
    End Sub
    Partial Private Sub OnStateChanging(value As String)
    End Sub
    Partial Private Sub OnStateChanged()
    End Sub
    Partial Private Sub OnZipChanging(value As String)
    End Sub
    Partial Private Sub OnZipChanged()
    End Sub
    Partial Private Sub OnAccountTypeChanging(value As String)
    End Sub
    Partial Private Sub OnAccountTypeChanged()
    End Sub
    Partial Private Sub OnMarketNameChanging(value As String)
    End Sub
    Partial Private Sub OnMarketNameChanged()
    End Sub
    Partial Private Sub OnAccountStatusChanging(value As String)
    End Sub
    Partial Private Sub OnAccountStatusChanged()
    End Sub
    Partial Private Sub OnLastActivityChanging(value As String)
    End Sub
    Partial Private Sub OnLastActivityChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountID", DbType:="Int")>  _
	Public Property AccountID() As System.Nullable(Of Integer)
		Get
			Return Me._AccountID
		End Get
		Set
			If (Me._AccountID.Equals(value) = false) Then
				Me.OnAccountIDChanging(value)
				Me.SendPropertyChanging
				Me._AccountID = value
				Me.SendPropertyChanged("AccountID")
				Me.OnAccountIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VPID", DbType:="Int")>  _
	Public Property VPID() As System.Nullable(Of Integer)
		Get
			Return Me._VPID
		End Get
		Set
			If (Me._VPID.Equals(value) = false) Then
				Me.OnVPIDChanging(value)
				Me.SendPropertyChanging
				Me._VPID = value
				Me.SendPropertyChanged("VPID")
				Me.OnVPIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountName", DbType:="NVarChar(50)")>  _
	Public Property AccountName() As String
		Get
			Return Me._AccountName
		End Get
		Set
			If (String.Equals(Me._AccountName, value) = false) Then
				Me.OnAccountNameChanging(value)
				Me.SendPropertyChanging
				Me._AccountName = value
				Me.SendPropertyChanged("AccountName")
				Me.OnAccountNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StreetAddress1", DbType:="NVarChar(50)")>  _
	Public Property StreetAddress1() As String
		Get
			Return Me._StreetAddress1
		End Get
		Set
			If (String.Equals(Me._StreetAddress1, value) = false) Then
				Me.OnStreetAddress1Changing(value)
				Me.SendPropertyChanging
				Me._StreetAddress1 = value
				Me.SendPropertyChanged("StreetAddress1")
				Me.OnStreetAddress1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", DbType:="NVarChar(50)")>  _
	Public Property City() As String
		Get
			Return Me._City
		End Get
		Set
			If (String.Equals(Me._City, value) = false) Then
				Me.OnCityChanging(value)
				Me.SendPropertyChanging
				Me._City = value
				Me.SendPropertyChanged("City")
				Me.OnCityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_State", DbType:="NVarChar(50)")>  _
	Public Property State() As String
		Get
			Return Me._State
		End Get
		Set
			If (String.Equals(Me._State, value) = false) Then
				Me.OnStateChanging(value)
				Me.SendPropertyChanging
				Me._State = value
				Me.SendPropertyChanged("State")
				Me.OnStateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Zip", DbType:="NVarChar(50)")>  _
	Public Property Zip() As String
		Get
			Return Me._Zip
		End Get
		Set
			If (String.Equals(Me._Zip, value) = false) Then
				Me.OnZipChanging(value)
				Me.SendPropertyChanging
				Me._Zip = value
				Me.SendPropertyChanged("Zip")
				Me.OnZipChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountType", DbType:="NVarChar(50)")>  _
	Public Property AccountType() As String
		Get
			Return Me._AccountType
		End Get
		Set
			If (String.Equals(Me._AccountType, value) = false) Then
				Me.OnAccountTypeChanging(value)
				Me.SendPropertyChanging
				Me._AccountType = value
				Me.SendPropertyChanged("AccountType")
				Me.OnAccountTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MarketName", DbType:="NVarChar(50)")>  _
	Public Property MarketName() As String
		Get
			Return Me._MarketName
		End Get
		Set
			If (String.Equals(Me._MarketName, value) = false) Then
				Me.OnMarketNameChanging(value)
				Me.SendPropertyChanging
				Me._MarketName = value
				Me.SendPropertyChanged("MarketName")
				Me.OnMarketNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountStatus", DbType:="NVarChar(50)")>  _
	Public Property AccountStatus() As String
		Get
			Return Me._AccountStatus
		End Get
		Set
			If (String.Equals(Me._AccountStatus, value) = false) Then
				Me.OnAccountStatusChanging(value)
				Me.SendPropertyChanging
				Me._AccountStatus = value
				Me.SendPropertyChanged("AccountStatus")
				Me.OnAccountStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastActivity", DbType:="NVarChar(50)")>  _
	Public Property LastActivity() As String
		Get
			Return Me._LastActivity
		End Get
		Set
			If (String.Equals(Me._LastActivity, value) = false) Then
				Me.OnLastActivityChanging(value)
				Me.SendPropertyChanging
				Me._LastActivity = value
				Me.SendPropertyChanged("LastActivity")
				Me.OnLastActivityChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.temp_AmbassadorMarkets")>  _
Partial Public Class temp_AmbassadorMarket
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _UserID As String
	
	Private _UserName As String
	
	Private _MarketName As String
	
	Private _EventTypeName As String
	
	Private _marketID As System.Nullable(Of Integer)
	
	Private _positionID As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnUserIDChanging(value As String)
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnUserNameChanged()
    End Sub
    Partial Private Sub OnMarketNameChanging(value As String)
    End Sub
    Partial Private Sub OnMarketNameChanged()
    End Sub
    Partial Private Sub OnEventTypeNameChanging(value As String)
    End Sub
    Partial Private Sub OnEventTypeNameChanged()
    End Sub
    Partial Private Sub OnmarketIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnmarketIDChanged()
    End Sub
    Partial Private Sub OnpositionIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnpositionIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="NVarChar(50)")>  _
	Public Property UserID() As String
		Get
			Return Me._UserID
		End Get
		Set
			If (String.Equals(Me._UserID, value) = false) Then
				Me.OnUserIDChanging(value)
				Me.SendPropertyChanging
				Me._UserID = value
				Me.SendPropertyChanged("UserID")
				Me.OnUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="NVarChar(50)")>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me.OnUserNameChanging(value)
				Me.SendPropertyChanging
				Me._UserName = value
				Me.SendPropertyChanged("UserName")
				Me.OnUserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MarketName", DbType:="NVarChar(50)")>  _
	Public Property MarketName() As String
		Get
			Return Me._MarketName
		End Get
		Set
			If (String.Equals(Me._MarketName, value) = false) Then
				Me.OnMarketNameChanging(value)
				Me.SendPropertyChanging
				Me._MarketName = value
				Me.SendPropertyChanged("MarketName")
				Me.OnMarketNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EventTypeName", DbType:="NVarChar(50)")>  _
	Public Property EventTypeName() As String
		Get
			Return Me._EventTypeName
		End Get
		Set
			If (String.Equals(Me._EventTypeName, value) = false) Then
				Me.OnEventTypeNameChanging(value)
				Me.SendPropertyChanging
				Me._EventTypeName = value
				Me.SendPropertyChanged("EventTypeName")
				Me.OnEventTypeNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="Int")>  _
	Public Property marketID() As System.Nullable(Of Integer)
		Get
			Return Me._marketID
		End Get
		Set
			If (Me._marketID.Equals(value) = false) Then
				Me.OnmarketIDChanging(value)
				Me.SendPropertyChanging
				Me._marketID = value
				Me.SendPropertyChanged("marketID")
				Me.OnmarketIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_positionID", DbType:="Int")>  _
	Public Property positionID() As System.Nullable(Of Integer)
		Get
			Return Me._positionID
		End Get
		Set
			If (Me._positionID.Equals(value) = false) Then
				Me.OnpositionIDChanging(value)
				Me.SendPropertyChanging
				Me._positionID = value
				Me.SendPropertyChanged("positionID")
				Me.OnpositionIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tempAccountPosDistribution")>  _
Partial Public Class tempAccountPosDistribution
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _accountActivityID As System.Nullable(Of Integer)
	
	Private _posItemID As System.Nullable(Of Integer)
	
	Private _retailPrice As System.Nullable(Of Decimal)
	
	Private _costPerUnit As System.Nullable(Of Decimal)
	
	Private _qty As System.Nullable(Of Integer)
	
	Private _tempID As String
	
	Private _id As Integer
	
	Private _itemName As String
	
	Private _units As String
	
	Private _package As String
	
	Private _total As System.Nullable(Of Decimal)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnaccountActivityIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnaccountActivityIDChanged()
    End Sub
    Partial Private Sub OnposItemIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnposItemIDChanged()
    End Sub
    Partial Private Sub OnretailPriceChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnretailPriceChanged()
    End Sub
    Partial Private Sub OncostPerUnitChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OncostPerUnitChanged()
    End Sub
    Partial Private Sub OnqtyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnqtyChanged()
    End Sub
    Partial Private Sub OntempIDChanging(value As String)
    End Sub
    Partial Private Sub OntempIDChanged()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnitemNameChanging(value As String)
    End Sub
    Partial Private Sub OnitemNameChanged()
    End Sub
    Partial Private Sub OnunitsChanging(value As String)
    End Sub
    Partial Private Sub OnunitsChanged()
    End Sub
    Partial Private Sub OnpackageChanging(value As String)
    End Sub
    Partial Private Sub OnpackageChanged()
    End Sub
    Partial Private Sub OntotalChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OntotalChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountActivityID", DbType:="Int")>  _
	Public Property accountActivityID() As System.Nullable(Of Integer)
		Get
			Return Me._accountActivityID
		End Get
		Set
			If (Me._accountActivityID.Equals(value) = false) Then
				Me.OnaccountActivityIDChanging(value)
				Me.SendPropertyChanging
				Me._accountActivityID = value
				Me.SendPropertyChanged("accountActivityID")
				Me.OnaccountActivityIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_posItemID", DbType:="Int")>  _
	Public Property posItemID() As System.Nullable(Of Integer)
		Get
			Return Me._posItemID
		End Get
		Set
			If (Me._posItemID.Equals(value) = false) Then
				Me.OnposItemIDChanging(value)
				Me.SendPropertyChanging
				Me._posItemID = value
				Me.SendPropertyChanged("posItemID")
				Me.OnposItemIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_retailPrice", DbType:="Decimal(6,2)")>  _
	Public Property retailPrice() As System.Nullable(Of Decimal)
		Get
			Return Me._retailPrice
		End Get
		Set
			If (Me._retailPrice.Equals(value) = false) Then
				Me.OnretailPriceChanging(value)
				Me.SendPropertyChanging
				Me._retailPrice = value
				Me.SendPropertyChanged("retailPrice")
				Me.OnretailPriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_costPerUnit", DbType:="Decimal(6,2)")>  _
	Public Property costPerUnit() As System.Nullable(Of Decimal)
		Get
			Return Me._costPerUnit
		End Get
		Set
			If (Me._costPerUnit.Equals(value) = false) Then
				Me.OncostPerUnitChanging(value)
				Me.SendPropertyChanging
				Me._costPerUnit = value
				Me.SendPropertyChanged("costPerUnit")
				Me.OncostPerUnitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_qty", DbType:="Int")>  _
	Public Property qty() As System.Nullable(Of Integer)
		Get
			Return Me._qty
		End Get
		Set
			If (Me._qty.Equals(value) = false) Then
				Me.OnqtyChanging(value)
				Me.SendPropertyChanging
				Me._qty = value
				Me.SendPropertyChanged("qty")
				Me.OnqtyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tempID", DbType:="NVarChar(50)")>  _
	Public Property tempID() As String
		Get
			Return Me._tempID
		End Get
		Set
			If (String.Equals(Me._tempID, value) = false) Then
				Me.OntempIDChanging(value)
				Me.SendPropertyChanging
				Me._tempID = value
				Me.SendPropertyChanged("tempID")
				Me.OntempIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_itemName", DbType:="NVarChar(2000)")>  _
	Public Property itemName() As String
		Get
			Return Me._itemName
		End Get
		Set
			If (String.Equals(Me._itemName, value) = false) Then
				Me.OnitemNameChanging(value)
				Me.SendPropertyChanging
				Me._itemName = value
				Me.SendPropertyChanged("itemName")
				Me.OnitemNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_units", DbType:="NVarChar(50)")>  _
	Public Property units() As String
		Get
			Return Me._units
		End Get
		Set
			If (String.Equals(Me._units, value) = false) Then
				Me.OnunitsChanging(value)
				Me.SendPropertyChanging
				Me._units = value
				Me.SendPropertyChanged("units")
				Me.OnunitsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_package", DbType:="NVarChar(50)")>  _
	Public Property package() As String
		Get
			Return Me._package
		End Get
		Set
			If (String.Equals(Me._package, value) = false) Then
				Me.OnpackageChanging(value)
				Me.SendPropertyChanging
				Me._package = value
				Me.SendPropertyChanged("package")
				Me.OnpackageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_total", DbType:="Decimal(6,2)")>  _
	Public Property total() As System.Nullable(Of Decimal)
		Get
			Return Me._total
		End Get
		Set
			If (Me._total.Equals(value) = false) Then
				Me.OntotalChanging(value)
				Me.SendPropertyChanging
				Me._total = value
				Me.SendPropertyChanged("total")
				Me.OntotalChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tempAmbassador")>  _
Partial Public Class tempAmbassador
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ambassadorID As Integer
	
	Private _userID As String
	
	Private _userName As String
	
	Private _payrollID As String
	
	Private _userGUID As String
	
	Private _EIN As String
	
	Private _Status As String
	
	Private _EmailAddress As String
	
	Private _FirstName As String
	
	Private _LastName As String
	
	Private _NickName As String
	
	Private _Address1 As String
	
	Private _Address2 As String
	
	Private _City As String
	
	Private _State As String
	
	Private _Zip As String
	
	Private _Phone As String
	
	Private _DOB As String
	
	Private _gender As String
	
	Private _citizen As System.Nullable(Of Boolean)
	
	Private _height As String
	
	Private _weight As String
	
	Private _hairColor As String
	
	Private _eyeColor As String
	
	Private _piersings As System.Nullable(Of Boolean)
	
	Private _smartphone As System.Nullable(Of Boolean)
	
	Private _smartPhoneOS As String
	
	Private _headShot As System.Data.Linq.Binary
	
	Private _bodyShot As System.Data.Linq.Binary
	
	Private _availabilityDate As System.Nullable(Of Date)
	
	Private _lgbt As System.Nullable(Of Boolean)
	
	Private _transportation As System.Nullable(Of Boolean)
	
	Private _mile As String
	
	Private _resume As System.Data.Linq.Binary
	
	Private _license As System.Data.Linq.Binary
	
	Private _licenseExpirationDate As System.Nullable(Of Date)
	
	Private _latitude As System.Nullable(Of Double)
	
	Private _longitude As System.Nullable(Of Double)
	
	Private _LastLoginDate As String
	
	Private _dateCreated As System.Nullable(Of Date)
	
	Private _modifiedDate As System.Nullable(Of Date)
	
	Private _createdBy As String
	
	Private _modifiedBy As String
	
	Private _headShotUploaded As System.Nullable(Of Boolean)
	
	Private _bodyShotUploaded As System.Nullable(Of Boolean)
	
	Private _resumeUploaded As System.Nullable(Of Boolean)
	
	Private _licenseUploaded As System.Nullable(Of Boolean)
	
	Private _resumeFileType As String
	
	Private _licenseFileType As String
	
	Private _resumeFileName As String
	
	Private _licenseFileName As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnambassadorIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnambassadorIDChanged()
    End Sub
    Partial Private Sub OnuserIDChanging(value As String)
    End Sub
    Partial Private Sub OnuserIDChanged()
    End Sub
    Partial Private Sub OnuserNameChanging(value As String)
    End Sub
    Partial Private Sub OnuserNameChanged()
    End Sub
    Partial Private Sub OnpayrollIDChanging(value As String)
    End Sub
    Partial Private Sub OnpayrollIDChanged()
    End Sub
    Partial Private Sub OnuserGUIDChanging(value As String)
    End Sub
    Partial Private Sub OnuserGUIDChanged()
    End Sub
    Partial Private Sub OnEINChanging(value As String)
    End Sub
    Partial Private Sub OnEINChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As String)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnEmailAddressChanging(value As String)
    End Sub
    Partial Private Sub OnEmailAddressChanged()
    End Sub
    Partial Private Sub OnFirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnFirstNameChanged()
    End Sub
    Partial Private Sub OnLastNameChanging(value As String)
    End Sub
    Partial Private Sub OnLastNameChanged()
    End Sub
    Partial Private Sub OnNickNameChanging(value As String)
    End Sub
    Partial Private Sub OnNickNameChanged()
    End Sub
    Partial Private Sub OnAddress1Changing(value As String)
    End Sub
    Partial Private Sub OnAddress1Changed()
    End Sub
    Partial Private Sub OnAddress2Changing(value As String)
    End Sub
    Partial Private Sub OnAddress2Changed()
    End Sub
    Partial Private Sub OnCityChanging(value As String)
    End Sub
    Partial Private Sub OnCityChanged()
    End Sub
    Partial Private Sub OnStateChanging(value As String)
    End Sub
    Partial Private Sub OnStateChanged()
    End Sub
    Partial Private Sub OnZipChanging(value As String)
    End Sub
    Partial Private Sub OnZipChanged()
    End Sub
    Partial Private Sub OnPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneChanged()
    End Sub
    Partial Private Sub OnDOBChanging(value As String)
    End Sub
    Partial Private Sub OnDOBChanged()
    End Sub
    Partial Private Sub OngenderChanging(value As String)
    End Sub
    Partial Private Sub OngenderChanged()
    End Sub
    Partial Private Sub OncitizenChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OncitizenChanged()
    End Sub
    Partial Private Sub OnheightChanging(value As String)
    End Sub
    Partial Private Sub OnheightChanged()
    End Sub
    Partial Private Sub OnweightChanging(value As String)
    End Sub
    Partial Private Sub OnweightChanged()
    End Sub
    Partial Private Sub OnhairColorChanging(value As String)
    End Sub
    Partial Private Sub OnhairColorChanged()
    End Sub
    Partial Private Sub OneyeColorChanging(value As String)
    End Sub
    Partial Private Sub OneyeColorChanged()
    End Sub
    Partial Private Sub OnpiersingsChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnpiersingsChanged()
    End Sub
    Partial Private Sub OnsmartphoneChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnsmartphoneChanged()
    End Sub
    Partial Private Sub OnsmartPhoneOSChanging(value As String)
    End Sub
    Partial Private Sub OnsmartPhoneOSChanged()
    End Sub
    Partial Private Sub OnheadShotChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnheadShotChanged()
    End Sub
    Partial Private Sub OnbodyShotChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnbodyShotChanged()
    End Sub
    Partial Private Sub OnavailabilityDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnavailabilityDateChanged()
    End Sub
    Partial Private Sub OnlgbtChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnlgbtChanged()
    End Sub
    Partial Private Sub OntransportationChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OntransportationChanged()
    End Sub
    Partial Private Sub OnmileChanging(value As String)
    End Sub
    Partial Private Sub OnmileChanged()
    End Sub
    Partial Private Sub OnresumeChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnresumeChanged()
    End Sub
    Partial Private Sub OnlicenseChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnlicenseChanged()
    End Sub
    Partial Private Sub OnlicenseExpirationDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnlicenseExpirationDateChanged()
    End Sub
    Partial Private Sub OnlatitudeChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnlatitudeChanged()
    End Sub
    Partial Private Sub OnlongitudeChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnlongitudeChanged()
    End Sub
    Partial Private Sub OnLastLoginDateChanging(value As String)
    End Sub
    Partial Private Sub OnLastLoginDateChanged()
    End Sub
    Partial Private Sub OndateCreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OndateCreatedChanged()
    End Sub
    Partial Private Sub OnmodifiedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnmodifiedDateChanged()
    End Sub
    Partial Private Sub OncreatedByChanging(value As String)
    End Sub
    Partial Private Sub OncreatedByChanged()
    End Sub
    Partial Private Sub OnmodifiedByChanging(value As String)
    End Sub
    Partial Private Sub OnmodifiedByChanged()
    End Sub
    Partial Private Sub OnheadShotUploadedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnheadShotUploadedChanged()
    End Sub
    Partial Private Sub OnbodyShotUploadedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnbodyShotUploadedChanged()
    End Sub
    Partial Private Sub OnresumeUploadedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnresumeUploadedChanged()
    End Sub
    Partial Private Sub OnlicenseUploadedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnlicenseUploadedChanged()
    End Sub
    Partial Private Sub OnresumeFileTypeChanging(value As String)
    End Sub
    Partial Private Sub OnresumeFileTypeChanged()
    End Sub
    Partial Private Sub OnlicenseFileTypeChanging(value As String)
    End Sub
    Partial Private Sub OnlicenseFileTypeChanged()
    End Sub
    Partial Private Sub OnresumeFileNameChanging(value As String)
    End Sub
    Partial Private Sub OnresumeFileNameChanged()
    End Sub
    Partial Private Sub OnlicenseFileNameChanging(value As String)
    End Sub
    Partial Private Sub OnlicenseFileNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ambassadorID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ambassadorID() As Integer
		Get
			Return Me._ambassadorID
		End Get
		Set
			If ((Me._ambassadorID = value)  _
						= false) Then
				Me.OnambassadorIDChanging(value)
				Me.SendPropertyChanging
				Me._ambassadorID = value
				Me.SendPropertyChanged("ambassadorID")
				Me.OnambassadorIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me.OnuserIDChanging(value)
				Me.SendPropertyChanging
				Me._userID = value
				Me.SendPropertyChanged("userID")
				Me.OnuserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userName", DbType:="NVarChar(50)")>  _
	Public Property userName() As String
		Get
			Return Me._userName
		End Get
		Set
			If (String.Equals(Me._userName, value) = false) Then
				Me.OnuserNameChanging(value)
				Me.SendPropertyChanging
				Me._userName = value
				Me.SendPropertyChanged("userName")
				Me.OnuserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_payrollID", DbType:="NVarChar(50)")>  _
	Public Property payrollID() As String
		Get
			Return Me._payrollID
		End Get
		Set
			If (String.Equals(Me._payrollID, value) = false) Then
				Me.OnpayrollIDChanging(value)
				Me.SendPropertyChanging
				Me._payrollID = value
				Me.SendPropertyChanged("payrollID")
				Me.OnpayrollIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userGUID", DbType:="NVarChar(50)")>  _
	Public Property userGUID() As String
		Get
			Return Me._userGUID
		End Get
		Set
			If (String.Equals(Me._userGUID, value) = false) Then
				Me.OnuserGUIDChanging(value)
				Me.SendPropertyChanging
				Me._userGUID = value
				Me.SendPropertyChanged("userGUID")
				Me.OnuserGUIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EIN", DbType:="NVarChar(50)")>  _
	Public Property EIN() As String
		Get
			Return Me._EIN
		End Get
		Set
			If (String.Equals(Me._EIN, value) = false) Then
				Me.OnEINChanging(value)
				Me.SendPropertyChanging
				Me._EIN = value
				Me.SendPropertyChanged("EIN")
				Me.OnEINChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="VarChar(20)")>  _
	Public Property Status() As String
		Get
			Return Me._Status
		End Get
		Set
			If (String.Equals(Me._Status, value) = false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmailAddress", DbType:="NVarChar(50)")>  _
	Public Property EmailAddress() As String
		Get
			Return Me._EmailAddress
		End Get
		Set
			If (String.Equals(Me._EmailAddress, value) = false) Then
				Me.OnEmailAddressChanging(value)
				Me.SendPropertyChanging
				Me._EmailAddress = value
				Me.SendPropertyChanged("EmailAddress")
				Me.OnEmailAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="NVarChar(50)")>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me.OnFirstNameChanging(value)
				Me.SendPropertyChanging
				Me._FirstName = value
				Me.SendPropertyChanged("FirstName")
				Me.OnFirstNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="NVarChar(50)")>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me.OnLastNameChanging(value)
				Me.SendPropertyChanging
				Me._LastName = value
				Me.SendPropertyChanged("LastName")
				Me.OnLastNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NickName", DbType:="NVarChar(50)")>  _
	Public Property NickName() As String
		Get
			Return Me._NickName
		End Get
		Set
			If (String.Equals(Me._NickName, value) = false) Then
				Me.OnNickNameChanging(value)
				Me.SendPropertyChanging
				Me._NickName = value
				Me.SendPropertyChanged("NickName")
				Me.OnNickNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address1", DbType:="NVarChar(50)")>  _
	Public Property Address1() As String
		Get
			Return Me._Address1
		End Get
		Set
			If (String.Equals(Me._Address1, value) = false) Then
				Me.OnAddress1Changing(value)
				Me.SendPropertyChanging
				Me._Address1 = value
				Me.SendPropertyChanged("Address1")
				Me.OnAddress1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address2", DbType:="NVarChar(50)")>  _
	Public Property Address2() As String
		Get
			Return Me._Address2
		End Get
		Set
			If (String.Equals(Me._Address2, value) = false) Then
				Me.OnAddress2Changing(value)
				Me.SendPropertyChanging
				Me._Address2 = value
				Me.SendPropertyChanged("Address2")
				Me.OnAddress2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", DbType:="NVarChar(50)")>  _
	Public Property City() As String
		Get
			Return Me._City
		End Get
		Set
			If (String.Equals(Me._City, value) = false) Then
				Me.OnCityChanging(value)
				Me.SendPropertyChanging
				Me._City = value
				Me.SendPropertyChanged("City")
				Me.OnCityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_State", DbType:="NVarChar(50)")>  _
	Public Property State() As String
		Get
			Return Me._State
		End Get
		Set
			If (String.Equals(Me._State, value) = false) Then
				Me.OnStateChanging(value)
				Me.SendPropertyChanging
				Me._State = value
				Me.SendPropertyChanged("State")
				Me.OnStateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Zip", DbType:="NVarChar(50)")>  _
	Public Property Zip() As String
		Get
			Return Me._Zip
		End Get
		Set
			If (String.Equals(Me._Zip, value) = false) Then
				Me.OnZipChanging(value)
				Me.SendPropertyChanging
				Me._Zip = value
				Me.SendPropertyChanged("Zip")
				Me.OnZipChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone", DbType:="NVarChar(50)")>  _
	Public Property Phone() As String
		Get
			Return Me._Phone
		End Get
		Set
			If (String.Equals(Me._Phone, value) = false) Then
				Me.OnPhoneChanging(value)
				Me.SendPropertyChanging
				Me._Phone = value
				Me.SendPropertyChanged("Phone")
				Me.OnPhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DOB", DbType:="NVarChar(100)")>  _
	Public Property DOB() As String
		Get
			Return Me._DOB
		End Get
		Set
			If (String.Equals(Me._DOB, value) = false) Then
				Me.OnDOBChanging(value)
				Me.SendPropertyChanging
				Me._DOB = value
				Me.SendPropertyChanged("DOB")
				Me.OnDOBChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_gender", DbType:="VarChar(50)")>  _
	Public Property gender() As String
		Get
			Return Me._gender
		End Get
		Set
			If (String.Equals(Me._gender, value) = false) Then
				Me.OngenderChanging(value)
				Me.SendPropertyChanging
				Me._gender = value
				Me.SendPropertyChanged("gender")
				Me.OngenderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_citizen", DbType:="Bit")>  _
	Public Property citizen() As System.Nullable(Of Boolean)
		Get
			Return Me._citizen
		End Get
		Set
			If (Me._citizen.Equals(value) = false) Then
				Me.OncitizenChanging(value)
				Me.SendPropertyChanging
				Me._citizen = value
				Me.SendPropertyChanged("citizen")
				Me.OncitizenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_height", DbType:="NVarChar(50)")>  _
	Public Property height() As String
		Get
			Return Me._height
		End Get
		Set
			If (String.Equals(Me._height, value) = false) Then
				Me.OnheightChanging(value)
				Me.SendPropertyChanging
				Me._height = value
				Me.SendPropertyChanged("height")
				Me.OnheightChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_weight", DbType:="NVarChar(50)")>  _
	Public Property weight() As String
		Get
			Return Me._weight
		End Get
		Set
			If (String.Equals(Me._weight, value) = false) Then
				Me.OnweightChanging(value)
				Me.SendPropertyChanging
				Me._weight = value
				Me.SendPropertyChanged("weight")
				Me.OnweightChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hairColor", DbType:="NVarChar(50)")>  _
	Public Property hairColor() As String
		Get
			Return Me._hairColor
		End Get
		Set
			If (String.Equals(Me._hairColor, value) = false) Then
				Me.OnhairColorChanging(value)
				Me.SendPropertyChanging
				Me._hairColor = value
				Me.SendPropertyChanged("hairColor")
				Me.OnhairColorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eyeColor", DbType:="NVarChar(50)")>  _
	Public Property eyeColor() As String
		Get
			Return Me._eyeColor
		End Get
		Set
			If (String.Equals(Me._eyeColor, value) = false) Then
				Me.OneyeColorChanging(value)
				Me.SendPropertyChanging
				Me._eyeColor = value
				Me.SendPropertyChanged("eyeColor")
				Me.OneyeColorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_piersings", DbType:="Bit")>  _
	Public Property piersings() As System.Nullable(Of Boolean)
		Get
			Return Me._piersings
		End Get
		Set
			If (Me._piersings.Equals(value) = false) Then
				Me.OnpiersingsChanging(value)
				Me.SendPropertyChanging
				Me._piersings = value
				Me.SendPropertyChanged("piersings")
				Me.OnpiersingsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_smartphone", DbType:="Bit")>  _
	Public Property smartphone() As System.Nullable(Of Boolean)
		Get
			Return Me._smartphone
		End Get
		Set
			If (Me._smartphone.Equals(value) = false) Then
				Me.OnsmartphoneChanging(value)
				Me.SendPropertyChanging
				Me._smartphone = value
				Me.SendPropertyChanged("smartphone")
				Me.OnsmartphoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_smartPhoneOS", DbType:="NVarChar(50)")>  _
	Public Property smartPhoneOS() As String
		Get
			Return Me._smartPhoneOS
		End Get
		Set
			If (String.Equals(Me._smartPhoneOS, value) = false) Then
				Me.OnsmartPhoneOSChanging(value)
				Me.SendPropertyChanging
				Me._smartPhoneOS = value
				Me.SendPropertyChanged("smartPhoneOS")
				Me.OnsmartPhoneOSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_headShot", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property headShot() As System.Data.Linq.Binary
		Get
			Return Me._headShot
		End Get
		Set
			If (Object.Equals(Me._headShot, value) = false) Then
				Me.OnheadShotChanging(value)
				Me.SendPropertyChanging
				Me._headShot = value
				Me.SendPropertyChanged("headShot")
				Me.OnheadShotChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bodyShot", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property bodyShot() As System.Data.Linq.Binary
		Get
			Return Me._bodyShot
		End Get
		Set
			If (Object.Equals(Me._bodyShot, value) = false) Then
				Me.OnbodyShotChanging(value)
				Me.SendPropertyChanging
				Me._bodyShot = value
				Me.SendPropertyChanged("bodyShot")
				Me.OnbodyShotChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_availabilityDate", DbType:="SmallDateTime")>  _
	Public Property availabilityDate() As System.Nullable(Of Date)
		Get
			Return Me._availabilityDate
		End Get
		Set
			If (Me._availabilityDate.Equals(value) = false) Then
				Me.OnavailabilityDateChanging(value)
				Me.SendPropertyChanging
				Me._availabilityDate = value
				Me.SendPropertyChanged("availabilityDate")
				Me.OnavailabilityDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lgbt", DbType:="Bit")>  _
	Public Property lgbt() As System.Nullable(Of Boolean)
		Get
			Return Me._lgbt
		End Get
		Set
			If (Me._lgbt.Equals(value) = false) Then
				Me.OnlgbtChanging(value)
				Me.SendPropertyChanging
				Me._lgbt = value
				Me.SendPropertyChanged("lgbt")
				Me.OnlgbtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_transportation", DbType:="Bit")>  _
	Public Property transportation() As System.Nullable(Of Boolean)
		Get
			Return Me._transportation
		End Get
		Set
			If (Me._transportation.Equals(value) = false) Then
				Me.OntransportationChanging(value)
				Me.SendPropertyChanging
				Me._transportation = value
				Me.SendPropertyChanged("transportation")
				Me.OntransportationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_mile", DbType:="VarChar(50)")>  _
	Public Property mile() As String
		Get
			Return Me._mile
		End Get
		Set
			If (String.Equals(Me._mile, value) = false) Then
				Me.OnmileChanging(value)
				Me.SendPropertyChanging
				Me._mile = value
				Me.SendPropertyChanged("mile")
				Me.OnmileChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="resume", Storage:="_resume", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property [resume]() As System.Data.Linq.Binary
		Get
			Return Me._resume
		End Get
		Set
			If (Object.Equals(Me._resume, value) = false) Then
				Me.OnresumeChanging(value)
				Me.SendPropertyChanging
				Me._resume = value
				Me.SendPropertyChanged("[resume]")
				Me.OnresumeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_license", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property license() As System.Data.Linq.Binary
		Get
			Return Me._license
		End Get
		Set
			If (Object.Equals(Me._license, value) = false) Then
				Me.OnlicenseChanging(value)
				Me.SendPropertyChanging
				Me._license = value
				Me.SendPropertyChanged("license")
				Me.OnlicenseChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_licenseExpirationDate", DbType:="SmallDateTime")>  _
	Public Property licenseExpirationDate() As System.Nullable(Of Date)
		Get
			Return Me._licenseExpirationDate
		End Get
		Set
			If (Me._licenseExpirationDate.Equals(value) = false) Then
				Me.OnlicenseExpirationDateChanging(value)
				Me.SendPropertyChanging
				Me._licenseExpirationDate = value
				Me.SendPropertyChanged("licenseExpirationDate")
				Me.OnlicenseExpirationDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_latitude", DbType:="Float")>  _
	Public Property latitude() As System.Nullable(Of Double)
		Get
			Return Me._latitude
		End Get
		Set
			If (Me._latitude.Equals(value) = false) Then
				Me.OnlatitudeChanging(value)
				Me.SendPropertyChanging
				Me._latitude = value
				Me.SendPropertyChanged("latitude")
				Me.OnlatitudeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_longitude", DbType:="Float")>  _
	Public Property longitude() As System.Nullable(Of Double)
		Get
			Return Me._longitude
		End Get
		Set
			If (Me._longitude.Equals(value) = false) Then
				Me.OnlongitudeChanging(value)
				Me.SendPropertyChanging
				Me._longitude = value
				Me.SendPropertyChanged("longitude")
				Me.OnlongitudeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastLoginDate", DbType:="NVarChar(100)")>  _
	Public Property LastLoginDate() As String
		Get
			Return Me._LastLoginDate
		End Get
		Set
			If (String.Equals(Me._LastLoginDate, value) = false) Then
				Me.OnLastLoginDateChanging(value)
				Me.SendPropertyChanging
				Me._LastLoginDate = value
				Me.SendPropertyChanged("LastLoginDate")
				Me.OnLastLoginDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateCreated", DbType:="SmallDateTime")>  _
	Public Property dateCreated() As System.Nullable(Of Date)
		Get
			Return Me._dateCreated
		End Get
		Set
			If (Me._dateCreated.Equals(value) = false) Then
				Me.OndateCreatedChanging(value)
				Me.SendPropertyChanging
				Me._dateCreated = value
				Me.SendPropertyChanged("dateCreated")
				Me.OndateCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_modifiedDate", DbType:="SmallDateTime")>  _
	Public Property modifiedDate() As System.Nullable(Of Date)
		Get
			Return Me._modifiedDate
		End Get
		Set
			If (Me._modifiedDate.Equals(value) = false) Then
				Me.OnmodifiedDateChanging(value)
				Me.SendPropertyChanging
				Me._modifiedDate = value
				Me.SendPropertyChanged("modifiedDate")
				Me.OnmodifiedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_createdBy", DbType:="NVarChar(50)")>  _
	Public Property createdBy() As String
		Get
			Return Me._createdBy
		End Get
		Set
			If (String.Equals(Me._createdBy, value) = false) Then
				Me.OncreatedByChanging(value)
				Me.SendPropertyChanging
				Me._createdBy = value
				Me.SendPropertyChanged("createdBy")
				Me.OncreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_modifiedBy", DbType:="NVarChar(50)")>  _
	Public Property modifiedBy() As String
		Get
			Return Me._modifiedBy
		End Get
		Set
			If (String.Equals(Me._modifiedBy, value) = false) Then
				Me.OnmodifiedByChanging(value)
				Me.SendPropertyChanging
				Me._modifiedBy = value
				Me.SendPropertyChanged("modifiedBy")
				Me.OnmodifiedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_headShotUploaded", DbType:="Bit")>  _
	Public Property headShotUploaded() As System.Nullable(Of Boolean)
		Get
			Return Me._headShotUploaded
		End Get
		Set
			If (Me._headShotUploaded.Equals(value) = false) Then
				Me.OnheadShotUploadedChanging(value)
				Me.SendPropertyChanging
				Me._headShotUploaded = value
				Me.SendPropertyChanged("headShotUploaded")
				Me.OnheadShotUploadedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bodyShotUploaded", DbType:="Bit")>  _
	Public Property bodyShotUploaded() As System.Nullable(Of Boolean)
		Get
			Return Me._bodyShotUploaded
		End Get
		Set
			If (Me._bodyShotUploaded.Equals(value) = false) Then
				Me.OnbodyShotUploadedChanging(value)
				Me.SendPropertyChanging
				Me._bodyShotUploaded = value
				Me.SendPropertyChanged("bodyShotUploaded")
				Me.OnbodyShotUploadedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_resumeUploaded", DbType:="Bit")>  _
	Public Property resumeUploaded() As System.Nullable(Of Boolean)
		Get
			Return Me._resumeUploaded
		End Get
		Set
			If (Me._resumeUploaded.Equals(value) = false) Then
				Me.OnresumeUploadedChanging(value)
				Me.SendPropertyChanging
				Me._resumeUploaded = value
				Me.SendPropertyChanged("resumeUploaded")
				Me.OnresumeUploadedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_licenseUploaded", DbType:="Bit")>  _
	Public Property licenseUploaded() As System.Nullable(Of Boolean)
		Get
			Return Me._licenseUploaded
		End Get
		Set
			If (Me._licenseUploaded.Equals(value) = false) Then
				Me.OnlicenseUploadedChanging(value)
				Me.SendPropertyChanging
				Me._licenseUploaded = value
				Me.SendPropertyChanged("licenseUploaded")
				Me.OnlicenseUploadedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_resumeFileType", DbType:="VarChar(150)")>  _
	Public Property resumeFileType() As String
		Get
			Return Me._resumeFileType
		End Get
		Set
			If (String.Equals(Me._resumeFileType, value) = false) Then
				Me.OnresumeFileTypeChanging(value)
				Me.SendPropertyChanging
				Me._resumeFileType = value
				Me.SendPropertyChanged("resumeFileType")
				Me.OnresumeFileTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_licenseFileType", DbType:="VarChar(150)")>  _
	Public Property licenseFileType() As String
		Get
			Return Me._licenseFileType
		End Get
		Set
			If (String.Equals(Me._licenseFileType, value) = false) Then
				Me.OnlicenseFileTypeChanging(value)
				Me.SendPropertyChanging
				Me._licenseFileType = value
				Me.SendPropertyChanged("licenseFileType")
				Me.OnlicenseFileTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_resumeFileName", DbType:="NVarChar(150)")>  _
	Public Property resumeFileName() As String
		Get
			Return Me._resumeFileName
		End Get
		Set
			If (String.Equals(Me._resumeFileName, value) = false) Then
				Me.OnresumeFileNameChanging(value)
				Me.SendPropertyChanging
				Me._resumeFileName = value
				Me.SendPropertyChanged("resumeFileName")
				Me.OnresumeFileNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_licenseFileName", DbType:="NVarChar(150)")>  _
	Public Property licenseFileName() As String
		Get
			Return Me._licenseFileName
		End Get
		Set
			If (String.Equals(Me._licenseFileName, value) = false) Then
				Me.OnlicenseFileNameChanging(value)
				Me.SendPropertyChanging
				Me._licenseFileName = value
				Me.SendPropertyChanged("licenseFileName")
				Me.OnlicenseFileNameChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tempAmbassadorClient")>  _
Partial Public Class tempAmbassadorClient
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _tempClientID As Integer
	
	Private _userID As String
	
	Private _clientID As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OntempClientIDChanging(value As Integer)
    End Sub
    Partial Private Sub OntempClientIDChanged()
    End Sub
    Partial Private Sub OnuserIDChanging(value As String)
    End Sub
    Partial Private Sub OnuserIDChanged()
    End Sub
    Partial Private Sub OnclientIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnclientIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tempClientID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property tempClientID() As Integer
		Get
			Return Me._tempClientID
		End Get
		Set
			If ((Me._tempClientID = value)  _
						= false) Then
				Me.OntempClientIDChanging(value)
				Me.SendPropertyChanging
				Me._tempClientID = value
				Me.SendPropertyChanged("tempClientID")
				Me.OntempClientIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me.OnuserIDChanging(value)
				Me.SendPropertyChanging
				Me._userID = value
				Me.SendPropertyChanged("userID")
				Me.OnuserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", DbType:="Int")>  _
	Public Property clientID() As System.Nullable(Of Integer)
		Get
			Return Me._clientID
		End Get
		Set
			If (Me._clientID.Equals(value) = false) Then
				Me.OnclientIDChanging(value)
				Me.SendPropertyChanging
				Me._clientID = value
				Me.SendPropertyChanged("clientID")
				Me.OnclientIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tempAmbassadorMarket")>  _
Partial Public Class tempAmbassadorMarket
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _tempAmbassadorMarketID As Integer
	
	Private _UserID As String
	
	Private _marketID As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OntempAmbassadorMarketIDChanging(value As Integer)
    End Sub
    Partial Private Sub OntempAmbassadorMarketIDChanged()
    End Sub
    Partial Private Sub OnUserIDChanging(value As String)
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnmarketIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnmarketIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tempAmbassadorMarketID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property tempAmbassadorMarketID() As Integer
		Get
			Return Me._tempAmbassadorMarketID
		End Get
		Set
			If ((Me._tempAmbassadorMarketID = value)  _
						= false) Then
				Me.OntempAmbassadorMarketIDChanging(value)
				Me.SendPropertyChanging
				Me._tempAmbassadorMarketID = value
				Me.SendPropertyChanged("tempAmbassadorMarketID")
				Me.OntempAmbassadorMarketIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="NVarChar(50)")>  _
	Public Property UserID() As String
		Get
			Return Me._UserID
		End Get
		Set
			If (String.Equals(Me._UserID, value) = false) Then
				Me.OnUserIDChanging(value)
				Me.SendPropertyChanging
				Me._UserID = value
				Me.SendPropertyChanged("UserID")
				Me.OnUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="Int")>  _
	Public Property marketID() As System.Nullable(Of Integer)
		Get
			Return Me._marketID
		End Get
		Set
			If (Me._marketID.Equals(value) = false) Then
				Me.OnmarketIDChanging(value)
				Me.SendPropertyChanging
				Me._marketID = value
				Me.SendPropertyChanged("marketID")
				Me.OnmarketIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tempAmbassadorPosition")>  _
Partial Public Class tempAmbassadorPosition
	
	Private _tempAmbassadorPositionID As Integer
	
	Private _userID As String
	
	Private _positionID As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tempAmbassadorPositionID", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property tempAmbassadorPositionID() As Integer
		Get
			Return Me._tempAmbassadorPositionID
		End Get
		Set
			If ((Me._tempAmbassadorPositionID = value)  _
						= false) Then
				Me._tempAmbassadorPositionID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me._userID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_positionID", DbType:="Int")>  _
	Public Property positionID() As System.Nullable(Of Integer)
		Get
			Return Me._positionID
		End Get
		Set
			If (Me._positionID.Equals(value) = false) Then
				Me._positionID = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tempAvailableAmbassador")>  _
Partial Public Class tempAvailableAmbassador
	
	Private _userID As String
	
	Private _userName As String
	
	Private _firstName As String
	
	Private _lastName As String
	
	Private _EmailAddress As String
	
	Private _Phone As String
	
	Private _Address1 As String
	
	Private _City As String
	
	Private _State As String
	
	Private _Requested As String
	
	Private _IsRequested As String
	
	Private _YTDEventCount As System.Nullable(Of Double)
	
	Private _YTDHours As System.Nullable(Of Double)
	
	Private _Markets As String
	
	Private _Positions As String
	
	Private _miles As System.Nullable(Of Double)
	
	Private _headshot As System.Data.Linq.Binary
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me._userID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userName", DbType:="NVarChar(50)")>  _
	Public Property userName() As String
		Get
			Return Me._userName
		End Get
		Set
			If (String.Equals(Me._userName, value) = false) Then
				Me._userName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_firstName", DbType:="NVarChar(50)")>  _
	Public Property firstName() As String
		Get
			Return Me._firstName
		End Get
		Set
			If (String.Equals(Me._firstName, value) = false) Then
				Me._firstName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lastName", DbType:="NVarChar(50)")>  _
	Public Property lastName() As String
		Get
			Return Me._lastName
		End Get
		Set
			If (String.Equals(Me._lastName, value) = false) Then
				Me._lastName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmailAddress", DbType:="NVarChar(50)")>  _
	Public Property EmailAddress() As String
		Get
			Return Me._EmailAddress
		End Get
		Set
			If (String.Equals(Me._EmailAddress, value) = false) Then
				Me._EmailAddress = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone", DbType:="NVarChar(50)")>  _
	Public Property Phone() As String
		Get
			Return Me._Phone
		End Get
		Set
			If (String.Equals(Me._Phone, value) = false) Then
				Me._Phone = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address1", DbType:="NVarChar(256)")>  _
	Public Property Address1() As String
		Get
			Return Me._Address1
		End Get
		Set
			If (String.Equals(Me._Address1, value) = false) Then
				Me._Address1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", DbType:="NVarChar(50)")>  _
	Public Property City() As String
		Get
			Return Me._City
		End Get
		Set
			If (String.Equals(Me._City, value) = false) Then
				Me._City = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_State", DbType:="NVarChar(50)")>  _
	Public Property State() As String
		Get
			Return Me._State
		End Get
		Set
			If (String.Equals(Me._State, value) = false) Then
				Me._State = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Requested", DbType:="NVarChar(256)")>  _
	Public Property Requested() As String
		Get
			Return Me._Requested
		End Get
		Set
			If (String.Equals(Me._Requested, value) = false) Then
				Me._Requested = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsRequested", DbType:="NVarChar(50)")>  _
	Public Property IsRequested() As String
		Get
			Return Me._IsRequested
		End Get
		Set
			If (String.Equals(Me._IsRequested, value) = false) Then
				Me._IsRequested = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YTDEventCount", DbType:="Float")>  _
	Public Property YTDEventCount() As System.Nullable(Of Double)
		Get
			Return Me._YTDEventCount
		End Get
		Set
			If (Me._YTDEventCount.Equals(value) = false) Then
				Me._YTDEventCount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YTDHours", DbType:="Float")>  _
	Public Property YTDHours() As System.Nullable(Of Double)
		Get
			Return Me._YTDHours
		End Get
		Set
			If (Me._YTDHours.Equals(value) = false) Then
				Me._YTDHours = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Markets", DbType:="NVarChar(MAX)")>  _
	Public Property Markets() As String
		Get
			Return Me._Markets
		End Get
		Set
			If (String.Equals(Me._Markets, value) = false) Then
				Me._Markets = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Positions", DbType:="NVarChar(MAX)")>  _
	Public Property Positions() As String
		Get
			Return Me._Positions
		End Get
		Set
			If (String.Equals(Me._Positions, value) = false) Then
				Me._Positions = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_miles", DbType:="Float")>  _
	Public Property miles() As System.Nullable(Of Double)
		Get
			Return Me._miles
		End Get
		Set
			If (Me._miles.Equals(value) = false) Then
				Me._miles = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_headshot", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property headshot() As System.Data.Linq.Binary
		Get
			Return Me._headshot
		End Get
		Set
			If (Object.Equals(Me._headshot, value) = false) Then
				Me._headshot = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tempBrandEventExecution")>  _
Partial Public Class tempBrandEventExecution
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _tempBrandEventExecutionID As Integer
	
	Private _tempBrandID As String
	
	Private _eventTypeID As System.Nullable(Of Integer)
	
	Private _attire As String
	
	Private _pos As String
	
	Private _samplingInstructions As String
	
	Private _eventDetails As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OntempBrandEventExecutionIDChanging(value As Integer)
    End Sub
    Partial Private Sub OntempBrandEventExecutionIDChanged()
    End Sub
    Partial Private Sub OntempBrandIDChanging(value As String)
    End Sub
    Partial Private Sub OntempBrandIDChanged()
    End Sub
    Partial Private Sub OneventTypeIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OneventTypeIDChanged()
    End Sub
    Partial Private Sub OnattireChanging(value As String)
    End Sub
    Partial Private Sub OnattireChanged()
    End Sub
    Partial Private Sub OnposChanging(value As String)
    End Sub
    Partial Private Sub OnposChanged()
    End Sub
    Partial Private Sub OnsamplingInstructionsChanging(value As String)
    End Sub
    Partial Private Sub OnsamplingInstructionsChanged()
    End Sub
    Partial Private Sub OneventDetailsChanging(value As String)
    End Sub
    Partial Private Sub OneventDetailsChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tempBrandEventExecutionID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property tempBrandEventExecutionID() As Integer
		Get
			Return Me._tempBrandEventExecutionID
		End Get
		Set
			If ((Me._tempBrandEventExecutionID = value)  _
						= false) Then
				Me.OntempBrandEventExecutionIDChanging(value)
				Me.SendPropertyChanging
				Me._tempBrandEventExecutionID = value
				Me.SendPropertyChanged("tempBrandEventExecutionID")
				Me.OntempBrandEventExecutionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tempBrandID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property tempBrandID() As String
		Get
			Return Me._tempBrandID
		End Get
		Set
			If (String.Equals(Me._tempBrandID, value) = false) Then
				Me.OntempBrandIDChanging(value)
				Me.SendPropertyChanging
				Me._tempBrandID = value
				Me.SendPropertyChanged("tempBrandID")
				Me.OntempBrandIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTypeID", DbType:="Int")>  _
	Public Property eventTypeID() As System.Nullable(Of Integer)
		Get
			Return Me._eventTypeID
		End Get
		Set
			If (Me._eventTypeID.Equals(value) = false) Then
				Me.OneventTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._eventTypeID = value
				Me.SendPropertyChanged("eventTypeID")
				Me.OneventTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_attire", DbType:="NVarChar(MAX)")>  _
	Public Property attire() As String
		Get
			Return Me._attire
		End Get
		Set
			If (String.Equals(Me._attire, value) = false) Then
				Me.OnattireChanging(value)
				Me.SendPropertyChanging
				Me._attire = value
				Me.SendPropertyChanged("attire")
				Me.OnattireChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pos", DbType:="NVarChar(MAX)")>  _
	Public Property pos() As String
		Get
			Return Me._pos
		End Get
		Set
			If (String.Equals(Me._pos, value) = false) Then
				Me.OnposChanging(value)
				Me.SendPropertyChanging
				Me._pos = value
				Me.SendPropertyChanged("pos")
				Me.OnposChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_samplingInstructions", DbType:="NVarChar(MAX)")>  _
	Public Property samplingInstructions() As String
		Get
			Return Me._samplingInstructions
		End Get
		Set
			If (String.Equals(Me._samplingInstructions, value) = false) Then
				Me.OnsamplingInstructionsChanging(value)
				Me.SendPropertyChanging
				Me._samplingInstructions = value
				Me.SendPropertyChanged("samplingInstructions")
				Me.OnsamplingInstructionsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventDetails", DbType:="NVarChar(MAX)")>  _
	Public Property eventDetails() As String
		Get
			Return Me._eventDetails
		End Get
		Set
			If (String.Equals(Me._eventDetails, value) = false) Then
				Me.OneventDetailsChanging(value)
				Me.SendPropertyChanging
				Me._eventDetails = value
				Me.SendPropertyChanged("eventDetails")
				Me.OneventDetailsChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tempBrandEventTask")>  _
Partial Public Class tempBrandEventTask
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _tempTaskID As Integer
	
	Private _tempBrandID As String
	
	Private _taskName As String
	
	Private _category As String
	
	Private _dateDueOffset As System.Nullable(Of Integer)
	
	Private _Note As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OntempTaskIDChanging(value As Integer)
    End Sub
    Partial Private Sub OntempTaskIDChanged()
    End Sub
    Partial Private Sub OntempBrandIDChanging(value As String)
    End Sub
    Partial Private Sub OntempBrandIDChanged()
    End Sub
    Partial Private Sub OntaskNameChanging(value As String)
    End Sub
    Partial Private Sub OntaskNameChanged()
    End Sub
    Partial Private Sub OncategoryChanging(value As String)
    End Sub
    Partial Private Sub OncategoryChanged()
    End Sub
    Partial Private Sub OndateDueOffsetChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OndateDueOffsetChanged()
    End Sub
    Partial Private Sub OnNoteChanging(value As String)
    End Sub
    Partial Private Sub OnNoteChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tempTaskID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property tempTaskID() As Integer
		Get
			Return Me._tempTaskID
		End Get
		Set
			If ((Me._tempTaskID = value)  _
						= false) Then
				Me.OntempTaskIDChanging(value)
				Me.SendPropertyChanging
				Me._tempTaskID = value
				Me.SendPropertyChanged("tempTaskID")
				Me.OntempTaskIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tempBrandID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property tempBrandID() As String
		Get
			Return Me._tempBrandID
		End Get
		Set
			If (String.Equals(Me._tempBrandID, value) = false) Then
				Me.OntempBrandIDChanging(value)
				Me.SendPropertyChanging
				Me._tempBrandID = value
				Me.SendPropertyChanged("tempBrandID")
				Me.OntempBrandIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_taskName", DbType:="NVarChar(50)")>  _
	Public Property taskName() As String
		Get
			Return Me._taskName
		End Get
		Set
			If (String.Equals(Me._taskName, value) = false) Then
				Me.OntaskNameChanging(value)
				Me.SendPropertyChanging
				Me._taskName = value
				Me.SendPropertyChanged("taskName")
				Me.OntaskNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_category", DbType:="VarChar(50)")>  _
	Public Property category() As String
		Get
			Return Me._category
		End Get
		Set
			If (String.Equals(Me._category, value) = false) Then
				Me.OncategoryChanging(value)
				Me.SendPropertyChanging
				Me._category = value
				Me.SendPropertyChanged("category")
				Me.OncategoryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateDueOffset", DbType:="Int")>  _
	Public Property dateDueOffset() As System.Nullable(Of Integer)
		Get
			Return Me._dateDueOffset
		End Get
		Set
			If (Me._dateDueOffset.Equals(value) = false) Then
				Me.OndateDueOffsetChanging(value)
				Me.SendPropertyChanging
				Me._dateDueOffset = value
				Me.SendPropertyChanged("dateDueOffset")
				Me.OndateDueOffsetChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Note", DbType:="NVarChar(MAX)")>  _
	Public Property Note() As String
		Get
			Return Me._Note
		End Get
		Set
			If (String.Equals(Me._Note, value) = false) Then
				Me.OnNoteChanging(value)
				Me.SendPropertyChanging
				Me._Note = value
				Me.SendPropertyChanged("Note")
				Me.OnNoteChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tempBrandRecapQuestion")>  _
Partial Public Class tempBrandRecapQuestion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _tempBrandRecapQuestionID As Integer
	
	Private _tempBrandID As String
	
	Private _question As String
	
	Private _questionType As String
	
	Private _choices As String
	
	Private _displayOption As String
	
	Private _lines As String
	
	Private _description As String
	
	Private _yes_noDefaultValue As String
	
	Private _numberDecimalPlace As System.Nullable(Of Integer)
	
	Private _numberDefaultValue As String
	
	Private _showPercentage As System.Nullable(Of Boolean)
	
	Private _dateFormat As String
	
	Private _dateDefaultValue As String
	
	Private _timeFormat As String
	
	Private _dateDisplay As String
	
	Private _sortOrder As System.Nullable(Of Integer)
	
	Private _desiredOrder As System.Nullable(Of Integer)
	
	Private _required As System.Nullable(Of Boolean)
	
	Private _digit As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OntempBrandRecapQuestionIDChanging(value As Integer)
    End Sub
    Partial Private Sub OntempBrandRecapQuestionIDChanged()
    End Sub
    Partial Private Sub OntempBrandIDChanging(value As String)
    End Sub
    Partial Private Sub OntempBrandIDChanged()
    End Sub
    Partial Private Sub OnquestionChanging(value As String)
    End Sub
    Partial Private Sub OnquestionChanged()
    End Sub
    Partial Private Sub OnquestionTypeChanging(value As String)
    End Sub
    Partial Private Sub OnquestionTypeChanged()
    End Sub
    Partial Private Sub OnchoicesChanging(value As String)
    End Sub
    Partial Private Sub OnchoicesChanged()
    End Sub
    Partial Private Sub OndisplayOptionChanging(value As String)
    End Sub
    Partial Private Sub OndisplayOptionChanged()
    End Sub
    Partial Private Sub OnlinesChanging(value As String)
    End Sub
    Partial Private Sub OnlinesChanged()
    End Sub
    Partial Private Sub OndescriptionChanging(value As String)
    End Sub
    Partial Private Sub OndescriptionChanged()
    End Sub
    Partial Private Sub Onyes_noDefaultValueChanging(value As String)
    End Sub
    Partial Private Sub Onyes_noDefaultValueChanged()
    End Sub
    Partial Private Sub OnnumberDecimalPlaceChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnnumberDecimalPlaceChanged()
    End Sub
    Partial Private Sub OnnumberDefaultValueChanging(value As String)
    End Sub
    Partial Private Sub OnnumberDefaultValueChanged()
    End Sub
    Partial Private Sub OnshowPercentageChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnshowPercentageChanged()
    End Sub
    Partial Private Sub OndateFormatChanging(value As String)
    End Sub
    Partial Private Sub OndateFormatChanged()
    End Sub
    Partial Private Sub OndateDefaultValueChanging(value As String)
    End Sub
    Partial Private Sub OndateDefaultValueChanged()
    End Sub
    Partial Private Sub OntimeFormatChanging(value As String)
    End Sub
    Partial Private Sub OntimeFormatChanged()
    End Sub
    Partial Private Sub OndateDisplayChanging(value As String)
    End Sub
    Partial Private Sub OndateDisplayChanged()
    End Sub
    Partial Private Sub OnsortOrderChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnsortOrderChanged()
    End Sub
    Partial Private Sub OndesiredOrderChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OndesiredOrderChanged()
    End Sub
    Partial Private Sub OnrequiredChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnrequiredChanged()
    End Sub
    Partial Private Sub OndigitChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OndigitChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tempBrandRecapQuestionID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property tempBrandRecapQuestionID() As Integer
		Get
			Return Me._tempBrandRecapQuestionID
		End Get
		Set
			If ((Me._tempBrandRecapQuestionID = value)  _
						= false) Then
				Me.OntempBrandRecapQuestionIDChanging(value)
				Me.SendPropertyChanging
				Me._tempBrandRecapQuestionID = value
				Me.SendPropertyChanged("tempBrandRecapQuestionID")
				Me.OntempBrandRecapQuestionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tempBrandID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property tempBrandID() As String
		Get
			Return Me._tempBrandID
		End Get
		Set
			If (String.Equals(Me._tempBrandID, value) = false) Then
				Me.OntempBrandIDChanging(value)
				Me.SendPropertyChanging
				Me._tempBrandID = value
				Me.SendPropertyChanged("tempBrandID")
				Me.OntempBrandIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_question", DbType:="NVarChar(500)")>  _
	Public Property question() As String
		Get
			Return Me._question
		End Get
		Set
			If (String.Equals(Me._question, value) = false) Then
				Me.OnquestionChanging(value)
				Me.SendPropertyChanging
				Me._question = value
				Me.SendPropertyChanged("question")
				Me.OnquestionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_questionType", DbType:="VarChar(50)")>  _
	Public Property questionType() As String
		Get
			Return Me._questionType
		End Get
		Set
			If (String.Equals(Me._questionType, value) = false) Then
				Me.OnquestionTypeChanging(value)
				Me.SendPropertyChanging
				Me._questionType = value
				Me.SendPropertyChanged("questionType")
				Me.OnquestionTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_choices", DbType:="NVarChar(MAX)")>  _
	Public Property choices() As String
		Get
			Return Me._choices
		End Get
		Set
			If (String.Equals(Me._choices, value) = false) Then
				Me.OnchoicesChanging(value)
				Me.SendPropertyChanging
				Me._choices = value
				Me.SendPropertyChanged("choices")
				Me.OnchoicesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_displayOption", DbType:="NVarChar(50)")>  _
	Public Property displayOption() As String
		Get
			Return Me._displayOption
		End Get
		Set
			If (String.Equals(Me._displayOption, value) = false) Then
				Me.OndisplayOptionChanging(value)
				Me.SendPropertyChanging
				Me._displayOption = value
				Me.SendPropertyChanged("displayOption")
				Me.OndisplayOptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lines", DbType:="VarChar(50)")>  _
	Public Property lines() As String
		Get
			Return Me._lines
		End Get
		Set
			If (String.Equals(Me._lines, value) = false) Then
				Me.OnlinesChanging(value)
				Me.SendPropertyChanging
				Me._lines = value
				Me.SendPropertyChanged("lines")
				Me.OnlinesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_description", DbType:="NVarChar(2000)")>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me.OndescriptionChanging(value)
				Me.SendPropertyChanging
				Me._description = value
				Me.SendPropertyChanged("description")
				Me.OndescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[yes/noDefaultValue]", Storage:="_yes_noDefaultValue", DbType:="NVarChar(50)")>  _
	Public Property yes_noDefaultValue() As String
		Get
			Return Me._yes_noDefaultValue
		End Get
		Set
			If (String.Equals(Me._yes_noDefaultValue, value) = false) Then
				Me.Onyes_noDefaultValueChanging(value)
				Me.SendPropertyChanging
				Me._yes_noDefaultValue = value
				Me.SendPropertyChanged("yes_noDefaultValue")
				Me.Onyes_noDefaultValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_numberDecimalPlace", DbType:="Int")>  _
	Public Property numberDecimalPlace() As System.Nullable(Of Integer)
		Get
			Return Me._numberDecimalPlace
		End Get
		Set
			If (Me._numberDecimalPlace.Equals(value) = false) Then
				Me.OnnumberDecimalPlaceChanging(value)
				Me.SendPropertyChanging
				Me._numberDecimalPlace = value
				Me.SendPropertyChanged("numberDecimalPlace")
				Me.OnnumberDecimalPlaceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_numberDefaultValue", DbType:="VarChar(50)")>  _
	Public Property numberDefaultValue() As String
		Get
			Return Me._numberDefaultValue
		End Get
		Set
			If (String.Equals(Me._numberDefaultValue, value) = false) Then
				Me.OnnumberDefaultValueChanging(value)
				Me.SendPropertyChanging
				Me._numberDefaultValue = value
				Me.SendPropertyChanged("numberDefaultValue")
				Me.OnnumberDefaultValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_showPercentage", DbType:="Bit")>  _
	Public Property showPercentage() As System.Nullable(Of Boolean)
		Get
			Return Me._showPercentage
		End Get
		Set
			If (Me._showPercentage.Equals(value) = false) Then
				Me.OnshowPercentageChanging(value)
				Me.SendPropertyChanging
				Me._showPercentage = value
				Me.SendPropertyChanged("showPercentage")
				Me.OnshowPercentageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateFormat", DbType:="NVarChar(50)")>  _
	Public Property dateFormat() As String
		Get
			Return Me._dateFormat
		End Get
		Set
			If (String.Equals(Me._dateFormat, value) = false) Then
				Me.OndateFormatChanging(value)
				Me.SendPropertyChanging
				Me._dateFormat = value
				Me.SendPropertyChanged("dateFormat")
				Me.OndateFormatChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateDefaultValue", DbType:="NVarChar(50)")>  _
	Public Property dateDefaultValue() As String
		Get
			Return Me._dateDefaultValue
		End Get
		Set
			If (String.Equals(Me._dateDefaultValue, value) = false) Then
				Me.OndateDefaultValueChanging(value)
				Me.SendPropertyChanging
				Me._dateDefaultValue = value
				Me.SendPropertyChanged("dateDefaultValue")
				Me.OndateDefaultValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_timeFormat", DbType:="NVarChar(50)")>  _
	Public Property timeFormat() As String
		Get
			Return Me._timeFormat
		End Get
		Set
			If (String.Equals(Me._timeFormat, value) = false) Then
				Me.OntimeFormatChanging(value)
				Me.SendPropertyChanging
				Me._timeFormat = value
				Me.SendPropertyChanged("timeFormat")
				Me.OntimeFormatChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateDisplay", DbType:="NVarChar(50)")>  _
	Public Property dateDisplay() As String
		Get
			Return Me._dateDisplay
		End Get
		Set
			If (String.Equals(Me._dateDisplay, value) = false) Then
				Me.OndateDisplayChanging(value)
				Me.SendPropertyChanging
				Me._dateDisplay = value
				Me.SendPropertyChanged("dateDisplay")
				Me.OndateDisplayChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sortOrder", DbType:="Int")>  _
	Public Property sortOrder() As System.Nullable(Of Integer)
		Get
			Return Me._sortOrder
		End Get
		Set
			If (Me._sortOrder.Equals(value) = false) Then
				Me.OnsortOrderChanging(value)
				Me.SendPropertyChanging
				Me._sortOrder = value
				Me.SendPropertyChanged("sortOrder")
				Me.OnsortOrderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_desiredOrder", DbType:="Int")>  _
	Public Property desiredOrder() As System.Nullable(Of Integer)
		Get
			Return Me._desiredOrder
		End Get
		Set
			If (Me._desiredOrder.Equals(value) = false) Then
				Me.OndesiredOrderChanging(value)
				Me.SendPropertyChanging
				Me._desiredOrder = value
				Me.SendPropertyChanged("desiredOrder")
				Me.OndesiredOrderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_required", DbType:="Bit")>  _
	Public Property required() As System.Nullable(Of Boolean)
		Get
			Return Me._required
		End Get
		Set
			If (Me._required.Equals(value) = false) Then
				Me.OnrequiredChanging(value)
				Me.SendPropertyChanging
				Me._required = value
				Me.SendPropertyChanged("required")
				Me.OnrequiredChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_digit", DbType:="Int")>  _
	Public Property digit() As System.Nullable(Of Integer)
		Get
			Return Me._digit
		End Get
		Set
			If (Me._digit.Equals(value) = false) Then
				Me.OndigitChanging(value)
				Me.SendPropertyChanging
				Me._digit = value
				Me.SendPropertyChanged("digit")
				Me.OndigitChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tempBrandStaffingPosition")>  _
Partial Public Class tempBrandStaffingPosition
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _tempBrandStaffingPositionID As Integer
	
	Private _tempBrandID As String
	
	Private _staffingPositionID As System.Nullable(Of Integer)
	
	Private _startTimeOffSet As System.Nullable(Of Integer)
	
	Private _endTimeOffSet As System.Nullable(Of Integer)
	
	Private _assigned As System.Nullable(Of Boolean)
	
	Private _assignedUserName As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OntempBrandStaffingPositionIDChanging(value As Integer)
    End Sub
    Partial Private Sub OntempBrandStaffingPositionIDChanged()
    End Sub
    Partial Private Sub OntempBrandIDChanging(value As String)
    End Sub
    Partial Private Sub OntempBrandIDChanged()
    End Sub
    Partial Private Sub OnstaffingPositionIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnstaffingPositionIDChanged()
    End Sub
    Partial Private Sub OnstartTimeOffSetChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnstartTimeOffSetChanged()
    End Sub
    Partial Private Sub OnendTimeOffSetChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnendTimeOffSetChanged()
    End Sub
    Partial Private Sub OnassignedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnassignedChanged()
    End Sub
    Partial Private Sub OnassignedUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnassignedUserNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tempBrandStaffingPositionID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property tempBrandStaffingPositionID() As Integer
		Get
			Return Me._tempBrandStaffingPositionID
		End Get
		Set
			If ((Me._tempBrandStaffingPositionID = value)  _
						= false) Then
				Me.OntempBrandStaffingPositionIDChanging(value)
				Me.SendPropertyChanging
				Me._tempBrandStaffingPositionID = value
				Me.SendPropertyChanged("tempBrandStaffingPositionID")
				Me.OntempBrandStaffingPositionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tempBrandID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property tempBrandID() As String
		Get
			Return Me._tempBrandID
		End Get
		Set
			If (String.Equals(Me._tempBrandID, value) = false) Then
				Me.OntempBrandIDChanging(value)
				Me.SendPropertyChanging
				Me._tempBrandID = value
				Me.SendPropertyChanged("tempBrandID")
				Me.OntempBrandIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_staffingPositionID", DbType:="Int")>  _
	Public Property staffingPositionID() As System.Nullable(Of Integer)
		Get
			Return Me._staffingPositionID
		End Get
		Set
			If (Me._staffingPositionID.Equals(value) = false) Then
				Me.OnstaffingPositionIDChanging(value)
				Me.SendPropertyChanging
				Me._staffingPositionID = value
				Me.SendPropertyChanged("staffingPositionID")
				Me.OnstaffingPositionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_startTimeOffSet", DbType:="Int")>  _
	Public Property startTimeOffSet() As System.Nullable(Of Integer)
		Get
			Return Me._startTimeOffSet
		End Get
		Set
			If (Me._startTimeOffSet.Equals(value) = false) Then
				Me.OnstartTimeOffSetChanging(value)
				Me.SendPropertyChanging
				Me._startTimeOffSet = value
				Me.SendPropertyChanged("startTimeOffSet")
				Me.OnstartTimeOffSetChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_endTimeOffSet", DbType:="Int")>  _
	Public Property endTimeOffSet() As System.Nullable(Of Integer)
		Get
			Return Me._endTimeOffSet
		End Get
		Set
			If (Me._endTimeOffSet.Equals(value) = false) Then
				Me.OnendTimeOffSetChanging(value)
				Me.SendPropertyChanging
				Me._endTimeOffSet = value
				Me.SendPropertyChanged("endTimeOffSet")
				Me.OnendTimeOffSetChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_assigned", DbType:="Bit")>  _
	Public Property assigned() As System.Nullable(Of Boolean)
		Get
			Return Me._assigned
		End Get
		Set
			If (Me._assigned.Equals(value) = false) Then
				Me.OnassignedChanging(value)
				Me.SendPropertyChanging
				Me._assigned = value
				Me.SendPropertyChanged("assigned")
				Me.OnassignedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_assignedUserName", DbType:="NVarChar(50)")>  _
	Public Property assignedUserName() As String
		Get
			Return Me._assignedUserName
		End Get
		Set
			If (String.Equals(Me._assignedUserName, value) = false) Then
				Me.OnassignedUserNameChanging(value)
				Me.SendPropertyChanging
				Me._assignedUserName = value
				Me.SendPropertyChanged("assignedUserName")
				Me.OnassignedUserNameChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tempBrandSuppliers")>  _
Partial Public Class tempBrandSupplier
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _supplierBrandID As Integer
	
	Private _brandID As Integer
	
	Private _tempsupplierID As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnsupplierBrandIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnsupplierBrandIDChanged()
    End Sub
    Partial Private Sub OnbrandIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnbrandIDChanged()
    End Sub
    Partial Private Sub OntempsupplierIDChanging(value As String)
    End Sub
    Partial Private Sub OntempsupplierIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierBrandID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property supplierBrandID() As Integer
		Get
			Return Me._supplierBrandID
		End Get
		Set
			If ((Me._supplierBrandID = value)  _
						= false) Then
				Me.OnsupplierBrandIDChanging(value)
				Me.SendPropertyChanging
				Me._supplierBrandID = value
				Me.SendPropertyChanged("supplierBrandID")
				Me.OnsupplierBrandIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandID", DbType:="Int NOT NULL")>  _
	Public Property brandID() As Integer
		Get
			Return Me._brandID
		End Get
		Set
			If ((Me._brandID = value)  _
						= false) Then
				Me.OnbrandIDChanging(value)
				Me.SendPropertyChanging
				Me._brandID = value
				Me.SendPropertyChanged("brandID")
				Me.OnbrandIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tempsupplierID", DbType:="NVarChar(50)")>  _
	Public Property tempsupplierID() As String
		Get
			Return Me._tempsupplierID
		End Get
		Set
			If (String.Equals(Me._tempsupplierID, value) = false) Then
				Me.OntempsupplierIDChanging(value)
				Me.SendPropertyChanging
				Me._tempsupplierID = value
				Me.SendPropertyChanged("tempsupplierID")
				Me.OntempsupplierIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tempCheckIn")>  _
Partial Public Class tempCheckIn
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CheckInID As Integer
	
	Private _UserID As String
	
	Private _Latitude As System.Nullable(Of Double)
	
	Private _Longtitude As System.Nullable(Of Double)
	
	Private _eventID As System.Nullable(Of Integer)
	
	Private _timeStamp As System.Nullable(Of Date)
	
	Private _distance As System.Nullable(Of Integer)
	
	Private _adjustedTimeStamp As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCheckInIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCheckInIDChanged()
    End Sub
    Partial Private Sub OnUserIDChanging(value As String)
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnLatitudeChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnLatitudeChanged()
    End Sub
    Partial Private Sub OnLongtitudeChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnLongtitudeChanged()
    End Sub
    Partial Private Sub OneventIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OneventIDChanged()
    End Sub
    Partial Private Sub OntimeStampChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OntimeStampChanged()
    End Sub
    Partial Private Sub OndistanceChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OndistanceChanged()
    End Sub
    Partial Private Sub OnadjustedTimeStampChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnadjustedTimeStampChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CheckInID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property CheckInID() As Integer
		Get
			Return Me._CheckInID
		End Get
		Set
			If ((Me._CheckInID = value)  _
						= false) Then
				Me.OnCheckInIDChanging(value)
				Me.SendPropertyChanging
				Me._CheckInID = value
				Me.SendPropertyChanged("CheckInID")
				Me.OnCheckInIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property UserID() As String
		Get
			Return Me._UserID
		End Get
		Set
			If (String.Equals(Me._UserID, value) = false) Then
				Me.OnUserIDChanging(value)
				Me.SendPropertyChanging
				Me._UserID = value
				Me.SendPropertyChanged("UserID")
				Me.OnUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Latitude", DbType:="Float")>  _
	Public Property Latitude() As System.Nullable(Of Double)
		Get
			Return Me._Latitude
		End Get
		Set
			If (Me._Latitude.Equals(value) = false) Then
				Me.OnLatitudeChanging(value)
				Me.SendPropertyChanging
				Me._Latitude = value
				Me.SendPropertyChanged("Latitude")
				Me.OnLatitudeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Longtitude", DbType:="Float")>  _
	Public Property Longtitude() As System.Nullable(Of Double)
		Get
			Return Me._Longtitude
		End Get
		Set
			If (Me._Longtitude.Equals(value) = false) Then
				Me.OnLongtitudeChanging(value)
				Me.SendPropertyChanging
				Me._Longtitude = value
				Me.SendPropertyChanged("Longtitude")
				Me.OnLongtitudeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int")>  _
	Public Property eventID() As System.Nullable(Of Integer)
		Get
			Return Me._eventID
		End Get
		Set
			If (Me._eventID.Equals(value) = false) Then
				Me.OneventIDChanging(value)
				Me.SendPropertyChanging
				Me._eventID = value
				Me.SendPropertyChanged("eventID")
				Me.OneventIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_timeStamp", DbType:="SmallDateTime")>  _
	Public Property timeStamp() As System.Nullable(Of Date)
		Get
			Return Me._timeStamp
		End Get
		Set
			If (Me._timeStamp.Equals(value) = false) Then
				Me.OntimeStampChanging(value)
				Me.SendPropertyChanging
				Me._timeStamp = value
				Me.SendPropertyChanged("timeStamp")
				Me.OntimeStampChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_distance", DbType:="Int")>  _
	Public Property distance() As System.Nullable(Of Integer)
		Get
			Return Me._distance
		End Get
		Set
			If (Me._distance.Equals(value) = false) Then
				Me.OndistanceChanging(value)
				Me.SendPropertyChanging
				Me._distance = value
				Me.SendPropertyChanged("distance")
				Me.OndistanceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_adjustedTimeStamp", DbType:="SmallDateTime")>  _
	Public Property adjustedTimeStamp() As System.Nullable(Of Date)
		Get
			Return Me._adjustedTimeStamp
		End Get
		Set
			If (Me._adjustedTimeStamp.Equals(value) = false) Then
				Me.OnadjustedTimeStampChanging(value)
				Me.SendPropertyChanging
				Me._adjustedTimeStamp = value
				Me.SendPropertyChanged("adjustedTimeStamp")
				Me.OnadjustedTimeStampChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tempEvent")>  _
Partial Public Class tempEvent
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _eventID As String
	
	Private _eventName As String
	
	Private _accountID As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OneventIDChanging(value As String)
    End Sub
    Partial Private Sub OneventIDChanged()
    End Sub
    Partial Private Sub OneventNameChanging(value As String)
    End Sub
    Partial Private Sub OneventNameChanged()
    End Sub
    Partial Private Sub OnaccountIDChanging(value As String)
    End Sub
    Partial Private Sub OnaccountIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="VarChar(50)")>  _
	Public Property eventID() As String
		Get
			Return Me._eventID
		End Get
		Set
			If (String.Equals(Me._eventID, value) = false) Then
				Me.OneventIDChanging(value)
				Me.SendPropertyChanging
				Me._eventID = value
				Me.SendPropertyChanged("eventID")
				Me.OneventIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventName", DbType:="NVarChar(50)")>  _
	Public Property eventName() As String
		Get
			Return Me._eventName
		End Get
		Set
			If (String.Equals(Me._eventName, value) = false) Then
				Me.OneventNameChanging(value)
				Me.SendPropertyChanging
				Me._eventName = value
				Me.SendPropertyChanged("eventName")
				Me.OneventNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="VarChar(50)")>  _
	Public Property accountID() As String
		Get
			Return Me._accountID
		End Get
		Set
			If (String.Equals(Me._accountID, value) = false) Then
				Me.OnaccountIDChanging(value)
				Me.SendPropertyChanging
				Me._accountID = value
				Me.SendPropertyChanged("accountID")
				Me.OnaccountIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tempEventRecapQuestions")>  _
Partial Public Class tempEventRecapQuestion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _eventRecapQuestionID As Integer
	
	Private _eventID As System.Nullable(Of Integer)
	
	Private _brandID As System.Nullable(Of Integer)
	
	Private _question As String
	
	Private _questionType As String
	
	Private _recapID As System.Nullable(Of Integer)
	
	Private _recapQuestionID As System.Nullable(Of Integer)
	
	Private _sortorder As System.Nullable(Of Integer)
	
	Private _answer As String
	
	Private _createdBy As String
	
	Private _createdDate As System.Nullable(Of Date)
	
	Private _modifiedBy As String
	
	Private _modifiedDate As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OneventRecapQuestionIDChanging(value As Integer)
    End Sub
    Partial Private Sub OneventRecapQuestionIDChanged()
    End Sub
    Partial Private Sub OneventIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OneventIDChanged()
    End Sub
    Partial Private Sub OnbrandIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnbrandIDChanged()
    End Sub
    Partial Private Sub OnquestionChanging(value As String)
    End Sub
    Partial Private Sub OnquestionChanged()
    End Sub
    Partial Private Sub OnquestionTypeChanging(value As String)
    End Sub
    Partial Private Sub OnquestionTypeChanged()
    End Sub
    Partial Private Sub OnrecapIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnrecapIDChanged()
    End Sub
    Partial Private Sub OnrecapQuestionIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnrecapQuestionIDChanged()
    End Sub
    Partial Private Sub OnsortorderChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnsortorderChanged()
    End Sub
    Partial Private Sub OnanswerChanging(value As String)
    End Sub
    Partial Private Sub OnanswerChanged()
    End Sub
    Partial Private Sub OncreatedByChanging(value As String)
    End Sub
    Partial Private Sub OncreatedByChanged()
    End Sub
    Partial Private Sub OncreatedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OncreatedDateChanged()
    End Sub
    Partial Private Sub OnmodifiedByChanging(value As String)
    End Sub
    Partial Private Sub OnmodifiedByChanged()
    End Sub
    Partial Private Sub OnmodifiedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnmodifiedDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventRecapQuestionID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property eventRecapQuestionID() As Integer
		Get
			Return Me._eventRecapQuestionID
		End Get
		Set
			If ((Me._eventRecapQuestionID = value)  _
						= false) Then
				Me.OneventRecapQuestionIDChanging(value)
				Me.SendPropertyChanging
				Me._eventRecapQuestionID = value
				Me.SendPropertyChanged("eventRecapQuestionID")
				Me.OneventRecapQuestionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int")>  _
	Public Property eventID() As System.Nullable(Of Integer)
		Get
			Return Me._eventID
		End Get
		Set
			If (Me._eventID.Equals(value) = false) Then
				Me.OneventIDChanging(value)
				Me.SendPropertyChanging
				Me._eventID = value
				Me.SendPropertyChanged("eventID")
				Me.OneventIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandID", DbType:="Int")>  _
	Public Property brandID() As System.Nullable(Of Integer)
		Get
			Return Me._brandID
		End Get
		Set
			If (Me._brandID.Equals(value) = false) Then
				Me.OnbrandIDChanging(value)
				Me.SendPropertyChanging
				Me._brandID = value
				Me.SendPropertyChanged("brandID")
				Me.OnbrandIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_question", DbType:="NVarChar(256)")>  _
	Public Property question() As String
		Get
			Return Me._question
		End Get
		Set
			If (String.Equals(Me._question, value) = false) Then
				Me.OnquestionChanging(value)
				Me.SendPropertyChanging
				Me._question = value
				Me.SendPropertyChanged("question")
				Me.OnquestionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_questionType", DbType:="NVarChar(50)")>  _
	Public Property questionType() As String
		Get
			Return Me._questionType
		End Get
		Set
			If (String.Equals(Me._questionType, value) = false) Then
				Me.OnquestionTypeChanging(value)
				Me.SendPropertyChanging
				Me._questionType = value
				Me.SendPropertyChanged("questionType")
				Me.OnquestionTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_recapID", DbType:="Int")>  _
	Public Property recapID() As System.Nullable(Of Integer)
		Get
			Return Me._recapID
		End Get
		Set
			If (Me._recapID.Equals(value) = false) Then
				Me.OnrecapIDChanging(value)
				Me.SendPropertyChanging
				Me._recapID = value
				Me.SendPropertyChanged("recapID")
				Me.OnrecapIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_recapQuestionID", DbType:="Int")>  _
	Public Property recapQuestionID() As System.Nullable(Of Integer)
		Get
			Return Me._recapQuestionID
		End Get
		Set
			If (Me._recapQuestionID.Equals(value) = false) Then
				Me.OnrecapQuestionIDChanging(value)
				Me.SendPropertyChanging
				Me._recapQuestionID = value
				Me.SendPropertyChanged("recapQuestionID")
				Me.OnrecapQuestionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sortorder", DbType:="Int")>  _
	Public Property sortorder() As System.Nullable(Of Integer)
		Get
			Return Me._sortorder
		End Get
		Set
			If (Me._sortorder.Equals(value) = false) Then
				Me.OnsortorderChanging(value)
				Me.SendPropertyChanging
				Me._sortorder = value
				Me.SendPropertyChanged("sortorder")
				Me.OnsortorderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_answer", DbType:="VarChar(MAX)")>  _
	Public Property answer() As String
		Get
			Return Me._answer
		End Get
		Set
			If (String.Equals(Me._answer, value) = false) Then
				Me.OnanswerChanging(value)
				Me.SendPropertyChanging
				Me._answer = value
				Me.SendPropertyChanged("answer")
				Me.OnanswerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_createdBy", DbType:="NVarChar(50)")>  _
	Public Property createdBy() As String
		Get
			Return Me._createdBy
		End Get
		Set
			If (String.Equals(Me._createdBy, value) = false) Then
				Me.OncreatedByChanging(value)
				Me.SendPropertyChanging
				Me._createdBy = value
				Me.SendPropertyChanged("createdBy")
				Me.OncreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_createdDate", DbType:="SmallDateTime")>  _
	Public Property createdDate() As System.Nullable(Of Date)
		Get
			Return Me._createdDate
		End Get
		Set
			If (Me._createdDate.Equals(value) = false) Then
				Me.OncreatedDateChanging(value)
				Me.SendPropertyChanging
				Me._createdDate = value
				Me.SendPropertyChanged("createdDate")
				Me.OncreatedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_modifiedBy", DbType:="NVarChar(50)")>  _
	Public Property modifiedBy() As String
		Get
			Return Me._modifiedBy
		End Get
		Set
			If (String.Equals(Me._modifiedBy, value) = false) Then
				Me.OnmodifiedByChanging(value)
				Me.SendPropertyChanging
				Me._modifiedBy = value
				Me.SendPropertyChanged("modifiedBy")
				Me.OnmodifiedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_modifiedDate", DbType:="SmallDateTime")>  _
	Public Property modifiedDate() As System.Nullable(Of Date)
		Get
			Return Me._modifiedDate
		End Get
		Set
			If (Me._modifiedDate.Equals(value) = false) Then
				Me.OnmodifiedDateChanging(value)
				Me.SendPropertyChanging
				Me._modifiedDate = value
				Me.SendPropertyChanged("modifiedDate")
				Me.OnmodifiedDateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tempEventTypeRecapQuestion")>  _
Partial Public Class tempEventTypeRecapQuestion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _tempID As Integer
	
	Private _tempGUID As String
	
	Private _question As String
	
	Private _sortorder As System.Nullable(Of Integer)
	
	Private _questionType As String
	
	Private _choices As String
	
	Private _displayOption As String
	
	Private _lines As String
	
	Private _description As String
	
	Private _yes_noDefaultValue As String
	
	Private _numberDecimalPlace As System.Nullable(Of Integer)
	
	Private _numberDefaultValue As String
	
	Private _showPercentage As System.Nullable(Of Boolean)
	
	Private _dateFormat As String
	
	Private _dateDefaultValue As String
	
	Private _timeFormat As String
	
	Private _dateDisplay As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OntempIDChanging(value As Integer)
    End Sub
    Partial Private Sub OntempIDChanged()
    End Sub
    Partial Private Sub OntempGUIDChanging(value As String)
    End Sub
    Partial Private Sub OntempGUIDChanged()
    End Sub
    Partial Private Sub OnquestionChanging(value As String)
    End Sub
    Partial Private Sub OnquestionChanged()
    End Sub
    Partial Private Sub OnsortorderChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnsortorderChanged()
    End Sub
    Partial Private Sub OnquestionTypeChanging(value As String)
    End Sub
    Partial Private Sub OnquestionTypeChanged()
    End Sub
    Partial Private Sub OnchoicesChanging(value As String)
    End Sub
    Partial Private Sub OnchoicesChanged()
    End Sub
    Partial Private Sub OndisplayOptionChanging(value As String)
    End Sub
    Partial Private Sub OndisplayOptionChanged()
    End Sub
    Partial Private Sub OnlinesChanging(value As String)
    End Sub
    Partial Private Sub OnlinesChanged()
    End Sub
    Partial Private Sub OndescriptionChanging(value As String)
    End Sub
    Partial Private Sub OndescriptionChanged()
    End Sub
    Partial Private Sub Onyes_noDefaultValueChanging(value As String)
    End Sub
    Partial Private Sub Onyes_noDefaultValueChanged()
    End Sub
    Partial Private Sub OnnumberDecimalPlaceChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnnumberDecimalPlaceChanged()
    End Sub
    Partial Private Sub OnnumberDefaultValueChanging(value As String)
    End Sub
    Partial Private Sub OnnumberDefaultValueChanged()
    End Sub
    Partial Private Sub OnshowPercentageChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnshowPercentageChanged()
    End Sub
    Partial Private Sub OndateFormatChanging(value As String)
    End Sub
    Partial Private Sub OndateFormatChanged()
    End Sub
    Partial Private Sub OndateDefaultValueChanging(value As String)
    End Sub
    Partial Private Sub OndateDefaultValueChanged()
    End Sub
    Partial Private Sub OntimeFormatChanging(value As String)
    End Sub
    Partial Private Sub OntimeFormatChanged()
    End Sub
    Partial Private Sub OndateDisplayChanging(value As String)
    End Sub
    Partial Private Sub OndateDisplayChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tempID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property tempID() As Integer
		Get
			Return Me._tempID
		End Get
		Set
			If ((Me._tempID = value)  _
						= false) Then
				Me.OntempIDChanging(value)
				Me.SendPropertyChanging
				Me._tempID = value
				Me.SendPropertyChanged("tempID")
				Me.OntempIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tempGUID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property tempGUID() As String
		Get
			Return Me._tempGUID
		End Get
		Set
			If (String.Equals(Me._tempGUID, value) = false) Then
				Me.OntempGUIDChanging(value)
				Me.SendPropertyChanging
				Me._tempGUID = value
				Me.SendPropertyChanged("tempGUID")
				Me.OntempGUIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_question", DbType:="NVarChar(1000)")>  _
	Public Property question() As String
		Get
			Return Me._question
		End Get
		Set
			If (String.Equals(Me._question, value) = false) Then
				Me.OnquestionChanging(value)
				Me.SendPropertyChanging
				Me._question = value
				Me.SendPropertyChanged("question")
				Me.OnquestionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sortorder", DbType:="Int")>  _
	Public Property sortorder() As System.Nullable(Of Integer)
		Get
			Return Me._sortorder
		End Get
		Set
			If (Me._sortorder.Equals(value) = false) Then
				Me.OnsortorderChanging(value)
				Me.SendPropertyChanging
				Me._sortorder = value
				Me.SendPropertyChanged("sortorder")
				Me.OnsortorderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_questionType", DbType:="NVarChar(50)")>  _
	Public Property questionType() As String
		Get
			Return Me._questionType
		End Get
		Set
			If (String.Equals(Me._questionType, value) = false) Then
				Me.OnquestionTypeChanging(value)
				Me.SendPropertyChanging
				Me._questionType = value
				Me.SendPropertyChanged("questionType")
				Me.OnquestionTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_choices", DbType:="NVarChar(MAX)")>  _
	Public Property choices() As String
		Get
			Return Me._choices
		End Get
		Set
			If (String.Equals(Me._choices, value) = false) Then
				Me.OnchoicesChanging(value)
				Me.SendPropertyChanging
				Me._choices = value
				Me.SendPropertyChanged("choices")
				Me.OnchoicesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_displayOption", DbType:="NVarChar(50)")>  _
	Public Property displayOption() As String
		Get
			Return Me._displayOption
		End Get
		Set
			If (String.Equals(Me._displayOption, value) = false) Then
				Me.OndisplayOptionChanging(value)
				Me.SendPropertyChanging
				Me._displayOption = value
				Me.SendPropertyChanged("displayOption")
				Me.OndisplayOptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lines", DbType:="VarChar(50)")>  _
	Public Property lines() As String
		Get
			Return Me._lines
		End Get
		Set
			If (String.Equals(Me._lines, value) = false) Then
				Me.OnlinesChanging(value)
				Me.SendPropertyChanging
				Me._lines = value
				Me.SendPropertyChanged("lines")
				Me.OnlinesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_description", DbType:="NVarChar(2000)")>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me.OndescriptionChanging(value)
				Me.SendPropertyChanging
				Me._description = value
				Me.SendPropertyChanged("description")
				Me.OndescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[yes/noDefaultValue]", Storage:="_yes_noDefaultValue", DbType:="NVarChar(50)")>  _
	Public Property yes_noDefaultValue() As String
		Get
			Return Me._yes_noDefaultValue
		End Get
		Set
			If (String.Equals(Me._yes_noDefaultValue, value) = false) Then
				Me.Onyes_noDefaultValueChanging(value)
				Me.SendPropertyChanging
				Me._yes_noDefaultValue = value
				Me.SendPropertyChanged("yes_noDefaultValue")
				Me.Onyes_noDefaultValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_numberDecimalPlace", DbType:="Int")>  _
	Public Property numberDecimalPlace() As System.Nullable(Of Integer)
		Get
			Return Me._numberDecimalPlace
		End Get
		Set
			If (Me._numberDecimalPlace.Equals(value) = false) Then
				Me.OnnumberDecimalPlaceChanging(value)
				Me.SendPropertyChanging
				Me._numberDecimalPlace = value
				Me.SendPropertyChanged("numberDecimalPlace")
				Me.OnnumberDecimalPlaceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_numberDefaultValue", DbType:="VarChar(50)")>  _
	Public Property numberDefaultValue() As String
		Get
			Return Me._numberDefaultValue
		End Get
		Set
			If (String.Equals(Me._numberDefaultValue, value) = false) Then
				Me.OnnumberDefaultValueChanging(value)
				Me.SendPropertyChanging
				Me._numberDefaultValue = value
				Me.SendPropertyChanged("numberDefaultValue")
				Me.OnnumberDefaultValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_showPercentage", DbType:="Bit")>  _
	Public Property showPercentage() As System.Nullable(Of Boolean)
		Get
			Return Me._showPercentage
		End Get
		Set
			If (Me._showPercentage.Equals(value) = false) Then
				Me.OnshowPercentageChanging(value)
				Me.SendPropertyChanging
				Me._showPercentage = value
				Me.SendPropertyChanged("showPercentage")
				Me.OnshowPercentageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateFormat", DbType:="NVarChar(50)")>  _
	Public Property dateFormat() As String
		Get
			Return Me._dateFormat
		End Get
		Set
			If (String.Equals(Me._dateFormat, value) = false) Then
				Me.OndateFormatChanging(value)
				Me.SendPropertyChanging
				Me._dateFormat = value
				Me.SendPropertyChanged("dateFormat")
				Me.OndateFormatChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateDefaultValue", DbType:="NVarChar(50)")>  _
	Public Property dateDefaultValue() As String
		Get
			Return Me._dateDefaultValue
		End Get
		Set
			If (String.Equals(Me._dateDefaultValue, value) = false) Then
				Me.OndateDefaultValueChanging(value)
				Me.SendPropertyChanging
				Me._dateDefaultValue = value
				Me.SendPropertyChanged("dateDefaultValue")
				Me.OndateDefaultValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_timeFormat", DbType:="NVarChar(50)")>  _
	Public Property timeFormat() As String
		Get
			Return Me._timeFormat
		End Get
		Set
			If (String.Equals(Me._timeFormat, value) = false) Then
				Me.OntimeFormatChanging(value)
				Me.SendPropertyChanging
				Me._timeFormat = value
				Me.SendPropertyChanged("timeFormat")
				Me.OntimeFormatChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateDisplay", DbType:="NVarChar(50)")>  _
	Public Property dateDisplay() As String
		Get
			Return Me._dateDisplay
		End Get
		Set
			If (String.Equals(Me._dateDisplay, value) = false) Then
				Me.OndateDisplayChanging(value)
				Me.SendPropertyChanging
				Me._dateDisplay = value
				Me.SendPropertyChanged("dateDisplay")
				Me.OndateDisplayChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tempEventTypeTask")>  _
Partial Public Class tempEventTypeTask
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _tempEventTypeTaskID As Integer
	
	Private _taskTitle As String
	
	Private _dateDueOffset As System.Nullable(Of Integer)
	
	Private _notes As String
	
	Private _tempGuid As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OntempEventTypeTaskIDChanging(value As Integer)
    End Sub
    Partial Private Sub OntempEventTypeTaskIDChanged()
    End Sub
    Partial Private Sub OntaskTitleChanging(value As String)
    End Sub
    Partial Private Sub OntaskTitleChanged()
    End Sub
    Partial Private Sub OndateDueOffsetChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OndateDueOffsetChanged()
    End Sub
    Partial Private Sub OnnotesChanging(value As String)
    End Sub
    Partial Private Sub OnnotesChanged()
    End Sub
    Partial Private Sub OntempGuidChanging(value As String)
    End Sub
    Partial Private Sub OntempGuidChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tempEventTypeTaskID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property tempEventTypeTaskID() As Integer
		Get
			Return Me._tempEventTypeTaskID
		End Get
		Set
			If ((Me._tempEventTypeTaskID = value)  _
						= false) Then
				Me.OntempEventTypeTaskIDChanging(value)
				Me.SendPropertyChanging
				Me._tempEventTypeTaskID = value
				Me.SendPropertyChanged("tempEventTypeTaskID")
				Me.OntempEventTypeTaskIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_taskTitle", DbType:="NVarChar(256)")>  _
	Public Property taskTitle() As String
		Get
			Return Me._taskTitle
		End Get
		Set
			If (String.Equals(Me._taskTitle, value) = false) Then
				Me.OntaskTitleChanging(value)
				Me.SendPropertyChanging
				Me._taskTitle = value
				Me.SendPropertyChanged("taskTitle")
				Me.OntaskTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateDueOffset", DbType:="Int")>  _
	Public Property dateDueOffset() As System.Nullable(Of Integer)
		Get
			Return Me._dateDueOffset
		End Get
		Set
			If (Me._dateDueOffset.Equals(value) = false) Then
				Me.OndateDueOffsetChanging(value)
				Me.SendPropertyChanging
				Me._dateDueOffset = value
				Me.SendPropertyChanged("dateDueOffset")
				Me.OndateDueOffsetChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_notes", DbType:="NVarChar(MAX)")>  _
	Public Property notes() As String
		Get
			Return Me._notes
		End Get
		Set
			If (String.Equals(Me._notes, value) = false) Then
				Me.OnnotesChanging(value)
				Me.SendPropertyChanging
				Me._notes = value
				Me.SendPropertyChanged("notes")
				Me.OnnotesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tempGuid", DbType:="NVarChar(50)")>  _
	Public Property tempGuid() As String
		Get
			Return Me._tempGuid
		End Get
		Set
			If (String.Equals(Me._tempGuid, value) = false) Then
				Me.OntempGuidChanging(value)
				Me.SendPropertyChanging
				Me._tempGuid = value
				Me.SendPropertyChanged("tempGuid")
				Me.OntempGuidChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tempPhoto")>  _
Partial Public Class tempPhoto
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _photoID As Integer
	
	Private _photoTitle As String
	
	Private _fileName As String
	
	Private _photoDescription As String
	
	Private _Image As System.Data.Linq.Binary
	
	Private _ThumbImage As System.Data.Linq.Binary
	
	Private _SmallImage As System.Data.Linq.Binary
	
	Private _LargeImage As System.Data.Linq.Binary
	
	Private _accountID As String
	
	Private _eventID As String
	
	Private _brandID As String
	
	Private _marketID As String
	
	Private _keywords As String
	
	Private _tag As String
	
	Private _dateUploaded As System.Nullable(Of Date)
	
	Private _uploadedBy As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnphotoIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnphotoIDChanged()
    End Sub
    Partial Private Sub OnphotoTitleChanging(value As String)
    End Sub
    Partial Private Sub OnphotoTitleChanged()
    End Sub
    Partial Private Sub OnfileNameChanging(value As String)
    End Sub
    Partial Private Sub OnfileNameChanged()
    End Sub
    Partial Private Sub OnphotoDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnphotoDescriptionChanged()
    End Sub
    Partial Private Sub OnImageChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnImageChanged()
    End Sub
    Partial Private Sub OnThumbImageChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnThumbImageChanged()
    End Sub
    Partial Private Sub OnSmallImageChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnSmallImageChanged()
    End Sub
    Partial Private Sub OnLargeImageChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnLargeImageChanged()
    End Sub
    Partial Private Sub OnaccountIDChanging(value As String)
    End Sub
    Partial Private Sub OnaccountIDChanged()
    End Sub
    Partial Private Sub OneventIDChanging(value As String)
    End Sub
    Partial Private Sub OneventIDChanged()
    End Sub
    Partial Private Sub OnbrandIDChanging(value As String)
    End Sub
    Partial Private Sub OnbrandIDChanged()
    End Sub
    Partial Private Sub OnmarketIDChanging(value As String)
    End Sub
    Partial Private Sub OnmarketIDChanged()
    End Sub
    Partial Private Sub OnkeywordsChanging(value As String)
    End Sub
    Partial Private Sub OnkeywordsChanged()
    End Sub
    Partial Private Sub OntagChanging(value As String)
    End Sub
    Partial Private Sub OntagChanged()
    End Sub
    Partial Private Sub OndateUploadedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OndateUploadedChanged()
    End Sub
    Partial Private Sub OnuploadedByChanging(value As String)
    End Sub
    Partial Private Sub OnuploadedByChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_photoID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property photoID() As Integer
		Get
			Return Me._photoID
		End Get
		Set
			If ((Me._photoID = value)  _
						= false) Then
				Me.OnphotoIDChanging(value)
				Me.SendPropertyChanging
				Me._photoID = value
				Me.SendPropertyChanged("photoID")
				Me.OnphotoIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_photoTitle", DbType:="VarChar(255)")>  _
	Public Property photoTitle() As String
		Get
			Return Me._photoTitle
		End Get
		Set
			If (String.Equals(Me._photoTitle, value) = false) Then
				Me.OnphotoTitleChanging(value)
				Me.SendPropertyChanging
				Me._photoTitle = value
				Me.SendPropertyChanged("photoTitle")
				Me.OnphotoTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fileName", DbType:="VarChar(255)")>  _
	Public Property fileName() As String
		Get
			Return Me._fileName
		End Get
		Set
			If (String.Equals(Me._fileName, value) = false) Then
				Me.OnfileNameChanging(value)
				Me.SendPropertyChanging
				Me._fileName = value
				Me.SendPropertyChanged("fileName")
				Me.OnfileNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_photoDescription", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property photoDescription() As String
		Get
			Return Me._photoDescription
		End Get
		Set
			If (String.Equals(Me._photoDescription, value) = false) Then
				Me.OnphotoDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._photoDescription = value
				Me.SendPropertyChanged("photoDescription")
				Me.OnphotoDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Image", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Image() As System.Data.Linq.Binary
		Get
			Return Me._Image
		End Get
		Set
			If (Object.Equals(Me._Image, value) = false) Then
				Me.OnImageChanging(value)
				Me.SendPropertyChanging
				Me._Image = value
				Me.SendPropertyChanged("Image")
				Me.OnImageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ThumbImage", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ThumbImage() As System.Data.Linq.Binary
		Get
			Return Me._ThumbImage
		End Get
		Set
			If (Object.Equals(Me._ThumbImage, value) = false) Then
				Me.OnThumbImageChanging(value)
				Me.SendPropertyChanging
				Me._ThumbImage = value
				Me.SendPropertyChanged("ThumbImage")
				Me.OnThumbImageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SmallImage", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property SmallImage() As System.Data.Linq.Binary
		Get
			Return Me._SmallImage
		End Get
		Set
			If (Object.Equals(Me._SmallImage, value) = false) Then
				Me.OnSmallImageChanging(value)
				Me.SendPropertyChanging
				Me._SmallImage = value
				Me.SendPropertyChanged("SmallImage")
				Me.OnSmallImageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LargeImage", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property LargeImage() As System.Data.Linq.Binary
		Get
			Return Me._LargeImage
		End Get
		Set
			If (Object.Equals(Me._LargeImage, value) = false) Then
				Me.OnLargeImageChanging(value)
				Me.SendPropertyChanging
				Me._LargeImage = value
				Me.SendPropertyChanged("LargeImage")
				Me.OnLargeImageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="NVarChar(50)")>  _
	Public Property accountID() As String
		Get
			Return Me._accountID
		End Get
		Set
			If (String.Equals(Me._accountID, value) = false) Then
				Me.OnaccountIDChanging(value)
				Me.SendPropertyChanging
				Me._accountID = value
				Me.SendPropertyChanged("accountID")
				Me.OnaccountIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="NVarChar(50)")>  _
	Public Property eventID() As String
		Get
			Return Me._eventID
		End Get
		Set
			If (String.Equals(Me._eventID, value) = false) Then
				Me.OneventIDChanging(value)
				Me.SendPropertyChanging
				Me._eventID = value
				Me.SendPropertyChanged("eventID")
				Me.OneventIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandID", DbType:="NVarChar(50)")>  _
	Public Property brandID() As String
		Get
			Return Me._brandID
		End Get
		Set
			If (String.Equals(Me._brandID, value) = false) Then
				Me.OnbrandIDChanging(value)
				Me.SendPropertyChanging
				Me._brandID = value
				Me.SendPropertyChanged("brandID")
				Me.OnbrandIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="NVarChar(50)")>  _
	Public Property marketID() As String
		Get
			Return Me._marketID
		End Get
		Set
			If (String.Equals(Me._marketID, value) = false) Then
				Me.OnmarketIDChanging(value)
				Me.SendPropertyChanging
				Me._marketID = value
				Me.SendPropertyChanged("marketID")
				Me.OnmarketIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_keywords", DbType:="NVarChar(1000)")>  _
	Public Property keywords() As String
		Get
			Return Me._keywords
		End Get
		Set
			If (String.Equals(Me._keywords, value) = false) Then
				Me.OnkeywordsChanging(value)
				Me.SendPropertyChanging
				Me._keywords = value
				Me.SendPropertyChanged("keywords")
				Me.OnkeywordsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tag", DbType:="NVarChar(500)")>  _
	Public Property tag() As String
		Get
			Return Me._tag
		End Get
		Set
			If (String.Equals(Me._tag, value) = false) Then
				Me.OntagChanging(value)
				Me.SendPropertyChanging
				Me._tag = value
				Me.SendPropertyChanged("tag")
				Me.OntagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateUploaded", DbType:="SmallDateTime")>  _
	Public Property dateUploaded() As System.Nullable(Of Date)
		Get
			Return Me._dateUploaded
		End Get
		Set
			If (Me._dateUploaded.Equals(value) = false) Then
				Me.OndateUploadedChanging(value)
				Me.SendPropertyChanging
				Me._dateUploaded = value
				Me.SendPropertyChanged("dateUploaded")
				Me.OndateUploadedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_uploadedBy", DbType:="VarChar(50)")>  _
	Public Property uploadedBy() As String
		Get
			Return Me._uploadedBy
		End Get
		Set
			If (String.Equals(Me._uploadedBy, value) = false) Then
				Me.OnuploadedByChanging(value)
				Me.SendPropertyChanging
				Me._uploadedBy = value
				Me.SendPropertyChanged("uploadedBy")
				Me.OnuploadedByChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tempRecapQuestionOptions")>  _
Partial Public Class tempRecapQuestionOption
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _optionID As Integer
	
	Private _brandRecapQuestionID As Integer
	
	Private _option As String
	
	Private _sortOrder As System.Nullable(Of Integer)
	
	Private _optionType As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnoptionIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnoptionIDChanged()
    End Sub
    Partial Private Sub OnbrandRecapQuestionIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnbrandRecapQuestionIDChanged()
    End Sub
    Partial Private Sub OnoptionChanging(value As String)
    End Sub
    Partial Private Sub OnoptionChanged()
    End Sub
    Partial Private Sub OnsortOrderChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnsortOrderChanged()
    End Sub
    Partial Private Sub OnoptionTypeChanging(value As String)
    End Sub
    Partial Private Sub OnoptionTypeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_optionID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property optionID() As Integer
		Get
			Return Me._optionID
		End Get
		Set
			If ((Me._optionID = value)  _
						= false) Then
				Me.OnoptionIDChanging(value)
				Me.SendPropertyChanging
				Me._optionID = value
				Me.SendPropertyChanged("optionID")
				Me.OnoptionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandRecapQuestionID", DbType:="Int NOT NULL")>  _
	Public Property brandRecapQuestionID() As Integer
		Get
			Return Me._brandRecapQuestionID
		End Get
		Set
			If ((Me._brandRecapQuestionID = value)  _
						= false) Then
				Me.OnbrandRecapQuestionIDChanging(value)
				Me.SendPropertyChanging
				Me._brandRecapQuestionID = value
				Me.SendPropertyChanged("brandRecapQuestionID")
				Me.OnbrandRecapQuestionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_option", DbType:="NVarChar(50)")>  _
	Public Property [option]() As String
		Get
			Return Me._option
		End Get
		Set
			If (String.Equals(Me._option, value) = false) Then
				Me.OnoptionChanging(value)
				Me.SendPropertyChanging
				Me._option = value
				Me.SendPropertyChanged("[option]")
				Me.OnoptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sortOrder", DbType:="Int")>  _
	Public Property sortOrder() As System.Nullable(Of Integer)
		Get
			Return Me._sortOrder
		End Get
		Set
			If (Me._sortOrder.Equals(value) = false) Then
				Me.OnsortOrderChanging(value)
				Me.SendPropertyChanging
				Me._sortOrder = value
				Me.SendPropertyChanged("sortOrder")
				Me.OnsortOrderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_optionType", DbType:="VarChar(50)")>  _
	Public Property optionType() As String
		Get
			Return Me._optionType
		End Get
		Set
			If (String.Equals(Me._optionType, value) = false) Then
				Me.OnoptionTypeChanging(value)
				Me.SendPropertyChanging
				Me._optionType = value
				Me.SendPropertyChanged("optionType")
				Me.OnoptionTypeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tempSupplierBillingRate")>  _
Partial Public Class tempSupplierBillingRate
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _BillingRateID As Integer
	
	Private _tempSupplierID As String
	
	Private _RelatedItemID As System.Nullable(Of Integer)
	
	Private _Rate As System.Nullable(Of Integer)
	
	Private _RateType As System.Nullable(Of Integer)
	
	Private _BillingRateType As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnBillingRateIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnBillingRateIDChanged()
    End Sub
    Partial Private Sub OntempSupplierIDChanging(value As String)
    End Sub
    Partial Private Sub OntempSupplierIDChanged()
    End Sub
    Partial Private Sub OnRelatedItemIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRelatedItemIDChanged()
    End Sub
    Partial Private Sub OnRateChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRateChanged()
    End Sub
    Partial Private Sub OnRateTypeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRateTypeChanged()
    End Sub
    Partial Private Sub OnBillingRateTypeChanging(value As String)
    End Sub
    Partial Private Sub OnBillingRateTypeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BillingRateID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property BillingRateID() As Integer
		Get
			Return Me._BillingRateID
		End Get
		Set
			If ((Me._BillingRateID = value)  _
						= false) Then
				Me.OnBillingRateIDChanging(value)
				Me.SendPropertyChanging
				Me._BillingRateID = value
				Me.SendPropertyChanged("BillingRateID")
				Me.OnBillingRateIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tempSupplierID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property tempSupplierID() As String
		Get
			Return Me._tempSupplierID
		End Get
		Set
			If (String.Equals(Me._tempSupplierID, value) = false) Then
				Me.OntempSupplierIDChanging(value)
				Me.SendPropertyChanging
				Me._tempSupplierID = value
				Me.SendPropertyChanged("tempSupplierID")
				Me.OntempSupplierIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RelatedItemID", DbType:="Int")>  _
	Public Property RelatedItemID() As System.Nullable(Of Integer)
		Get
			Return Me._RelatedItemID
		End Get
		Set
			If (Me._RelatedItemID.Equals(value) = false) Then
				Me.OnRelatedItemIDChanging(value)
				Me.SendPropertyChanging
				Me._RelatedItemID = value
				Me.SendPropertyChanged("RelatedItemID")
				Me.OnRelatedItemIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Rate", DbType:="Int")>  _
	Public Property Rate() As System.Nullable(Of Integer)
		Get
			Return Me._Rate
		End Get
		Set
			If (Me._Rate.Equals(value) = false) Then
				Me.OnRateChanging(value)
				Me.SendPropertyChanging
				Me._Rate = value
				Me.SendPropertyChanged("Rate")
				Me.OnRateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RateType", DbType:="Int")>  _
	Public Property RateType() As System.Nullable(Of Integer)
		Get
			Return Me._RateType
		End Get
		Set
			If (Me._RateType.Equals(value) = false) Then
				Me.OnRateTypeChanging(value)
				Me.SendPropertyChanging
				Me._RateType = value
				Me.SendPropertyChanged("RateType")
				Me.OnRateTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BillingRateType", DbType:="VarChar(50)")>  _
	Public Property BillingRateType() As String
		Get
			Return Me._BillingRateType
		End Get
		Set
			If (String.Equals(Me._BillingRateType, value) = false) Then
				Me.OnBillingRateTypeChanging(value)
				Me.SendPropertyChanging
				Me._BillingRateType = value
				Me.SendPropertyChanged("BillingRateType")
				Me.OnBillingRateTypeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tempSupplierBrands")>  _
Partial Public Class tempSupplierBrand
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _supplierBrandID As Integer
	
	Private _supplierID As Integer
	
	Private _tempbrandID As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnsupplierBrandIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnsupplierBrandIDChanged()
    End Sub
    Partial Private Sub OnsupplierIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnsupplierIDChanged()
    End Sub
    Partial Private Sub OntempbrandIDChanging(value As String)
    End Sub
    Partial Private Sub OntempbrandIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierBrandID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property supplierBrandID() As Integer
		Get
			Return Me._supplierBrandID
		End Get
		Set
			If ((Me._supplierBrandID = value)  _
						= false) Then
				Me.OnsupplierBrandIDChanging(value)
				Me.SendPropertyChanging
				Me._supplierBrandID = value
				Me.SendPropertyChanged("supplierBrandID")
				Me.OnsupplierBrandIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int NOT NULL")>  _
	Public Property supplierID() As Integer
		Get
			Return Me._supplierID
		End Get
		Set
			If ((Me._supplierID = value)  _
						= false) Then
				Me.OnsupplierIDChanging(value)
				Me.SendPropertyChanging
				Me._supplierID = value
				Me.SendPropertyChanged("supplierID")
				Me.OnsupplierIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tempbrandID", DbType:="NVarChar(50)")>  _
	Public Property tempbrandID() As String
		Get
			Return Me._tempbrandID
		End Get
		Set
			If (String.Equals(Me._tempbrandID, value) = false) Then
				Me.OntempbrandIDChanging(value)
				Me.SendPropertyChanging
				Me._tempbrandID = value
				Me.SendPropertyChanged("tempbrandID")
				Me.OntempbrandIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ActivityResult")>  _
Partial Public Class ActivityResult
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _activityResultID As Integer
	
	Private _activityID As System.Nullable(Of Integer)
	
	Private _result As String
	
	Private _count As System.Nullable(Of Double)
	
	Private _percent As System.Nullable(Of Double)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnactivityResultIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnactivityResultIDChanged()
    End Sub
    Partial Private Sub OnactivityIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnactivityIDChanged()
    End Sub
    Partial Private Sub OnresultChanging(value As String)
    End Sub
    Partial Private Sub OnresultChanged()
    End Sub
    Partial Private Sub OncountChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OncountChanged()
    End Sub
    Partial Private Sub OnpercentChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnpercentChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_activityResultID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property activityResultID() As Integer
		Get
			Return Me._activityResultID
		End Get
		Set
			If ((Me._activityResultID = value)  _
						= false) Then
				Me.OnactivityResultIDChanging(value)
				Me.SendPropertyChanging
				Me._activityResultID = value
				Me.SendPropertyChanged("activityResultID")
				Me.OnactivityResultIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_activityID", DbType:="Int")>  _
	Public Property activityID() As System.Nullable(Of Integer)
		Get
			Return Me._activityID
		End Get
		Set
			If (Me._activityID.Equals(value) = false) Then
				Me.OnactivityIDChanging(value)
				Me.SendPropertyChanging
				Me._activityID = value
				Me.SendPropertyChanged("activityID")
				Me.OnactivityIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_result", DbType:="NVarChar(50)")>  _
	Public Property result() As String
		Get
			Return Me._result
		End Get
		Set
			If (String.Equals(Me._result, value) = false) Then
				Me.OnresultChanging(value)
				Me.SendPropertyChanging
				Me._result = value
				Me.SendPropertyChanged("result")
				Me.OnresultChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_count", DbType:="Float")>  _
	Public Property count() As System.Nullable(Of Double)
		Get
			Return Me._count
		End Get
		Set
			If (Me._count.Equals(value) = false) Then
				Me.OncountChanging(value)
				Me.SendPropertyChanging
				Me._count = value
				Me.SendPropertyChanged("count")
				Me.OncountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[percent]", Storage:="_percent", DbType:="Float")>  _
	Public Property percent() As System.Nullable(Of Double)
		Get
			Return Me._percent
		End Get
		Set
			If (Me._percent.Equals(value) = false) Then
				Me.OnpercentChanging(value)
				Me.SendPropertyChanging
				Me._percent = value
				Me.SendPropertyChanged("percent")
				Me.OnpercentChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Activity")>  _
Partial Public Class Activity
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _activityID As Integer
	
	Private _activityName As String
	
	Private _sortOrder As System.Nullable(Of Integer)
	
	Private _type As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnactivityIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnactivityIDChanged()
    End Sub
    Partial Private Sub OnactivityNameChanging(value As String)
    End Sub
    Partial Private Sub OnactivityNameChanged()
    End Sub
    Partial Private Sub OnsortOrderChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnsortOrderChanged()
    End Sub
    Partial Private Sub OntypeChanging(value As String)
    End Sub
    Partial Private Sub OntypeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_activityID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property activityID() As Integer
		Get
			Return Me._activityID
		End Get
		Set
			If ((Me._activityID = value)  _
						= false) Then
				Me.OnactivityIDChanging(value)
				Me.SendPropertyChanging
				Me._activityID = value
				Me.SendPropertyChanged("activityID")
				Me.OnactivityIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_activityName", DbType:="NVarChar(150)")>  _
	Public Property activityName() As String
		Get
			Return Me._activityName
		End Get
		Set
			If (String.Equals(Me._activityName, value) = false) Then
				Me.OnactivityNameChanging(value)
				Me.SendPropertyChanging
				Me._activityName = value
				Me.SendPropertyChanged("activityName")
				Me.OnactivityNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sortOrder", DbType:="Int")>  _
	Public Property sortOrder() As System.Nullable(Of Integer)
		Get
			Return Me._sortOrder
		End Get
		Set
			If (Me._sortOrder.Equals(value) = false) Then
				Me.OnsortOrderChanging(value)
				Me.SendPropertyChanging
				Me._sortOrder = value
				Me.SendPropertyChanged("sortOrder")
				Me.OnsortOrderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_type", DbType:="VarChar(50)")>  _
	Public Property type() As String
		Get
			Return Me._type
		End Get
		Set
			If (String.Equals(Me._type, value) = false) Then
				Me.OntypeChanging(value)
				Me.SendPropertyChanging
				Me._type = value
				Me.SendPropertyChanged("type")
				Me.OntypeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.[_tempInvoice]")>  _
Partial Public Class _tempInvoice
	
	Private _tempID As Integer
	
	Private _invoiceID As System.Nullable(Of Integer)
	
	Private _eventID As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tempID", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property tempID() As Integer
		Get
			Return Me._tempID
		End Get
		Set
			If ((Me._tempID = value)  _
						= false) Then
				Me._tempID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_invoiceID", DbType:="Int")>  _
	Public Property invoiceID() As System.Nullable(Of Integer)
		Get
			Return Me._invoiceID
		End Get
		Set
			If (Me._invoiceID.Equals(value) = false) Then
				Me._invoiceID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int")>  _
	Public Property eventID() As System.Nullable(Of Integer)
		Get
			Return Me._eventID
		End Get
		Set
			If (Me._eventID.Equals(value) = false) Then
				Me._eventID = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryViewEvents")>  _
Partial Public Class qryViewEvent
	
	Private _eventID As Integer
	
	Private _supplierID As System.Nullable(Of Integer)
	
	Private _supplierName As String
	
	Private _eventTitle As String
	
	Private _eventDate As System.Nullable(Of Date)
	
	Private _startTime As System.Nullable(Of Date)
	
	Private _endTime As System.Nullable(Of Date)
	
	Private _clientID As System.Nullable(Of Integer)
	
	Private _statusID As Integer
	
	Private _statusName As String
	
	Private _eventTypeID As System.Nullable(Of Integer)
	
	Private _eventTypeName As String
	
	Private _marketID As System.Nullable(Of Integer)
	
	Private _marketName As String
	
	Private _teamID As System.Nullable(Of Integer)
	
	Private _locationID As System.Nullable(Of Integer)
	
	Private _accountID As Integer
	
	Private _Vpid As System.Nullable(Of Integer)
	
	Private _accountName As String
	
	Private _address As String
	
	Private _city As String
	
	Private _state As String
	
	Private _brands As String
	
	Private _latitude As System.Nullable(Of Double)
	
	Private _longitude As System.Nullable(Of Double)
	
	Private _shape As String
	
	Private _tooltiptext As String
	
	Private _tooltipformap As String
	
	Private _formatedEventDate As String
	
	Private _shortEventDate As String
	
	Private _formatedStartTime As String
	
	Private _formatedEndTime As String
	
	Private _shortStartTime As String
	
	Private _shortEndTime As String
	
	Private _hours As System.Nullable(Of Double)
	
	Private _labelText As String
	
	Private _Stage As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int")>  _
	Public Property supplierID() As System.Nullable(Of Integer)
		Get
			Return Me._supplierID
		End Get
		Set
			If (Me._supplierID.Equals(value) = false) Then
				Me._supplierID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierName", DbType:="NVarChar(50)")>  _
	Public Property supplierName() As String
		Get
			Return Me._supplierName
		End Get
		Set
			If (String.Equals(Me._supplierName, value) = false) Then
				Me._supplierName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTitle", DbType:="VarChar(1000)")>  _
	Public Property eventTitle() As String
		Get
			Return Me._eventTitle
		End Get
		Set
			If (String.Equals(Me._eventTitle, value) = false) Then
				Me._eventTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventDate", DbType:="SmallDateTime")>  _
	Public Property eventDate() As System.Nullable(Of Date)
		Get
			Return Me._eventDate
		End Get
		Set
			If (Me._eventDate.Equals(value) = false) Then
				Me._eventDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_startTime", DbType:="SmallDateTime")>  _
	Public Property startTime() As System.Nullable(Of Date)
		Get
			Return Me._startTime
		End Get
		Set
			If (Me._startTime.Equals(value) = false) Then
				Me._startTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_endTime", DbType:="SmallDateTime")>  _
	Public Property endTime() As System.Nullable(Of Date)
		Get
			Return Me._endTime
		End Get
		Set
			If (Me._endTime.Equals(value) = false) Then
				Me._endTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", DbType:="Int")>  _
	Public Property clientID() As System.Nullable(Of Integer)
		Get
			Return Me._clientID
		End Get
		Set
			If (Me._clientID.Equals(value) = false) Then
				Me._clientID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_statusID", DbType:="Int NOT NULL")>  _
	Public Property statusID() As Integer
		Get
			Return Me._statusID
		End Get
		Set
			If ((Me._statusID = value)  _
						= false) Then
				Me._statusID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_statusName", DbType:="NVarChar(50)")>  _
	Public Property statusName() As String
		Get
			Return Me._statusName
		End Get
		Set
			If (String.Equals(Me._statusName, value) = false) Then
				Me._statusName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTypeID", DbType:="Int")>  _
	Public Property eventTypeID() As System.Nullable(Of Integer)
		Get
			Return Me._eventTypeID
		End Get
		Set
			If (Me._eventTypeID.Equals(value) = false) Then
				Me._eventTypeID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTypeName", DbType:="NVarChar(50)")>  _
	Public Property eventTypeName() As String
		Get
			Return Me._eventTypeName
		End Get
		Set
			If (String.Equals(Me._eventTypeName, value) = false) Then
				Me._eventTypeName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="Int")>  _
	Public Property marketID() As System.Nullable(Of Integer)
		Get
			Return Me._marketID
		End Get
		Set
			If (Me._marketID.Equals(value) = false) Then
				Me._marketID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketName", DbType:="VarChar(50)")>  _
	Public Property marketName() As String
		Get
			Return Me._marketName
		End Get
		Set
			If (String.Equals(Me._marketName, value) = false) Then
				Me._marketName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_teamID", DbType:="Int")>  _
	Public Property teamID() As System.Nullable(Of Integer)
		Get
			Return Me._teamID
		End Get
		Set
			If (Me._teamID.Equals(value) = false) Then
				Me._teamID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_locationID", DbType:="Int")>  _
	Public Property locationID() As System.Nullable(Of Integer)
		Get
			Return Me._locationID
		End Get
		Set
			If (Me._locationID.Equals(value) = false) Then
				Me._locationID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="Int NOT NULL")>  _
	Public Property accountID() As Integer
		Get
			Return Me._accountID
		End Get
		Set
			If ((Me._accountID = value)  _
						= false) Then
				Me._accountID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Vpid", DbType:="Int")>  _
	Public Property Vpid() As System.Nullable(Of Integer)
		Get
			Return Me._Vpid
		End Get
		Set
			If (Me._Vpid.Equals(value) = false) Then
				Me._Vpid = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountName", DbType:="VarChar(256)")>  _
	Public Property accountName() As String
		Get
			Return Me._accountName
		End Get
		Set
			If (String.Equals(Me._accountName, value) = false) Then
				Me._accountName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_address", DbType:="VarChar(256)")>  _
	Public Property address() As String
		Get
			Return Me._address
		End Get
		Set
			If (String.Equals(Me._address, value) = false) Then
				Me._address = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_city", DbType:="VarChar(50)")>  _
	Public Property city() As String
		Get
			Return Me._city
		End Get
		Set
			If (String.Equals(Me._city, value) = false) Then
				Me._city = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_state", DbType:="NVarChar(20)")>  _
	Public Property state() As String
		Get
			Return Me._state
		End Get
		Set
			If (String.Equals(Me._state, value) = false) Then
				Me._state = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brands", DbType:="VarChar(MAX)")>  _
	Public Property brands() As String
		Get
			Return Me._brands
		End Get
		Set
			If (String.Equals(Me._brands, value) = false) Then
				Me._brands = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_latitude", DbType:="Float")>  _
	Public Property latitude() As System.Nullable(Of Double)
		Get
			Return Me._latitude
		End Get
		Set
			If (Me._latitude.Equals(value) = false) Then
				Me._latitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_longitude", DbType:="Float")>  _
	Public Property longitude() As System.Nullable(Of Double)
		Get
			Return Me._longitude
		End Get
		Set
			If (Me._longitude.Equals(value) = false) Then
				Me._longitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_shape", DbType:="VarChar(9) NOT NULL", CanBeNull:=false)>  _
	Public Property shape() As String
		Get
			Return Me._shape
		End Get
		Set
			If (String.Equals(Me._shape, value) = false) Then
				Me._shape = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tooltiptext", DbType:="NVarChar(4000)")>  _
	Public Property tooltiptext() As String
		Get
			Return Me._tooltiptext
		End Get
		Set
			If (String.Equals(Me._tooltiptext, value) = false) Then
				Me._tooltiptext = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tooltipformap", DbType:="NVarChar(4000)")>  _
	Public Property tooltipformap() As String
		Get
			Return Me._tooltipformap
		End Get
		Set
			If (String.Equals(Me._tooltipformap, value) = false) Then
				Me._tooltipformap = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_formatedEventDate", DbType:="NVarChar(4000)")>  _
	Public Property formatedEventDate() As String
		Get
			Return Me._formatedEventDate
		End Get
		Set
			If (String.Equals(Me._formatedEventDate, value) = false) Then
				Me._formatedEventDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_shortEventDate", DbType:="NVarChar(4000)")>  _
	Public Property shortEventDate() As String
		Get
			Return Me._shortEventDate
		End Get
		Set
			If (String.Equals(Me._shortEventDate, value) = false) Then
				Me._shortEventDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_formatedStartTime", DbType:="NVarChar(4000)")>  _
	Public Property formatedStartTime() As String
		Get
			Return Me._formatedStartTime
		End Get
		Set
			If (String.Equals(Me._formatedStartTime, value) = false) Then
				Me._formatedStartTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_formatedEndTime", DbType:="NVarChar(4000)")>  _
	Public Property formatedEndTime() As String
		Get
			Return Me._formatedEndTime
		End Get
		Set
			If (String.Equals(Me._formatedEndTime, value) = false) Then
				Me._formatedEndTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_shortStartTime", DbType:="NVarChar(4000)")>  _
	Public Property shortStartTime() As String
		Get
			Return Me._shortStartTime
		End Get
		Set
			If (String.Equals(Me._shortStartTime, value) = false) Then
				Me._shortStartTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_shortEndTime", DbType:="NVarChar(4000)")>  _
	Public Property shortEndTime() As String
		Get
			Return Me._shortEndTime
		End Get
		Set
			If (String.Equals(Me._shortEndTime, value) = false) Then
				Me._shortEndTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hours", DbType:="Float")>  _
	Public Property hours() As System.Nullable(Of Double)
		Get
			Return Me._hours
		End Get
		Set
			If (Me._hours.Equals(value) = false) Then
				Me._hours = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_labelText", DbType:="VarChar(101)")>  _
	Public Property labelText() As String
		Get
			Return Me._labelText
		End Get
		Set
			If (String.Equals(Me._labelText, value) = false) Then
				Me._labelText = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Stage", DbType:="VarChar(7) NOT NULL", CanBeNull:=false)>  _
	Public Property Stage() As String
		Get
			Return Me._Stage
		End Get
		Set
			If (String.Equals(Me._Stage, value) = false) Then
				Me._Stage = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.getScheduleConflict")>  _
Partial Public Class getScheduleConflict
	
	Private _RequirementID As Integer
	
	Private _eventID As Integer
	
	Private _eventDate As System.Nullable(Of Date)
	
	Private _userID As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RequirementID", DbType:="Int NOT NULL")>  _
	Public Property RequirementID() As Integer
		Get
			Return Me._RequirementID
		End Get
		Set
			If ((Me._RequirementID = value)  _
						= false) Then
				Me._RequirementID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventDate", DbType:="SmallDateTime")>  _
	Public Property eventDate() As System.Nullable(Of Date)
		Get
			Return Me._eventDate
		End Get
		Set
			If (Me._eventDate.Equals(value) = false) Then
				Me._eventDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me._userID = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryViewEventsbyMarkets")>  _
Partial Public Class qryViewEventsbyMarket
	
	Private _userID As String
	
	Private _eventID As Integer
	
	Private _supplierID As System.Nullable(Of Integer)
	
	Private _supplierName As String
	
	Private _eventTitle As String
	
	Private _eventDate As System.Nullable(Of Date)
	
	Private _startTime As System.Nullable(Of Date)
	
	Private _endTime As System.Nullable(Of Date)
	
	Private _clientID As System.Nullable(Of Integer)
	
	Private _statusID As Integer
	
	Private _statusName As String
	
	Private _eventTypeID As System.Nullable(Of Integer)
	
	Private _eventTypeName As String
	
	Private _marketID As System.Nullable(Of Integer)
	
	Private _marketName As String
	
	Private _teamID As System.Nullable(Of Integer)
	
	Private _locationID As System.Nullable(Of Integer)
	
	Private _accountID As Integer
	
	Private _Vpid As System.Nullable(Of Integer)
	
	Private _accountName As String
	
	Private _address As String
	
	Private _city As String
	
	Private _state As String
	
	Private _brands As String
	
	Private _latitude As System.Nullable(Of Double)
	
	Private _longitude As System.Nullable(Of Double)
	
	Private _shape As String
	
	Private _tooltiptext As String
	
	Private _formatedEventDate As String
	
	Private _formatedStartTime As String
	
	Private _hours As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me._userID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int")>  _
	Public Property supplierID() As System.Nullable(Of Integer)
		Get
			Return Me._supplierID
		End Get
		Set
			If (Me._supplierID.Equals(value) = false) Then
				Me._supplierID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierName", DbType:="NVarChar(50)")>  _
	Public Property supplierName() As String
		Get
			Return Me._supplierName
		End Get
		Set
			If (String.Equals(Me._supplierName, value) = false) Then
				Me._supplierName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTitle", DbType:="VarChar(1000)")>  _
	Public Property eventTitle() As String
		Get
			Return Me._eventTitle
		End Get
		Set
			If (String.Equals(Me._eventTitle, value) = false) Then
				Me._eventTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventDate", DbType:="SmallDateTime")>  _
	Public Property eventDate() As System.Nullable(Of Date)
		Get
			Return Me._eventDate
		End Get
		Set
			If (Me._eventDate.Equals(value) = false) Then
				Me._eventDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_startTime", DbType:="SmallDateTime")>  _
	Public Property startTime() As System.Nullable(Of Date)
		Get
			Return Me._startTime
		End Get
		Set
			If (Me._startTime.Equals(value) = false) Then
				Me._startTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_endTime", DbType:="SmallDateTime")>  _
	Public Property endTime() As System.Nullable(Of Date)
		Get
			Return Me._endTime
		End Get
		Set
			If (Me._endTime.Equals(value) = false) Then
				Me._endTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", DbType:="Int")>  _
	Public Property clientID() As System.Nullable(Of Integer)
		Get
			Return Me._clientID
		End Get
		Set
			If (Me._clientID.Equals(value) = false) Then
				Me._clientID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_statusID", DbType:="Int NOT NULL")>  _
	Public Property statusID() As Integer
		Get
			Return Me._statusID
		End Get
		Set
			If ((Me._statusID = value)  _
						= false) Then
				Me._statusID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_statusName", DbType:="NVarChar(50)")>  _
	Public Property statusName() As String
		Get
			Return Me._statusName
		End Get
		Set
			If (String.Equals(Me._statusName, value) = false) Then
				Me._statusName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTypeID", DbType:="Int")>  _
	Public Property eventTypeID() As System.Nullable(Of Integer)
		Get
			Return Me._eventTypeID
		End Get
		Set
			If (Me._eventTypeID.Equals(value) = false) Then
				Me._eventTypeID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTypeName", DbType:="NVarChar(50)")>  _
	Public Property eventTypeName() As String
		Get
			Return Me._eventTypeName
		End Get
		Set
			If (String.Equals(Me._eventTypeName, value) = false) Then
				Me._eventTypeName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="Int")>  _
	Public Property marketID() As System.Nullable(Of Integer)
		Get
			Return Me._marketID
		End Get
		Set
			If (Me._marketID.Equals(value) = false) Then
				Me._marketID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketName", DbType:="VarChar(50)")>  _
	Public Property marketName() As String
		Get
			Return Me._marketName
		End Get
		Set
			If (String.Equals(Me._marketName, value) = false) Then
				Me._marketName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_teamID", DbType:="Int")>  _
	Public Property teamID() As System.Nullable(Of Integer)
		Get
			Return Me._teamID
		End Get
		Set
			If (Me._teamID.Equals(value) = false) Then
				Me._teamID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_locationID", DbType:="Int")>  _
	Public Property locationID() As System.Nullable(Of Integer)
		Get
			Return Me._locationID
		End Get
		Set
			If (Me._locationID.Equals(value) = false) Then
				Me._locationID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="Int NOT NULL")>  _
	Public Property accountID() As Integer
		Get
			Return Me._accountID
		End Get
		Set
			If ((Me._accountID = value)  _
						= false) Then
				Me._accountID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Vpid", DbType:="Int")>  _
	Public Property Vpid() As System.Nullable(Of Integer)
		Get
			Return Me._Vpid
		End Get
		Set
			If (Me._Vpid.Equals(value) = false) Then
				Me._Vpid = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountName", DbType:="VarChar(256)")>  _
	Public Property accountName() As String
		Get
			Return Me._accountName
		End Get
		Set
			If (String.Equals(Me._accountName, value) = false) Then
				Me._accountName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_address", DbType:="VarChar(256)")>  _
	Public Property address() As String
		Get
			Return Me._address
		End Get
		Set
			If (String.Equals(Me._address, value) = false) Then
				Me._address = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_city", DbType:="VarChar(50)")>  _
	Public Property city() As String
		Get
			Return Me._city
		End Get
		Set
			If (String.Equals(Me._city, value) = false) Then
				Me._city = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_state", DbType:="NVarChar(20)")>  _
	Public Property state() As String
		Get
			Return Me._state
		End Get
		Set
			If (String.Equals(Me._state, value) = false) Then
				Me._state = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brands", DbType:="VarChar(MAX)")>  _
	Public Property brands() As String
		Get
			Return Me._brands
		End Get
		Set
			If (String.Equals(Me._brands, value) = false) Then
				Me._brands = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_latitude", DbType:="Float")>  _
	Public Property latitude() As System.Nullable(Of Double)
		Get
			Return Me._latitude
		End Get
		Set
			If (Me._latitude.Equals(value) = false) Then
				Me._latitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_longitude", DbType:="Float")>  _
	Public Property longitude() As System.Nullable(Of Double)
		Get
			Return Me._longitude
		End Get
		Set
			If (Me._longitude.Equals(value) = false) Then
				Me._longitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_shape", DbType:="VarChar(9) NOT NULL", CanBeNull:=false)>  _
	Public Property shape() As String
		Get
			Return Me._shape
		End Get
		Set
			If (String.Equals(Me._shape, value) = false) Then
				Me._shape = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tooltiptext", DbType:="NVarChar(4000)")>  _
	Public Property tooltiptext() As String
		Get
			Return Me._tooltiptext
		End Get
		Set
			If (String.Equals(Me._tooltiptext, value) = false) Then
				Me._tooltiptext = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_formatedEventDate", DbType:="NVarChar(4000)")>  _
	Public Property formatedEventDate() As String
		Get
			Return Me._formatedEventDate
		End Get
		Set
			If (String.Equals(Me._formatedEventDate, value) = false) Then
				Me._formatedEventDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_formatedStartTime", DbType:="NVarChar(4000)")>  _
	Public Property formatedStartTime() As String
		Get
			Return Me._formatedStartTime
		End Get
		Set
			If (String.Equals(Me._formatedStartTime, value) = false) Then
				Me._formatedStartTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hours", DbType:="Int")>  _
	Public Property hours() As System.Nullable(Of Integer)
		Get
			Return Me._hours
		End Get
		Set
			If (Me._hours.Equals(value) = false) Then
				Me._hours = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.getAssignedList")>  _
Partial Public Class getAssignedList
	
	Private _eventID As Integer
	
	Private _assignedUserName As String
	
	Private _supplierID As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_assignedUserName", DbType:="NVarChar(50)")>  _
	Public Property assignedUserName() As String
		Get
			Return Me._assignedUserName
		End Get
		Set
			If (String.Equals(Me._assignedUserName, value) = false) Then
				Me._assignedUserName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int")>  _
	Public Property supplierID() As System.Nullable(Of Integer)
		Get
			Return Me._supplierID
		End Get
		Set
			If (Me._supplierID.Equals(value) = false) Then
				Me._supplierID = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryGetRecapCount_last24hrs")>  _
Partial Public Class qryGetRecapCount_last24hr
	
	Private _Total As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Total", DbType:="Int")>  _
	Public Property Total() As System.Nullable(Of Integer)
		Get
			Return Me._Total
		End Get
		Set
			If (Me._Total.Equals(value) = false) Then
				Me._Total = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryGetRequestedEvents")>  _
Partial Public Class qryGetRequestedEvent
	
	Private _requestedEventID As Integer
	
	Private _locationName As String
	
	Private _locationAddress As String
	
	Private _locationCity As String
	
	Private _locationState As String
	
	Private _clientID As System.Nullable(Of Integer)
	
	Private _eventTitle As String
	
	Private _eventDate As System.Nullable(Of Date)
	
	Private _startTime As System.Nullable(Of Date)
	
	Private _endTime As System.Nullable(Of Date)
	
	Private _supplierName As String
	
	Private _Brands As String
	
	Private _eventTypeName As String
	
	Private _CreatedBy As String
	
	Private _CreatedByEmail As String
	
	Private _latitude As System.Nullable(Of Double)
	
	Private _longitude As System.Nullable(Of Double)
	
	Private _matchedLocationID As System.Nullable(Of Integer)
	
	Private _requestType As String
	
	Private _hours As System.Nullable(Of Integer)
	
	Private _labelText As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_requestedEventID", DbType:="Int NOT NULL")>  _
	Public Property requestedEventID() As Integer
		Get
			Return Me._requestedEventID
		End Get
		Set
			If ((Me._requestedEventID = value)  _
						= false) Then
				Me._requestedEventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_locationName", DbType:="NVarChar(256)")>  _
	Public Property locationName() As String
		Get
			Return Me._locationName
		End Get
		Set
			If (String.Equals(Me._locationName, value) = false) Then
				Me._locationName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_locationAddress", DbType:="NVarChar(256)")>  _
	Public Property locationAddress() As String
		Get
			Return Me._locationAddress
		End Get
		Set
			If (String.Equals(Me._locationAddress, value) = false) Then
				Me._locationAddress = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_locationCity", DbType:="NVarChar(256)")>  _
	Public Property locationCity() As String
		Get
			Return Me._locationCity
		End Get
		Set
			If (String.Equals(Me._locationCity, value) = false) Then
				Me._locationCity = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_locationState", DbType:="NVarChar(256)")>  _
	Public Property locationState() As String
		Get
			Return Me._locationState
		End Get
		Set
			If (String.Equals(Me._locationState, value) = false) Then
				Me._locationState = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", DbType:="Int")>  _
	Public Property clientID() As System.Nullable(Of Integer)
		Get
			Return Me._clientID
		End Get
		Set
			If (Me._clientID.Equals(value) = false) Then
				Me._clientID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTitle", DbType:="VarChar(1000)")>  _
	Public Property eventTitle() As String
		Get
			Return Me._eventTitle
		End Get
		Set
			If (String.Equals(Me._eventTitle, value) = false) Then
				Me._eventTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventDate", DbType:="SmallDateTime")>  _
	Public Property eventDate() As System.Nullable(Of Date)
		Get
			Return Me._eventDate
		End Get
		Set
			If (Me._eventDate.Equals(value) = false) Then
				Me._eventDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_startTime", DbType:="SmallDateTime")>  _
	Public Property startTime() As System.Nullable(Of Date)
		Get
			Return Me._startTime
		End Get
		Set
			If (Me._startTime.Equals(value) = false) Then
				Me._startTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_endTime", DbType:="SmallDateTime")>  _
	Public Property endTime() As System.Nullable(Of Date)
		Get
			Return Me._endTime
		End Get
		Set
			If (Me._endTime.Equals(value) = false) Then
				Me._endTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierName", DbType:="NVarChar(50)")>  _
	Public Property supplierName() As String
		Get
			Return Me._supplierName
		End Get
		Set
			If (String.Equals(Me._supplierName, value) = false) Then
				Me._supplierName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Brands", DbType:="VarChar(MAX)")>  _
	Public Property Brands() As String
		Get
			Return Me._Brands
		End Get
		Set
			If (String.Equals(Me._Brands, value) = false) Then
				Me._Brands = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTypeName", DbType:="NVarChar(50)")>  _
	Public Property eventTypeName() As String
		Get
			Return Me._eventTypeName
		End Get
		Set
			If (String.Equals(Me._eventTypeName, value) = false) Then
				Me._eventTypeName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="NVarChar(50)")>  _
	Public Property CreatedBy() As String
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (String.Equals(Me._CreatedBy, value) = false) Then
				Me._CreatedBy = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedByEmail", DbType:="NVarChar(256)")>  _
	Public Property CreatedByEmail() As String
		Get
			Return Me._CreatedByEmail
		End Get
		Set
			If (String.Equals(Me._CreatedByEmail, value) = false) Then
				Me._CreatedByEmail = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_latitude", DbType:="Float")>  _
	Public Property latitude() As System.Nullable(Of Double)
		Get
			Return Me._latitude
		End Get
		Set
			If (Me._latitude.Equals(value) = false) Then
				Me._latitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_longitude", DbType:="Float")>  _
	Public Property longitude() As System.Nullable(Of Double)
		Get
			Return Me._longitude
		End Get
		Set
			If (Me._longitude.Equals(value) = false) Then
				Me._longitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_matchedLocationID", DbType:="Int")>  _
	Public Property matchedLocationID() As System.Nullable(Of Integer)
		Get
			Return Me._matchedLocationID
		End Get
		Set
			If (Me._matchedLocationID.Equals(value) = false) Then
				Me._matchedLocationID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_requestType", DbType:="VarChar(50)")>  _
	Public Property requestType() As String
		Get
			Return Me._requestType
		End Get
		Set
			If (String.Equals(Me._requestType, value) = false) Then
				Me._requestType = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hours", DbType:="Int")>  _
	Public Property hours() As System.Nullable(Of Integer)
		Get
			Return Me._hours
		End Get
		Set
			If (Me._hours.Equals(value) = false) Then
				Me._hours = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_labelText", DbType:="VarChar(101)")>  _
	Public Property labelText() As String
		Get
			Return Me._labelText
		End Get
		Set
			If (String.Equals(Me._labelText, value) = false) Then
				Me._labelText = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryGetRecapCreated_last24hours")>  _
Partial Public Class qryGetRecapCreated_last24hour
	
	Private _eventID As Integer
	
	Private _createdDate As System.Nullable(Of Date)
	
	Private _eventTitle As String
	
	Private _supplierName As String
	
	Private _marketName As String
	
	Private _CreatedBy As String
	
	Private _UserID As String
	
	Private _eventDate As System.Nullable(Of Date)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_createdDate", DbType:="DateTime")>  _
	Public Property createdDate() As System.Nullable(Of Date)
		Get
			Return Me._createdDate
		End Get
		Set
			If (Me._createdDate.Equals(value) = false) Then
				Me._createdDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTitle", DbType:="VarChar(1000)")>  _
	Public Property eventTitle() As String
		Get
			Return Me._eventTitle
		End Get
		Set
			If (String.Equals(Me._eventTitle, value) = false) Then
				Me._eventTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierName", DbType:="NVarChar(50)")>  _
	Public Property supplierName() As String
		Get
			Return Me._supplierName
		End Get
		Set
			If (String.Equals(Me._supplierName, value) = false) Then
				Me._supplierName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketName", DbType:="VarChar(50)")>  _
	Public Property marketName() As String
		Get
			Return Me._marketName
		End Get
		Set
			If (String.Equals(Me._marketName, value) = false) Then
				Me._marketName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="VarChar(MAX)")>  _
	Public Property CreatedBy() As String
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (String.Equals(Me._CreatedBy, value) = false) Then
				Me._CreatedBy = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="NVarChar(50)")>  _
	Public Property UserID() As String
		Get
			Return Me._UserID
		End Get
		Set
			If (String.Equals(Me._UserID, value) = false) Then
				Me._UserID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventDate", DbType:="SmallDateTime")>  _
	Public Property eventDate() As System.Nullable(Of Date)
		Get
			Return Me._eventDate
		End Get
		Set
			If (Me._eventDate.Equals(value) = false) Then
				Me._eventDate = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryGetRecapTotalsByEvent")>  _
Partial Public Class qryGetRecapTotalsByEvent
	
	Private _eventID As System.Nullable(Of Integer)
	
	Private _brandID As System.Nullable(Of Integer)
	
	Private _eventDate As System.Nullable(Of Date)
	
	Private _totalSampled As System.Nullable(Of Integer)
	
	Private _week As System.Nullable(Of Integer)
	
	Private _supplierID As System.Nullable(Of Integer)
	
	Private _recapID As System.Nullable(Of Integer)
	
	Private _recapQuestionID As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int")>  _
	Public Property eventID() As System.Nullable(Of Integer)
		Get
			Return Me._eventID
		End Get
		Set
			If (Me._eventID.Equals(value) = false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandID", DbType:="Int")>  _
	Public Property brandID() As System.Nullable(Of Integer)
		Get
			Return Me._brandID
		End Get
		Set
			If (Me._brandID.Equals(value) = false) Then
				Me._brandID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventDate", DbType:="SmallDateTime")>  _
	Public Property eventDate() As System.Nullable(Of Date)
		Get
			Return Me._eventDate
		End Get
		Set
			If (Me._eventDate.Equals(value) = false) Then
				Me._eventDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_totalSampled", DbType:="Int")>  _
	Public Property totalSampled() As System.Nullable(Of Integer)
		Get
			Return Me._totalSampled
		End Get
		Set
			If (Me._totalSampled.Equals(value) = false) Then
				Me._totalSampled = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_week", DbType:="Int")>  _
	Public Property week() As System.Nullable(Of Integer)
		Get
			Return Me._week
		End Get
		Set
			If (Me._week.Equals(value) = false) Then
				Me._week = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int")>  _
	Public Property supplierID() As System.Nullable(Of Integer)
		Get
			Return Me._supplierID
		End Get
		Set
			If (Me._supplierID.Equals(value) = false) Then
				Me._supplierID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_recapID", DbType:="Int")>  _
	Public Property recapID() As System.Nullable(Of Integer)
		Get
			Return Me._recapID
		End Get
		Set
			If (Me._recapID.Equals(value) = false) Then
				Me._recapID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_recapQuestionID", DbType:="Int")>  _
	Public Property recapQuestionID() As System.Nullable(Of Integer)
		Get
			Return Me._recapQuestionID
		End Get
		Set
			If (Me._recapQuestionID.Equals(value) = false) Then
				Me._recapQuestionID = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryGetRegisteredCount_last24hrs")>  _
Partial Public Class qryGetRegisteredCount_last24hr
	
	Private _Total As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Total", DbType:="Int")>  _
	Public Property Total() As System.Nullable(Of Integer)
		Get
			Return Me._Total
		End Get
		Set
			If (Me._Total.Equals(value) = false) Then
				Me._Total = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryGetRegistrations_last24hrs")>  _
Partial Public Class qryGetRegistrations_last24hr
	
	Private _userID As String
	
	Private _LastLoginDate As String
	
	Private _FirstName As String
	
	Private _LastName As String
	
	Private _City As String
	
	Private _State As String
	
	Private _Status As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me._userID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastLoginDate", DbType:="NVarChar(100)")>  _
	Public Property LastLoginDate() As String
		Get
			Return Me._LastLoginDate
		End Get
		Set
			If (String.Equals(Me._LastLoginDate, value) = false) Then
				Me._LastLoginDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="NVarChar(50)")>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me._FirstName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="NVarChar(50)")>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me._LastName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", DbType:="NVarChar(50)")>  _
	Public Property City() As String
		Get
			Return Me._City
		End Get
		Set
			If (String.Equals(Me._City, value) = false) Then
				Me._City = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_State", DbType:="NVarChar(50)")>  _
	Public Property State() As String
		Get
			Return Me._State
		End Get
		Set
			If (String.Equals(Me._State, value) = false) Then
				Me._State = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="VarChar(20)")>  _
	Public Property Status() As String
		Get
			Return Me._Status
		End Get
		Set
			If (String.Equals(Me._Status, value) = false) Then
				Me._Status = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qrySalesRecapReport")>  _
Partial Public Class qrySalesRecapReport
	
	Private _eventID As Integer
	
	Private _eventDate As System.Nullable(Of Date)
	
	Private _startTime As System.Nullable(Of Date)
	
	Private _endTime As System.Nullable(Of Date)
	
	Private _eventType As String
	
	Private _statusID As System.Nullable(Of Integer)
	
	Private _accountType As String
	
	Private _accountName As String
	
	Private _marketName As String
	
	Private _sampled As System.Nullable(Of Integer)
	
	Private _bottlesUsed As System.Nullable(Of Integer)
	
	Private _bottlesSold As System.Nullable(Of Integer)
	
	Private _eventBottlesSold As System.Nullable(Of Integer)
	
	Private _averagePrice As System.Nullable(Of Integer)
	
	Private _supplierID As System.Nullable(Of Integer)
	
	Private _week As System.Nullable(Of Integer)
	
	Private _eventTypeID As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventDate", DbType:="SmallDateTime")>  _
	Public Property eventDate() As System.Nullable(Of Date)
		Get
			Return Me._eventDate
		End Get
		Set
			If (Me._eventDate.Equals(value) = false) Then
				Me._eventDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_startTime", DbType:="SmallDateTime")>  _
	Public Property startTime() As System.Nullable(Of Date)
		Get
			Return Me._startTime
		End Get
		Set
			If (Me._startTime.Equals(value) = false) Then
				Me._startTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_endTime", DbType:="SmallDateTime")>  _
	Public Property endTime() As System.Nullable(Of Date)
		Get
			Return Me._endTime
		End Get
		Set
			If (Me._endTime.Equals(value) = false) Then
				Me._endTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventType", DbType:="VarChar(MAX)")>  _
	Public Property eventType() As String
		Get
			Return Me._eventType
		End Get
		Set
			If (String.Equals(Me._eventType, value) = false) Then
				Me._eventType = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_statusID", DbType:="Int")>  _
	Public Property statusID() As System.Nullable(Of Integer)
		Get
			Return Me._statusID
		End Get
		Set
			If (Me._statusID.Equals(value) = false) Then
				Me._statusID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountType", DbType:="VarChar(MAX)")>  _
	Public Property accountType() As String
		Get
			Return Me._accountType
		End Get
		Set
			If (String.Equals(Me._accountType, value) = false) Then
				Me._accountType = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountName", DbType:="VarChar(256)")>  _
	Public Property accountName() As String
		Get
			Return Me._accountName
		End Get
		Set
			If (String.Equals(Me._accountName, value) = false) Then
				Me._accountName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketName", DbType:="VarChar(50)")>  _
	Public Property marketName() As String
		Get
			Return Me._marketName
		End Get
		Set
			If (String.Equals(Me._marketName, value) = false) Then
				Me._marketName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sampled", DbType:="Int")>  _
	Public Property sampled() As System.Nullable(Of Integer)
		Get
			Return Me._sampled
		End Get
		Set
			If (Me._sampled.Equals(value) = false) Then
				Me._sampled = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bottlesUsed", DbType:="Int")>  _
	Public Property bottlesUsed() As System.Nullable(Of Integer)
		Get
			Return Me._bottlesUsed
		End Get
		Set
			If (Me._bottlesUsed.Equals(value) = false) Then
				Me._bottlesUsed = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bottlesSold", DbType:="Int")>  _
	Public Property bottlesSold() As System.Nullable(Of Integer)
		Get
			Return Me._bottlesSold
		End Get
		Set
			If (Me._bottlesSold.Equals(value) = false) Then
				Me._bottlesSold = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventBottlesSold", DbType:="Int")>  _
	Public Property eventBottlesSold() As System.Nullable(Of Integer)
		Get
			Return Me._eventBottlesSold
		End Get
		Set
			If (Me._eventBottlesSold.Equals(value) = false) Then
				Me._eventBottlesSold = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_averagePrice", DbType:="Int")>  _
	Public Property averagePrice() As System.Nullable(Of Integer)
		Get
			Return Me._averagePrice
		End Get
		Set
			If (Me._averagePrice.Equals(value) = false) Then
				Me._averagePrice = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int")>  _
	Public Property supplierID() As System.Nullable(Of Integer)
		Get
			Return Me._supplierID
		End Get
		Set
			If (Me._supplierID.Equals(value) = false) Then
				Me._supplierID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_week", DbType:="Int")>  _
	Public Property week() As System.Nullable(Of Integer)
		Get
			Return Me._week
		End Get
		Set
			If (Me._week.Equals(value) = false) Then
				Me._week = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTypeID", DbType:="Int")>  _
	Public Property eventTypeID() As System.Nullable(Of Integer)
		Get
			Return Me._eventTypeID
		End Get
		Set
			If (Me._eventTypeID.Equals(value) = false) Then
				Me._eventTypeID = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryViewAssignments")>  _
Partial Public Class qryViewAssignment
	
	Private _eventID As Integer
	
	Private _supplierID As System.Nullable(Of Integer)
	
	Private _supplierName As String
	
	Private _eventTitle As String
	
	Private _clientID As System.Nullable(Of Integer)
	
	Private _statusID As Integer
	
	Private _statusName As String
	
	Private _eventTypeID As System.Nullable(Of Integer)
	
	Private _eventTypeName As String
	
	Private _marketID As System.Nullable(Of Integer)
	
	Private _marketName As String
	
	Private _teamID As System.Nullable(Of Integer)
	
	Private _locationID As System.Nullable(Of Integer)
	
	Private _accountID As Integer
	
	Private _Vpid As System.Nullable(Of Integer)
	
	Private _accountName As String
	
	Private _address As String
	
	Private _city As String
	
	Private _state As String
	
	Private _brands As String
	
	Private _latitude As System.Nullable(Of Double)
	
	Private _longitude As System.Nullable(Of Double)
	
	Private _shape As String
	
	Private _tooltiptext As String
	
	Private _tooltipformap As String
	
	Private _formatedEventDate As String
	
	Private _eventDate As String
	
	Private _startTime As String
	
	Private _endTime As String
	
	Private _hours As System.Nullable(Of Double)
	
	Private _labelText As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int")>  _
	Public Property supplierID() As System.Nullable(Of Integer)
		Get
			Return Me._supplierID
		End Get
		Set
			If (Me._supplierID.Equals(value) = false) Then
				Me._supplierID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierName", DbType:="NVarChar(50)")>  _
	Public Property supplierName() As String
		Get
			Return Me._supplierName
		End Get
		Set
			If (String.Equals(Me._supplierName, value) = false) Then
				Me._supplierName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTitle", DbType:="VarChar(1000)")>  _
	Public Property eventTitle() As String
		Get
			Return Me._eventTitle
		End Get
		Set
			If (String.Equals(Me._eventTitle, value) = false) Then
				Me._eventTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", DbType:="Int")>  _
	Public Property clientID() As System.Nullable(Of Integer)
		Get
			Return Me._clientID
		End Get
		Set
			If (Me._clientID.Equals(value) = false) Then
				Me._clientID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_statusID", DbType:="Int NOT NULL")>  _
	Public Property statusID() As Integer
		Get
			Return Me._statusID
		End Get
		Set
			If ((Me._statusID = value)  _
						= false) Then
				Me._statusID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_statusName", DbType:="NVarChar(50)")>  _
	Public Property statusName() As String
		Get
			Return Me._statusName
		End Get
		Set
			If (String.Equals(Me._statusName, value) = false) Then
				Me._statusName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTypeID", DbType:="Int")>  _
	Public Property eventTypeID() As System.Nullable(Of Integer)
		Get
			Return Me._eventTypeID
		End Get
		Set
			If (Me._eventTypeID.Equals(value) = false) Then
				Me._eventTypeID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTypeName", DbType:="NVarChar(50)")>  _
	Public Property eventTypeName() As String
		Get
			Return Me._eventTypeName
		End Get
		Set
			If (String.Equals(Me._eventTypeName, value) = false) Then
				Me._eventTypeName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="Int")>  _
	Public Property marketID() As System.Nullable(Of Integer)
		Get
			Return Me._marketID
		End Get
		Set
			If (Me._marketID.Equals(value) = false) Then
				Me._marketID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketName", DbType:="VarChar(50)")>  _
	Public Property marketName() As String
		Get
			Return Me._marketName
		End Get
		Set
			If (String.Equals(Me._marketName, value) = false) Then
				Me._marketName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_teamID", DbType:="Int")>  _
	Public Property teamID() As System.Nullable(Of Integer)
		Get
			Return Me._teamID
		End Get
		Set
			If (Me._teamID.Equals(value) = false) Then
				Me._teamID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_locationID", DbType:="Int")>  _
	Public Property locationID() As System.Nullable(Of Integer)
		Get
			Return Me._locationID
		End Get
		Set
			If (Me._locationID.Equals(value) = false) Then
				Me._locationID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="Int NOT NULL")>  _
	Public Property accountID() As Integer
		Get
			Return Me._accountID
		End Get
		Set
			If ((Me._accountID = value)  _
						= false) Then
				Me._accountID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Vpid", DbType:="Int")>  _
	Public Property Vpid() As System.Nullable(Of Integer)
		Get
			Return Me._Vpid
		End Get
		Set
			If (Me._Vpid.Equals(value) = false) Then
				Me._Vpid = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountName", DbType:="VarChar(256)")>  _
	Public Property accountName() As String
		Get
			Return Me._accountName
		End Get
		Set
			If (String.Equals(Me._accountName, value) = false) Then
				Me._accountName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_address", DbType:="VarChar(256)")>  _
	Public Property address() As String
		Get
			Return Me._address
		End Get
		Set
			If (String.Equals(Me._address, value) = false) Then
				Me._address = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_city", DbType:="VarChar(50)")>  _
	Public Property city() As String
		Get
			Return Me._city
		End Get
		Set
			If (String.Equals(Me._city, value) = false) Then
				Me._city = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_state", DbType:="NVarChar(20)")>  _
	Public Property state() As String
		Get
			Return Me._state
		End Get
		Set
			If (String.Equals(Me._state, value) = false) Then
				Me._state = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brands", DbType:="VarChar(MAX)")>  _
	Public Property brands() As String
		Get
			Return Me._brands
		End Get
		Set
			If (String.Equals(Me._brands, value) = false) Then
				Me._brands = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_latitude", DbType:="Float")>  _
	Public Property latitude() As System.Nullable(Of Double)
		Get
			Return Me._latitude
		End Get
		Set
			If (Me._latitude.Equals(value) = false) Then
				Me._latitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_longitude", DbType:="Float")>  _
	Public Property longitude() As System.Nullable(Of Double)
		Get
			Return Me._longitude
		End Get
		Set
			If (Me._longitude.Equals(value) = false) Then
				Me._longitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_shape", DbType:="VarChar(9) NOT NULL", CanBeNull:=false)>  _
	Public Property shape() As String
		Get
			Return Me._shape
		End Get
		Set
			If (String.Equals(Me._shape, value) = false) Then
				Me._shape = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tooltiptext", DbType:="NVarChar(4000)")>  _
	Public Property tooltiptext() As String
		Get
			Return Me._tooltiptext
		End Get
		Set
			If (String.Equals(Me._tooltiptext, value) = false) Then
				Me._tooltiptext = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tooltipformap", DbType:="NVarChar(4000)")>  _
	Public Property tooltipformap() As String
		Get
			Return Me._tooltipformap
		End Get
		Set
			If (String.Equals(Me._tooltipformap, value) = false) Then
				Me._tooltipformap = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_formatedEventDate", DbType:="NVarChar(4000)")>  _
	Public Property formatedEventDate() As String
		Get
			Return Me._formatedEventDate
		End Get
		Set
			If (String.Equals(Me._formatedEventDate, value) = false) Then
				Me._formatedEventDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventDate", DbType:="NVarChar(4000)")>  _
	Public Property eventDate() As String
		Get
			Return Me._eventDate
		End Get
		Set
			If (String.Equals(Me._eventDate, value) = false) Then
				Me._eventDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_startTime", DbType:="NVarChar(4000)")>  _
	Public Property startTime() As String
		Get
			Return Me._startTime
		End Get
		Set
			If (String.Equals(Me._startTime, value) = false) Then
				Me._startTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_endTime", DbType:="NVarChar(4000)")>  _
	Public Property endTime() As String
		Get
			Return Me._endTime
		End Get
		Set
			If (String.Equals(Me._endTime, value) = false) Then
				Me._endTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hours", DbType:="Float")>  _
	Public Property hours() As System.Nullable(Of Double)
		Get
			Return Me._hours
		End Get
		Set
			If (Me._hours.Equals(value) = false) Then
				Me._hours = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_labelText", DbType:="VarChar(101)")>  _
	Public Property labelText() As String
		Get
			Return Me._labelText
		End Get
		Set
			If (String.Equals(Me._labelText, value) = false) Then
				Me._labelText = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qrySalesRecapReport_OffPremise")>  _
Partial Public Class qrySalesRecapReport_OffPremise
	
	Private _eventID As Integer
	
	Private _eventDate As String
	
	Private _startTime As String
	
	Private _endTime As String
	
	Private _eventType As String
	
	Private _statusID As System.Nullable(Of Integer)
	
	Private _accountType As String
	
	Private _accountName As String
	
	Private _marketName As String
	
	Private _sampled As System.Nullable(Of Integer)
	
	Private _bottlesUsed As System.Nullable(Of Integer)
	
	Private _bottlesSold As System.Nullable(Of Integer)
	
	Private _eventBottlesSold As System.Nullable(Of Integer)
	
	Private _averagePrice As System.Nullable(Of Integer)
	
	Private _estimatedRevenue As String
	
	Private _Price As System.Nullable(Of Integer)
	
	Private _ConversionRate As String
	
	Private _supplierID As System.Nullable(Of Integer)
	
	Private _week As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventDate", DbType:="VarChar(15)")>  _
	Public Property eventDate() As String
		Get
			Return Me._eventDate
		End Get
		Set
			If (String.Equals(Me._eventDate, value) = false) Then
				Me._eventDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_startTime", DbType:="VarChar(15)")>  _
	Public Property startTime() As String
		Get
			Return Me._startTime
		End Get
		Set
			If (String.Equals(Me._startTime, value) = false) Then
				Me._startTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_endTime", DbType:="VarChar(15)")>  _
	Public Property endTime() As String
		Get
			Return Me._endTime
		End Get
		Set
			If (String.Equals(Me._endTime, value) = false) Then
				Me._endTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventType", DbType:="VarChar(MAX)")>  _
	Public Property eventType() As String
		Get
			Return Me._eventType
		End Get
		Set
			If (String.Equals(Me._eventType, value) = false) Then
				Me._eventType = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_statusID", DbType:="Int")>  _
	Public Property statusID() As System.Nullable(Of Integer)
		Get
			Return Me._statusID
		End Get
		Set
			If (Me._statusID.Equals(value) = false) Then
				Me._statusID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountType", DbType:="VarChar(MAX)")>  _
	Public Property accountType() As String
		Get
			Return Me._accountType
		End Get
		Set
			If (String.Equals(Me._accountType, value) = false) Then
				Me._accountType = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountName", DbType:="VarChar(256)")>  _
	Public Property accountName() As String
		Get
			Return Me._accountName
		End Get
		Set
			If (String.Equals(Me._accountName, value) = false) Then
				Me._accountName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketName", DbType:="VarChar(50)")>  _
	Public Property marketName() As String
		Get
			Return Me._marketName
		End Get
		Set
			If (String.Equals(Me._marketName, value) = false) Then
				Me._marketName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sampled", DbType:="Int")>  _
	Public Property sampled() As System.Nullable(Of Integer)
		Get
			Return Me._sampled
		End Get
		Set
			If (Me._sampled.Equals(value) = false) Then
				Me._sampled = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bottlesUsed", DbType:="Int")>  _
	Public Property bottlesUsed() As System.Nullable(Of Integer)
		Get
			Return Me._bottlesUsed
		End Get
		Set
			If (Me._bottlesUsed.Equals(value) = false) Then
				Me._bottlesUsed = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bottlesSold", DbType:="Int")>  _
	Public Property bottlesSold() As System.Nullable(Of Integer)
		Get
			Return Me._bottlesSold
		End Get
		Set
			If (Me._bottlesSold.Equals(value) = false) Then
				Me._bottlesSold = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventBottlesSold", DbType:="Int")>  _
	Public Property eventBottlesSold() As System.Nullable(Of Integer)
		Get
			Return Me._eventBottlesSold
		End Get
		Set
			If (Me._eventBottlesSold.Equals(value) = false) Then
				Me._eventBottlesSold = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_averagePrice", DbType:="Int")>  _
	Public Property averagePrice() As System.Nullable(Of Integer)
		Get
			Return Me._averagePrice
		End Get
		Set
			If (Me._averagePrice.Equals(value) = false) Then
				Me._averagePrice = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_estimatedRevenue", DbType:="NVarChar(4000)")>  _
	Public Property estimatedRevenue() As String
		Get
			Return Me._estimatedRevenue
		End Get
		Set
			If (String.Equals(Me._estimatedRevenue, value) = false) Then
				Me._estimatedRevenue = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Price", DbType:="Int")>  _
	Public Property Price() As System.Nullable(Of Integer)
		Get
			Return Me._Price
		End Get
		Set
			If (Me._Price.Equals(value) = false) Then
				Me._Price = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ConversionRate", DbType:="VarChar(20)")>  _
	Public Property ConversionRate() As String
		Get
			Return Me._ConversionRate
		End Get
		Set
			If (String.Equals(Me._ConversionRate, value) = false) Then
				Me._ConversionRate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int")>  _
	Public Property supplierID() As System.Nullable(Of Integer)
		Get
			Return Me._supplierID
		End Get
		Set
			If (Me._supplierID.Equals(value) = false) Then
				Me._supplierID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_week", DbType:="Int")>  _
	Public Property week() As System.Nullable(Of Integer)
		Get
			Return Me._week
		End Get
		Set
			If (Me._week.Equals(value) = false) Then
				Me._week = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qrySalesRecapReportBrandTotals")>  _
Partial Public Class qrySalesRecapReportBrandTotal
	
	Private _eventID As System.Nullable(Of Integer)
	
	Private _brandID As System.Nullable(Of Integer)
	
	Private _brandName As String
	
	Private _sampled As System.Nullable(Of Integer)
	
	Private _bottlesUsed As System.Nullable(Of Integer)
	
	Private _bottlesSold As System.Nullable(Of Integer)
	
	Private _eventBottlesSold As System.Nullable(Of Integer)
	
	Private _averagePrice As String
	
	Private _estimatedRevenue As System.Nullable(Of Integer)
	
	Private _Revenue As String
	
	Private _ConversionRate As String
	
	Private _week As System.Nullable(Of Integer)
	
	Private _eventDate As System.Nullable(Of Date)
	
	Private _supplierID As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int")>  _
	Public Property eventID() As System.Nullable(Of Integer)
		Get
			Return Me._eventID
		End Get
		Set
			If (Me._eventID.Equals(value) = false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandID", DbType:="Int")>  _
	Public Property brandID() As System.Nullable(Of Integer)
		Get
			Return Me._brandID
		End Get
		Set
			If (Me._brandID.Equals(value) = false) Then
				Me._brandID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandName", DbType:="VarChar(MAX)")>  _
	Public Property brandName() As String
		Get
			Return Me._brandName
		End Get
		Set
			If (String.Equals(Me._brandName, value) = false) Then
				Me._brandName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sampled", DbType:="Int")>  _
	Public Property sampled() As System.Nullable(Of Integer)
		Get
			Return Me._sampled
		End Get
		Set
			If (Me._sampled.Equals(value) = false) Then
				Me._sampled = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bottlesUsed", DbType:="Int")>  _
	Public Property bottlesUsed() As System.Nullable(Of Integer)
		Get
			Return Me._bottlesUsed
		End Get
		Set
			If (Me._bottlesUsed.Equals(value) = false) Then
				Me._bottlesUsed = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bottlesSold", DbType:="Int")>  _
	Public Property bottlesSold() As System.Nullable(Of Integer)
		Get
			Return Me._bottlesSold
		End Get
		Set
			If (Me._bottlesSold.Equals(value) = false) Then
				Me._bottlesSold = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventBottlesSold", DbType:="Int")>  _
	Public Property eventBottlesSold() As System.Nullable(Of Integer)
		Get
			Return Me._eventBottlesSold
		End Get
		Set
			If (Me._eventBottlesSold.Equals(value) = false) Then
				Me._eventBottlesSold = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_averagePrice", DbType:="VarChar(MAX)")>  _
	Public Property averagePrice() As String
		Get
			Return Me._averagePrice
		End Get
		Set
			If (String.Equals(Me._averagePrice, value) = false) Then
				Me._averagePrice = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_estimatedRevenue", DbType:="Int")>  _
	Public Property estimatedRevenue() As System.Nullable(Of Integer)
		Get
			Return Me._estimatedRevenue
		End Get
		Set
			If (Me._estimatedRevenue.Equals(value) = false) Then
				Me._estimatedRevenue = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Revenue", DbType:="NVarChar(4000)")>  _
	Public Property Revenue() As String
		Get
			Return Me._Revenue
		End Get
		Set
			If (String.Equals(Me._Revenue, value) = false) Then
				Me._Revenue = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ConversionRate", DbType:="VarChar(20)")>  _
	Public Property ConversionRate() As String
		Get
			Return Me._ConversionRate
		End Get
		Set
			If (String.Equals(Me._ConversionRate, value) = false) Then
				Me._ConversionRate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_week", DbType:="Int")>  _
	Public Property week() As System.Nullable(Of Integer)
		Get
			Return Me._week
		End Get
		Set
			If (Me._week.Equals(value) = false) Then
				Me._week = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventDate", DbType:="SmallDateTime")>  _
	Public Property eventDate() As System.Nullable(Of Date)
		Get
			Return Me._eventDate
		End Get
		Set
			If (Me._eventDate.Equals(value) = false) Then
				Me._eventDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int")>  _
	Public Property supplierID() As System.Nullable(Of Integer)
		Get
			Return Me._supplierID
		End Get
		Set
			If (Me._supplierID.Equals(value) = false) Then
				Me._supplierID = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryScheduledPaymentsByAmbassador")>  _
Partial Public Class qryScheduledPaymentsByAmbassador
	
	Private _RequirementID As Integer
	
	Private _locationID As System.Nullable(Of Integer)
	
	Private _accountID As Integer
	
	Private _accountName As String
	
	Private _eventID As Integer
	
	Private _supplierName As String
	
	Private _userID As String
	
	Private _userName As String
	
	Private _FullName As String
	
	Private _positionTitle As String
	
	Private _statusID As System.Nullable(Of Integer)
	
	Private _rate As System.Nullable(Of Decimal)
	
	Private _hours As System.Nullable(Of Integer)
	
	Private _labor As System.Nullable(Of Decimal)
	
	Private _paymentStatus As String
	
	Private _paymentID As System.Nullable(Of Integer)
	
	Private _expenses As System.Nullable(Of Decimal)
	
	Private _Total As System.Nullable(Of Decimal)
	
	Private _paymentDate As System.Nullable(Of Date)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RequirementID", DbType:="Int NOT NULL")>  _
	Public Property RequirementID() As Integer
		Get
			Return Me._RequirementID
		End Get
		Set
			If ((Me._RequirementID = value)  _
						= false) Then
				Me._RequirementID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_locationID", DbType:="Int")>  _
	Public Property locationID() As System.Nullable(Of Integer)
		Get
			Return Me._locationID
		End Get
		Set
			If (Me._locationID.Equals(value) = false) Then
				Me._locationID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="Int NOT NULL")>  _
	Public Property accountID() As Integer
		Get
			Return Me._accountID
		End Get
		Set
			If ((Me._accountID = value)  _
						= false) Then
				Me._accountID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountName", DbType:="VarChar(256)")>  _
	Public Property accountName() As String
		Get
			Return Me._accountName
		End Get
		Set
			If (String.Equals(Me._accountName, value) = false) Then
				Me._accountName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierName", DbType:="NVarChar(50)")>  _
	Public Property supplierName() As String
		Get
			Return Me._supplierName
		End Get
		Set
			If (String.Equals(Me._supplierName, value) = false) Then
				Me._supplierName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me._userID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userName", DbType:="NVarChar(50)")>  _
	Public Property userName() As String
		Get
			Return Me._userName
		End Get
		Set
			If (String.Equals(Me._userName, value) = false) Then
				Me._userName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FullName", DbType:="NVarChar(101)")>  _
	Public Property FullName() As String
		Get
			Return Me._FullName
		End Get
		Set
			If (String.Equals(Me._FullName, value) = false) Then
				Me._FullName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_positionTitle", DbType:="NVarChar(50)")>  _
	Public Property positionTitle() As String
		Get
			Return Me._positionTitle
		End Get
		Set
			If (String.Equals(Me._positionTitle, value) = false) Then
				Me._positionTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_statusID", DbType:="Int")>  _
	Public Property statusID() As System.Nullable(Of Integer)
		Get
			Return Me._statusID
		End Get
		Set
			If (Me._statusID.Equals(value) = false) Then
				Me._statusID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rate", DbType:="Decimal(18,2)")>  _
	Public Property rate() As System.Nullable(Of Decimal)
		Get
			Return Me._rate
		End Get
		Set
			If (Me._rate.Equals(value) = false) Then
				Me._rate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hours", DbType:="Int")>  _
	Public Property hours() As System.Nullable(Of Integer)
		Get
			Return Me._hours
		End Get
		Set
			If (Me._hours.Equals(value) = false) Then
				Me._hours = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_labor", DbType:="Decimal(29,2)")>  _
	Public Property labor() As System.Nullable(Of Decimal)
		Get
			Return Me._labor
		End Get
		Set
			If (Me._labor.Equals(value) = false) Then
				Me._labor = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentStatus", DbType:="VarChar(50)")>  _
	Public Property paymentStatus() As String
		Get
			Return Me._paymentStatus
		End Get
		Set
			If (String.Equals(Me._paymentStatus, value) = false) Then
				Me._paymentStatus = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentID", DbType:="Int")>  _
	Public Property paymentID() As System.Nullable(Of Integer)
		Get
			Return Me._paymentID
		End Get
		Set
			If (Me._paymentID.Equals(value) = false) Then
				Me._paymentID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_expenses", DbType:="Money")>  _
	Public Property expenses() As System.Nullable(Of Decimal)
		Get
			Return Me._expenses
		End Get
		Set
			If (Me._expenses.Equals(value) = false) Then
				Me._expenses = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Total", DbType:="Decimal(32,4)")>  _
	Public Property Total() As System.Nullable(Of Decimal)
		Get
			Return Me._Total
		End Get
		Set
			If (Me._Total.Equals(value) = false) Then
				Me._Total = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentDate", DbType:="SmallDateTime")>  _
	Public Property paymentDate() As System.Nullable(Of Date)
		Get
			Return Me._paymentDate
		End Get
		Set
			If (Me._paymentDate.Equals(value) = false) Then
				Me._paymentDate = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryStateListbyMarketID")>  _
Partial Public Class qryStateListbyMarketID
	
	Private _state As String
	
	Private _marketID As System.Nullable(Of Integer)
	
	Private _StateName As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_state", DbType:="NVarChar(20)")>  _
	Public Property state() As String
		Get
			Return Me._state
		End Get
		Set
			If (String.Equals(Me._state, value) = false) Then
				Me._state = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="Int")>  _
	Public Property marketID() As System.Nullable(Of Integer)
		Get
			Return Me._marketID
		End Get
		Set
			If (Me._marketID.Equals(value) = false) Then
				Me._marketID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StateName", DbType:="VarChar(250) NOT NULL", CanBeNull:=false)>  _
	Public Property StateName() As String
		Get
			Return Me._StateName
		End Get
		Set
			If (String.Equals(Me._StateName, value) = false) Then
				Me._StateName = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryTotalBonusByID")>  _
Partial Public Class qryTotalBonusByID
	
	Private _totalbonus As System.Nullable(Of Decimal)
	
	Private _eventStaffingRequirementID As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_totalbonus", DbType:="Money")>  _
	Public Property totalbonus() As System.Nullable(Of Decimal)
		Get
			Return Me._totalbonus
		End Get
		Set
			If (Me._totalbonus.Equals(value) = false) Then
				Me._totalbonus = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventStaffingRequirementID", DbType:="Int")>  _
	Public Property eventStaffingRequirementID() As System.Nullable(Of Integer)
		Get
			Return Me._eventStaffingRequirementID
		End Get
		Set
			If (Me._eventStaffingRequirementID.Equals(value) = false) Then
				Me._eventStaffingRequirementID = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryTotalBottlesSold")>  _
Partial Public Class qryTotalBottlesSold
	
	Private _eventID As System.Nullable(Of Integer)
	
	Private _brandID As System.Nullable(Of Integer)
	
	Private _bottlesSold As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int")>  _
	Public Property eventID() As System.Nullable(Of Integer)
		Get
			Return Me._eventID
		End Get
		Set
			If (Me._eventID.Equals(value) = false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandID", DbType:="Int")>  _
	Public Property brandID() As System.Nullable(Of Integer)
		Get
			Return Me._brandID
		End Get
		Set
			If (Me._brandID.Equals(value) = false) Then
				Me._brandID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bottlesSold", DbType:="Int")>  _
	Public Property bottlesSold() As System.Nullable(Of Integer)
		Get
			Return Me._bottlesSold
		End Get
		Set
			If (Me._bottlesSold.Equals(value) = false) Then
				Me._bottlesSold = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryTotalBottlesUsed")>  _
Partial Public Class qryTotalBottlesUsed
	
	Private _eventID As System.Nullable(Of Integer)
	
	Private _brandID As System.Nullable(Of Integer)
	
	Private _bottlesUsed As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int")>  _
	Public Property eventID() As System.Nullable(Of Integer)
		Get
			Return Me._eventID
		End Get
		Set
			If (Me._eventID.Equals(value) = false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandID", DbType:="Int")>  _
	Public Property brandID() As System.Nullable(Of Integer)
		Get
			Return Me._brandID
		End Get
		Set
			If (Me._brandID.Equals(value) = false) Then
				Me._brandID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bottlesUsed", DbType:="Int")>  _
	Public Property bottlesUsed() As System.Nullable(Of Integer)
		Get
			Return Me._bottlesUsed
		End Get
		Set
			If (Me._bottlesUsed.Equals(value) = false) Then
				Me._bottlesUsed = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryTotalExpenseByID")>  _
Partial Public Class qryTotalExpenseByID
	
	Private _totalexpense As System.Nullable(Of Decimal)
	
	Private _eventStaffingRequirementID As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_totalexpense", DbType:="Money")>  _
	Public Property totalexpense() As System.Nullable(Of Decimal)
		Get
			Return Me._totalexpense
		End Get
		Set
			If (Me._totalexpense.Equals(value) = false) Then
				Me._totalexpense = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventStaffingRequirementID", DbType:="Int")>  _
	Public Property eventStaffingRequirementID() As System.Nullable(Of Integer)
		Get
			Return Me._eventStaffingRequirementID
		End Get
		Set
			If (Me._eventStaffingRequirementID.Equals(value) = false) Then
				Me._eventStaffingRequirementID = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryTotalExpensesByEventID")>  _
Partial Public Class qryTotalExpensesByEventID
	
	Private _totalexpense As System.Nullable(Of Decimal)
	
	Private _eventStaffingRequirementID As System.Nullable(Of Integer)
	
	Private _eventID As Integer
	
	Private _expenseTypeID As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_totalexpense", DbType:="Money")>  _
	Public Property totalexpense() As System.Nullable(Of Decimal)
		Get
			Return Me._totalexpense
		End Get
		Set
			If (Me._totalexpense.Equals(value) = false) Then
				Me._totalexpense = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventStaffingRequirementID", DbType:="Int")>  _
	Public Property eventStaffingRequirementID() As System.Nullable(Of Integer)
		Get
			Return Me._eventStaffingRequirementID
		End Get
		Set
			If (Me._eventStaffingRequirementID.Equals(value) = false) Then
				Me._eventStaffingRequirementID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_expenseTypeID", DbType:="Int")>  _
	Public Property expenseTypeID() As System.Nullable(Of Integer)
		Get
			Return Me._expenseTypeID
		End Get
		Set
			If (Me._expenseTypeID.Equals(value) = false) Then
				Me._expenseTypeID = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryTotalReciptsByID")>  _
Partial Public Class qryTotalReciptsByID
	
	Private _totalerecipt As System.Nullable(Of Decimal)
	
	Private _eventStaffingRequirementID As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_totalerecipt", DbType:="Money")>  _
	Public Property totalerecipt() As System.Nullable(Of Decimal)
		Get
			Return Me._totalerecipt
		End Get
		Set
			If (Me._totalerecipt.Equals(value) = false) Then
				Me._totalerecipt = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventStaffingRequirementID", DbType:="Int")>  _
	Public Property eventStaffingRequirementID() As System.Nullable(Of Integer)
		Get
			Return Me._eventStaffingRequirementID
		End Get
		Set
			If (Me._eventStaffingRequirementID.Equals(value) = false) Then
				Me._eventStaffingRequirementID = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryTotalSampled")>  _
Partial Public Class qryTotalSampled
	
	Private _eventID As System.Nullable(Of Integer)
	
	Private _brandID As System.Nullable(Of Integer)
	
	Private _totalSampled As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int")>  _
	Public Property eventID() As System.Nullable(Of Integer)
		Get
			Return Me._eventID
		End Get
		Set
			If (Me._eventID.Equals(value) = false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandID", DbType:="Int")>  _
	Public Property brandID() As System.Nullable(Of Integer)
		Get
			Return Me._brandID
		End Get
		Set
			If (Me._brandID.Equals(value) = false) Then
				Me._brandID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_totalSampled", DbType:="Int")>  _
	Public Property totalSampled() As System.Nullable(Of Integer)
		Get
			Return Me._totalSampled
		End Get
		Set
			If (Me._totalSampled.Equals(value) = false) Then
				Me._totalSampled = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryViewABIEvents")>  _
Partial Public Class qryViewABIEvent
	
	Private _eventID As Integer
	
	Private _supplierID As System.Nullable(Of Integer)
	
	Private _supplierName As String
	
	Private _eventTitle As String
	
	Private _EventDate As String
	
	Private _StartTime As String
	
	Private _EndTime As String
	
	Private _statusName As String
	
	Private _eventTypeName As String
	
	Private _marketName As String
	
	Private _accountName As String
	
	Private _address As String
	
	Private _city As String
	
	Private _state As String
	
	Private _brands As String
	
	Private _Wholesaler As String
	
	Private _hours As System.Nullable(Of Double)
	
	Private _Invoice_Number As System.Nullable(Of Long)
	
	Private _Invoiced_Hours As System.Nullable(Of Double)
	
	Private _Bonus As System.Nullable(Of Double)
	
	Private _Parking As System.Nullable(Of Double)
	
	Private _Sampling As System.Nullable(Of Double)
	
	Private _Labor As System.Nullable(Of Double)
	
	Private _Total As System.Nullable(Of Double)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int")>  _
	Public Property supplierID() As System.Nullable(Of Integer)
		Get
			Return Me._supplierID
		End Get
		Set
			If (Me._supplierID.Equals(value) = false) Then
				Me._supplierID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierName", DbType:="NVarChar(50)")>  _
	Public Property supplierName() As String
		Get
			Return Me._supplierName
		End Get
		Set
			If (String.Equals(Me._supplierName, value) = false) Then
				Me._supplierName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTitle", DbType:="VarChar(1000)")>  _
	Public Property eventTitle() As String
		Get
			Return Me._eventTitle
		End Get
		Set
			If (String.Equals(Me._eventTitle, value) = false) Then
				Me._eventTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EventDate", DbType:="NVarChar(4000)")>  _
	Public Property EventDate() As String
		Get
			Return Me._EventDate
		End Get
		Set
			If (String.Equals(Me._EventDate, value) = false) Then
				Me._EventDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartTime", DbType:="NVarChar(4000)")>  _
	Public Property StartTime() As String
		Get
			Return Me._StartTime
		End Get
		Set
			If (String.Equals(Me._StartTime, value) = false) Then
				Me._StartTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndTime", DbType:="NVarChar(4000)")>  _
	Public Property EndTime() As String
		Get
			Return Me._EndTime
		End Get
		Set
			If (String.Equals(Me._EndTime, value) = false) Then
				Me._EndTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_statusName", DbType:="NVarChar(50)")>  _
	Public Property statusName() As String
		Get
			Return Me._statusName
		End Get
		Set
			If (String.Equals(Me._statusName, value) = false) Then
				Me._statusName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTypeName", DbType:="NVarChar(50)")>  _
	Public Property eventTypeName() As String
		Get
			Return Me._eventTypeName
		End Get
		Set
			If (String.Equals(Me._eventTypeName, value) = false) Then
				Me._eventTypeName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketName", DbType:="VarChar(50)")>  _
	Public Property marketName() As String
		Get
			Return Me._marketName
		End Get
		Set
			If (String.Equals(Me._marketName, value) = false) Then
				Me._marketName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountName", DbType:="VarChar(256)")>  _
	Public Property accountName() As String
		Get
			Return Me._accountName
		End Get
		Set
			If (String.Equals(Me._accountName, value) = false) Then
				Me._accountName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_address", DbType:="VarChar(256)")>  _
	Public Property address() As String
		Get
			Return Me._address
		End Get
		Set
			If (String.Equals(Me._address, value) = false) Then
				Me._address = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_city", DbType:="VarChar(50)")>  _
	Public Property city() As String
		Get
			Return Me._city
		End Get
		Set
			If (String.Equals(Me._city, value) = false) Then
				Me._city = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_state", DbType:="NVarChar(20)")>  _
	Public Property state() As String
		Get
			Return Me._state
		End Get
		Set
			If (String.Equals(Me._state, value) = false) Then
				Me._state = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brands", DbType:="VarChar(MAX)")>  _
	Public Property brands() As String
		Get
			Return Me._brands
		End Get
		Set
			If (String.Equals(Me._brands, value) = false) Then
				Me._brands = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Wholesaler", DbType:="VarChar(MAX)")>  _
	Public Property Wholesaler() As String
		Get
			Return Me._Wholesaler
		End Get
		Set
			If (String.Equals(Me._Wholesaler, value) = false) Then
				Me._Wholesaler = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hours", DbType:="Float")>  _
	Public Property hours() As System.Nullable(Of Double)
		Get
			Return Me._hours
		End Get
		Set
			If (Me._hours.Equals(value) = false) Then
				Me._hours = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Invoice Number]", Storage:="_Invoice_Number", DbType:="BigInt")>  _
	Public Property Invoice_Number() As System.Nullable(Of Long)
		Get
			Return Me._Invoice_Number
		End Get
		Set
			If (Me._Invoice_Number.Equals(value) = false) Then
				Me._Invoice_Number = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Invoiced Hours]", Storage:="_Invoiced_Hours", DbType:="Float")>  _
	Public Property Invoiced_Hours() As System.Nullable(Of Double)
		Get
			Return Me._Invoiced_Hours
		End Get
		Set
			If (Me._Invoiced_Hours.Equals(value) = false) Then
				Me._Invoiced_Hours = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Bonus", DbType:="Float")>  _
	Public Property Bonus() As System.Nullable(Of Double)
		Get
			Return Me._Bonus
		End Get
		Set
			If (Me._Bonus.Equals(value) = false) Then
				Me._Bonus = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Parking", DbType:="Float")>  _
	Public Property Parking() As System.Nullable(Of Double)
		Get
			Return Me._Parking
		End Get
		Set
			If (Me._Parking.Equals(value) = false) Then
				Me._Parking = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sampling", DbType:="Float")>  _
	Public Property Sampling() As System.Nullable(Of Double)
		Get
			Return Me._Sampling
		End Get
		Set
			If (Me._Sampling.Equals(value) = false) Then
				Me._Sampling = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Labor", DbType:="Float")>  _
	Public Property Labor() As System.Nullable(Of Double)
		Get
			Return Me._Labor
		End Get
		Set
			If (Me._Labor.Equals(value) = false) Then
				Me._Labor = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Total", DbType:="Float")>  _
	Public Property Total() As System.Nullable(Of Double)
		Get
			Return Me._Total
		End Get
		Set
			If (Me._Total.Equals(value) = false) Then
				Me._Total = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryViewAccountActivity")>  _
Partial Public Class qryViewAccountActivity
	
	Private _accountActivityID As Integer
	
	Private _activityTypeID As System.Nullable(Of Integer)
	
	Private _accountName As String
	
	Private _marketName As String
	
	Private _accountType As String
	
	Private _activityDate As System.Nullable(Of Date)
	
	Private _status As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountActivityID", DbType:="Int NOT NULL")>  _
	Public Property accountActivityID() As Integer
		Get
			Return Me._accountActivityID
		End Get
		Set
			If ((Me._accountActivityID = value)  _
						= false) Then
				Me._accountActivityID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_activityTypeID", DbType:="Int")>  _
	Public Property activityTypeID() As System.Nullable(Of Integer)
		Get
			Return Me._activityTypeID
		End Get
		Set
			If (Me._activityTypeID.Equals(value) = false) Then
				Me._activityTypeID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountName", DbType:="VarChar(50)")>  _
	Public Property accountName() As String
		Get
			Return Me._accountName
		End Get
		Set
			If (String.Equals(Me._accountName, value) = false) Then
				Me._accountName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketName", DbType:="VarChar(50)")>  _
	Public Property marketName() As String
		Get
			Return Me._marketName
		End Get
		Set
			If (String.Equals(Me._marketName, value) = false) Then
				Me._marketName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountType", DbType:="VarChar(MAX)")>  _
	Public Property accountType() As String
		Get
			Return Me._accountType
		End Get
		Set
			If (String.Equals(Me._accountType, value) = false) Then
				Me._accountType = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_activityDate", DbType:="SmallDateTime")>  _
	Public Property activityDate() As System.Nullable(Of Date)
		Get
			Return Me._activityDate
		End Get
		Set
			If (Me._activityDate.Equals(value) = false) Then
				Me._activityDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", DbType:="VarChar(50)")>  _
	Public Property status() As String
		Get
			Return Me._status
		End Get
		Set
			If (String.Equals(Me._status, value) = false) Then
				Me._status = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryViewAccounts")>  _
Partial Public Class qryViewAccount
	
	Private _accountID As Integer
	
	Private _Vpid As System.Nullable(Of Integer)
	
	Private _accountName As String
	
	Private _streetAddress1 As String
	
	Private _city As String
	
	Private _StateName As String
	
	Private _zipCode As String
	
	Private _accountTypeID As System.Nullable(Of Integer)
	
	Private _accountTypeName As String
	
	Private _marketID As System.Nullable(Of Integer)
	
	Private _marketName As String
	
	Private _latitude As System.Nullable(Of Double)
	
	Private _longitude As System.Nullable(Of Double)
	
	Private _shape As String
	
	Private _tooltipformap As String
	
	Private _brandChampion As System.Nullable(Of Boolean)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="Int NOT NULL")>  _
	Public Property accountID() As Integer
		Get
			Return Me._accountID
		End Get
		Set
			If ((Me._accountID = value)  _
						= false) Then
				Me._accountID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Vpid", DbType:="Int")>  _
	Public Property Vpid() As System.Nullable(Of Integer)
		Get
			Return Me._Vpid
		End Get
		Set
			If (Me._Vpid.Equals(value) = false) Then
				Me._Vpid = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountName", DbType:="VarChar(256)")>  _
	Public Property accountName() As String
		Get
			Return Me._accountName
		End Get
		Set
			If (String.Equals(Me._accountName, value) = false) Then
				Me._accountName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_streetAddress1", DbType:="VarChar(256)")>  _
	Public Property streetAddress1() As String
		Get
			Return Me._streetAddress1
		End Get
		Set
			If (String.Equals(Me._streetAddress1, value) = false) Then
				Me._streetAddress1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_city", DbType:="VarChar(50)")>  _
	Public Property city() As String
		Get
			Return Me._city
		End Get
		Set
			If (String.Equals(Me._city, value) = false) Then
				Me._city = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StateName", DbType:="VarChar(250)")>  _
	Public Property StateName() As String
		Get
			Return Me._StateName
		End Get
		Set
			If (String.Equals(Me._StateName, value) = false) Then
				Me._StateName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_zipCode", DbType:="VarChar(10)")>  _
	Public Property zipCode() As String
		Get
			Return Me._zipCode
		End Get
		Set
			If (String.Equals(Me._zipCode, value) = false) Then
				Me._zipCode = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountTypeID", DbType:="Int")>  _
	Public Property accountTypeID() As System.Nullable(Of Integer)
		Get
			Return Me._accountTypeID
		End Get
		Set
			If (Me._accountTypeID.Equals(value) = false) Then
				Me._accountTypeID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountTypeName", DbType:="VarChar(256)")>  _
	Public Property accountTypeName() As String
		Get
			Return Me._accountTypeName
		End Get
		Set
			If (String.Equals(Me._accountTypeName, value) = false) Then
				Me._accountTypeName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="Int")>  _
	Public Property marketID() As System.Nullable(Of Integer)
		Get
			Return Me._marketID
		End Get
		Set
			If (Me._marketID.Equals(value) = false) Then
				Me._marketID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketName", DbType:="VarChar(50)")>  _
	Public Property marketName() As String
		Get
			Return Me._marketName
		End Get
		Set
			If (String.Equals(Me._marketName, value) = false) Then
				Me._marketName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_latitude", DbType:="Float")>  _
	Public Property latitude() As System.Nullable(Of Double)
		Get
			Return Me._latitude
		End Get
		Set
			If (Me._latitude.Equals(value) = false) Then
				Me._latitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_longitude", DbType:="Float")>  _
	Public Property longitude() As System.Nullable(Of Double)
		Get
			Return Me._longitude
		End Get
		Set
			If (Me._longitude.Equals(value) = false) Then
				Me._longitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_shape", DbType:="VarChar(9) NOT NULL", CanBeNull:=false)>  _
	Public Property shape() As String
		Get
			Return Me._shape
		End Get
		Set
			If (String.Equals(Me._shape, value) = false) Then
				Me._shape = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tooltipformap", DbType:="VarChar(328)")>  _
	Public Property tooltipformap() As String
		Get
			Return Me._tooltipformap
		End Get
		Set
			If (String.Equals(Me._tooltipformap, value) = false) Then
				Me._tooltipformap = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandChampion", DbType:="Bit")>  _
	Public Property brandChampion() As System.Nullable(Of Boolean)
		Get
			Return Me._brandChampion
		End Get
		Set
			If (Me._brandChampion.Equals(value) = false) Then
				Me._brandChampion = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryViewAccountsByClient")>  _
Partial Public Class qryViewAccountsByClient
	
	Private _accountID As Integer
	
	Private _Vpid As System.Nullable(Of Integer)
	
	Private _clientID As System.Nullable(Of Integer)
	
	Private _accountName As String
	
	Private _streetAddress1 As String
	
	Private _city As String
	
	Private _StateName As String
	
	Private _accountTypeID As System.Nullable(Of Integer)
	
	Private _accountTypeName As String
	
	Private _marketID As System.Nullable(Of Integer)
	
	Private _marketName As String
	
	Private _latitude As System.Nullable(Of Double)
	
	Private _longitude As System.Nullable(Of Double)
	
	Private _shape As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="Int NOT NULL")>  _
	Public Property accountID() As Integer
		Get
			Return Me._accountID
		End Get
		Set
			If ((Me._accountID = value)  _
						= false) Then
				Me._accountID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Vpid", DbType:="Int")>  _
	Public Property Vpid() As System.Nullable(Of Integer)
		Get
			Return Me._Vpid
		End Get
		Set
			If (Me._Vpid.Equals(value) = false) Then
				Me._Vpid = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", DbType:="Int")>  _
	Public Property clientID() As System.Nullable(Of Integer)
		Get
			Return Me._clientID
		End Get
		Set
			If (Me._clientID.Equals(value) = false) Then
				Me._clientID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountName", DbType:="VarChar(256)")>  _
	Public Property accountName() As String
		Get
			Return Me._accountName
		End Get
		Set
			If (String.Equals(Me._accountName, value) = false) Then
				Me._accountName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_streetAddress1", DbType:="VarChar(256)")>  _
	Public Property streetAddress1() As String
		Get
			Return Me._streetAddress1
		End Get
		Set
			If (String.Equals(Me._streetAddress1, value) = false) Then
				Me._streetAddress1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_city", DbType:="VarChar(50)")>  _
	Public Property city() As String
		Get
			Return Me._city
		End Get
		Set
			If (String.Equals(Me._city, value) = false) Then
				Me._city = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StateName", DbType:="VarChar(250)")>  _
	Public Property StateName() As String
		Get
			Return Me._StateName
		End Get
		Set
			If (String.Equals(Me._StateName, value) = false) Then
				Me._StateName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountTypeID", DbType:="Int")>  _
	Public Property accountTypeID() As System.Nullable(Of Integer)
		Get
			Return Me._accountTypeID
		End Get
		Set
			If (Me._accountTypeID.Equals(value) = false) Then
				Me._accountTypeID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountTypeName", DbType:="VarChar(256)")>  _
	Public Property accountTypeName() As String
		Get
			Return Me._accountTypeName
		End Get
		Set
			If (String.Equals(Me._accountTypeName, value) = false) Then
				Me._accountTypeName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="Int")>  _
	Public Property marketID() As System.Nullable(Of Integer)
		Get
			Return Me._marketID
		End Get
		Set
			If (Me._marketID.Equals(value) = false) Then
				Me._marketID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketName", DbType:="VarChar(50)")>  _
	Public Property marketName() As String
		Get
			Return Me._marketName
		End Get
		Set
			If (String.Equals(Me._marketName, value) = false) Then
				Me._marketName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_latitude", DbType:="Float")>  _
	Public Property latitude() As System.Nullable(Of Double)
		Get
			Return Me._latitude
		End Get
		Set
			If (Me._latitude.Equals(value) = false) Then
				Me._latitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_longitude", DbType:="Float")>  _
	Public Property longitude() As System.Nullable(Of Double)
		Get
			Return Me._longitude
		End Get
		Set
			If (Me._longitude.Equals(value) = false) Then
				Me._longitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_shape", DbType:="VarChar(9) NOT NULL", CanBeNull:=false)>  _
	Public Property shape() As String
		Get
			Return Me._shape
		End Get
		Set
			If (String.Equals(Me._shape, value) = false) Then
				Me._shape = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryViewActiveAmbassador")>  _
Partial Public Class qryViewActiveAmbassador
	
	Private _ambassadorID As Integer
	
	Private _userID As String
	
	Private _userName As String
	
	Private _FirstName As String
	
	Private _LastName As String
	
	Private _EmailAddress As String
	
	Private _City As String
	
	Private _State As String
	
	Private _LastLoginDate As String
	
	Private _labelText As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ambassadorID", DbType:="Int NOT NULL")>  _
	Public Property ambassadorID() As Integer
		Get
			Return Me._ambassadorID
		End Get
		Set
			If ((Me._ambassadorID = value)  _
						= false) Then
				Me._ambassadorID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me._userID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userName", DbType:="NVarChar(50)")>  _
	Public Property userName() As String
		Get
			Return Me._userName
		End Get
		Set
			If (String.Equals(Me._userName, value) = false) Then
				Me._userName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="NVarChar(50)")>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me._FirstName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="NVarChar(50)")>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me._LastName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmailAddress", DbType:="NVarChar(50)")>  _
	Public Property EmailAddress() As String
		Get
			Return Me._EmailAddress
		End Get
		Set
			If (String.Equals(Me._EmailAddress, value) = false) Then
				Me._EmailAddress = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", DbType:="NVarChar(50)")>  _
	Public Property City() As String
		Get
			Return Me._City
		End Get
		Set
			If (String.Equals(Me._City, value) = false) Then
				Me._City = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_State", DbType:="VarChar(MAX)")>  _
	Public Property State() As String
		Get
			Return Me._State
		End Get
		Set
			If (String.Equals(Me._State, value) = false) Then
				Me._State = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastLoginDate", DbType:="VarChar(23)")>  _
	Public Property LastLoginDate() As String
		Get
			Return Me._LastLoginDate
		End Get
		Set
			If (String.Equals(Me._LastLoginDate, value) = false) Then
				Me._LastLoginDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_labelText", DbType:="VarChar(101)")>  _
	Public Property labelText() As String
		Get
			Return Me._labelText
		End Get
		Set
			If (String.Equals(Me._labelText, value) = false) Then
				Me._labelText = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryViewActiveAmbassador_withMarketID")>  _
Partial Public Class qryViewActiveAmbassador_withMarketID
	
	Private _ambassadorID As Integer
	
	Private _userID As String
	
	Private _userName As String
	
	Private _FirstName As String
	
	Private _LastName As String
	
	Private _EmailAddress As String
	
	Private _City As String
	
	Private _State As String
	
	Private _LastLoginDate As String
	
	Private _labelText As String
	
	Private _marketID As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ambassadorID", DbType:="Int NOT NULL")>  _
	Public Property ambassadorID() As Integer
		Get
			Return Me._ambassadorID
		End Get
		Set
			If ((Me._ambassadorID = value)  _
						= false) Then
				Me._ambassadorID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me._userID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userName", DbType:="NVarChar(50)")>  _
	Public Property userName() As String
		Get
			Return Me._userName
		End Get
		Set
			If (String.Equals(Me._userName, value) = false) Then
				Me._userName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="NVarChar(50)")>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me._FirstName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="NVarChar(50)")>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me._LastName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmailAddress", DbType:="NVarChar(50)")>  _
	Public Property EmailAddress() As String
		Get
			Return Me._EmailAddress
		End Get
		Set
			If (String.Equals(Me._EmailAddress, value) = false) Then
				Me._EmailAddress = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", DbType:="NVarChar(50)")>  _
	Public Property City() As String
		Get
			Return Me._City
		End Get
		Set
			If (String.Equals(Me._City, value) = false) Then
				Me._City = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_State", DbType:="VarChar(MAX)")>  _
	Public Property State() As String
		Get
			Return Me._State
		End Get
		Set
			If (String.Equals(Me._State, value) = false) Then
				Me._State = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastLoginDate", DbType:="VarChar(23)")>  _
	Public Property LastLoginDate() As String
		Get
			Return Me._LastLoginDate
		End Get
		Set
			If (String.Equals(Me._LastLoginDate, value) = false) Then
				Me._LastLoginDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_labelText", DbType:="VarChar(101)")>  _
	Public Property labelText() As String
		Get
			Return Me._labelText
		End Get
		Set
			If (String.Equals(Me._labelText, value) = false) Then
				Me._labelText = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="Int")>  _
	Public Property marketID() As System.Nullable(Of Integer)
		Get
			Return Me._marketID
		End Get
		Set
			If (Me._marketID.Equals(value) = false) Then
				Me._marketID = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryViewActiveAmbassador_withMarkets")>  _
Partial Public Class qryViewActiveAmbassador_withMarket
	
	Private _ambassadorID As Integer
	
	Private _userID As String
	
	Private _userName As String
	
	Private _FirstName As String
	
	Private _LastName As String
	
	Private _EmailAddress As String
	
	Private _City As String
	
	Private _State As String
	
	Private _LastLoginDate As String
	
	Private _labelText As String
	
	Private _Markets As String
	
	Private _Positions As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ambassadorID", DbType:="Int NOT NULL")>  _
	Public Property ambassadorID() As Integer
		Get
			Return Me._ambassadorID
		End Get
		Set
			If ((Me._ambassadorID = value)  _
						= false) Then
				Me._ambassadorID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me._userID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userName", DbType:="NVarChar(50)")>  _
	Public Property userName() As String
		Get
			Return Me._userName
		End Get
		Set
			If (String.Equals(Me._userName, value) = false) Then
				Me._userName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="NVarChar(50)")>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me._FirstName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="NVarChar(50)")>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me._LastName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmailAddress", DbType:="NVarChar(50)")>  _
	Public Property EmailAddress() As String
		Get
			Return Me._EmailAddress
		End Get
		Set
			If (String.Equals(Me._EmailAddress, value) = false) Then
				Me._EmailAddress = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", DbType:="NVarChar(50)")>  _
	Public Property City() As String
		Get
			Return Me._City
		End Get
		Set
			If (String.Equals(Me._City, value) = false) Then
				Me._City = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_State", DbType:="VarChar(MAX)")>  _
	Public Property State() As String
		Get
			Return Me._State
		End Get
		Set
			If (String.Equals(Me._State, value) = false) Then
				Me._State = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastLoginDate", DbType:="NVarChar(100)")>  _
	Public Property LastLoginDate() As String
		Get
			Return Me._LastLoginDate
		End Get
		Set
			If (String.Equals(Me._LastLoginDate, value) = false) Then
				Me._LastLoginDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_labelText", DbType:="VarChar(101)")>  _
	Public Property labelText() As String
		Get
			Return Me._labelText
		End Get
		Set
			If (String.Equals(Me._labelText, value) = false) Then
				Me._labelText = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Markets", DbType:="VarChar(1000)")>  _
	Public Property Markets() As String
		Get
			Return Me._Markets
		End Get
		Set
			If (String.Equals(Me._Markets, value) = false) Then
				Me._Markets = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Positions", DbType:="VarChar(500)")>  _
	Public Property Positions() As String
		Get
			Return Me._Positions
		End Get
		Set
			If (String.Equals(Me._Positions, value) = false) Then
				Me._Positions = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryViewActivityTypeByClient")>  _
Partial Public Class qryViewActivityTypeByClient
	
	Private _activityTypeID As Integer
	
	Private _activityName As String
	
	Private _clientID As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_activityTypeID", DbType:="Int NOT NULL")>  _
	Public Property activityTypeID() As Integer
		Get
			Return Me._activityTypeID
		End Get
		Set
			If ((Me._activityTypeID = value)  _
						= false) Then
				Me._activityTypeID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_activityName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property activityName() As String
		Get
			Return Me._activityName
		End Get
		Set
			If (String.Equals(Me._activityName, value) = false) Then
				Me._activityName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", DbType:="Int NOT NULL")>  _
	Public Property clientID() As Integer
		Get
			Return Me._clientID
		End Get
		Set
			If ((Me._clientID = value)  _
						= false) Then
				Me._clientID = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryViewApprovedPayments")>  _
Partial Public Class qryViewApprovedPayment
	
	Private _RequirementID As Integer
	
	Private _locationID As System.Nullable(Of Integer)
	
	Private _accountID As Integer
	
	Private _accountName As String
	
	Private _eventID As Integer
	
	Private _supplierName As String
	
	Private _userID As String
	
	Private _userName As String
	
	Private _FullName As String
	
	Private _positionTitle As String
	
	Private _statusID As System.Nullable(Of Integer)
	
	Private _rate As System.Nullable(Of Decimal)
	
	Private _hours As System.Nullable(Of Integer)
	
	Private _labor As System.Nullable(Of Decimal)
	
	Private _paymentStatus As String
	
	Private _paymentID As System.Nullable(Of Integer)
	
	Private _clientID As System.Nullable(Of Integer)
	
	Private _bonus As System.Nullable(Of Decimal)
	
	Private _expenses As System.Nullable(Of Decimal)
	
	Private _Total As System.Nullable(Of Decimal)
	
	Private _paymentDate As System.Nullable(Of Date)
	
	Private _eventDate As System.Nullable(Of Date)
	
	Private _startTime As System.Nullable(Of Date)
	
	Private _endTime As System.Nullable(Of Date)
	
	Private _streetAddress1 As String
	
	Private _city As String
	
	Private _state As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RequirementID", DbType:="Int NOT NULL")>  _
	Public Property RequirementID() As Integer
		Get
			Return Me._RequirementID
		End Get
		Set
			If ((Me._RequirementID = value)  _
						= false) Then
				Me._RequirementID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_locationID", DbType:="Int")>  _
	Public Property locationID() As System.Nullable(Of Integer)
		Get
			Return Me._locationID
		End Get
		Set
			If (Me._locationID.Equals(value) = false) Then
				Me._locationID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="Int NOT NULL")>  _
	Public Property accountID() As Integer
		Get
			Return Me._accountID
		End Get
		Set
			If ((Me._accountID = value)  _
						= false) Then
				Me._accountID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountName", DbType:="VarChar(256)")>  _
	Public Property accountName() As String
		Get
			Return Me._accountName
		End Get
		Set
			If (String.Equals(Me._accountName, value) = false) Then
				Me._accountName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierName", DbType:="NVarChar(50)")>  _
	Public Property supplierName() As String
		Get
			Return Me._supplierName
		End Get
		Set
			If (String.Equals(Me._supplierName, value) = false) Then
				Me._supplierName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me._userID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userName", DbType:="NVarChar(50)")>  _
	Public Property userName() As String
		Get
			Return Me._userName
		End Get
		Set
			If (String.Equals(Me._userName, value) = false) Then
				Me._userName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FullName", DbType:="NVarChar(101)")>  _
	Public Property FullName() As String
		Get
			Return Me._FullName
		End Get
		Set
			If (String.Equals(Me._FullName, value) = false) Then
				Me._FullName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_positionTitle", DbType:="NVarChar(50)")>  _
	Public Property positionTitle() As String
		Get
			Return Me._positionTitle
		End Get
		Set
			If (String.Equals(Me._positionTitle, value) = false) Then
				Me._positionTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_statusID", DbType:="Int")>  _
	Public Property statusID() As System.Nullable(Of Integer)
		Get
			Return Me._statusID
		End Get
		Set
			If (Me._statusID.Equals(value) = false) Then
				Me._statusID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rate", DbType:="Decimal(18,2)")>  _
	Public Property rate() As System.Nullable(Of Decimal)
		Get
			Return Me._rate
		End Get
		Set
			If (Me._rate.Equals(value) = false) Then
				Me._rate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hours", DbType:="Int")>  _
	Public Property hours() As System.Nullable(Of Integer)
		Get
			Return Me._hours
		End Get
		Set
			If (Me._hours.Equals(value) = false) Then
				Me._hours = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_labor", DbType:="Decimal(29,2)")>  _
	Public Property labor() As System.Nullable(Of Decimal)
		Get
			Return Me._labor
		End Get
		Set
			If (Me._labor.Equals(value) = false) Then
				Me._labor = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentStatus", DbType:="VarChar(50)")>  _
	Public Property paymentStatus() As String
		Get
			Return Me._paymentStatus
		End Get
		Set
			If (String.Equals(Me._paymentStatus, value) = false) Then
				Me._paymentStatus = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentID", DbType:="Int")>  _
	Public Property paymentID() As System.Nullable(Of Integer)
		Get
			Return Me._paymentID
		End Get
		Set
			If (Me._paymentID.Equals(value) = false) Then
				Me._paymentID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", DbType:="Int")>  _
	Public Property clientID() As System.Nullable(Of Integer)
		Get
			Return Me._clientID
		End Get
		Set
			If (Me._clientID.Equals(value) = false) Then
				Me._clientID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bonus", DbType:="Money")>  _
	Public Property bonus() As System.Nullable(Of Decimal)
		Get
			Return Me._bonus
		End Get
		Set
			If (Me._bonus.Equals(value) = false) Then
				Me._bonus = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_expenses", DbType:="Money")>  _
	Public Property expenses() As System.Nullable(Of Decimal)
		Get
			Return Me._expenses
		End Get
		Set
			If (Me._expenses.Equals(value) = false) Then
				Me._expenses = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Total", DbType:="Decimal(32,4)")>  _
	Public Property Total() As System.Nullable(Of Decimal)
		Get
			Return Me._Total
		End Get
		Set
			If (Me._Total.Equals(value) = false) Then
				Me._Total = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentDate", DbType:="SmallDateTime")>  _
	Public Property paymentDate() As System.Nullable(Of Date)
		Get
			Return Me._paymentDate
		End Get
		Set
			If (Me._paymentDate.Equals(value) = false) Then
				Me._paymentDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventDate", DbType:="SmallDateTime")>  _
	Public Property eventDate() As System.Nullable(Of Date)
		Get
			Return Me._eventDate
		End Get
		Set
			If (Me._eventDate.Equals(value) = false) Then
				Me._eventDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_startTime", DbType:="SmallDateTime")>  _
	Public Property startTime() As System.Nullable(Of Date)
		Get
			Return Me._startTime
		End Get
		Set
			If (Me._startTime.Equals(value) = false) Then
				Me._startTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_endTime", DbType:="SmallDateTime")>  _
	Public Property endTime() As System.Nullable(Of Date)
		Get
			Return Me._endTime
		End Get
		Set
			If (Me._endTime.Equals(value) = false) Then
				Me._endTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_streetAddress1", DbType:="VarChar(256)")>  _
	Public Property streetAddress1() As String
		Get
			Return Me._streetAddress1
		End Get
		Set
			If (String.Equals(Me._streetAddress1, value) = false) Then
				Me._streetAddress1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_city", DbType:="VarChar(50)")>  _
	Public Property city() As String
		Get
			Return Me._city
		End Get
		Set
			If (String.Equals(Me._city, value) = false) Then
				Me._city = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_state", DbType:="NVarChar(20)")>  _
	Public Property state() As String
		Get
			Return Me._state
		End Get
		Set
			If (String.Equals(Me._state, value) = false) Then
				Me._state = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryViewUpcomingPayments")>  _
Partial Public Class qryViewUpcomingPayment
	
	Private _RequirementID As Integer
	
	Private _locationID As System.Nullable(Of Integer)
	
	Private _accountID As Integer
	
	Private _accountName As String
	
	Private _eventID As Integer
	
	Private _supplierName As String
	
	Private _userID As String
	
	Private _userName As String
	
	Private _FullName As String
	
	Private _positionTitle As String
	
	Private _statusID As System.Nullable(Of Integer)
	
	Private _rate As System.Nullable(Of Decimal)
	
	Private _hours As System.Nullable(Of Integer)
	
	Private _labor As System.Nullable(Of Decimal)
	
	Private _paymentStatus As String
	
	Private _paymentID As System.Nullable(Of Integer)
	
	Private _clientID As System.Nullable(Of Integer)
	
	Private _bonus As System.Nullable(Of Decimal)
	
	Private _expenses As System.Nullable(Of Decimal)
	
	Private _Total As System.Nullable(Of Decimal)
	
	Private _paymentDate As System.Nullable(Of Date)
	
	Private _eventDate As System.Nullable(Of Date)
	
	Private _startTime As System.Nullable(Of Date)
	
	Private _endTime As System.Nullable(Of Date)
	
	Private _streetAddress1 As String
	
	Private _city As String
	
	Private _state As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RequirementID", DbType:="Int NOT NULL")>  _
	Public Property RequirementID() As Integer
		Get
			Return Me._RequirementID
		End Get
		Set
			If ((Me._RequirementID = value)  _
						= false) Then
				Me._RequirementID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_locationID", DbType:="Int")>  _
	Public Property locationID() As System.Nullable(Of Integer)
		Get
			Return Me._locationID
		End Get
		Set
			If (Me._locationID.Equals(value) = false) Then
				Me._locationID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="Int NOT NULL")>  _
	Public Property accountID() As Integer
		Get
			Return Me._accountID
		End Get
		Set
			If ((Me._accountID = value)  _
						= false) Then
				Me._accountID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountName", DbType:="VarChar(256)")>  _
	Public Property accountName() As String
		Get
			Return Me._accountName
		End Get
		Set
			If (String.Equals(Me._accountName, value) = false) Then
				Me._accountName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierName", DbType:="NVarChar(50)")>  _
	Public Property supplierName() As String
		Get
			Return Me._supplierName
		End Get
		Set
			If (String.Equals(Me._supplierName, value) = false) Then
				Me._supplierName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me._userID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userName", DbType:="NVarChar(50)")>  _
	Public Property userName() As String
		Get
			Return Me._userName
		End Get
		Set
			If (String.Equals(Me._userName, value) = false) Then
				Me._userName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FullName", DbType:="NVarChar(101)")>  _
	Public Property FullName() As String
		Get
			Return Me._FullName
		End Get
		Set
			If (String.Equals(Me._FullName, value) = false) Then
				Me._FullName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_positionTitle", DbType:="NVarChar(50)")>  _
	Public Property positionTitle() As String
		Get
			Return Me._positionTitle
		End Get
		Set
			If (String.Equals(Me._positionTitle, value) = false) Then
				Me._positionTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_statusID", DbType:="Int")>  _
	Public Property statusID() As System.Nullable(Of Integer)
		Get
			Return Me._statusID
		End Get
		Set
			If (Me._statusID.Equals(value) = false) Then
				Me._statusID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rate", DbType:="Decimal(18,2)")>  _
	Public Property rate() As System.Nullable(Of Decimal)
		Get
			Return Me._rate
		End Get
		Set
			If (Me._rate.Equals(value) = false) Then
				Me._rate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hours", DbType:="Int")>  _
	Public Property hours() As System.Nullable(Of Integer)
		Get
			Return Me._hours
		End Get
		Set
			If (Me._hours.Equals(value) = false) Then
				Me._hours = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_labor", DbType:="Decimal(29,2)")>  _
	Public Property labor() As System.Nullable(Of Decimal)
		Get
			Return Me._labor
		End Get
		Set
			If (Me._labor.Equals(value) = false) Then
				Me._labor = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentStatus", DbType:="VarChar(50)")>  _
	Public Property paymentStatus() As String
		Get
			Return Me._paymentStatus
		End Get
		Set
			If (String.Equals(Me._paymentStatus, value) = false) Then
				Me._paymentStatus = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentID", DbType:="Int")>  _
	Public Property paymentID() As System.Nullable(Of Integer)
		Get
			Return Me._paymentID
		End Get
		Set
			If (Me._paymentID.Equals(value) = false) Then
				Me._paymentID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", DbType:="Int")>  _
	Public Property clientID() As System.Nullable(Of Integer)
		Get
			Return Me._clientID
		End Get
		Set
			If (Me._clientID.Equals(value) = false) Then
				Me._clientID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bonus", DbType:="Money")>  _
	Public Property bonus() As System.Nullable(Of Decimal)
		Get
			Return Me._bonus
		End Get
		Set
			If (Me._bonus.Equals(value) = false) Then
				Me._bonus = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_expenses", DbType:="Money")>  _
	Public Property expenses() As System.Nullable(Of Decimal)
		Get
			Return Me._expenses
		End Get
		Set
			If (Me._expenses.Equals(value) = false) Then
				Me._expenses = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Total", DbType:="Decimal(32,4)")>  _
	Public Property Total() As System.Nullable(Of Decimal)
		Get
			Return Me._Total
		End Get
		Set
			If (Me._Total.Equals(value) = false) Then
				Me._Total = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentDate", DbType:="SmallDateTime")>  _
	Public Property paymentDate() As System.Nullable(Of Date)
		Get
			Return Me._paymentDate
		End Get
		Set
			If (Me._paymentDate.Equals(value) = false) Then
				Me._paymentDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventDate", DbType:="SmallDateTime")>  _
	Public Property eventDate() As System.Nullable(Of Date)
		Get
			Return Me._eventDate
		End Get
		Set
			If (Me._eventDate.Equals(value) = false) Then
				Me._eventDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_startTime", DbType:="SmallDateTime")>  _
	Public Property startTime() As System.Nullable(Of Date)
		Get
			Return Me._startTime
		End Get
		Set
			If (Me._startTime.Equals(value) = false) Then
				Me._startTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_endTime", DbType:="SmallDateTime")>  _
	Public Property endTime() As System.Nullable(Of Date)
		Get
			Return Me._endTime
		End Get
		Set
			If (Me._endTime.Equals(value) = false) Then
				Me._endTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_streetAddress1", DbType:="VarChar(256)")>  _
	Public Property streetAddress1() As String
		Get
			Return Me._streetAddress1
		End Get
		Set
			If (String.Equals(Me._streetAddress1, value) = false) Then
				Me._streetAddress1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_city", DbType:="VarChar(50)")>  _
	Public Property city() As String
		Get
			Return Me._city
		End Get
		Set
			If (String.Equals(Me._city, value) = false) Then
				Me._city = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_state", DbType:="NVarChar(20)")>  _
	Public Property state() As String
		Get
			Return Me._state
		End Get
		Set
			If (String.Equals(Me._state, value) = false) Then
				Me._state = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.getBrandsbySupplier")>  _
Partial Public Class getBrandsbySupplier
	
	Private _supplierBrandID As Integer
	
	Private _brandID As Integer
	
	Private _supplierID As Integer
	
	Private _brandName As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierBrandID", DbType:="Int NOT NULL")>  _
	Public Property supplierBrandID() As Integer
		Get
			Return Me._supplierBrandID
		End Get
		Set
			If ((Me._supplierBrandID = value)  _
						= false) Then
				Me._supplierBrandID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandID", DbType:="Int NOT NULL")>  _
	Public Property brandID() As Integer
		Get
			Return Me._brandID
		End Get
		Set
			If ((Me._brandID = value)  _
						= false) Then
				Me._brandID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int NOT NULL")>  _
	Public Property supplierID() As Integer
		Get
			Return Me._supplierID
		End Get
		Set
			If ((Me._supplierID = value)  _
						= false) Then
				Me._supplierID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandName", DbType:="NVarChar(256)")>  _
	Public Property brandName() As String
		Get
			Return Me._brandName
		End Get
		Set
			If (String.Equals(Me._brandName, value) = false) Then
				Me._brandName = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryBrandsMissingCourse")>  _
Partial Public Class qryBrandsMissingCourse
	
	Private _brandID As System.Nullable(Of Integer)
	
	Private _brandName As String
	
	Private _courseGroupID As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandID", DbType:="Int")>  _
	Public Property brandID() As System.Nullable(Of Integer)
		Get
			Return Me._brandID
		End Get
		Set
			If (Me._brandID.Equals(value) = false) Then
				Me._brandID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandName", DbType:="NVarChar(256)")>  _
	Public Property brandName() As String
		Get
			Return Me._brandName
		End Get
		Set
			If (String.Equals(Me._brandName, value) = false) Then
				Me._brandName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_courseGroupID", DbType:="NVarChar(50)")>  _
	Public Property courseGroupID() As String
		Get
			Return Me._courseGroupID
		End Get
		Set
			If (String.Equals(Me._courseGroupID, value) = false) Then
				Me._courseGroupID = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.getBrandsForEvent")>  _
Partial Public Class getBrandsForEvent
	
	Private _eventID As System.Nullable(Of Integer)
	
	Private _brandID As System.Nullable(Of Integer)
	
	Private _brandName As String
	
	Private _eventDate As System.Nullable(Of Date)
	
	Private _clientID As System.Nullable(Of Integer)
	
	Private _courseID As String
	
	Private _supplierID As System.Nullable(Of Integer)
	
	Private _brandGroupID As System.Nullable(Of Integer)
	
	Private _CourseTitle As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int")>  _
	Public Property eventID() As System.Nullable(Of Integer)
		Get
			Return Me._eventID
		End Get
		Set
			If (Me._eventID.Equals(value) = false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandID", DbType:="Int")>  _
	Public Property brandID() As System.Nullable(Of Integer)
		Get
			Return Me._brandID
		End Get
		Set
			If (Me._brandID.Equals(value) = false) Then
				Me._brandID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandName", DbType:="NVarChar(256)")>  _
	Public Property brandName() As String
		Get
			Return Me._brandName
		End Get
		Set
			If (String.Equals(Me._brandName, value) = false) Then
				Me._brandName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventDate", DbType:="SmallDateTime")>  _
	Public Property eventDate() As System.Nullable(Of Date)
		Get
			Return Me._eventDate
		End Get
		Set
			If (Me._eventDate.Equals(value) = false) Then
				Me._eventDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", DbType:="Int")>  _
	Public Property clientID() As System.Nullable(Of Integer)
		Get
			Return Me._clientID
		End Get
		Set
			If (Me._clientID.Equals(value) = false) Then
				Me._clientID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_courseID", DbType:="NVarChar(50)")>  _
	Public Property courseID() As String
		Get
			Return Me._courseID
		End Get
		Set
			If (String.Equals(Me._courseID, value) = false) Then
				Me._courseID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int")>  _
	Public Property supplierID() As System.Nullable(Of Integer)
		Get
			Return Me._supplierID
		End Get
		Set
			If (Me._supplierID.Equals(value) = false) Then
				Me._supplierID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandGroupID", DbType:="Int")>  _
	Public Property brandGroupID() As System.Nullable(Of Integer)
		Get
			Return Me._brandGroupID
		End Get
		Set
			If (Me._brandGroupID.Equals(value) = false) Then
				Me._brandGroupID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CourseTitle", DbType:="NVarChar(MAX)")>  _
	Public Property CourseTitle() As String
		Get
			Return Me._CourseTitle
		End Get
		Set
			If (String.Equals(Me._CourseTitle, value) = false) Then
				Me._CourseTitle = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.getBrandsForEventByMarket")>  _
Partial Public Class getBrandsForEventByMarket
	
	Private _eventID As System.Nullable(Of Integer)
	
	Private _brandID As System.Nullable(Of Integer)
	
	Private _brandName As String
	
	Private _eventDate As System.Nullable(Of Date)
	
	Private _clientID As System.Nullable(Of Integer)
	
	Private _userID As String
	
	Private _supplierID As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int")>  _
	Public Property eventID() As System.Nullable(Of Integer)
		Get
			Return Me._eventID
		End Get
		Set
			If (Me._eventID.Equals(value) = false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandID", DbType:="Int")>  _
	Public Property brandID() As System.Nullable(Of Integer)
		Get
			Return Me._brandID
		End Get
		Set
			If (Me._brandID.Equals(value) = false) Then
				Me._brandID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandName", DbType:="NVarChar(256)")>  _
	Public Property brandName() As String
		Get
			Return Me._brandName
		End Get
		Set
			If (String.Equals(Me._brandName, value) = false) Then
				Me._brandName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventDate", DbType:="SmallDateTime")>  _
	Public Property eventDate() As System.Nullable(Of Date)
		Get
			Return Me._eventDate
		End Get
		Set
			If (Me._eventDate.Equals(value) = false) Then
				Me._eventDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", DbType:="Int")>  _
	Public Property clientID() As System.Nullable(Of Integer)
		Get
			Return Me._clientID
		End Get
		Set
			If (Me._clientID.Equals(value) = false) Then
				Me._clientID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me._userID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int")>  _
	Public Property supplierID() As System.Nullable(Of Integer)
		Get
			Return Me._supplierID
		End Get
		Set
			If (Me._supplierID.Equals(value) = false) Then
				Me._supplierID = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.getBrandTrainingGroupByEventID")>  _
Partial Public Class getBrandTrainingGroupByEventID
	
	Private _courseGroupID As String
	
	Private _eventID As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_courseGroupID", DbType:="NVarChar(50)")>  _
	Public Property courseGroupID() As String
		Get
			Return Me._courseGroupID
		End Get
		Set
			If (String.Equals(Me._courseGroupID, value) = false) Then
				Me._courseGroupID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int")>  _
	Public Property eventID() As System.Nullable(Of Integer)
		Get
			Return Me._eventID
		End Get
		Set
			If (Me._eventID.Equals(value) = false) Then
				Me._eventID = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.getCourseForEvent")>  _
Partial Public Class getCourseForEvent
	
	Private _courseGroupID As String
	
	Private _eventID As System.Nullable(Of Integer)
	
	Private _eventDate As System.Nullable(Of Date)
	
	Private _clientID As System.Nullable(Of Integer)
	
	Private _courseID As String
	
	Private _curriculum As String
	
	Private _id As System.Nullable(Of Integer)
	
	Private _brandGroupID As System.Nullable(Of Integer)
	
	Private _CourseTitle As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_courseGroupID", DbType:="NVarChar(50)")>  _
	Public Property courseGroupID() As String
		Get
			Return Me._courseGroupID
		End Get
		Set
			If (String.Equals(Me._courseGroupID, value) = false) Then
				Me._courseGroupID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int")>  _
	Public Property eventID() As System.Nullable(Of Integer)
		Get
			Return Me._eventID
		End Get
		Set
			If (Me._eventID.Equals(value) = false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventDate", DbType:="SmallDateTime")>  _
	Public Property eventDate() As System.Nullable(Of Date)
		Get
			Return Me._eventDate
		End Get
		Set
			If (Me._eventDate.Equals(value) = false) Then
				Me._eventDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", DbType:="Int")>  _
	Public Property clientID() As System.Nullable(Of Integer)
		Get
			Return Me._clientID
		End Get
		Set
			If (Me._clientID.Equals(value) = false) Then
				Me._clientID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_courseID", DbType:="NVarChar(50)")>  _
	Public Property courseID() As String
		Get
			Return Me._courseID
		End Get
		Set
			If (String.Equals(Me._courseID, value) = false) Then
				Me._courseID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_curriculum", DbType:="NVarChar(50)")>  _
	Public Property curriculum() As String
		Get
			Return Me._curriculum
		End Get
		Set
			If (String.Equals(Me._curriculum, value) = false) Then
				Me._curriculum = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", DbType:="Int")>  _
	Public Property id() As System.Nullable(Of Integer)
		Get
			Return Me._id
		End Get
		Set
			If (Me._id.Equals(value) = false) Then
				Me._id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandGroupID", DbType:="Int")>  _
	Public Property brandGroupID() As System.Nullable(Of Integer)
		Get
			Return Me._brandGroupID
		End Get
		Set
			If (Me._brandGroupID.Equals(value) = false) Then
				Me._brandGroupID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CourseTitle", DbType:="NVarChar(50)")>  _
	Public Property CourseTitle() As String
		Get
			Return Me._CourseTitle
		End Get
		Set
			If (String.Equals(Me._CourseTitle, value) = false) Then
				Me._CourseTitle = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.getDistinctBrandsInEvent")>  _
Partial Public Class getDistinctBrandsInEvent
	
	Private _brandID As System.Nullable(Of Integer)
	
	Private _eventBrandID As Integer
	
	Private _eventID As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandID", DbType:="Int")>  _
	Public Property brandID() As System.Nullable(Of Integer)
		Get
			Return Me._brandID
		End Get
		Set
			If (Me._brandID.Equals(value) = false) Then
				Me._brandID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventBrandID", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property eventBrandID() As Integer
		Get
			Return Me._eventBrandID
		End Get
		Set
			If ((Me._eventBrandID = value)  _
						= false) Then
				Me._eventBrandID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int")>  _
	Public Property eventID() As System.Nullable(Of Integer)
		Get
			Return Me._eventID
		End Get
		Set
			If (Me._eventID.Equals(value) = false) Then
				Me._eventID = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.getEventDetail")>  _
Partial Public Class getEventDetail
	
	Private _eventID As Integer
	
	Private _clientID As System.Nullable(Of Integer)
	
	Private _eventTitle As String
	
	Private _eventDate As System.Nullable(Of Date)
	
	Private _eventEndDate As System.Nullable(Of Date)
	
	Private _startTime As System.Nullable(Of Date)
	
	Private _endTime As System.Nullable(Of Date)
	
	Private _supplierID As System.Nullable(Of Integer)
	
	Private _eventTypeID As System.Nullable(Of Integer)
	
	Private _teamID As System.Nullable(Of Integer)
	
	Private _statusID As System.Nullable(Of Integer)
	
	Private _eventDescription As String
	
	Private _locationID As System.Nullable(Of Integer)
	
	Private _marketID As Integer
	
	Private _programName As String
	
	Private _billableEvent As System.Nullable(Of Boolean)
	
	Private _invoiced As System.Nullable(Of Boolean)
	
	Private _invoiceID As System.Nullable(Of Integer)
	
	Private _attire As String
	
	Private _posRequirements As String
	
	Private _samplingNotes As String
	
	Private _posShippingAddress As String
	
	Private _brandID As System.Nullable(Of Integer)
	
	Private _recapStatus As System.Nullable(Of Integer)
	
	Private _posShippingName As String
	
	Private _posShippingAddress1 As String
	
	Private _posShippingCity As String
	
	Private _posShippingState As String
	
	Private _posShippingZip As String
	
	Private _posShippingLatitude As System.Nullable(Of Double)
	
	Private _posShippingLongtitude As System.Nullable(Of Double)
	
	Private _posKitRequested As System.Nullable(Of Boolean)
	
	Private _posKitShippingNote As String
	
	Private _posShipTo As String
	
	Private _CreatedDate As System.Nullable(Of Date)
	
	Private _ModifiedDate As System.Nullable(Of Date)
	
	Private _CreatedBy As String
	
	Private _ModifiedBy As String
	
	Private _Modified As System.Nullable(Of Boolean)
	
	Private _AccountName As String
	
	Private _latitude As System.Nullable(Of Double)
	
	Private _longitude As System.Nullable(Of Double)
	
	Private _city As String
	
	Private _state As String
	
	Private _accountID As Integer
	
	Private _streetAddress1 As String
	
	Private _zipCode As String
	
	Private _marketName As String
	
	Private _supplierName As String
	
	Private _eventTypeName As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", DbType:="Int")>  _
	Public Property clientID() As System.Nullable(Of Integer)
		Get
			Return Me._clientID
		End Get
		Set
			If (Me._clientID.Equals(value) = false) Then
				Me._clientID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTitle", DbType:="VarChar(1000)")>  _
	Public Property eventTitle() As String
		Get
			Return Me._eventTitle
		End Get
		Set
			If (String.Equals(Me._eventTitle, value) = false) Then
				Me._eventTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventDate", DbType:="SmallDateTime")>  _
	Public Property eventDate() As System.Nullable(Of Date)
		Get
			Return Me._eventDate
		End Get
		Set
			If (Me._eventDate.Equals(value) = false) Then
				Me._eventDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventEndDate", DbType:="SmallDateTime")>  _
	Public Property eventEndDate() As System.Nullable(Of Date)
		Get
			Return Me._eventEndDate
		End Get
		Set
			If (Me._eventEndDate.Equals(value) = false) Then
				Me._eventEndDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_startTime", DbType:="SmallDateTime")>  _
	Public Property startTime() As System.Nullable(Of Date)
		Get
			Return Me._startTime
		End Get
		Set
			If (Me._startTime.Equals(value) = false) Then
				Me._startTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_endTime", DbType:="SmallDateTime")>  _
	Public Property endTime() As System.Nullable(Of Date)
		Get
			Return Me._endTime
		End Get
		Set
			If (Me._endTime.Equals(value) = false) Then
				Me._endTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int")>  _
	Public Property supplierID() As System.Nullable(Of Integer)
		Get
			Return Me._supplierID
		End Get
		Set
			If (Me._supplierID.Equals(value) = false) Then
				Me._supplierID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTypeID", DbType:="Int")>  _
	Public Property eventTypeID() As System.Nullable(Of Integer)
		Get
			Return Me._eventTypeID
		End Get
		Set
			If (Me._eventTypeID.Equals(value) = false) Then
				Me._eventTypeID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_teamID", DbType:="Int")>  _
	Public Property teamID() As System.Nullable(Of Integer)
		Get
			Return Me._teamID
		End Get
		Set
			If (Me._teamID.Equals(value) = false) Then
				Me._teamID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_statusID", DbType:="Int")>  _
	Public Property statusID() As System.Nullable(Of Integer)
		Get
			Return Me._statusID
		End Get
		Set
			If (Me._statusID.Equals(value) = false) Then
				Me._statusID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventDescription", DbType:="NVarChar(MAX)")>  _
	Public Property eventDescription() As String
		Get
			Return Me._eventDescription
		End Get
		Set
			If (String.Equals(Me._eventDescription, value) = false) Then
				Me._eventDescription = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_locationID", DbType:="Int")>  _
	Public Property locationID() As System.Nullable(Of Integer)
		Get
			Return Me._locationID
		End Get
		Set
			If (Me._locationID.Equals(value) = false) Then
				Me._locationID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="Int NOT NULL")>  _
	Public Property marketID() As Integer
		Get
			Return Me._marketID
		End Get
		Set
			If ((Me._marketID = value)  _
						= false) Then
				Me._marketID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_programName", DbType:="NVarChar(256)")>  _
	Public Property programName() As String
		Get
			Return Me._programName
		End Get
		Set
			If (String.Equals(Me._programName, value) = false) Then
				Me._programName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_billableEvent", DbType:="Bit")>  _
	Public Property billableEvent() As System.Nullable(Of Boolean)
		Get
			Return Me._billableEvent
		End Get
		Set
			If (Me._billableEvent.Equals(value) = false) Then
				Me._billableEvent = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_invoiced", DbType:="Bit")>  _
	Public Property invoiced() As System.Nullable(Of Boolean)
		Get
			Return Me._invoiced
		End Get
		Set
			If (Me._invoiced.Equals(value) = false) Then
				Me._invoiced = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_invoiceID", DbType:="Int")>  _
	Public Property invoiceID() As System.Nullable(Of Integer)
		Get
			Return Me._invoiceID
		End Get
		Set
			If (Me._invoiceID.Equals(value) = false) Then
				Me._invoiceID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_attire", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property attire() As String
		Get
			Return Me._attire
		End Get
		Set
			If (String.Equals(Me._attire, value) = false) Then
				Me._attire = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_posRequirements", DbType:="NVarChar(MAX)")>  _
	Public Property posRequirements() As String
		Get
			Return Me._posRequirements
		End Get
		Set
			If (String.Equals(Me._posRequirements, value) = false) Then
				Me._posRequirements = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_samplingNotes", DbType:="NVarChar(MAX)")>  _
	Public Property samplingNotes() As String
		Get
			Return Me._samplingNotes
		End Get
		Set
			If (String.Equals(Me._samplingNotes, value) = false) Then
				Me._samplingNotes = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_posShippingAddress", DbType:="NVarChar(MAX)")>  _
	Public Property posShippingAddress() As String
		Get
			Return Me._posShippingAddress
		End Get
		Set
			If (String.Equals(Me._posShippingAddress, value) = false) Then
				Me._posShippingAddress = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandID", DbType:="Int")>  _
	Public Property brandID() As System.Nullable(Of Integer)
		Get
			Return Me._brandID
		End Get
		Set
			If (Me._brandID.Equals(value) = false) Then
				Me._brandID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_recapStatus", DbType:="Int")>  _
	Public Property recapStatus() As System.Nullable(Of Integer)
		Get
			Return Me._recapStatus
		End Get
		Set
			If (Me._recapStatus.Equals(value) = false) Then
				Me._recapStatus = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_posShippingName", DbType:="NVarChar(50)")>  _
	Public Property posShippingName() As String
		Get
			Return Me._posShippingName
		End Get
		Set
			If (String.Equals(Me._posShippingName, value) = false) Then
				Me._posShippingName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_posShippingAddress1", DbType:="NVarChar(50)")>  _
	Public Property posShippingAddress1() As String
		Get
			Return Me._posShippingAddress1
		End Get
		Set
			If (String.Equals(Me._posShippingAddress1, value) = false) Then
				Me._posShippingAddress1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_posShippingCity", DbType:="NVarChar(50)")>  _
	Public Property posShippingCity() As String
		Get
			Return Me._posShippingCity
		End Get
		Set
			If (String.Equals(Me._posShippingCity, value) = false) Then
				Me._posShippingCity = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_posShippingState", DbType:="NVarChar(50)")>  _
	Public Property posShippingState() As String
		Get
			Return Me._posShippingState
		End Get
		Set
			If (String.Equals(Me._posShippingState, value) = false) Then
				Me._posShippingState = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_posShippingZip", DbType:="NVarChar(50)")>  _
	Public Property posShippingZip() As String
		Get
			Return Me._posShippingZip
		End Get
		Set
			If (String.Equals(Me._posShippingZip, value) = false) Then
				Me._posShippingZip = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_posShippingLatitude", DbType:="Float")>  _
	Public Property posShippingLatitude() As System.Nullable(Of Double)
		Get
			Return Me._posShippingLatitude
		End Get
		Set
			If (Me._posShippingLatitude.Equals(value) = false) Then
				Me._posShippingLatitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_posShippingLongtitude", DbType:="Float")>  _
	Public Property posShippingLongtitude() As System.Nullable(Of Double)
		Get
			Return Me._posShippingLongtitude
		End Get
		Set
			If (Me._posShippingLongtitude.Equals(value) = false) Then
				Me._posShippingLongtitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_posKitRequested", DbType:="Bit")>  _
	Public Property posKitRequested() As System.Nullable(Of Boolean)
		Get
			Return Me._posKitRequested
		End Get
		Set
			If (Me._posKitRequested.Equals(value) = false) Then
				Me._posKitRequested = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_posKitShippingNote", DbType:="NVarChar(MAX)")>  _
	Public Property posKitShippingNote() As String
		Get
			Return Me._posKitShippingNote
		End Get
		Set
			If (String.Equals(Me._posKitShippingNote, value) = false) Then
				Me._posKitShippingNote = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_posShipTo", DbType:="NVarChar(50)")>  _
	Public Property posShipTo() As String
		Get
			Return Me._posShipTo
		End Get
		Set
			If (String.Equals(Me._posShipTo, value) = false) Then
				Me._posShipTo = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedDate", DbType:="SmallDateTime")>  _
	Public Property CreatedDate() As System.Nullable(Of Date)
		Get
			Return Me._CreatedDate
		End Get
		Set
			If (Me._CreatedDate.Equals(value) = false) Then
				Me._CreatedDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDate", DbType:="SmallDateTime")>  _
	Public Property ModifiedDate() As System.Nullable(Of Date)
		Get
			Return Me._ModifiedDate
		End Get
		Set
			If (Me._ModifiedDate.Equals(value) = false) Then
				Me._ModifiedDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="NVarChar(50)")>  _
	Public Property CreatedBy() As String
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (String.Equals(Me._CreatedBy, value) = false) Then
				Me._CreatedBy = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedBy", DbType:="NVarChar(50)")>  _
	Public Property ModifiedBy() As String
		Get
			Return Me._ModifiedBy
		End Get
		Set
			If (String.Equals(Me._ModifiedBy, value) = false) Then
				Me._ModifiedBy = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Modified", DbType:="Bit")>  _
	Public Property Modified() As System.Nullable(Of Boolean)
		Get
			Return Me._Modified
		End Get
		Set
			If (Me._Modified.Equals(value) = false) Then
				Me._Modified = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountName", DbType:="VarChar(256)")>  _
	Public Property AccountName() As String
		Get
			Return Me._AccountName
		End Get
		Set
			If (String.Equals(Me._AccountName, value) = false) Then
				Me._AccountName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_latitude", DbType:="Float")>  _
	Public Property latitude() As System.Nullable(Of Double)
		Get
			Return Me._latitude
		End Get
		Set
			If (Me._latitude.Equals(value) = false) Then
				Me._latitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_longitude", DbType:="Float")>  _
	Public Property longitude() As System.Nullable(Of Double)
		Get
			Return Me._longitude
		End Get
		Set
			If (Me._longitude.Equals(value) = false) Then
				Me._longitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_city", DbType:="VarChar(50)")>  _
	Public Property city() As String
		Get
			Return Me._city
		End Get
		Set
			If (String.Equals(Me._city, value) = false) Then
				Me._city = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_state", DbType:="NVarChar(20)")>  _
	Public Property state() As String
		Get
			Return Me._state
		End Get
		Set
			If (String.Equals(Me._state, value) = false) Then
				Me._state = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="Int NOT NULL")>  _
	Public Property accountID() As Integer
		Get
			Return Me._accountID
		End Get
		Set
			If ((Me._accountID = value)  _
						= false) Then
				Me._accountID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_streetAddress1", DbType:="VarChar(256)")>  _
	Public Property streetAddress1() As String
		Get
			Return Me._streetAddress1
		End Get
		Set
			If (String.Equals(Me._streetAddress1, value) = false) Then
				Me._streetAddress1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_zipCode", DbType:="VarChar(10)")>  _
	Public Property zipCode() As String
		Get
			Return Me._zipCode
		End Get
		Set
			If (String.Equals(Me._zipCode, value) = false) Then
				Me._zipCode = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketName", DbType:="VarChar(50)")>  _
	Public Property marketName() As String
		Get
			Return Me._marketName
		End Get
		Set
			If (String.Equals(Me._marketName, value) = false) Then
				Me._marketName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierName", DbType:="NVarChar(50)")>  _
	Public Property supplierName() As String
		Get
			Return Me._supplierName
		End Get
		Set
			If (String.Equals(Me._supplierName, value) = false) Then
				Me._supplierName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTypeName", DbType:="NVarChar(50)")>  _
	Public Property eventTypeName() As String
		Get
			Return Me._eventTypeName
		End Get
		Set
			If (String.Equals(Me._eventTypeName, value) = false) Then
				Me._eventTypeName = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.getEventDetailReport")>  _
Partial Public Class getEventDetailReport
	
	Private _eventID As Integer
	
	Private _eventTitle As String
	
	Private _EventDate As String
	
	Private _StartTime As String
	
	Private _EndTime As String
	
	Private _supplierID As System.Nullable(Of Integer)
	
	Private _supplierName As String
	
	Private _marketID As System.Nullable(Of Integer)
	
	Private _marketName As String
	
	Private _purchaseOrderNumber As String
	
	Private _distributer As String
	
	Private _requestedBy As String
	
	Private _accountName As String
	
	Private _streetAddress1 As String
	
	Private _city As String
	
	Private _state As String
	
	Private _zipCode As String
	
	Private _statusID As System.Nullable(Of Integer)
	
	Private _eventTypeID As System.Nullable(Of Integer)
	
	Private _accountID As Integer
	
	Private _statusName As String
	
	Private _BrandName As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTitle", DbType:="VarChar(1000)")>  _
	Public Property eventTitle() As String
		Get
			Return Me._eventTitle
		End Get
		Set
			If (String.Equals(Me._eventTitle, value) = false) Then
				Me._eventTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EventDate", DbType:="VarChar(30)")>  _
	Public Property EventDate() As String
		Get
			Return Me._EventDate
		End Get
		Set
			If (String.Equals(Me._EventDate, value) = false) Then
				Me._EventDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartTime", DbType:="VarChar(7)")>  _
	Public Property StartTime() As String
		Get
			Return Me._StartTime
		End Get
		Set
			If (String.Equals(Me._StartTime, value) = false) Then
				Me._StartTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndTime", DbType:="VarChar(7)")>  _
	Public Property EndTime() As String
		Get
			Return Me._EndTime
		End Get
		Set
			If (String.Equals(Me._EndTime, value) = false) Then
				Me._EndTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int")>  _
	Public Property supplierID() As System.Nullable(Of Integer)
		Get
			Return Me._supplierID
		End Get
		Set
			If (Me._supplierID.Equals(value) = false) Then
				Me._supplierID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierName", DbType:="NVarChar(50)")>  _
	Public Property supplierName() As String
		Get
			Return Me._supplierName
		End Get
		Set
			If (String.Equals(Me._supplierName, value) = false) Then
				Me._supplierName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="Int")>  _
	Public Property marketID() As System.Nullable(Of Integer)
		Get
			Return Me._marketID
		End Get
		Set
			If (Me._marketID.Equals(value) = false) Then
				Me._marketID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketName", DbType:="VarChar(50)")>  _
	Public Property marketName() As String
		Get
			Return Me._marketName
		End Get
		Set
			If (String.Equals(Me._marketName, value) = false) Then
				Me._marketName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_purchaseOrderNumber", DbType:="NVarChar(20)")>  _
	Public Property purchaseOrderNumber() As String
		Get
			Return Me._purchaseOrderNumber
		End Get
		Set
			If (String.Equals(Me._purchaseOrderNumber, value) = false) Then
				Me._purchaseOrderNumber = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_distributer", DbType:="NVarChar(75)")>  _
	Public Property distributer() As String
		Get
			Return Me._distributer
		End Get
		Set
			If (String.Equals(Me._distributer, value) = false) Then
				Me._distributer = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_requestedBy", DbType:="NVarChar(50)")>  _
	Public Property requestedBy() As String
		Get
			Return Me._requestedBy
		End Get
		Set
			If (String.Equals(Me._requestedBy, value) = false) Then
				Me._requestedBy = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountName", DbType:="VarChar(256)")>  _
	Public Property accountName() As String
		Get
			Return Me._accountName
		End Get
		Set
			If (String.Equals(Me._accountName, value) = false) Then
				Me._accountName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_streetAddress1", DbType:="VarChar(256)")>  _
	Public Property streetAddress1() As String
		Get
			Return Me._streetAddress1
		End Get
		Set
			If (String.Equals(Me._streetAddress1, value) = false) Then
				Me._streetAddress1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_city", DbType:="VarChar(50)")>  _
	Public Property city() As String
		Get
			Return Me._city
		End Get
		Set
			If (String.Equals(Me._city, value) = false) Then
				Me._city = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_state", DbType:="NVarChar(20)")>  _
	Public Property state() As String
		Get
			Return Me._state
		End Get
		Set
			If (String.Equals(Me._state, value) = false) Then
				Me._state = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_zipCode", DbType:="VarChar(10)")>  _
	Public Property zipCode() As String
		Get
			Return Me._zipCode
		End Get
		Set
			If (String.Equals(Me._zipCode, value) = false) Then
				Me._zipCode = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_statusID", DbType:="Int")>  _
	Public Property statusID() As System.Nullable(Of Integer)
		Get
			Return Me._statusID
		End Get
		Set
			If (Me._statusID.Equals(value) = false) Then
				Me._statusID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTypeID", DbType:="Int")>  _
	Public Property eventTypeID() As System.Nullable(Of Integer)
		Get
			Return Me._eventTypeID
		End Get
		Set
			If (Me._eventTypeID.Equals(value) = false) Then
				Me._eventTypeID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="Int NOT NULL")>  _
	Public Property accountID() As Integer
		Get
			Return Me._accountID
		End Get
		Set
			If ((Me._accountID = value)  _
						= false) Then
				Me._accountID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_statusName", DbType:="NVarChar(50)")>  _
	Public Property statusName() As String
		Get
			Return Me._statusName
		End Get
		Set
			If (String.Equals(Me._statusName, value) = false) Then
				Me._statusName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BrandName", DbType:="VarChar(MAX)")>  _
	Public Property BrandName() As String
		Get
			Return Me._BrandName
		End Get
		Set
			If (String.Equals(Me._BrandName, value) = false) Then
				Me._BrandName = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.getEventDetailReportByBrand")>  _
Partial Public Class getEventDetailReportByBrand
	
	Private _eventID As Integer
	
	Private _eventTitle As String
	
	Private _EventDate As String
	
	Private _StartTime As String
	
	Private _EndTime As String
	
	Private _brandID As System.Nullable(Of Integer)
	
	Private _brandName As String
	
	Private _supplierID As System.Nullable(Of Integer)
	
	Private _supplierName As String
	
	Private _marketID As System.Nullable(Of Integer)
	
	Private _marketName As String
	
	Private _accountName As String
	
	Private _streetAddress1 As String
	
	Private _city As String
	
	Private _state As String
	
	Private _zipCode As String
	
	Private _statusID As System.Nullable(Of Integer)
	
	Private _eventTypeID As System.Nullable(Of Integer)
	
	Private _accountID As Integer
	
	Private _statusName As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTitle", DbType:="VarChar(1000)")>  _
	Public Property eventTitle() As String
		Get
			Return Me._eventTitle
		End Get
		Set
			If (String.Equals(Me._eventTitle, value) = false) Then
				Me._eventTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EventDate", DbType:="VarChar(30)")>  _
	Public Property EventDate() As String
		Get
			Return Me._EventDate
		End Get
		Set
			If (String.Equals(Me._EventDate, value) = false) Then
				Me._EventDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartTime", DbType:="VarChar(7)")>  _
	Public Property StartTime() As String
		Get
			Return Me._StartTime
		End Get
		Set
			If (String.Equals(Me._StartTime, value) = false) Then
				Me._StartTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndTime", DbType:="VarChar(7)")>  _
	Public Property EndTime() As String
		Get
			Return Me._EndTime
		End Get
		Set
			If (String.Equals(Me._EndTime, value) = false) Then
				Me._EndTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandID", DbType:="Int")>  _
	Public Property brandID() As System.Nullable(Of Integer)
		Get
			Return Me._brandID
		End Get
		Set
			If (Me._brandID.Equals(value) = false) Then
				Me._brandID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandName", DbType:="NVarChar(256)")>  _
	Public Property brandName() As String
		Get
			Return Me._brandName
		End Get
		Set
			If (String.Equals(Me._brandName, value) = false) Then
				Me._brandName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int")>  _
	Public Property supplierID() As System.Nullable(Of Integer)
		Get
			Return Me._supplierID
		End Get
		Set
			If (Me._supplierID.Equals(value) = false) Then
				Me._supplierID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierName", DbType:="NVarChar(50)")>  _
	Public Property supplierName() As String
		Get
			Return Me._supplierName
		End Get
		Set
			If (String.Equals(Me._supplierName, value) = false) Then
				Me._supplierName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="Int")>  _
	Public Property marketID() As System.Nullable(Of Integer)
		Get
			Return Me._marketID
		End Get
		Set
			If (Me._marketID.Equals(value) = false) Then
				Me._marketID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketName", DbType:="VarChar(50)")>  _
	Public Property marketName() As String
		Get
			Return Me._marketName
		End Get
		Set
			If (String.Equals(Me._marketName, value) = false) Then
				Me._marketName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountName", DbType:="VarChar(256)")>  _
	Public Property accountName() As String
		Get
			Return Me._accountName
		End Get
		Set
			If (String.Equals(Me._accountName, value) = false) Then
				Me._accountName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_streetAddress1", DbType:="VarChar(256)")>  _
	Public Property streetAddress1() As String
		Get
			Return Me._streetAddress1
		End Get
		Set
			If (String.Equals(Me._streetAddress1, value) = false) Then
				Me._streetAddress1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_city", DbType:="VarChar(50)")>  _
	Public Property city() As String
		Get
			Return Me._city
		End Get
		Set
			If (String.Equals(Me._city, value) = false) Then
				Me._city = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_state", DbType:="NVarChar(20)")>  _
	Public Property state() As String
		Get
			Return Me._state
		End Get
		Set
			If (String.Equals(Me._state, value) = false) Then
				Me._state = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_zipCode", DbType:="VarChar(10)")>  _
	Public Property zipCode() As String
		Get
			Return Me._zipCode
		End Get
		Set
			If (String.Equals(Me._zipCode, value) = false) Then
				Me._zipCode = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_statusID", DbType:="Int")>  _
	Public Property statusID() As System.Nullable(Of Integer)
		Get
			Return Me._statusID
		End Get
		Set
			If (Me._statusID.Equals(value) = false) Then
				Me._statusID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTypeID", DbType:="Int")>  _
	Public Property eventTypeID() As System.Nullable(Of Integer)
		Get
			Return Me._eventTypeID
		End Get
		Set
			If (Me._eventTypeID.Equals(value) = false) Then
				Me._eventTypeID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="Int NOT NULL")>  _
	Public Property accountID() As Integer
		Get
			Return Me._accountID
		End Get
		Set
			If ((Me._accountID = value)  _
						= false) Then
				Me._accountID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_statusName", DbType:="NVarChar(50)")>  _
	Public Property statusName() As String
		Get
			Return Me._statusName
		End Get
		Set
			If (String.Equals(Me._statusName, value) = false) Then
				Me._statusName = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.getEventsByState")>  _
Partial Public Class getEventsByState
	
	Private _eventID As Integer
	
	Private _eventTitle As String
	
	Private _eventDate As System.Nullable(Of Date)
	
	Private _state As String
	
	Private _clientID As System.Nullable(Of Integer)
	
	Private _supplierID As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTitle", DbType:="VarChar(1000)")>  _
	Public Property eventTitle() As String
		Get
			Return Me._eventTitle
		End Get
		Set
			If (String.Equals(Me._eventTitle, value) = false) Then
				Me._eventTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventDate", DbType:="SmallDateTime")>  _
	Public Property eventDate() As System.Nullable(Of Date)
		Get
			Return Me._eventDate
		End Get
		Set
			If (Me._eventDate.Equals(value) = false) Then
				Me._eventDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_state", DbType:="NVarChar(20)")>  _
	Public Property state() As String
		Get
			Return Me._state
		End Get
		Set
			If (String.Equals(Me._state, value) = false) Then
				Me._state = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", DbType:="Int")>  _
	Public Property clientID() As System.Nullable(Of Integer)
		Get
			Return Me._clientID
		End Get
		Set
			If (Me._clientID.Equals(value) = false) Then
				Me._clientID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int")>  _
	Public Property supplierID() As System.Nullable(Of Integer)
		Get
			Return Me._supplierID
		End Get
		Set
			If (Me._supplierID.Equals(value) = false) Then
				Me._supplierID = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.getEventsByStatebyMarkets")>  _
Partial Public Class getEventsByStatebyMarket
	
	Private _eventID As Integer
	
	Private _eventTitle As String
	
	Private _eventDate As System.Nullable(Of Date)
	
	Private _state As String
	
	Private _userID As String
	
	Private _clientID As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTitle", DbType:="VarChar(1000)")>  _
	Public Property eventTitle() As String
		Get
			Return Me._eventTitle
		End Get
		Set
			If (String.Equals(Me._eventTitle, value) = false) Then
				Me._eventTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventDate", DbType:="SmallDateTime")>  _
	Public Property eventDate() As System.Nullable(Of Date)
		Get
			Return Me._eventDate
		End Get
		Set
			If (Me._eventDate.Equals(value) = false) Then
				Me._eventDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_state", DbType:="NVarChar(20)")>  _
	Public Property state() As String
		Get
			Return Me._state
		End Get
		Set
			If (String.Equals(Me._state, value) = false) Then
				Me._state = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me._userID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", DbType:="Int")>  _
	Public Property clientID() As System.Nullable(Of Integer)
		Get
			Return Me._clientID
		End Get
		Set
			If (Me._clientID.Equals(value) = false) Then
				Me._clientID = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.getEventsByStateByUserID")>  _
Partial Public Class getEventsByStateByUserID
	
	Private _eventID As Integer
	
	Private _eventTitle As String
	
	Private _eventDate As System.Nullable(Of Date)
	
	Private _state As String
	
	Private _clientID As System.Nullable(Of Integer)
	
	Private _supplierID As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTitle", DbType:="VarChar(1000)")>  _
	Public Property eventTitle() As String
		Get
			Return Me._eventTitle
		End Get
		Set
			If (String.Equals(Me._eventTitle, value) = false) Then
				Me._eventTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventDate", DbType:="SmallDateTime")>  _
	Public Property eventDate() As System.Nullable(Of Date)
		Get
			Return Me._eventDate
		End Get
		Set
			If (Me._eventDate.Equals(value) = false) Then
				Me._eventDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_state", DbType:="NVarChar(20)")>  _
	Public Property state() As String
		Get
			Return Me._state
		End Get
		Set
			If (String.Equals(Me._state, value) = false) Then
				Me._state = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", DbType:="Int")>  _
	Public Property clientID() As System.Nullable(Of Integer)
		Get
			Return Me._clientID
		End Get
		Set
			If (Me._clientID.Equals(value) = false) Then
				Me._clientID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int")>  _
	Public Property supplierID() As System.Nullable(Of Integer)
		Get
			Return Me._supplierID
		End Get
		Set
			If (Me._supplierID.Equals(value) = false) Then
				Me._supplierID = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.getPaidPayments")>  _
Partial Public Class getPaidPayment
	
	Private _UserName As String
	
	Private _userID As String
	
	Private _FullName As String
	
	Private _Hours As System.Nullable(Of Double)
	
	Private _Labor As System.Nullable(Of Double)
	
	Private _Expenses As System.Nullable(Of Decimal)
	
	Private _Bonus As System.Nullable(Of Decimal)
	
	Private _Total As System.Nullable(Of Double)
	
	Private _paymentID As System.Nullable(Of Integer)
	
	Private _clientID As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="NVarChar(50)")>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me._UserName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me._userID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FullName", DbType:="NVarChar(101)")>  _
	Public Property FullName() As String
		Get
			Return Me._FullName
		End Get
		Set
			If (String.Equals(Me._FullName, value) = false) Then
				Me._FullName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Hours", DbType:="Float")>  _
	Public Property Hours() As System.Nullable(Of Double)
		Get
			Return Me._Hours
		End Get
		Set
			If (Me._Hours.Equals(value) = false) Then
				Me._Hours = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Labor", DbType:="Float")>  _
	Public Property Labor() As System.Nullable(Of Double)
		Get
			Return Me._Labor
		End Get
		Set
			If (Me._Labor.Equals(value) = false) Then
				Me._Labor = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Expenses", DbType:="Money")>  _
	Public Property Expenses() As System.Nullable(Of Decimal)
		Get
			Return Me._Expenses
		End Get
		Set
			If (Me._Expenses.Equals(value) = false) Then
				Me._Expenses = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Bonus", DbType:="Money")>  _
	Public Property Bonus() As System.Nullable(Of Decimal)
		Get
			Return Me._Bonus
		End Get
		Set
			If (Me._Bonus.Equals(value) = false) Then
				Me._Bonus = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Total", DbType:="Float")>  _
	Public Property Total() As System.Nullable(Of Double)
		Get
			Return Me._Total
		End Get
		Set
			If (Me._Total.Equals(value) = false) Then
				Me._Total = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentID", DbType:="Int")>  _
	Public Property paymentID() As System.Nullable(Of Integer)
		Get
			Return Me._paymentID
		End Get
		Set
			If (Me._paymentID.Equals(value) = false) Then
				Me._paymentID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", DbType:="Int")>  _
	Public Property clientID() As System.Nullable(Of Integer)
		Get
			Return Me._clientID
		End Get
		Set
			If (Me._clientID.Equals(value) = false) Then
				Me._clientID = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.getPaidPaymentsByPaymentID_toProcessCSV")>  _
Partial Public Class getPaidPaymentsByPaymentID_toProcessCSV
	
	Private _work_type_name As String
	
	Private _quantity As System.Nullable(Of Decimal)
	
	Private _display_name As String
	
	Private _external_worker_id As String
	
	Private _email As String
	
	Private _date As System.Nullable(Of Date)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_work_type_name", DbType:="VarChar(8) NOT NULL", CanBeNull:=false)>  _
	Public Property work_type_name() As String
		Get
			Return Me._work_type_name
		End Get
		Set
			If (String.Equals(Me._work_type_name, value) = false) Then
				Me._work_type_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_quantity", DbType:="Decimal(38,4)")>  _
	Public Property quantity() As System.Nullable(Of Decimal)
		Get
			Return Me._quantity
		End Get
		Set
			If (Me._quantity.Equals(value) = false) Then
				Me._quantity = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_display_name", DbType:="NVarChar(101)")>  _
	Public Property display_name() As String
		Get
			Return Me._display_name
		End Get
		Set
			If (String.Equals(Me._display_name, value) = false) Then
				Me._display_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_external_worker_id", DbType:="NVarChar(50)")>  _
	Public Property external_worker_id() As String
		Get
			Return Me._external_worker_id
		End Get
		Set
			If (String.Equals(Me._external_worker_id, value) = false) Then
				Me._external_worker_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_email", DbType:="NVarChar(50)")>  _
	Public Property email() As String
		Get
			Return Me._email
		End Get
		Set
			If (String.Equals(Me._email, value) = false) Then
				Me._email = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="date", Storage:="_date", DbType:="SmallDateTime")>  _
	Public Property [date]() As System.Nullable(Of Date)
		Get
			Return Me._date
		End Get
		Set
			If (Me._date.Equals(value) = false) Then
				Me._date = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.getPOSKitItem")>  _
Partial Public Class getPOSKitItem
	
	Private _PosKitItemID As Integer
	
	Private _kitID As System.Nullable(Of Integer)
	
	Private _itemID As System.Nullable(Of Integer)
	
	Private _itemName As String
	
	Private _qty As System.Nullable(Of Integer)
	
	Private _price As System.Nullable(Of Decimal)
	
	Private _Total As System.Nullable(Of Decimal)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PosKitItemID", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property PosKitItemID() As Integer
		Get
			Return Me._PosKitItemID
		End Get
		Set
			If ((Me._PosKitItemID = value)  _
						= false) Then
				Me._PosKitItemID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_kitID", DbType:="Int")>  _
	Public Property kitID() As System.Nullable(Of Integer)
		Get
			Return Me._kitID
		End Get
		Set
			If (Me._kitID.Equals(value) = false) Then
				Me._kitID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_itemID", DbType:="Int")>  _
	Public Property itemID() As System.Nullable(Of Integer)
		Get
			Return Me._itemID
		End Get
		Set
			If (Me._itemID.Equals(value) = false) Then
				Me._itemID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_itemName", DbType:="NVarChar(150)")>  _
	Public Property itemName() As String
		Get
			Return Me._itemName
		End Get
		Set
			If (String.Equals(Me._itemName, value) = false) Then
				Me._itemName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_qty", DbType:="Int")>  _
	Public Property qty() As System.Nullable(Of Integer)
		Get
			Return Me._qty
		End Get
		Set
			If (Me._qty.Equals(value) = false) Then
				Me._qty = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_price", DbType:="Decimal(6,2)")>  _
	Public Property price() As System.Nullable(Of Decimal)
		Get
			Return Me._price
		End Get
		Set
			If (Me._price.Equals(value) = false) Then
				Me._price = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Total", DbType:="Decimal(17,2)")>  _
	Public Property Total() As System.Nullable(Of Decimal)
		Get
			Return Me._Total
		End Get
		Set
			If (Me._Total.Equals(value) = false) Then
				Me._Total = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.getScheduleConflict")>  _
Partial Public Class getScheduleConflict1
	
	Private _RequirementID As Integer
	
	Private _eventID As Integer
	
	Private _eventDate As System.Nullable(Of Date)
	
	Private _userID As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RequirementID", DbType:="Int NOT NULL")>  _
	Public Property RequirementID() As Integer
		Get
			Return Me._RequirementID
		End Get
		Set
			If ((Me._RequirementID = value)  _
						= false) Then
				Me._RequirementID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventDate", DbType:="SmallDateTime")>  _
	Public Property eventDate() As System.Nullable(Of Date)
		Get
			Return Me._eventDate
		End Get
		Set
			If (Me._eventDate.Equals(value) = false) Then
				Me._eventDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me._userID = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.getShortGeoLocation")>  _
Partial Public Class getShortGeoLocation
	
	Private _accountName As String
	
	Private _accountID As Integer
	
	Private _Vpid As System.Nullable(Of Integer)
	
	Private _shortLatitude As String
	
	Private _shortLongitude As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountName", DbType:="VarChar(256)")>  _
	Public Property accountName() As String
		Get
			Return Me._accountName
		End Get
		Set
			If (String.Equals(Me._accountName, value) = false) Then
				Me._accountName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="Int NOT NULL")>  _
	Public Property accountID() As Integer
		Get
			Return Me._accountID
		End Get
		Set
			If ((Me._accountID = value)  _
						= false) Then
				Me._accountID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Vpid", DbType:="Int")>  _
	Public Property Vpid() As System.Nullable(Of Integer)
		Get
			Return Me._Vpid
		End Get
		Set
			If (Me._Vpid.Equals(value) = false) Then
				Me._Vpid = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_shortLatitude", DbType:="VarChar(30)")>  _
	Public Property shortLatitude() As String
		Get
			Return Me._shortLatitude
		End Get
		Set
			If (String.Equals(Me._shortLatitude, value) = false) Then
				Me._shortLatitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_shortLongitude", DbType:="VarChar(30)")>  _
	Public Property shortLongitude() As String
		Get
			Return Me._shortLongitude
		End Get
		Set
			If (String.Equals(Me._shortLongitude, value) = false) Then
				Me._shortLongitude = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.getSuppliersbyBrand")>  _
Partial Public Class getSuppliersbyBrand
	
	Private _supplierID As Integer
	
	Private _supplierName As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int NOT NULL")>  _
	Public Property supplierID() As Integer
		Get
			Return Me._supplierID
		End Get
		Set
			If ((Me._supplierID = value)  _
						= false) Then
				Me._supplierID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierName", DbType:="NVarChar(50)")>  _
	Public Property supplierName() As String
		Get
			Return Me._supplierName
		End Get
		Set
			If (String.Equals(Me._supplierName, value) = false) Then
				Me._supplierName = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryAccountCityList")>  _
Partial Public Class qryAccountCityList
	
	Private _city As String
	
	Private _marketID As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_city", DbType:="VarChar(50)")>  _
	Public Property city() As String
		Get
			Return Me._city
		End Get
		Set
			If (String.Equals(Me._city, value) = false) Then
				Me._city = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="Int")>  _
	Public Property marketID() As System.Nullable(Of Integer)
		Get
			Return Me._marketID
		End Get
		Set
			If (Me._marketID.Equals(value) = false) Then
				Me._marketID = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryAmbassadorMarketPositions")>  _
Partial Public Class qryAmbassadorMarketPosition
	
	Private _userID As String
	
	Private _FirstName As String
	
	Private _LastName As String
	
	Private _City As String
	
	Private _State As String
	
	Private _latitude As System.Nullable(Of Double)
	
	Private _longitude As System.Nullable(Of Double)
	
	Private _marketID As System.Nullable(Of Integer)
	
	Private _positionID As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me._userID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="NVarChar(50)")>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me._FirstName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="NVarChar(50)")>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me._LastName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", DbType:="NVarChar(50)")>  _
	Public Property City() As String
		Get
			Return Me._City
		End Get
		Set
			If (String.Equals(Me._City, value) = false) Then
				Me._City = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_State", DbType:="NVarChar(50)")>  _
	Public Property State() As String
		Get
			Return Me._State
		End Get
		Set
			If (String.Equals(Me._State, value) = false) Then
				Me._State = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_latitude", DbType:="Float")>  _
	Public Property latitude() As System.Nullable(Of Double)
		Get
			Return Me._latitude
		End Get
		Set
			If (Me._latitude.Equals(value) = false) Then
				Me._latitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_longitude", DbType:="Float")>  _
	Public Property longitude() As System.Nullable(Of Double)
		Get
			Return Me._longitude
		End Get
		Set
			If (Me._longitude.Equals(value) = false) Then
				Me._longitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="Int")>  _
	Public Property marketID() As System.Nullable(Of Integer)
		Get
			Return Me._marketID
		End Get
		Set
			If (Me._marketID.Equals(value) = false) Then
				Me._marketID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_positionID", DbType:="Int")>  _
	Public Property positionID() As System.Nullable(Of Integer)
		Get
			Return Me._positionID
		End Get
		Set
			If (Me._positionID.Equals(value) = false) Then
				Me._positionID = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryAmbassodorBrandTypeByUser")>  _
Partial Public Class qryAmbassodorBrandTypeByUser
	
	Private _ambassadorBrandsID As Integer
	
	Private _userName As String
	
	Private _brandCategoryID As System.Nullable(Of Integer)
	
	Private _categoryName As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ambassadorBrandsID", DbType:="Int NOT NULL")>  _
	Public Property ambassadorBrandsID() As Integer
		Get
			Return Me._ambassadorBrandsID
		End Get
		Set
			If ((Me._ambassadorBrandsID = value)  _
						= false) Then
				Me._ambassadorBrandsID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userName", DbType:="NVarChar(50)")>  _
	Public Property userName() As String
		Get
			Return Me._userName
		End Get
		Set
			If (String.Equals(Me._userName, value) = false) Then
				Me._userName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandCategoryID", DbType:="Int")>  _
	Public Property brandCategoryID() As System.Nullable(Of Integer)
		Get
			Return Me._brandCategoryID
		End Get
		Set
			If (Me._brandCategoryID.Equals(value) = false) Then
				Me._brandCategoryID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_categoryName", DbType:="NVarChar(50)")>  _
	Public Property categoryName() As String
		Get
			Return Me._categoryName
		End Get
		Set
			If (String.Equals(Me._categoryName, value) = false) Then
				Me._categoryName = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryGetLoggedInUsers")>  _
Partial Public Class qryGetLoggedInUser
	
	Private _firstName As String
	
	Private _lastName As String
	
	Private _lastLoginDate As System.Nullable(Of Date)
	
	Private _lastActivityDate As System.Nullable(Of Date)
	
	Private _userID As String
	
	Private _lastPageLanding As String
	
	Private _IsMobileDevice As System.Nullable(Of Boolean)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_firstName", DbType:="NVarChar(50)")>  _
	Public Property firstName() As String
		Get
			Return Me._firstName
		End Get
		Set
			If (String.Equals(Me._firstName, value) = false) Then
				Me._firstName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lastName", DbType:="NVarChar(50)")>  _
	Public Property lastName() As String
		Get
			Return Me._lastName
		End Get
		Set
			If (String.Equals(Me._lastName, value) = false) Then
				Me._lastName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lastLoginDate", DbType:="SmallDateTime")>  _
	Public Property lastLoginDate() As System.Nullable(Of Date)
		Get
			Return Me._lastLoginDate
		End Get
		Set
			If (Me._lastLoginDate.Equals(value) = false) Then
				Me._lastLoginDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lastActivityDate", DbType:="SmallDateTime")>  _
	Public Property lastActivityDate() As System.Nullable(Of Date)
		Get
			Return Me._lastActivityDate
		End Get
		Set
			If (Me._lastActivityDate.Equals(value) = false) Then
				Me._lastActivityDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me._userID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lastPageLanding", DbType:="NVarChar(256)")>  _
	Public Property lastPageLanding() As String
		Get
			Return Me._lastPageLanding
		End Get
		Set
			If (String.Equals(Me._lastPageLanding, value) = false) Then
				Me._lastPageLanding = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsMobileDevice", DbType:="Bit")>  _
	Public Property IsMobileDevice() As System.Nullable(Of Boolean)
		Get
			Return Me._IsMobileDevice
		End Get
		Set
			If (Me._IsMobileDevice.Equals(value) = false) Then
				Me._IsMobileDevice = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryGetLoggedInUsers_last24hours")>  _
Partial Public Class qryGetLoggedInUsers_last24hour
	
	Private _firstName As String
	
	Private _lastName As String
	
	Private _lastLoginDate As System.Nullable(Of Date)
	
	Private _lastActivityDate As System.Nullable(Of Date)
	
	Private _userID As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_firstName", DbType:="NVarChar(50)")>  _
	Public Property firstName() As String
		Get
			Return Me._firstName
		End Get
		Set
			If (String.Equals(Me._firstName, value) = false) Then
				Me._firstName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lastName", DbType:="NVarChar(50)")>  _
	Public Property lastName() As String
		Get
			Return Me._lastName
		End Get
		Set
			If (String.Equals(Me._lastName, value) = false) Then
				Me._lastName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lastLoginDate", DbType:="SmallDateTime")>  _
	Public Property lastLoginDate() As System.Nullable(Of Date)
		Get
			Return Me._lastLoginDate
		End Get
		Set
			If (Me._lastLoginDate.Equals(value) = false) Then
				Me._lastLoginDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lastActivityDate", DbType:="SmallDateTime")>  _
	Public Property lastActivityDate() As System.Nullable(Of Date)
		Get
			Return Me._lastActivityDate
		End Get
		Set
			If (Me._lastActivityDate.Equals(value) = false) Then
				Me._lastActivityDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me._userID = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryGetNewEvents_last24hours")>  _
Partial Public Class qryGetNewEvents_last24hour
	
	Private _eventID As Integer
	
	Private _CreatedDate As System.Nullable(Of Date)
	
	Private _eventTitle As String
	
	Private _supplierID As System.Nullable(Of Integer)
	
	Private _locationID As System.Nullable(Of Integer)
	
	Private _supplierName As String
	
	Private _marketID As System.Nullable(Of Integer)
	
	Private _marketName As String
	
	Private _CreatedBy As String
	
	Private _eventDate As System.Nullable(Of Date)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedDate", DbType:="SmallDateTime")>  _
	Public Property CreatedDate() As System.Nullable(Of Date)
		Get
			Return Me._CreatedDate
		End Get
		Set
			If (Me._CreatedDate.Equals(value) = false) Then
				Me._CreatedDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTitle", DbType:="VarChar(1000)")>  _
	Public Property eventTitle() As String
		Get
			Return Me._eventTitle
		End Get
		Set
			If (String.Equals(Me._eventTitle, value) = false) Then
				Me._eventTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int")>  _
	Public Property supplierID() As System.Nullable(Of Integer)
		Get
			Return Me._supplierID
		End Get
		Set
			If (Me._supplierID.Equals(value) = false) Then
				Me._supplierID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_locationID", DbType:="Int")>  _
	Public Property locationID() As System.Nullable(Of Integer)
		Get
			Return Me._locationID
		End Get
		Set
			If (Me._locationID.Equals(value) = false) Then
				Me._locationID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierName", DbType:="NVarChar(50)")>  _
	Public Property supplierName() As String
		Get
			Return Me._supplierName
		End Get
		Set
			If (String.Equals(Me._supplierName, value) = false) Then
				Me._supplierName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="Int")>  _
	Public Property marketID() As System.Nullable(Of Integer)
		Get
			Return Me._marketID
		End Get
		Set
			If (Me._marketID.Equals(value) = false) Then
				Me._marketID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketName", DbType:="VarChar(50)")>  _
	Public Property marketName() As String
		Get
			Return Me._marketName
		End Get
		Set
			If (String.Equals(Me._marketName, value) = false) Then
				Me._marketName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="NVarChar(101)")>  _
	Public Property CreatedBy() As String
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (String.Equals(Me._CreatedBy, value) = false) Then
				Me._CreatedBy = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventDate", DbType:="SmallDateTime")>  _
	Public Property eventDate() As System.Nullable(Of Date)
		Get
			Return Me._eventDate
		End Get
		Set
			If (Me._eventDate.Equals(value) = false) Then
				Me._eventDate = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryGetNewVisits_last24hours")>  _
Partial Public Class qryGetNewVisits_last24hour
	
	Private _userID As String
	
	Private _IsFirstLogin As System.Nullable(Of Boolean)
	
	Private _firstName As String
	
	Private _lastName As String
	
	Private _lastLoginDate As System.Nullable(Of Date)
	
	Private _lastActivityDate As System.Nullable(Of Date)
	
	Private _loginDate As System.Nullable(Of Date)
	
	Private _IPAddress As String
	
	Private _browser As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me._userID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsFirstLogin", DbType:="Bit")>  _
	Public Property IsFirstLogin() As System.Nullable(Of Boolean)
		Get
			Return Me._IsFirstLogin
		End Get
		Set
			If (Me._IsFirstLogin.Equals(value) = false) Then
				Me._IsFirstLogin = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_firstName", DbType:="NVarChar(50)")>  _
	Public Property firstName() As String
		Get
			Return Me._firstName
		End Get
		Set
			If (String.Equals(Me._firstName, value) = false) Then
				Me._firstName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lastName", DbType:="NVarChar(50)")>  _
	Public Property lastName() As String
		Get
			Return Me._lastName
		End Get
		Set
			If (String.Equals(Me._lastName, value) = false) Then
				Me._lastName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lastLoginDate", DbType:="SmallDateTime")>  _
	Public Property lastLoginDate() As System.Nullable(Of Date)
		Get
			Return Me._lastLoginDate
		End Get
		Set
			If (Me._lastLoginDate.Equals(value) = false) Then
				Me._lastLoginDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lastActivityDate", DbType:="SmallDateTime")>  _
	Public Property lastActivityDate() As System.Nullable(Of Date)
		Get
			Return Me._lastActivityDate
		End Get
		Set
			If (Me._lastActivityDate.Equals(value) = false) Then
				Me._lastActivityDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_loginDate", DbType:="SmallDateTime")>  _
	Public Property loginDate() As System.Nullable(Of Date)
		Get
			Return Me._loginDate
		End Get
		Set
			If (Me._loginDate.Equals(value) = false) Then
				Me._loginDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IPAddress", DbType:="NVarChar(50)")>  _
	Public Property IPAddress() As String
		Get
			Return Me._IPAddress
		End Get
		Set
			If (String.Equals(Me._IPAddress, value) = false) Then
				Me._IPAddress = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_browser", DbType:="NVarChar(50)")>  _
	Public Property browser() As String
		Get
			Return Me._browser
		End Get
		Set
			If (String.Equals(Me._browser, value) = false) Then
				Me._browser = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryGetNewAmbassadors_last24hrs")>  _
Partial Public Class qryGetNewAmbassadors_last24hr
	
	Private _userID As String
	
	Private _userName As String
	
	Private _RegistrationDate As String
	
	Private _FirstName As String
	
	Private _LastName As String
	
	Private _City As String
	
	Private _State As String
	
	Private _CreatedBy As String
	
	Private _CreatedDate As System.Nullable(Of Date)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me._userID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userName", DbType:="NVarChar(50)")>  _
	Public Property userName() As String
		Get
			Return Me._userName
		End Get
		Set
			If (String.Equals(Me._userName, value) = false) Then
				Me._userName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RegistrationDate", DbType:="NVarChar(100)")>  _
	Public Property RegistrationDate() As String
		Get
			Return Me._RegistrationDate
		End Get
		Set
			If (String.Equals(Me._RegistrationDate, value) = false) Then
				Me._RegistrationDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="NVarChar(50)")>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me._FirstName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="NVarChar(50)")>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me._LastName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", DbType:="NVarChar(50)")>  _
	Public Property City() As String
		Get
			Return Me._City
		End Get
		Set
			If (String.Equals(Me._City, value) = false) Then
				Me._City = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_State", DbType:="NVarChar(50)")>  _
	Public Property State() As String
		Get
			Return Me._State
		End Get
		Set
			If (String.Equals(Me._State, value) = false) Then
				Me._State = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="NVarChar(101)")>  _
	Public Property CreatedBy() As String
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (String.Equals(Me._CreatedBy, value) = false) Then
				Me._CreatedBy = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedDate", DbType:="SmallDateTime")>  _
	Public Property CreatedDate() As System.Nullable(Of Date)
		Get
			Return Me._CreatedDate
		End Get
		Set
			If (Me._CreatedDate.Equals(value) = false) Then
				Me._CreatedDate = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryGetAmbassadorAssigned_last24hrs")>  _
Partial Public Class qryGetAmbassadorAssigned_last24hr
	
	Private _eventID As Integer
	
	Private _createdDate As System.Nullable(Of Date)
	
	Private _eventTitle As String
	
	Private _supplierName As String
	
	Private _marketName As String
	
	Private _BrandAmbassador As String
	
	Private _eventDate As System.Nullable(Of Date)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_createdDate", DbType:="DateTime")>  _
	Public Property createdDate() As System.Nullable(Of Date)
		Get
			Return Me._createdDate
		End Get
		Set
			If (Me._createdDate.Equals(value) = false) Then
				Me._createdDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTitle", DbType:="VarChar(1000)")>  _
	Public Property eventTitle() As String
		Get
			Return Me._eventTitle
		End Get
		Set
			If (String.Equals(Me._eventTitle, value) = false) Then
				Me._eventTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierName", DbType:="NVarChar(50)")>  _
	Public Property supplierName() As String
		Get
			Return Me._supplierName
		End Get
		Set
			If (String.Equals(Me._supplierName, value) = false) Then
				Me._supplierName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketName", DbType:="VarChar(50)")>  _
	Public Property marketName() As String
		Get
			Return Me._marketName
		End Get
		Set
			If (String.Equals(Me._marketName, value) = false) Then
				Me._marketName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BrandAmbassador", DbType:="NVarChar(MAX)")>  _
	Public Property BrandAmbassador() As String
		Get
			Return Me._BrandAmbassador
		End Get
		Set
			If (String.Equals(Me._BrandAmbassador, value) = false) Then
				Me._BrandAmbassador = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventDate", DbType:="SmallDateTime")>  _
	Public Property eventDate() As System.Nullable(Of Date)
		Get
			Return Me._eventDate
		End Get
		Set
			If (Me._eventDate.Equals(value) = false) Then
				Me._eventDate = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryGetApprovedEvents_last24hrs")>  _
Partial Public Class qryGetApprovedEvents_last24hr
	
	Private _eventID As Integer
	
	Private _eventDate As System.Nullable(Of Date)
	
	Private _eventTitle As String
	
	Private _supplierName As String
	
	Private _marketName As String
	
	Private _createdBy As String
	
	Private _createdDate As System.Nullable(Of Date)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventDate", DbType:="SmallDateTime")>  _
	Public Property eventDate() As System.Nullable(Of Date)
		Get
			Return Me._eventDate
		End Get
		Set
			If (Me._eventDate.Equals(value) = false) Then
				Me._eventDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTitle", DbType:="VarChar(1000)")>  _
	Public Property eventTitle() As String
		Get
			Return Me._eventTitle
		End Get
		Set
			If (String.Equals(Me._eventTitle, value) = false) Then
				Me._eventTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierName", DbType:="NVarChar(50)")>  _
	Public Property supplierName() As String
		Get
			Return Me._supplierName
		End Get
		Set
			If (String.Equals(Me._supplierName, value) = false) Then
				Me._supplierName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketName", DbType:="VarChar(50)")>  _
	Public Property marketName() As String
		Get
			Return Me._marketName
		End Get
		Set
			If (String.Equals(Me._marketName, value) = false) Then
				Me._marketName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_createdBy", DbType:="NVarChar(101)")>  _
	Public Property createdBy() As String
		Get
			Return Me._createdBy
		End Get
		Set
			If (String.Equals(Me._createdBy, value) = false) Then
				Me._createdBy = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_createdDate", DbType:="DateTime")>  _
	Public Property createdDate() As System.Nullable(Of Date)
		Get
			Return Me._createdDate
		End Get
		Set
			If (Me._createdDate.Equals(value) = false) Then
				Me._createdDate = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryGetUpcomingEventLocation")>  _
Partial Public Class qryGetUpcomingEventLocation
	
	Private _city As String
	
	Private _state As String
	
	Private _location As String
	
	Private _zipCode As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_city", DbType:="VarChar(50)")>  _
	Public Property city() As String
		Get
			Return Me._city
		End Get
		Set
			If (String.Equals(Me._city, value) = false) Then
				Me._city = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_state", DbType:="NVarChar(20)")>  _
	Public Property state() As String
		Get
			Return Me._state
		End Get
		Set
			If (String.Equals(Me._state, value) = false) Then
				Me._state = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_location", DbType:="NVarChar(72)")>  _
	Public Property location() As String
		Get
			Return Me._location
		End Get
		Set
			If (String.Equals(Me._location, value) = false) Then
				Me._location = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_zipCode", DbType:="VarChar(10)")>  _
	Public Property zipCode() As String
		Get
			Return Me._zipCode
		End Get
		Set
			If (String.Equals(Me._zipCode, value) = false) Then
				Me._zipCode = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryViewRejectedPayments")>  _
Partial Public Class qryViewRejectedPayment
	
	Private _RequirementID As Integer
	
	Private _locationID As System.Nullable(Of Integer)
	
	Private _accountID As Integer
	
	Private _accountName As String
	
	Private _eventID As Integer
	
	Private _supplierName As String
	
	Private _userID As String
	
	Private _userName As String
	
	Private _FullName As String
	
	Private _positionTitle As String
	
	Private _statusID As System.Nullable(Of Integer)
	
	Private _rate As System.Nullable(Of Decimal)
	
	Private _hours As System.Nullable(Of Integer)
	
	Private _labor As System.Nullable(Of Decimal)
	
	Private _paymentStatus As String
	
	Private _paymentID As System.Nullable(Of Integer)
	
	Private _clientID As System.Nullable(Of Integer)
	
	Private _bonus As System.Nullable(Of Decimal)
	
	Private _expenses As System.Nullable(Of Decimal)
	
	Private _Total As System.Nullable(Of Decimal)
	
	Private _paymentDate As System.Nullable(Of Date)
	
	Private _eventDate As System.Nullable(Of Date)
	
	Private _startTime As System.Nullable(Of Date)
	
	Private _endTime As System.Nullable(Of Date)
	
	Private _streetAddress1 As String
	
	Private _city As String
	
	Private _state As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RequirementID", DbType:="Int NOT NULL")>  _
	Public Property RequirementID() As Integer
		Get
			Return Me._RequirementID
		End Get
		Set
			If ((Me._RequirementID = value)  _
						= false) Then
				Me._RequirementID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_locationID", DbType:="Int")>  _
	Public Property locationID() As System.Nullable(Of Integer)
		Get
			Return Me._locationID
		End Get
		Set
			If (Me._locationID.Equals(value) = false) Then
				Me._locationID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="Int NOT NULL")>  _
	Public Property accountID() As Integer
		Get
			Return Me._accountID
		End Get
		Set
			If ((Me._accountID = value)  _
						= false) Then
				Me._accountID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountName", DbType:="VarChar(256)")>  _
	Public Property accountName() As String
		Get
			Return Me._accountName
		End Get
		Set
			If (String.Equals(Me._accountName, value) = false) Then
				Me._accountName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierName", DbType:="NVarChar(50)")>  _
	Public Property supplierName() As String
		Get
			Return Me._supplierName
		End Get
		Set
			If (String.Equals(Me._supplierName, value) = false) Then
				Me._supplierName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me._userID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userName", DbType:="NVarChar(50)")>  _
	Public Property userName() As String
		Get
			Return Me._userName
		End Get
		Set
			If (String.Equals(Me._userName, value) = false) Then
				Me._userName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FullName", DbType:="NVarChar(101)")>  _
	Public Property FullName() As String
		Get
			Return Me._FullName
		End Get
		Set
			If (String.Equals(Me._FullName, value) = false) Then
				Me._FullName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_positionTitle", DbType:="NVarChar(50)")>  _
	Public Property positionTitle() As String
		Get
			Return Me._positionTitle
		End Get
		Set
			If (String.Equals(Me._positionTitle, value) = false) Then
				Me._positionTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_statusID", DbType:="Int")>  _
	Public Property statusID() As System.Nullable(Of Integer)
		Get
			Return Me._statusID
		End Get
		Set
			If (Me._statusID.Equals(value) = false) Then
				Me._statusID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rate", DbType:="Decimal(18,2)")>  _
	Public Property rate() As System.Nullable(Of Decimal)
		Get
			Return Me._rate
		End Get
		Set
			If (Me._rate.Equals(value) = false) Then
				Me._rate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hours", DbType:="Int")>  _
	Public Property hours() As System.Nullable(Of Integer)
		Get
			Return Me._hours
		End Get
		Set
			If (Me._hours.Equals(value) = false) Then
				Me._hours = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_labor", DbType:="Decimal(29,2)")>  _
	Public Property labor() As System.Nullable(Of Decimal)
		Get
			Return Me._labor
		End Get
		Set
			If (Me._labor.Equals(value) = false) Then
				Me._labor = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentStatus", DbType:="VarChar(50)")>  _
	Public Property paymentStatus() As String
		Get
			Return Me._paymentStatus
		End Get
		Set
			If (String.Equals(Me._paymentStatus, value) = false) Then
				Me._paymentStatus = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentID", DbType:="Int")>  _
	Public Property paymentID() As System.Nullable(Of Integer)
		Get
			Return Me._paymentID
		End Get
		Set
			If (Me._paymentID.Equals(value) = false) Then
				Me._paymentID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", DbType:="Int")>  _
	Public Property clientID() As System.Nullable(Of Integer)
		Get
			Return Me._clientID
		End Get
		Set
			If (Me._clientID.Equals(value) = false) Then
				Me._clientID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bonus", DbType:="Money")>  _
	Public Property bonus() As System.Nullable(Of Decimal)
		Get
			Return Me._bonus
		End Get
		Set
			If (Me._bonus.Equals(value) = false) Then
				Me._bonus = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_expenses", DbType:="Money")>  _
	Public Property expenses() As System.Nullable(Of Decimal)
		Get
			Return Me._expenses
		End Get
		Set
			If (Me._expenses.Equals(value) = false) Then
				Me._expenses = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Total", DbType:="Decimal(32,4)")>  _
	Public Property Total() As System.Nullable(Of Decimal)
		Get
			Return Me._Total
		End Get
		Set
			If (Me._Total.Equals(value) = false) Then
				Me._Total = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentDate", DbType:="SmallDateTime")>  _
	Public Property paymentDate() As System.Nullable(Of Date)
		Get
			Return Me._paymentDate
		End Get
		Set
			If (Me._paymentDate.Equals(value) = false) Then
				Me._paymentDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventDate", DbType:="SmallDateTime")>  _
	Public Property eventDate() As System.Nullable(Of Date)
		Get
			Return Me._eventDate
		End Get
		Set
			If (Me._eventDate.Equals(value) = false) Then
				Me._eventDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_startTime", DbType:="SmallDateTime")>  _
	Public Property startTime() As System.Nullable(Of Date)
		Get
			Return Me._startTime
		End Get
		Set
			If (Me._startTime.Equals(value) = false) Then
				Me._startTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_endTime", DbType:="SmallDateTime")>  _
	Public Property endTime() As System.Nullable(Of Date)
		Get
			Return Me._endTime
		End Get
		Set
			If (Me._endTime.Equals(value) = false) Then
				Me._endTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_streetAddress1", DbType:="VarChar(256)")>  _
	Public Property streetAddress1() As String
		Get
			Return Me._streetAddress1
		End Get
		Set
			If (String.Equals(Me._streetAddress1, value) = false) Then
				Me._streetAddress1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_city", DbType:="VarChar(50)")>  _
	Public Property city() As String
		Get
			Return Me._city
		End Get
		Set
			If (String.Equals(Me._city, value) = false) Then
				Me._city = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_state", DbType:="NVarChar(20)")>  _
	Public Property state() As String
		Get
			Return Me._state
		End Get
		Set
			If (String.Equals(Me._state, value) = false) Then
				Me._state = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryViewPendingPayments")>  _
Partial Public Class qryViewPendingPayment
	
	Private _RequirementID As Integer
	
	Private _locationID As System.Nullable(Of Integer)
	
	Private _accountID As Integer
	
	Private _accountName As String
	
	Private _eventID As Integer
	
	Private _supplierName As String
	
	Private _userID As String
	
	Private _userName As String
	
	Private _FullName As String
	
	Private _positionTitle As String
	
	Private _statusID As System.Nullable(Of Integer)
	
	Private _rate As System.Nullable(Of Decimal)
	
	Private _hours As System.Nullable(Of Double)
	
	Private _labor As System.Nullable(Of Double)
	
	Private _paymentStatus As String
	
	Private _paymentID As System.Nullable(Of Integer)
	
	Private _clientID As System.Nullable(Of Integer)
	
	Private _bonus As System.Nullable(Of Decimal)
	
	Private _expenses As System.Nullable(Of Decimal)
	
	Private _Total As System.Nullable(Of Double)
	
	Private _paymentDate As System.Nullable(Of Date)
	
	Private _eventDate As System.Nullable(Of Date)
	
	Private _startTime As System.Nullable(Of Date)
	
	Private _endTime As System.Nullable(Of Date)
	
	Private _streetAddress1 As String
	
	Private _city As String
	
	Private _state As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RequirementID", DbType:="Int NOT NULL")>  _
	Public Property RequirementID() As Integer
		Get
			Return Me._RequirementID
		End Get
		Set
			If ((Me._RequirementID = value)  _
						= false) Then
				Me._RequirementID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_locationID", DbType:="Int")>  _
	Public Property locationID() As System.Nullable(Of Integer)
		Get
			Return Me._locationID
		End Get
		Set
			If (Me._locationID.Equals(value) = false) Then
				Me._locationID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="Int NOT NULL")>  _
	Public Property accountID() As Integer
		Get
			Return Me._accountID
		End Get
		Set
			If ((Me._accountID = value)  _
						= false) Then
				Me._accountID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountName", DbType:="VarChar(256)")>  _
	Public Property accountName() As String
		Get
			Return Me._accountName
		End Get
		Set
			If (String.Equals(Me._accountName, value) = false) Then
				Me._accountName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierName", DbType:="NVarChar(50)")>  _
	Public Property supplierName() As String
		Get
			Return Me._supplierName
		End Get
		Set
			If (String.Equals(Me._supplierName, value) = false) Then
				Me._supplierName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me._userID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userName", DbType:="NVarChar(50)")>  _
	Public Property userName() As String
		Get
			Return Me._userName
		End Get
		Set
			If (String.Equals(Me._userName, value) = false) Then
				Me._userName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FullName", DbType:="NVarChar(101)")>  _
	Public Property FullName() As String
		Get
			Return Me._FullName
		End Get
		Set
			If (String.Equals(Me._FullName, value) = false) Then
				Me._FullName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_positionTitle", DbType:="NVarChar(50)")>  _
	Public Property positionTitle() As String
		Get
			Return Me._positionTitle
		End Get
		Set
			If (String.Equals(Me._positionTitle, value) = false) Then
				Me._positionTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_statusID", DbType:="Int")>  _
	Public Property statusID() As System.Nullable(Of Integer)
		Get
			Return Me._statusID
		End Get
		Set
			If (Me._statusID.Equals(value) = false) Then
				Me._statusID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rate", DbType:="Decimal(18,2)")>  _
	Public Property rate() As System.Nullable(Of Decimal)
		Get
			Return Me._rate
		End Get
		Set
			If (Me._rate.Equals(value) = false) Then
				Me._rate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hours", DbType:="Float")>  _
	Public Property hours() As System.Nullable(Of Double)
		Get
			Return Me._hours
		End Get
		Set
			If (Me._hours.Equals(value) = false) Then
				Me._hours = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_labor", DbType:="Float")>  _
	Public Property labor() As System.Nullable(Of Double)
		Get
			Return Me._labor
		End Get
		Set
			If (Me._labor.Equals(value) = false) Then
				Me._labor = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentStatus", DbType:="VarChar(50)")>  _
	Public Property paymentStatus() As String
		Get
			Return Me._paymentStatus
		End Get
		Set
			If (String.Equals(Me._paymentStatus, value) = false) Then
				Me._paymentStatus = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentID", DbType:="Int")>  _
	Public Property paymentID() As System.Nullable(Of Integer)
		Get
			Return Me._paymentID
		End Get
		Set
			If (Me._paymentID.Equals(value) = false) Then
				Me._paymentID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", DbType:="Int")>  _
	Public Property clientID() As System.Nullable(Of Integer)
		Get
			Return Me._clientID
		End Get
		Set
			If (Me._clientID.Equals(value) = false) Then
				Me._clientID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bonus", DbType:="Money")>  _
	Public Property bonus() As System.Nullable(Of Decimal)
		Get
			Return Me._bonus
		End Get
		Set
			If (Me._bonus.Equals(value) = false) Then
				Me._bonus = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_expenses", DbType:="Money")>  _
	Public Property expenses() As System.Nullable(Of Decimal)
		Get
			Return Me._expenses
		End Get
		Set
			If (Me._expenses.Equals(value) = false) Then
				Me._expenses = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Total", DbType:="Float")>  _
	Public Property Total() As System.Nullable(Of Double)
		Get
			Return Me._Total
		End Get
		Set
			If (Me._Total.Equals(value) = false) Then
				Me._Total = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentDate", DbType:="SmallDateTime")>  _
	Public Property paymentDate() As System.Nullable(Of Date)
		Get
			Return Me._paymentDate
		End Get
		Set
			If (Me._paymentDate.Equals(value) = false) Then
				Me._paymentDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventDate", DbType:="SmallDateTime")>  _
	Public Property eventDate() As System.Nullable(Of Date)
		Get
			Return Me._eventDate
		End Get
		Set
			If (Me._eventDate.Equals(value) = false) Then
				Me._eventDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_startTime", DbType:="SmallDateTime")>  _
	Public Property startTime() As System.Nullable(Of Date)
		Get
			Return Me._startTime
		End Get
		Set
			If (Me._startTime.Equals(value) = false) Then
				Me._startTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_endTime", DbType:="SmallDateTime")>  _
	Public Property endTime() As System.Nullable(Of Date)
		Get
			Return Me._endTime
		End Get
		Set
			If (Me._endTime.Equals(value) = false) Then
				Me._endTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_streetAddress1", DbType:="VarChar(256)")>  _
	Public Property streetAddress1() As String
		Get
			Return Me._streetAddress1
		End Get
		Set
			If (String.Equals(Me._streetAddress1, value) = false) Then
				Me._streetAddress1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_city", DbType:="VarChar(50)")>  _
	Public Property city() As String
		Get
			Return Me._city
		End Get
		Set
			If (String.Equals(Me._city, value) = false) Then
				Me._city = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_state", DbType:="NVarChar(20)")>  _
	Public Property state() As String
		Get
			Return Me._state
		End Get
		Set
			If (String.Equals(Me._state, value) = false) Then
				Me._state = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryGetBudgetTrackingResults")>  _
Partial Public Class qryGetBudgetTrackingResult
	
	Private _supplierBudgetQuestionResultID As Integer
	
	Private _eventID As System.Nullable(Of Integer)
	
	Private _fieldID As System.Nullable(Of Integer)
	
	Private _question As String
	
	Private _fieldType As String
	
	Private _order As System.Nullable(Of Integer)
	
	Private _answer As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierBudgetQuestionResultID", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property supplierBudgetQuestionResultID() As Integer
		Get
			Return Me._supplierBudgetQuestionResultID
		End Get
		Set
			If ((Me._supplierBudgetQuestionResultID = value)  _
						= false) Then
				Me._supplierBudgetQuestionResultID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int")>  _
	Public Property eventID() As System.Nullable(Of Integer)
		Get
			Return Me._eventID
		End Get
		Set
			If (Me._eventID.Equals(value) = false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fieldID", DbType:="Int")>  _
	Public Property fieldID() As System.Nullable(Of Integer)
		Get
			Return Me._fieldID
		End Get
		Set
			If (Me._fieldID.Equals(value) = false) Then
				Me._fieldID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_question", DbType:="VarChar(256)")>  _
	Public Property question() As String
		Get
			Return Me._question
		End Get
		Set
			If (String.Equals(Me._question, value) = false) Then
				Me._question = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fieldType", DbType:="VarChar(50)")>  _
	Public Property fieldType() As String
		Get
			Return Me._fieldType
		End Get
		Set
			If (String.Equals(Me._fieldType, value) = false) Then
				Me._fieldType = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_order", DbType:="Int")>  _
	Public Property [order]() As System.Nullable(Of Integer)
		Get
			Return Me._order
		End Get
		Set
			If (Me._order.Equals(value) = false) Then
				Me._order = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_answer", DbType:="VarChar(MAX)")>  _
	Public Property answer() As String
		Get
			Return Me._answer
		End Get
		Set
			If (String.Equals(Me._answer, value) = false) Then
				Me._answer = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryEventStaffingRequirement")>  _
Partial Public Class qryEventStaffingRequirement
	
	Private _RequirementID As Integer
	
	Private _eventID As Integer
	
	Private _startTime As System.Nullable(Of Date)
	
	Private _endTime As System.Nullable(Of Date)
	
	Private _checkinTime As System.Nullable(Of Date)
	
	Private _checkInLocationLatitude As String
	
	Private _CheckInLocationLongitude As String
	
	Private _buttonText As String
	
	Private _buttonEnabled As String
	
	Private _buttonCssClass As String
	
	Private _assignedUserName As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RequirementID", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property RequirementID() As Integer
		Get
			Return Me._RequirementID
		End Get
		Set
			If ((Me._RequirementID = value)  _
						= false) Then
				Me._RequirementID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_startTime", DbType:="SmallDateTime")>  _
	Public Property startTime() As System.Nullable(Of Date)
		Get
			Return Me._startTime
		End Get
		Set
			If (Me._startTime.Equals(value) = false) Then
				Me._startTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_endTime", DbType:="SmallDateTime")>  _
	Public Property endTime() As System.Nullable(Of Date)
		Get
			Return Me._endTime
		End Get
		Set
			If (Me._endTime.Equals(value) = false) Then
				Me._endTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_checkinTime", DbType:="SmallDateTime")>  _
	Public Property checkinTime() As System.Nullable(Of Date)
		Get
			Return Me._checkinTime
		End Get
		Set
			If (Me._checkinTime.Equals(value) = false) Then
				Me._checkinTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_checkInLocationLatitude", DbType:="VarChar(50)")>  _
	Public Property checkInLocationLatitude() As String
		Get
			Return Me._checkInLocationLatitude
		End Get
		Set
			If (String.Equals(Me._checkInLocationLatitude, value) = false) Then
				Me._checkInLocationLatitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CheckInLocationLongitude", DbType:="VarChar(50)")>  _
	Public Property CheckInLocationLongitude() As String
		Get
			Return Me._CheckInLocationLongitude
		End Get
		Set
			If (String.Equals(Me._CheckInLocationLongitude, value) = false) Then
				Me._CheckInLocationLongitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_buttonText", DbType:="VarChar(16)")>  _
	Public Property buttonText() As String
		Get
			Return Me._buttonText
		End Get
		Set
			If (String.Equals(Me._buttonText, value) = false) Then
				Me._buttonText = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_buttonEnabled", DbType:="VarChar(5)")>  _
	Public Property buttonEnabled() As String
		Get
			Return Me._buttonEnabled
		End Get
		Set
			If (String.Equals(Me._buttonEnabled, value) = false) Then
				Me._buttonEnabled = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_buttonCssClass", DbType:="VarChar(22)")>  _
	Public Property buttonCssClass() As String
		Get
			Return Me._buttonCssClass
		End Get
		Set
			If (String.Equals(Me._buttonCssClass, value) = false) Then
				Me._buttonCssClass = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_assignedUserName", DbType:="NVarChar(50)")>  _
	Public Property assignedUserName() As String
		Get
			Return Me._assignedUserName
		End Get
		Set
			If (String.Equals(Me._assignedUserName, value) = false) Then
				Me._assignedUserName = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryEventStaffingRequirements")>  _
Partial Public Class qryEventStaffingRequirement1
	
	Private _eventID As Integer
	
	Private _positionID As Integer
	
	Private _startTime As System.Nullable(Of Date)
	
	Private _endTime As System.Nullable(Of Date)
	
	Private _rate As System.Nullable(Of Decimal)
	
	Private _hours As System.Nullable(Of Integer)
	
	Private _Total As System.Nullable(Of Decimal)
	
	Private _assigned As System.Nullable(Of Boolean)
	
	Private _assignedUserName As String
	
	Private _paymentStatus As String
	
	Private _paymentID As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_positionID", DbType:="Int NOT NULL")>  _
	Public Property positionID() As Integer
		Get
			Return Me._positionID
		End Get
		Set
			If ((Me._positionID = value)  _
						= false) Then
				Me._positionID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_startTime", DbType:="SmallDateTime")>  _
	Public Property startTime() As System.Nullable(Of Date)
		Get
			Return Me._startTime
		End Get
		Set
			If (Me._startTime.Equals(value) = false) Then
				Me._startTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_endTime", DbType:="SmallDateTime")>  _
	Public Property endTime() As System.Nullable(Of Date)
		Get
			Return Me._endTime
		End Get
		Set
			If (Me._endTime.Equals(value) = false) Then
				Me._endTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rate", DbType:="Decimal(18,2)")>  _
	Public Property rate() As System.Nullable(Of Decimal)
		Get
			Return Me._rate
		End Get
		Set
			If (Me._rate.Equals(value) = false) Then
				Me._rate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hours", DbType:="Int")>  _
	Public Property hours() As System.Nullable(Of Integer)
		Get
			Return Me._hours
		End Get
		Set
			If (Me._hours.Equals(value) = false) Then
				Me._hours = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Total", DbType:="Decimal(29,2)")>  _
	Public Property Total() As System.Nullable(Of Decimal)
		Get
			Return Me._Total
		End Get
		Set
			If (Me._Total.Equals(value) = false) Then
				Me._Total = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_assigned", DbType:="Bit")>  _
	Public Property assigned() As System.Nullable(Of Boolean)
		Get
			Return Me._assigned
		End Get
		Set
			If (Me._assigned.Equals(value) = false) Then
				Me._assigned = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_assignedUserName", DbType:="NVarChar(50)")>  _
	Public Property assignedUserName() As String
		Get
			Return Me._assignedUserName
		End Get
		Set
			If (String.Equals(Me._assignedUserName, value) = false) Then
				Me._assignedUserName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentStatus", DbType:="VarChar(50)")>  _
	Public Property paymentStatus() As String
		Get
			Return Me._paymentStatus
		End Get
		Set
			If (String.Equals(Me._paymentStatus, value) = false) Then
				Me._paymentStatus = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentID", DbType:="Int")>  _
	Public Property paymentID() As System.Nullable(Of Integer)
		Get
			Return Me._paymentID
		End Get
		Set
			If (Me._paymentID.Equals(value) = false) Then
				Me._paymentID = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryEventStaffingRequirementList")>  _
Partial Public Class qryEventStaffingRequirementList
	
	Private _RequirementID As Integer
	
	Private _eventID As Integer
	
	Private _positionID As Integer
	
	Private _startTime As System.Nullable(Of Date)
	
	Private _endTime As System.Nullable(Of Date)
	
	Private _rate As System.Nullable(Of Decimal)
	
	Private _hours As System.Nullable(Of Integer)
	
	Private _Total As System.Nullable(Of Decimal)
	
	Private _assigned As System.Nullable(Of Boolean)
	
	Private _assignedUserName As String
	
	Private _paymentStatus As String
	
	Private _paymentID As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RequirementID", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property RequirementID() As Integer
		Get
			Return Me._RequirementID
		End Get
		Set
			If ((Me._RequirementID = value)  _
						= false) Then
				Me._RequirementID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_positionID", DbType:="Int NOT NULL")>  _
	Public Property positionID() As Integer
		Get
			Return Me._positionID
		End Get
		Set
			If ((Me._positionID = value)  _
						= false) Then
				Me._positionID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_startTime", DbType:="SmallDateTime")>  _
	Public Property startTime() As System.Nullable(Of Date)
		Get
			Return Me._startTime
		End Get
		Set
			If (Me._startTime.Equals(value) = false) Then
				Me._startTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_endTime", DbType:="SmallDateTime")>  _
	Public Property endTime() As System.Nullable(Of Date)
		Get
			Return Me._endTime
		End Get
		Set
			If (Me._endTime.Equals(value) = false) Then
				Me._endTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rate", DbType:="Decimal(18,2)")>  _
	Public Property rate() As System.Nullable(Of Decimal)
		Get
			Return Me._rate
		End Get
		Set
			If (Me._rate.Equals(value) = false) Then
				Me._rate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hours", DbType:="Int")>  _
	Public Property hours() As System.Nullable(Of Integer)
		Get
			Return Me._hours
		End Get
		Set
			If (Me._hours.Equals(value) = false) Then
				Me._hours = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Total", DbType:="Decimal(29,2)")>  _
	Public Property Total() As System.Nullable(Of Decimal)
		Get
			Return Me._Total
		End Get
		Set
			If (Me._Total.Equals(value) = false) Then
				Me._Total = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_assigned", DbType:="Bit")>  _
	Public Property assigned() As System.Nullable(Of Boolean)
		Get
			Return Me._assigned
		End Get
		Set
			If (Me._assigned.Equals(value) = false) Then
				Me._assigned = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_assignedUserName", DbType:="NVarChar(50)")>  _
	Public Property assignedUserName() As String
		Get
			Return Me._assignedUserName
		End Get
		Set
			If (String.Equals(Me._assignedUserName, value) = false) Then
				Me._assignedUserName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentStatus", DbType:="VarChar(50)")>  _
	Public Property paymentStatus() As String
		Get
			Return Me._paymentStatus
		End Get
		Set
			If (String.Equals(Me._paymentStatus, value) = false) Then
				Me._paymentStatus = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentID", DbType:="Int")>  _
	Public Property paymentID() As System.Nullable(Of Integer)
		Get
			Return Me._paymentID
		End Get
		Set
			If (Me._paymentID.Equals(value) = false) Then
				Me._paymentID = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryGetBudgetTrackingResults")>  _
Partial Public Class qryGetBudgetTrackingResult1
	
	Private _supplierBudgetQuestionResultID As Integer
	
	Private _eventID As System.Nullable(Of Integer)
	
	Private _fieldID As System.Nullable(Of Integer)
	
	Private _question As String
	
	Private _fieldType As String
	
	Private _order As System.Nullable(Of Integer)
	
	Private _answer As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierBudgetQuestionResultID", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property supplierBudgetQuestionResultID() As Integer
		Get
			Return Me._supplierBudgetQuestionResultID
		End Get
		Set
			If ((Me._supplierBudgetQuestionResultID = value)  _
						= false) Then
				Me._supplierBudgetQuestionResultID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int")>  _
	Public Property eventID() As System.Nullable(Of Integer)
		Get
			Return Me._eventID
		End Get
		Set
			If (Me._eventID.Equals(value) = false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fieldID", DbType:="Int")>  _
	Public Property fieldID() As System.Nullable(Of Integer)
		Get
			Return Me._fieldID
		End Get
		Set
			If (Me._fieldID.Equals(value) = false) Then
				Me._fieldID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_question", DbType:="VarChar(256)")>  _
	Public Property question() As String
		Get
			Return Me._question
		End Get
		Set
			If (String.Equals(Me._question, value) = false) Then
				Me._question = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fieldType", DbType:="VarChar(50)")>  _
	Public Property fieldType() As String
		Get
			Return Me._fieldType
		End Get
		Set
			If (String.Equals(Me._fieldType, value) = false) Then
				Me._fieldType = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_order", DbType:="Int")>  _
	Public Property [order]() As System.Nullable(Of Integer)
		Get
			Return Me._order
		End Get
		Set
			If (Me._order.Equals(value) = false) Then
				Me._order = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_answer", DbType:="VarChar(MAX)")>  _
	Public Property answer() As String
		Get
			Return Me._answer
		End Get
		Set
			If (String.Equals(Me._answer, value) = false) Then
				Me._answer = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryGetBrandsInEvent")>  _
Partial Public Class qryGetBrandsInEvent
	
	Private _eventID As System.Nullable(Of Integer)
	
	Private _brands As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int")>  _
	Public Property eventID() As System.Nullable(Of Integer)
		Get
			Return Me._eventID
		End Get
		Set
			If (Me._eventID.Equals(value) = false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brands", DbType:="VarChar(MAX)")>  _
	Public Property brands() As String
		Get
			Return Me._brands
		End Get
		Set
			If (String.Equals(Me._brands, value) = false) Then
				Me._brands = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryGetBrandsInRequestedEvent")>  _
Partial Public Class qryGetBrandsInRequestedEvent
	
	Private _requestedEventID As System.Nullable(Of Integer)
	
	Private _brands As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_requestedEventID", DbType:="Int")>  _
	Public Property requestedEventID() As System.Nullable(Of Integer)
		Get
			Return Me._requestedEventID
		End Get
		Set
			If (Me._requestedEventID.Equals(value) = false) Then
				Me._requestedEventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brands", DbType:="VarChar(MAX)")>  _
	Public Property brands() As String
		Get
			Return Me._brands
		End Get
		Set
			If (String.Equals(Me._brands, value) = false) Then
				Me._brands = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.vewEventStaffingRequirement")>  _
Partial Public Class vewEventStaffingRequirement
	
	Private _requirementID As Integer
	
	Private _eventID As Integer
	
	Private _positionID As Integer
	
	Private _startTime As System.Nullable(Of Date)
	
	Private _endTime As System.Nullable(Of Date)
	
	Private _rate As System.Nullable(Of Decimal)
	
	Private _hours As System.Nullable(Of Integer)
	
	Private _Total As System.Nullable(Of Decimal)
	
	Private _assigned As System.Nullable(Of Boolean)
	
	Private _assignedUserName As String
	
	Private _paymentStatus As String
	
	Private _paymentID As System.Nullable(Of Integer)
	
	Private _checkedIn As System.Nullable(Of Boolean)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_requirementID", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property requirementID() As Integer
		Get
			Return Me._requirementID
		End Get
		Set
			If ((Me._requirementID = value)  _
						= false) Then
				Me._requirementID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_positionID", DbType:="Int NOT NULL")>  _
	Public Property positionID() As Integer
		Get
			Return Me._positionID
		End Get
		Set
			If ((Me._positionID = value)  _
						= false) Then
				Me._positionID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_startTime", DbType:="SmallDateTime")>  _
	Public Property startTime() As System.Nullable(Of Date)
		Get
			Return Me._startTime
		End Get
		Set
			If (Me._startTime.Equals(value) = false) Then
				Me._startTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_endTime", DbType:="SmallDateTime")>  _
	Public Property endTime() As System.Nullable(Of Date)
		Get
			Return Me._endTime
		End Get
		Set
			If (Me._endTime.Equals(value) = false) Then
				Me._endTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rate", DbType:="Decimal(18,2)")>  _
	Public Property rate() As System.Nullable(Of Decimal)
		Get
			Return Me._rate
		End Get
		Set
			If (Me._rate.Equals(value) = false) Then
				Me._rate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hours", DbType:="Int")>  _
	Public Property hours() As System.Nullable(Of Integer)
		Get
			Return Me._hours
		End Get
		Set
			If (Me._hours.Equals(value) = false) Then
				Me._hours = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Total", DbType:="Decimal(29,2)")>  _
	Public Property Total() As System.Nullable(Of Decimal)
		Get
			Return Me._Total
		End Get
		Set
			If (Me._Total.Equals(value) = false) Then
				Me._Total = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_assigned", DbType:="Bit")>  _
	Public Property assigned() As System.Nullable(Of Boolean)
		Get
			Return Me._assigned
		End Get
		Set
			If (Me._assigned.Equals(value) = false) Then
				Me._assigned = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_assignedUserName", DbType:="NVarChar(50)")>  _
	Public Property assignedUserName() As String
		Get
			Return Me._assignedUserName
		End Get
		Set
			If (String.Equals(Me._assignedUserName, value) = false) Then
				Me._assignedUserName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentStatus", DbType:="VarChar(50)")>  _
	Public Property paymentStatus() As String
		Get
			Return Me._paymentStatus
		End Get
		Set
			If (String.Equals(Me._paymentStatus, value) = false) Then
				Me._paymentStatus = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentID", DbType:="Int")>  _
	Public Property paymentID() As System.Nullable(Of Integer)
		Get
			Return Me._paymentID
		End Get
		Set
			If (Me._paymentID.Equals(value) = false) Then
				Me._paymentID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_checkedIn", DbType:="Bit")>  _
	Public Property checkedIn() As System.Nullable(Of Boolean)
		Get
			Return Me._checkedIn
		End Get
		Set
			If (Me._checkedIn.Equals(value) = false) Then
				Me._checkedIn = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.viewEventStaffingRequirement")>  _
Partial Public Class viewEventStaffingRequirement
	
	Private _requirementID As Integer
	
	Private _eventID As Integer
	
	Private _positionID As Integer
	
	Private _startTime As System.Nullable(Of Date)
	
	Private _endTime As System.Nullable(Of Date)
	
	Private _rate As System.Nullable(Of Decimal)
	
	Private _hours As System.Nullable(Of Double)
	
	Private _Total As System.Nullable(Of Double)
	
	Private _assigned As System.Nullable(Of Boolean)
	
	Private _assignedUserName As String
	
	Private _paymentStatus As String
	
	Private _paymentID As System.Nullable(Of Integer)
	
	Private _checkedIn As System.Nullable(Of Boolean)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_requirementID", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property requirementID() As Integer
		Get
			Return Me._requirementID
		End Get
		Set
			If ((Me._requirementID = value)  _
						= false) Then
				Me._requirementID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_positionID", DbType:="Int NOT NULL")>  _
	Public Property positionID() As Integer
		Get
			Return Me._positionID
		End Get
		Set
			If ((Me._positionID = value)  _
						= false) Then
				Me._positionID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_startTime", DbType:="SmallDateTime")>  _
	Public Property startTime() As System.Nullable(Of Date)
		Get
			Return Me._startTime
		End Get
		Set
			If (Me._startTime.Equals(value) = false) Then
				Me._startTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_endTime", DbType:="SmallDateTime")>  _
	Public Property endTime() As System.Nullable(Of Date)
		Get
			Return Me._endTime
		End Get
		Set
			If (Me._endTime.Equals(value) = false) Then
				Me._endTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rate", DbType:="Decimal(18,2)")>  _
	Public Property rate() As System.Nullable(Of Decimal)
		Get
			Return Me._rate
		End Get
		Set
			If (Me._rate.Equals(value) = false) Then
				Me._rate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hours", DbType:="Float")>  _
	Public Property hours() As System.Nullable(Of Double)
		Get
			Return Me._hours
		End Get
		Set
			If (Me._hours.Equals(value) = false) Then
				Me._hours = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Total", DbType:="Float")>  _
	Public Property Total() As System.Nullable(Of Double)
		Get
			Return Me._Total
		End Get
		Set
			If (Me._Total.Equals(value) = false) Then
				Me._Total = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_assigned", DbType:="Bit")>  _
	Public Property assigned() As System.Nullable(Of Boolean)
		Get
			Return Me._assigned
		End Get
		Set
			If (Me._assigned.Equals(value) = false) Then
				Me._assigned = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_assignedUserName", DbType:="NVarChar(50)")>  _
	Public Property assignedUserName() As String
		Get
			Return Me._assignedUserName
		End Get
		Set
			If (String.Equals(Me._assignedUserName, value) = false) Then
				Me._assignedUserName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentStatus", DbType:="VarChar(50)")>  _
	Public Property paymentStatus() As String
		Get
			Return Me._paymentStatus
		End Get
		Set
			If (String.Equals(Me._paymentStatus, value) = false) Then
				Me._paymentStatus = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentID", DbType:="Int")>  _
	Public Property paymentID() As System.Nullable(Of Integer)
		Get
			Return Me._paymentID
		End Get
		Set
			If (Me._paymentID.Equals(value) = false) Then
				Me._paymentID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_checkedIn", DbType:="Bit")>  _
	Public Property checkedIn() As System.Nullable(Of Boolean)
		Get
			Return Me._checkedIn
		End Get
		Set
			If (Me._checkedIn.Equals(value) = false) Then
				Me._checkedIn = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryGetPosKitItems")>  _
Partial Public Class qryGetPosKitItem
	
	Private _qty As System.Nullable(Of Integer)
	
	Private _itemName As String
	
	Private _price As System.Nullable(Of Decimal)
	
	Private _Total As System.Nullable(Of Decimal)
	
	Private _kitID As System.Nullable(Of Integer)
	
	Private _eventID As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_qty", DbType:="Int")>  _
	Public Property qty() As System.Nullable(Of Integer)
		Get
			Return Me._qty
		End Get
		Set
			If (Me._qty.Equals(value) = false) Then
				Me._qty = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_itemName", DbType:="NVarChar(150)")>  _
	Public Property itemName() As String
		Get
			Return Me._itemName
		End Get
		Set
			If (String.Equals(Me._itemName, value) = false) Then
				Me._itemName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_price", DbType:="Decimal(6,2)")>  _
	Public Property price() As System.Nullable(Of Decimal)
		Get
			Return Me._price
		End Get
		Set
			If (Me._price.Equals(value) = false) Then
				Me._price = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Total", DbType:="Decimal(17,2)")>  _
	Public Property Total() As System.Nullable(Of Decimal)
		Get
			Return Me._Total
		End Get
		Set
			If (Me._Total.Equals(value) = false) Then
				Me._Total = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_kitID", DbType:="Int")>  _
	Public Property kitID() As System.Nullable(Of Integer)
		Get
			Return Me._kitID
		End Get
		Set
			If (Me._kitID.Equals(value) = false) Then
				Me._kitID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int")>  _
	Public Property eventID() As System.Nullable(Of Integer)
		Get
			Return Me._eventID
		End Get
		Set
			If (Me._eventID.Equals(value) = false) Then
				Me._eventID = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryGetRecapCreated_last24hours")>  _
Partial Public Class qryGetRecapCreated_last24hour1
	
	Private _eventID As Integer
	
	Private _createdDate As System.Nullable(Of Date)
	
	Private _eventTitle As String
	
	Private _supplierName As String
	
	Private _marketName As String
	
	Private _CreatedBy As String
	
	Private _UserID As String
	
	Private _eventDate As System.Nullable(Of Date)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_createdDate", DbType:="DateTime")>  _
	Public Property createdDate() As System.Nullable(Of Date)
		Get
			Return Me._createdDate
		End Get
		Set
			If (Me._createdDate.Equals(value) = false) Then
				Me._createdDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTitle", DbType:="VarChar(1000)")>  _
	Public Property eventTitle() As String
		Get
			Return Me._eventTitle
		End Get
		Set
			If (String.Equals(Me._eventTitle, value) = false) Then
				Me._eventTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierName", DbType:="NVarChar(50)")>  _
	Public Property supplierName() As String
		Get
			Return Me._supplierName
		End Get
		Set
			If (String.Equals(Me._supplierName, value) = false) Then
				Me._supplierName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketName", DbType:="VarChar(50)")>  _
	Public Property marketName() As String
		Get
			Return Me._marketName
		End Get
		Set
			If (String.Equals(Me._marketName, value) = false) Then
				Me._marketName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="VarChar(MAX)")>  _
	Public Property CreatedBy() As String
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (String.Equals(Me._CreatedBy, value) = false) Then
				Me._CreatedBy = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="NVarChar(50)")>  _
	Public Property UserID() As String
		Get
			Return Me._UserID
		End Get
		Set
			If (String.Equals(Me._UserID, value) = false) Then
				Me._UserID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventDate", DbType:="SmallDateTime")>  _
	Public Property eventDate() As System.Nullable(Of Date)
		Get
			Return Me._eventDate
		End Get
		Set
			If (Me._eventDate.Equals(value) = false) Then
				Me._eventDate = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryGetPosShippingCost")>  _
Partial Public Class qryGetPosShippingCost
	
	Private _posShippingCostID As Integer
	
	Private _kitID As System.Nullable(Of Integer)
	
	Private _category As String
	
	Private _description As String
	
	Private _cost As System.Nullable(Of Decimal)
	
	Private _eventID As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_posShippingCostID", DbType:="Int NOT NULL")>  _
	Public Property posShippingCostID() As Integer
		Get
			Return Me._posShippingCostID
		End Get
		Set
			If ((Me._posShippingCostID = value)  _
						= false) Then
				Me._posShippingCostID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_kitID", DbType:="Int")>  _
	Public Property kitID() As System.Nullable(Of Integer)
		Get
			Return Me._kitID
		End Get
		Set
			If (Me._kitID.Equals(value) = false) Then
				Me._kitID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_category", DbType:="NVarChar(50)")>  _
	Public Property category() As String
		Get
			Return Me._category
		End Get
		Set
			If (String.Equals(Me._category, value) = false) Then
				Me._category = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_description", DbType:="NVarChar(50)")>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me._description = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cost", DbType:="Decimal(6,2)")>  _
	Public Property cost() As System.Nullable(Of Decimal)
		Get
			Return Me._cost
		End Get
		Set
			If (Me._cost.Equals(value) = false) Then
				Me._cost = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int")>  _
	Public Property eventID() As System.Nullable(Of Integer)
		Get
			Return Me._eventID
		End Get
		Set
			If (Me._eventID.Equals(value) = false) Then
				Me._eventID = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryGetRecapCount_last24hrs")>  _
Partial Public Class qryGetRecapCount_last24hr1
	
	Private _Total As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Total", DbType:="Int")>  _
	Public Property Total() As System.Nullable(Of Integer)
		Get
			Return Me._Total
		End Get
		Set
			If (Me._Total.Equals(value) = false) Then
				Me._Total = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryGetSampledTotalsByEvent")>  _
Partial Public Class qryGetSampledTotalsByEvent
	
	Private _eventID As System.Nullable(Of Integer)
	
	Private _brandID As System.Nullable(Of Integer)
	
	Private _eventDate As System.Nullable(Of Date)
	
	Private _totalSampled As System.Nullable(Of Integer)
	
	Private _week As System.Nullable(Of Integer)
	
	Private _supplierID As System.Nullable(Of Integer)
	
	Private _recapID As System.Nullable(Of Integer)
	
	Private _recapQuestionID As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int")>  _
	Public Property eventID() As System.Nullable(Of Integer)
		Get
			Return Me._eventID
		End Get
		Set
			If (Me._eventID.Equals(value) = false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandID", DbType:="Int")>  _
	Public Property brandID() As System.Nullable(Of Integer)
		Get
			Return Me._brandID
		End Get
		Set
			If (Me._brandID.Equals(value) = false) Then
				Me._brandID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventDate", DbType:="SmallDateTime")>  _
	Public Property eventDate() As System.Nullable(Of Date)
		Get
			Return Me._eventDate
		End Get
		Set
			If (Me._eventDate.Equals(value) = false) Then
				Me._eventDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_totalSampled", DbType:="Int")>  _
	Public Property totalSampled() As System.Nullable(Of Integer)
		Get
			Return Me._totalSampled
		End Get
		Set
			If (Me._totalSampled.Equals(value) = false) Then
				Me._totalSampled = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_week", DbType:="Int")>  _
	Public Property week() As System.Nullable(Of Integer)
		Get
			Return Me._week
		End Get
		Set
			If (Me._week.Equals(value) = false) Then
				Me._week = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int")>  _
	Public Property supplierID() As System.Nullable(Of Integer)
		Get
			Return Me._supplierID
		End Get
		Set
			If (Me._supplierID.Equals(value) = false) Then
				Me._supplierID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_recapID", DbType:="Int")>  _
	Public Property recapID() As System.Nullable(Of Integer)
		Get
			Return Me._recapID
		End Get
		Set
			If (Me._recapID.Equals(value) = false) Then
				Me._recapID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_recapQuestionID", DbType:="Int")>  _
	Public Property recapQuestionID() As System.Nullable(Of Integer)
		Get
			Return Me._recapQuestionID
		End Get
		Set
			If (Me._recapQuestionID.Equals(value) = false) Then
				Me._recapQuestionID = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryGettblSupplierBudgetQuestionAnswer")>  _
Partial Public Class qryGettblSupplierBudgetQuestionAnswer
	
	Private _question As String
	
	Private _questionType As String
	
	Private _answer As String
	
	Private _description As String
	
	Private _required As System.Nullable(Of Boolean)
	
	Private _displayOption As String
	
	Private _lines As String
	
	Private _numberDefaultValue As String
	
	Private _numberDecimalPlace As System.Nullable(Of Integer)
	
	Private _dateFormat As String
	
	Private _dateDefaultValue As String
	
	Private _dateDisplay As String
	
	Private _showPercentage As System.Nullable(Of Boolean)
	
	Private _timeFormat As String
	
	Private _yes_noDefaultValue As String
	
	Private _sortOrder As System.Nullable(Of Integer)
	
	Private _supplierID As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_question", DbType:="NVarChar(500)")>  _
	Public Property question() As String
		Get
			Return Me._question
		End Get
		Set
			If (String.Equals(Me._question, value) = false) Then
				Me._question = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_questionType", DbType:="VarChar(50)")>  _
	Public Property questionType() As String
		Get
			Return Me._questionType
		End Get
		Set
			If (String.Equals(Me._questionType, value) = false) Then
				Me._questionType = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_answer", DbType:="VarChar(MAX)")>  _
	Public Property answer() As String
		Get
			Return Me._answer
		End Get
		Set
			If (String.Equals(Me._answer, value) = false) Then
				Me._answer = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_description", DbType:="NVarChar(2000)")>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me._description = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_required", DbType:="Bit")>  _
	Public Property required() As System.Nullable(Of Boolean)
		Get
			Return Me._required
		End Get
		Set
			If (Me._required.Equals(value) = false) Then
				Me._required = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_displayOption", DbType:="NVarChar(50)")>  _
	Public Property displayOption() As String
		Get
			Return Me._displayOption
		End Get
		Set
			If (String.Equals(Me._displayOption, value) = false) Then
				Me._displayOption = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lines", DbType:="VarChar(50)")>  _
	Public Property lines() As String
		Get
			Return Me._lines
		End Get
		Set
			If (String.Equals(Me._lines, value) = false) Then
				Me._lines = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_numberDefaultValue", DbType:="VarChar(50)")>  _
	Public Property numberDefaultValue() As String
		Get
			Return Me._numberDefaultValue
		End Get
		Set
			If (String.Equals(Me._numberDefaultValue, value) = false) Then
				Me._numberDefaultValue = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_numberDecimalPlace", DbType:="Int")>  _
	Public Property numberDecimalPlace() As System.Nullable(Of Integer)
		Get
			Return Me._numberDecimalPlace
		End Get
		Set
			If (Me._numberDecimalPlace.Equals(value) = false) Then
				Me._numberDecimalPlace = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateFormat", DbType:="NVarChar(50)")>  _
	Public Property dateFormat() As String
		Get
			Return Me._dateFormat
		End Get
		Set
			If (String.Equals(Me._dateFormat, value) = false) Then
				Me._dateFormat = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateDefaultValue", DbType:="NVarChar(50)")>  _
	Public Property dateDefaultValue() As String
		Get
			Return Me._dateDefaultValue
		End Get
		Set
			If (String.Equals(Me._dateDefaultValue, value) = false) Then
				Me._dateDefaultValue = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateDisplay", DbType:="NVarChar(50)")>  _
	Public Property dateDisplay() As String
		Get
			Return Me._dateDisplay
		End Get
		Set
			If (String.Equals(Me._dateDisplay, value) = false) Then
				Me._dateDisplay = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_showPercentage", DbType:="Bit")>  _
	Public Property showPercentage() As System.Nullable(Of Boolean)
		Get
			Return Me._showPercentage
		End Get
		Set
			If (Me._showPercentage.Equals(value) = false) Then
				Me._showPercentage = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_timeFormat", DbType:="NVarChar(50)")>  _
	Public Property timeFormat() As String
		Get
			Return Me._timeFormat
		End Get
		Set
			If (String.Equals(Me._timeFormat, value) = false) Then
				Me._timeFormat = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[yes/noDefaultValue]", Storage:="_yes_noDefaultValue", DbType:="NVarChar(50)")>  _
	Public Property yes_noDefaultValue() As String
		Get
			Return Me._yes_noDefaultValue
		End Get
		Set
			If (String.Equals(Me._yes_noDefaultValue, value) = false) Then
				Me._yes_noDefaultValue = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sortOrder", DbType:="Int")>  _
	Public Property sortOrder() As System.Nullable(Of Integer)
		Get
			Return Me._sortOrder
		End Get
		Set
			If (Me._sortOrder.Equals(value) = false) Then
				Me._sortOrder = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int NOT NULL")>  _
	Public Property supplierID() As Integer
		Get
			Return Me._supplierID
		End Get
		Set
			If ((Me._supplierID = value)  _
						= false) Then
				Me._supplierID = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryGetSupplierBudgetQuestion_Answer")>  _
Partial Public Class qryGetSupplierBudgetQuestion_Answer
	
	Private _supplierBudgetQuestionID As Integer
	
	Private _question As String
	
	Private _questionType As String
	
	Private _answer As String
	
	Private _description As String
	
	Private _required As System.Nullable(Of Boolean)
	
	Private _displayOption As String
	
	Private _lines As String
	
	Private _numberDefaultValue As String
	
	Private _numberDecimalPlace As System.Nullable(Of Integer)
	
	Private _dateFormat As String
	
	Private _dateDefaultValue As String
	
	Private _dateDisplay As String
	
	Private _showPercentage As System.Nullable(Of Boolean)
	
	Private _timeFormat As String
	
	Private _yes_noDefaultValue As String
	
	Private _sortOrder As System.Nullable(Of Integer)
	
	Private _supplierID As Integer
	
	Private _eventID As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierBudgetQuestionID", DbType:="Int NOT NULL")>  _
	Public Property supplierBudgetQuestionID() As Integer
		Get
			Return Me._supplierBudgetQuestionID
		End Get
		Set
			If ((Me._supplierBudgetQuestionID = value)  _
						= false) Then
				Me._supplierBudgetQuestionID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_question", DbType:="NVarChar(500)")>  _
	Public Property question() As String
		Get
			Return Me._question
		End Get
		Set
			If (String.Equals(Me._question, value) = false) Then
				Me._question = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_questionType", DbType:="VarChar(50)")>  _
	Public Property questionType() As String
		Get
			Return Me._questionType
		End Get
		Set
			If (String.Equals(Me._questionType, value) = false) Then
				Me._questionType = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_answer", DbType:="VarChar(MAX)")>  _
	Public Property answer() As String
		Get
			Return Me._answer
		End Get
		Set
			If (String.Equals(Me._answer, value) = false) Then
				Me._answer = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_description", DbType:="NVarChar(2000)")>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me._description = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_required", DbType:="Bit")>  _
	Public Property required() As System.Nullable(Of Boolean)
		Get
			Return Me._required
		End Get
		Set
			If (Me._required.Equals(value) = false) Then
				Me._required = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_displayOption", DbType:="NVarChar(50)")>  _
	Public Property displayOption() As String
		Get
			Return Me._displayOption
		End Get
		Set
			If (String.Equals(Me._displayOption, value) = false) Then
				Me._displayOption = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lines", DbType:="VarChar(50)")>  _
	Public Property lines() As String
		Get
			Return Me._lines
		End Get
		Set
			If (String.Equals(Me._lines, value) = false) Then
				Me._lines = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_numberDefaultValue", DbType:="VarChar(50)")>  _
	Public Property numberDefaultValue() As String
		Get
			Return Me._numberDefaultValue
		End Get
		Set
			If (String.Equals(Me._numberDefaultValue, value) = false) Then
				Me._numberDefaultValue = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_numberDecimalPlace", DbType:="Int")>  _
	Public Property numberDecimalPlace() As System.Nullable(Of Integer)
		Get
			Return Me._numberDecimalPlace
		End Get
		Set
			If (Me._numberDecimalPlace.Equals(value) = false) Then
				Me._numberDecimalPlace = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateFormat", DbType:="NVarChar(50)")>  _
	Public Property dateFormat() As String
		Get
			Return Me._dateFormat
		End Get
		Set
			If (String.Equals(Me._dateFormat, value) = false) Then
				Me._dateFormat = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateDefaultValue", DbType:="NVarChar(50)")>  _
	Public Property dateDefaultValue() As String
		Get
			Return Me._dateDefaultValue
		End Get
		Set
			If (String.Equals(Me._dateDefaultValue, value) = false) Then
				Me._dateDefaultValue = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateDisplay", DbType:="NVarChar(50)")>  _
	Public Property dateDisplay() As String
		Get
			Return Me._dateDisplay
		End Get
		Set
			If (String.Equals(Me._dateDisplay, value) = false) Then
				Me._dateDisplay = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_showPercentage", DbType:="Bit")>  _
	Public Property showPercentage() As System.Nullable(Of Boolean)
		Get
			Return Me._showPercentage
		End Get
		Set
			If (Me._showPercentage.Equals(value) = false) Then
				Me._showPercentage = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_timeFormat", DbType:="NVarChar(50)")>  _
	Public Property timeFormat() As String
		Get
			Return Me._timeFormat
		End Get
		Set
			If (String.Equals(Me._timeFormat, value) = false) Then
				Me._timeFormat = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[yes/noDefaultValue]", Storage:="_yes_noDefaultValue", DbType:="NVarChar(50)")>  _
	Public Property yes_noDefaultValue() As String
		Get
			Return Me._yes_noDefaultValue
		End Get
		Set
			If (String.Equals(Me._yes_noDefaultValue, value) = false) Then
				Me._yes_noDefaultValue = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sortOrder", DbType:="Int")>  _
	Public Property sortOrder() As System.Nullable(Of Integer)
		Get
			Return Me._sortOrder
		End Get
		Set
			If (Me._sortOrder.Equals(value) = false) Then
				Me._sortOrder = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int NOT NULL")>  _
	Public Property supplierID() As Integer
		Get
			Return Me._supplierID
		End Get
		Set
			If ((Me._supplierID = value)  _
						= false) Then
				Me._supplierID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int")>  _
	Public Property eventID() As System.Nullable(Of Integer)
		Get
			Return Me._eventID
		End Get
		Set
			If (Me._eventID.Equals(value) = false) Then
				Me._eventID = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryGetSupplierList")>  _
Partial Public Class qryGetSupplierList
	
	Private _supplierID As Integer
	
	Private _supplierName As String
	
	Private _clientID As System.Nullable(Of Integer)
	
	Private _active As System.Nullable(Of Boolean)
	
	Private _CourseID As String
	
	Private _LMS As String
	
	Private _Brands As System.Nullable(Of Integer)
	
	Private _Events As System.Nullable(Of Integer)
	
	Private _YTD_Events As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property supplierID() As Integer
		Get
			Return Me._supplierID
		End Get
		Set
			If ((Me._supplierID = value)  _
						= false) Then
				Me._supplierID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierName", DbType:="NVarChar(50)")>  _
	Public Property supplierName() As String
		Get
			Return Me._supplierName
		End Get
		Set
			If (String.Equals(Me._supplierName, value) = false) Then
				Me._supplierName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", DbType:="Int")>  _
	Public Property clientID() As System.Nullable(Of Integer)
		Get
			Return Me._clientID
		End Get
		Set
			If (Me._clientID.Equals(value) = false) Then
				Me._clientID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_active", DbType:="Bit")>  _
	Public Property active() As System.Nullable(Of Boolean)
		Get
			Return Me._active
		End Get
		Set
			If (Me._active.Equals(value) = false) Then
				Me._active = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CourseID", DbType:="NVarChar(50)")>  _
	Public Property CourseID() As String
		Get
			Return Me._CourseID
		End Get
		Set
			If (String.Equals(Me._CourseID, value) = false) Then
				Me._CourseID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LMS", DbType:="VarChar(5) NOT NULL", CanBeNull:=false)>  _
	Public Property LMS() As String
		Get
			Return Me._LMS
		End Get
		Set
			If (String.Equals(Me._LMS, value) = false) Then
				Me._LMS = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Brands", DbType:="Int")>  _
	Public Property Brands() As System.Nullable(Of Integer)
		Get
			Return Me._Brands
		End Get
		Set
			If (Me._Brands.Equals(value) = false) Then
				Me._Brands = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Events", DbType:="Int")>  _
	Public Property Events() As System.Nullable(Of Integer)
		Get
			Return Me._Events
		End Get
		Set
			If (Me._Events.Equals(value) = false) Then
				Me._Events = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[YTD Events]", Storage:="_YTD_Events", DbType:="Int")>  _
	Public Property YTD_Events() As System.Nullable(Of Integer)
		Get
			Return Me._YTD_Events
		End Get
		Set
			If (Me._YTD_Events.Equals(value) = false) Then
				Me._YTD_Events = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryIsBrandInGroup")>  _
Partial Public Class qryIsBrandInGroup
	
	Private _brandID As Integer
	
	Private _InGroup As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandID", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property brandID() As Integer
		Get
			Return Me._brandID
		End Get
		Set
			If ((Me._brandID = value)  _
						= false) Then
				Me._brandID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InGroup", DbType:="VarChar(3) NOT NULL", CanBeNull:=false)>  _
	Public Property InGroup() As String
		Get
			Return Me._InGroup
		End Get
		Set
			If (String.Equals(Me._InGroup, value) = false) Then
				Me._InGroup = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryViewPastEvents")>  _
Partial Public Class qryViewPastEvent
	
	Private _eventID As Integer
	
	Private _eventDate As System.Nullable(Of Date)
	
	Private _eventTitle As String
	
	Private _statusName As String
	
	Private _brands As String
	
	Private _accountID As Integer
	
	Private _supplierName As String
	
	Private _startTime As System.Nullable(Of Date)
	
	Private _endTime As System.Nullable(Of Date)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventDate", DbType:="SmallDateTime")>  _
	Public Property eventDate() As System.Nullable(Of Date)
		Get
			Return Me._eventDate
		End Get
		Set
			If (Me._eventDate.Equals(value) = false) Then
				Me._eventDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTitle", DbType:="VarChar(1000)")>  _
	Public Property eventTitle() As String
		Get
			Return Me._eventTitle
		End Get
		Set
			If (String.Equals(Me._eventTitle, value) = false) Then
				Me._eventTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_statusName", DbType:="NVarChar(50)")>  _
	Public Property statusName() As String
		Get
			Return Me._statusName
		End Get
		Set
			If (String.Equals(Me._statusName, value) = false) Then
				Me._statusName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brands", DbType:="VarChar(MAX)")>  _
	Public Property brands() As String
		Get
			Return Me._brands
		End Get
		Set
			If (String.Equals(Me._brands, value) = false) Then
				Me._brands = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="Int NOT NULL")>  _
	Public Property accountID() As Integer
		Get
			Return Me._accountID
		End Get
		Set
			If ((Me._accountID = value)  _
						= false) Then
				Me._accountID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierName", DbType:="NVarChar(50)")>  _
	Public Property supplierName() As String
		Get
			Return Me._supplierName
		End Get
		Set
			If (String.Equals(Me._supplierName, value) = false) Then
				Me._supplierName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_startTime", DbType:="SmallDateTime")>  _
	Public Property startTime() As System.Nullable(Of Date)
		Get
			Return Me._startTime
		End Get
		Set
			If (Me._startTime.Equals(value) = false) Then
				Me._startTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_endTime", DbType:="SmallDateTime")>  _
	Public Property endTime() As System.Nullable(Of Date)
		Get
			Return Me._endTime
		End Get
		Set
			If (Me._endTime.Equals(value) = false) Then
				Me._endTime = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryViewPastEventsByAmbassador")>  _
Partial Public Class qryViewPastEventsByAmbassador
	
	Private _eventID As Integer
	
	Private _eventDate As System.Nullable(Of Date)
	
	Private _eventTitle As String
	
	Private _statusName As String
	
	Private _brands As String
	
	Private _accountID As Integer
	
	Private _accountName As String
	
	Private _supplierName As String
	
	Private _startTime As System.Nullable(Of Date)
	
	Private _endTime As System.Nullable(Of Date)
	
	Private _userID As String
	
	Private _positionTitle As String
	
	Private _rate As System.Nullable(Of Decimal)
	
	Private _hours As System.Nullable(Of Integer)
	
	Private _Total As System.Nullable(Of Decimal)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventDate", DbType:="SmallDateTime")>  _
	Public Property eventDate() As System.Nullable(Of Date)
		Get
			Return Me._eventDate
		End Get
		Set
			If (Me._eventDate.Equals(value) = false) Then
				Me._eventDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTitle", DbType:="VarChar(1000)")>  _
	Public Property eventTitle() As String
		Get
			Return Me._eventTitle
		End Get
		Set
			If (String.Equals(Me._eventTitle, value) = false) Then
				Me._eventTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_statusName", DbType:="NVarChar(50)")>  _
	Public Property statusName() As String
		Get
			Return Me._statusName
		End Get
		Set
			If (String.Equals(Me._statusName, value) = false) Then
				Me._statusName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brands", DbType:="VarChar(MAX)")>  _
	Public Property brands() As String
		Get
			Return Me._brands
		End Get
		Set
			If (String.Equals(Me._brands, value) = false) Then
				Me._brands = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="Int NOT NULL")>  _
	Public Property accountID() As Integer
		Get
			Return Me._accountID
		End Get
		Set
			If ((Me._accountID = value)  _
						= false) Then
				Me._accountID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountName", DbType:="VarChar(256)")>  _
	Public Property accountName() As String
		Get
			Return Me._accountName
		End Get
		Set
			If (String.Equals(Me._accountName, value) = false) Then
				Me._accountName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierName", DbType:="NVarChar(50)")>  _
	Public Property supplierName() As String
		Get
			Return Me._supplierName
		End Get
		Set
			If (String.Equals(Me._supplierName, value) = false) Then
				Me._supplierName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_startTime", DbType:="SmallDateTime")>  _
	Public Property startTime() As System.Nullable(Of Date)
		Get
			Return Me._startTime
		End Get
		Set
			If (Me._startTime.Equals(value) = false) Then
				Me._startTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_endTime", DbType:="SmallDateTime")>  _
	Public Property endTime() As System.Nullable(Of Date)
		Get
			Return Me._endTime
		End Get
		Set
			If (Me._endTime.Equals(value) = false) Then
				Me._endTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me._userID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_positionTitle", DbType:="NVarChar(50)")>  _
	Public Property positionTitle() As String
		Get
			Return Me._positionTitle
		End Get
		Set
			If (String.Equals(Me._positionTitle, value) = false) Then
				Me._positionTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rate", DbType:="Decimal(18,2)")>  _
	Public Property rate() As System.Nullable(Of Decimal)
		Get
			Return Me._rate
		End Get
		Set
			If (Me._rate.Equals(value) = false) Then
				Me._rate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hours", DbType:="Int")>  _
	Public Property hours() As System.Nullable(Of Integer)
		Get
			Return Me._hours
		End Get
		Set
			If (Me._hours.Equals(value) = false) Then
				Me._hours = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Total", DbType:="Decimal(29,2)")>  _
	Public Property Total() As System.Nullable(Of Decimal)
		Get
			Return Me._Total
		End Get
		Set
			If (Me._Total.Equals(value) = false) Then
				Me._Total = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryViewNeedsRecapEventsByAmbassador")>  _
Partial Public Class qryViewNeedsRecapEventsByAmbassador
	
	Private _eventID As Integer
	
	Private _eventDate As System.Nullable(Of Date)
	
	Private _eventTitle As String
	
	Private _statusName As String
	
	Private _brands As String
	
	Private _accountID As Integer
	
	Private _accountName As String
	
	Private _supplierName As String
	
	Private _startTime As System.Nullable(Of Date)
	
	Private _endTime As System.Nullable(Of Date)
	
	Private _userID As String
	
	Private _positionTitle As String
	
	Private _rate As System.Nullable(Of Decimal)
	
	Private _hours As System.Nullable(Of Integer)
	
	Private _Total As System.Nullable(Of Decimal)
	
	Private _recapStatus As System.Nullable(Of Integer)
	
	Private _LabelText As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventDate", DbType:="SmallDateTime")>  _
	Public Property eventDate() As System.Nullable(Of Date)
		Get
			Return Me._eventDate
		End Get
		Set
			If (Me._eventDate.Equals(value) = false) Then
				Me._eventDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTitle", DbType:="VarChar(1000)")>  _
	Public Property eventTitle() As String
		Get
			Return Me._eventTitle
		End Get
		Set
			If (String.Equals(Me._eventTitle, value) = false) Then
				Me._eventTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_statusName", DbType:="NVarChar(50)")>  _
	Public Property statusName() As String
		Get
			Return Me._statusName
		End Get
		Set
			If (String.Equals(Me._statusName, value) = false) Then
				Me._statusName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brands", DbType:="VarChar(MAX)")>  _
	Public Property brands() As String
		Get
			Return Me._brands
		End Get
		Set
			If (String.Equals(Me._brands, value) = false) Then
				Me._brands = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="Int NOT NULL")>  _
	Public Property accountID() As Integer
		Get
			Return Me._accountID
		End Get
		Set
			If ((Me._accountID = value)  _
						= false) Then
				Me._accountID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountName", DbType:="VarChar(256)")>  _
	Public Property accountName() As String
		Get
			Return Me._accountName
		End Get
		Set
			If (String.Equals(Me._accountName, value) = false) Then
				Me._accountName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierName", DbType:="NVarChar(50)")>  _
	Public Property supplierName() As String
		Get
			Return Me._supplierName
		End Get
		Set
			If (String.Equals(Me._supplierName, value) = false) Then
				Me._supplierName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_startTime", DbType:="SmallDateTime")>  _
	Public Property startTime() As System.Nullable(Of Date)
		Get
			Return Me._startTime
		End Get
		Set
			If (Me._startTime.Equals(value) = false) Then
				Me._startTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_endTime", DbType:="SmallDateTime")>  _
	Public Property endTime() As System.Nullable(Of Date)
		Get
			Return Me._endTime
		End Get
		Set
			If (Me._endTime.Equals(value) = false) Then
				Me._endTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me._userID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_positionTitle", DbType:="NVarChar(50)")>  _
	Public Property positionTitle() As String
		Get
			Return Me._positionTitle
		End Get
		Set
			If (String.Equals(Me._positionTitle, value) = false) Then
				Me._positionTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rate", DbType:="Decimal(18,2)")>  _
	Public Property rate() As System.Nullable(Of Decimal)
		Get
			Return Me._rate
		End Get
		Set
			If (Me._rate.Equals(value) = false) Then
				Me._rate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hours", DbType:="Int")>  _
	Public Property hours() As System.Nullable(Of Integer)
		Get
			Return Me._hours
		End Get
		Set
			If (Me._hours.Equals(value) = false) Then
				Me._hours = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Total", DbType:="Decimal(29,2)")>  _
	Public Property Total() As System.Nullable(Of Decimal)
		Get
			Return Me._Total
		End Get
		Set
			If (Me._Total.Equals(value) = false) Then
				Me._Total = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_recapStatus", DbType:="Int")>  _
	Public Property recapStatus() As System.Nullable(Of Integer)
		Get
			Return Me._recapStatus
		End Get
		Set
			If (Me._recapStatus.Equals(value) = false) Then
				Me._recapStatus = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LabelText", DbType:="VarChar(19)")>  _
	Public Property LabelText() As String
		Get
			Return Me._LabelText
		End Get
		Set
			If (String.Equals(Me._LabelText, value) = false) Then
				Me._LabelText = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.GetAmbassadorMap")>  _
Partial Public Class GetAmbassadorMap
	
	Private _userID As String
	
	Private _userName As String
	
	Private _FirstName As String
	
	Private _LastName As String
	
	Private _City As String
	
	Private _State As String
	
	Private _latitude As System.Nullable(Of Double)
	
	Private _longitude As System.Nullable(Of Double)
	
	Private _shape As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me._userID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userName", DbType:="NVarChar(50)")>  _
	Public Property userName() As String
		Get
			Return Me._userName
		End Get
		Set
			If (String.Equals(Me._userName, value) = false) Then
				Me._userName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="NVarChar(50)")>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me._FirstName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="NVarChar(50)")>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me._LastName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", DbType:="NVarChar(50)")>  _
	Public Property City() As String
		Get
			Return Me._City
		End Get
		Set
			If (String.Equals(Me._City, value) = false) Then
				Me._City = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_State", DbType:="NVarChar(50)")>  _
	Public Property State() As String
		Get
			Return Me._State
		End Get
		Set
			If (String.Equals(Me._State, value) = false) Then
				Me._State = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_latitude", DbType:="Float")>  _
	Public Property latitude() As System.Nullable(Of Double)
		Get
			Return Me._latitude
		End Get
		Set
			If (Me._latitude.Equals(value) = false) Then
				Me._latitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_longitude", DbType:="Float")>  _
	Public Property longitude() As System.Nullable(Of Double)
		Get
			Return Me._longitude
		End Get
		Set
			If (Me._longitude.Equals(value) = false) Then
				Me._longitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_shape", DbType:="VarChar(9) NOT NULL", CanBeNull:=false)>  _
	Public Property shape() As String
		Get
			Return Me._shape
		End Get
		Set
			If (String.Equals(Me._shape, value) = false) Then
				Me._shape = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryViewCurrentEventsByAmbassador")>  _
Partial Public Class qryViewCurrentEventsByAmbassador
	
	Private _eventID As Integer
	
	Private _eventDate As System.Nullable(Of Date)
	
	Private _eventTitle As String
	
	Private _statusName As String
	
	Private _brands As String
	
	Private _accountID As Integer
	
	Private _accountName As String
	
	Private _supplierName As String
	
	Private _startTime As System.Nullable(Of Date)
	
	Private _endTime As System.Nullable(Of Date)
	
	Private _userID As String
	
	Private _positionTitle As String
	
	Private _rate As System.Nullable(Of Decimal)
	
	Private _hours As System.Nullable(Of Integer)
	
	Private _Total As System.Nullable(Of Decimal)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventDate", DbType:="SmallDateTime")>  _
	Public Property eventDate() As System.Nullable(Of Date)
		Get
			Return Me._eventDate
		End Get
		Set
			If (Me._eventDate.Equals(value) = false) Then
				Me._eventDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTitle", DbType:="VarChar(1000)")>  _
	Public Property eventTitle() As String
		Get
			Return Me._eventTitle
		End Get
		Set
			If (String.Equals(Me._eventTitle, value) = false) Then
				Me._eventTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_statusName", DbType:="NVarChar(50)")>  _
	Public Property statusName() As String
		Get
			Return Me._statusName
		End Get
		Set
			If (String.Equals(Me._statusName, value) = false) Then
				Me._statusName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brands", DbType:="VarChar(MAX)")>  _
	Public Property brands() As String
		Get
			Return Me._brands
		End Get
		Set
			If (String.Equals(Me._brands, value) = false) Then
				Me._brands = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="Int NOT NULL")>  _
	Public Property accountID() As Integer
		Get
			Return Me._accountID
		End Get
		Set
			If ((Me._accountID = value)  _
						= false) Then
				Me._accountID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountName", DbType:="VarChar(256)")>  _
	Public Property accountName() As String
		Get
			Return Me._accountName
		End Get
		Set
			If (String.Equals(Me._accountName, value) = false) Then
				Me._accountName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierName", DbType:="NVarChar(50)")>  _
	Public Property supplierName() As String
		Get
			Return Me._supplierName
		End Get
		Set
			If (String.Equals(Me._supplierName, value) = false) Then
				Me._supplierName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_startTime", DbType:="SmallDateTime")>  _
	Public Property startTime() As System.Nullable(Of Date)
		Get
			Return Me._startTime
		End Get
		Set
			If (Me._startTime.Equals(value) = false) Then
				Me._startTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_endTime", DbType:="SmallDateTime")>  _
	Public Property endTime() As System.Nullable(Of Date)
		Get
			Return Me._endTime
		End Get
		Set
			If (Me._endTime.Equals(value) = false) Then
				Me._endTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me._userID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_positionTitle", DbType:="NVarChar(50)")>  _
	Public Property positionTitle() As String
		Get
			Return Me._positionTitle
		End Get
		Set
			If (String.Equals(Me._positionTitle, value) = false) Then
				Me._positionTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rate", DbType:="Decimal(18,2)")>  _
	Public Property rate() As System.Nullable(Of Decimal)
		Get
			Return Me._rate
		End Get
		Set
			If (Me._rate.Equals(value) = false) Then
				Me._rate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hours", DbType:="Int")>  _
	Public Property hours() As System.Nullable(Of Integer)
		Get
			Return Me._hours
		End Get
		Set
			If (Me._hours.Equals(value) = false) Then
				Me._hours = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Total", DbType:="Decimal(29,2)")>  _
	Public Property Total() As System.Nullable(Of Decimal)
		Get
			Return Me._Total
		End Get
		Set
			If (Me._Total.Equals(value) = false) Then
				Me._Total = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryViewCurrentEvents")>  _
Partial Public Class qryViewCurrentEvent
	
	Private _eventID As Integer
	
	Private _eventDate As System.Nullable(Of Date)
	
	Private _eventTitle As String
	
	Private _statusName As String
	
	Private _brands As String
	
	Private _accountID As Integer
	
	Private _supplierName As String
	
	Private _startTime As System.Nullable(Of Date)
	
	Private _endTime As System.Nullable(Of Date)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventDate", DbType:="SmallDateTime")>  _
	Public Property eventDate() As System.Nullable(Of Date)
		Get
			Return Me._eventDate
		End Get
		Set
			If (Me._eventDate.Equals(value) = false) Then
				Me._eventDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTitle", DbType:="VarChar(1000)")>  _
	Public Property eventTitle() As String
		Get
			Return Me._eventTitle
		End Get
		Set
			If (String.Equals(Me._eventTitle, value) = false) Then
				Me._eventTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_statusName", DbType:="NVarChar(50)")>  _
	Public Property statusName() As String
		Get
			Return Me._statusName
		End Get
		Set
			If (String.Equals(Me._statusName, value) = false) Then
				Me._statusName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brands", DbType:="VarChar(MAX)")>  _
	Public Property brands() As String
		Get
			Return Me._brands
		End Get
		Set
			If (String.Equals(Me._brands, value) = false) Then
				Me._brands = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="Int NOT NULL")>  _
	Public Property accountID() As Integer
		Get
			Return Me._accountID
		End Get
		Set
			If ((Me._accountID = value)  _
						= false) Then
				Me._accountID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierName", DbType:="NVarChar(50)")>  _
	Public Property supplierName() As String
		Get
			Return Me._supplierName
		End Get
		Set
			If (String.Equals(Me._supplierName, value) = false) Then
				Me._supplierName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_startTime", DbType:="SmallDateTime")>  _
	Public Property startTime() As System.Nullable(Of Date)
		Get
			Return Me._startTime
		End Get
		Set
			If (Me._startTime.Equals(value) = false) Then
				Me._startTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_endTime", DbType:="SmallDateTime")>  _
	Public Property endTime() As System.Nullable(Of Date)
		Get
			Return Me._endTime
		End Get
		Set
			If (Me._endTime.Equals(value) = false) Then
				Me._endTime = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryGetBrandGroupsByClientID")>  _
Partial Public Class qryGetBrandGroupsByClientID
	
	Private _brandGroupName As String
	
	Private _brandGroupID As Integer
	
	Private _BrandCount As System.Nullable(Of Integer)
	
	Private _clientID As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandGroupName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property brandGroupName() As String
		Get
			Return Me._brandGroupName
		End Get
		Set
			If (String.Equals(Me._brandGroupName, value) = false) Then
				Me._brandGroupName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandGroupID", DbType:="Int NOT NULL")>  _
	Public Property brandGroupID() As Integer
		Get
			Return Me._brandGroupID
		End Get
		Set
			If ((Me._brandGroupID = value)  _
						= false) Then
				Me._brandGroupID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BrandCount", DbType:="Int")>  _
	Public Property BrandCount() As System.Nullable(Of Integer)
		Get
			Return Me._BrandCount
		End Get
		Set
			If (Me._BrandCount.Equals(value) = false) Then
				Me._BrandCount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", DbType:="Int")>  _
	Public Property clientID() As System.Nullable(Of Integer)
		Get
			Return Me._clientID
		End Get
		Set
			If (Me._clientID.Equals(value) = false) Then
				Me._clientID = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryInventoryList")>  _
Partial Public Class qryInventoryList
	
	Private _inventoryID As Integer
	
	Private _itemID As Integer
	
	Private _date As System.Nullable(Of Date)
	
	Private _action As String
	
	Private _quantity As System.Nullable(Of Integer)
	
	Private _location As String
	
	Private _itemName As String
	
	Private _brandID As Integer
	
	Private _QtyOnHand As System.Nullable(Of Integer)
	
	Private _balance As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_inventoryID", DbType:="Int NOT NULL")>  _
	Public Property inventoryID() As Integer
		Get
			Return Me._inventoryID
		End Get
		Set
			If ((Me._inventoryID = value)  _
						= false) Then
				Me._inventoryID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_itemID", DbType:="Int NOT NULL")>  _
	Public Property itemID() As Integer
		Get
			Return Me._itemID
		End Get
		Set
			If ((Me._itemID = value)  _
						= false) Then
				Me._itemID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="date", Storage:="_date", DbType:="SmallDateTime")>  _
	Public Property [date]() As System.Nullable(Of Date)
		Get
			Return Me._date
		End Get
		Set
			If (Me._date.Equals(value) = false) Then
				Me._date = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_action", DbType:="VarChar(50)")>  _
	Public Property action() As String
		Get
			Return Me._action
		End Get
		Set
			If (String.Equals(Me._action, value) = false) Then
				Me._action = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_quantity", DbType:="Int")>  _
	Public Property quantity() As System.Nullable(Of Integer)
		Get
			Return Me._quantity
		End Get
		Set
			If (Me._quantity.Equals(value) = false) Then
				Me._quantity = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_location", DbType:="VarChar(50)")>  _
	Public Property location() As String
		Get
			Return Me._location
		End Get
		Set
			If (String.Equals(Me._location, value) = false) Then
				Me._location = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_itemName", DbType:="NVarChar(50)")>  _
	Public Property itemName() As String
		Get
			Return Me._itemName
		End Get
		Set
			If (String.Equals(Me._itemName, value) = false) Then
				Me._itemName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandID", DbType:="Int NOT NULL")>  _
	Public Property brandID() As Integer
		Get
			Return Me._brandID
		End Get
		Set
			If ((Me._brandID = value)  _
						= false) Then
				Me._brandID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QtyOnHand", DbType:="Int")>  _
	Public Property QtyOnHand() As System.Nullable(Of Integer)
		Get
			Return Me._QtyOnHand
		End Get
		Set
			If (Me._QtyOnHand.Equals(value) = false) Then
				Me._QtyOnHand = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_balance", DbType:="Int")>  _
	Public Property balance() As System.Nullable(Of Integer)
		Get
			Return Me._balance
		End Get
		Set
			If (Me._balance.Equals(value) = false) Then
				Me._balance = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryViewCurrentEventsByAmbassador")>  _
Partial Public Class qryViewCurrentEventsByAmbassador1
	
	Private _eventID As Integer
	
	Private _eventDate As System.Nullable(Of Date)
	
	Private _eventTitle As String
	
	Private _statusName As String
	
	Private _brands As String
	
	Private _accountID As Integer
	
	Private _accountName As String
	
	Private _supplierName As String
	
	Private _startTime As System.Nullable(Of Date)
	
	Private _endTime As System.Nullable(Of Date)
	
	Private _userID As String
	
	Private _positionTitle As String
	
	Private _rate As System.Nullable(Of Decimal)
	
	Private _hours As System.Nullable(Of Integer)
	
	Private _Total As System.Nullable(Of Decimal)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventDate", DbType:="SmallDateTime")>  _
	Public Property eventDate() As System.Nullable(Of Date)
		Get
			Return Me._eventDate
		End Get
		Set
			If (Me._eventDate.Equals(value) = false) Then
				Me._eventDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTitle", DbType:="VarChar(1000)")>  _
	Public Property eventTitle() As String
		Get
			Return Me._eventTitle
		End Get
		Set
			If (String.Equals(Me._eventTitle, value) = false) Then
				Me._eventTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_statusName", DbType:="NVarChar(50)")>  _
	Public Property statusName() As String
		Get
			Return Me._statusName
		End Get
		Set
			If (String.Equals(Me._statusName, value) = false) Then
				Me._statusName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brands", DbType:="VarChar(MAX)")>  _
	Public Property brands() As String
		Get
			Return Me._brands
		End Get
		Set
			If (String.Equals(Me._brands, value) = false) Then
				Me._brands = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="Int NOT NULL")>  _
	Public Property accountID() As Integer
		Get
			Return Me._accountID
		End Get
		Set
			If ((Me._accountID = value)  _
						= false) Then
				Me._accountID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountName", DbType:="VarChar(256)")>  _
	Public Property accountName() As String
		Get
			Return Me._accountName
		End Get
		Set
			If (String.Equals(Me._accountName, value) = false) Then
				Me._accountName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierName", DbType:="NVarChar(50)")>  _
	Public Property supplierName() As String
		Get
			Return Me._supplierName
		End Get
		Set
			If (String.Equals(Me._supplierName, value) = false) Then
				Me._supplierName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_startTime", DbType:="SmallDateTime")>  _
	Public Property startTime() As System.Nullable(Of Date)
		Get
			Return Me._startTime
		End Get
		Set
			If (Me._startTime.Equals(value) = false) Then
				Me._startTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_endTime", DbType:="SmallDateTime")>  _
	Public Property endTime() As System.Nullable(Of Date)
		Get
			Return Me._endTime
		End Get
		Set
			If (Me._endTime.Equals(value) = false) Then
				Me._endTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me._userID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_positionTitle", DbType:="NVarChar(50)")>  _
	Public Property positionTitle() As String
		Get
			Return Me._positionTitle
		End Get
		Set
			If (String.Equals(Me._positionTitle, value) = false) Then
				Me._positionTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rate", DbType:="Decimal(18,2)")>  _
	Public Property rate() As System.Nullable(Of Decimal)
		Get
			Return Me._rate
		End Get
		Set
			If (Me._rate.Equals(value) = false) Then
				Me._rate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hours", DbType:="Int")>  _
	Public Property hours() As System.Nullable(Of Integer)
		Get
			Return Me._hours
		End Get
		Set
			If (Me._hours.Equals(value) = false) Then
				Me._hours = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Total", DbType:="Decimal(29,2)")>  _
	Public Property Total() As System.Nullable(Of Decimal)
		Get
			Return Me._Total
		End Get
		Set
			If (Me._Total.Equals(value) = false) Then
				Me._Total = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryViewEventsByAmbassador")>  _
Partial Public Class qryViewEventsByAmbassador
	
	Private _userID As String
	
	Private _eventID As Integer
	
	Private _supplierID As System.Nullable(Of Integer)
	
	Private _supplierName As String
	
	Private _eventTitle As String
	
	Private _eventDate As System.Nullable(Of Date)
	
	Private _startTime As System.Nullable(Of Date)
	
	Private _endTime As System.Nullable(Of Date)
	
	Private _clientID As System.Nullable(Of Integer)
	
	Private _statusID As Integer
	
	Private _statusName As String
	
	Private _eventTypeID As System.Nullable(Of Integer)
	
	Private _eventTypeName As String
	
	Private _marketID As System.Nullable(Of Integer)
	
	Private _marketName As String
	
	Private _locationID As System.Nullable(Of Integer)
	
	Private _accountID As Integer
	
	Private _Vpid As System.Nullable(Of Integer)
	
	Private _accountName As String
	
	Private _address As String
	
	Private _city As String
	
	Private _state As String
	
	Private _brands As String
	
	Private _latitude As System.Nullable(Of Double)
	
	Private _longitude As System.Nullable(Of Double)
	
	Private _shape As String
	
	Private _tooltiptext As String
	
	Private _tooltipformap As String
	
	Private _formatedEventDate As String
	
	Private _formatedStartTime As String
	
	Private _hours As System.Nullable(Of Integer)
	
	Private _checkedIn As System.Nullable(Of Boolean)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me._userID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int")>  _
	Public Property supplierID() As System.Nullable(Of Integer)
		Get
			Return Me._supplierID
		End Get
		Set
			If (Me._supplierID.Equals(value) = false) Then
				Me._supplierID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierName", DbType:="NVarChar(50)")>  _
	Public Property supplierName() As String
		Get
			Return Me._supplierName
		End Get
		Set
			If (String.Equals(Me._supplierName, value) = false) Then
				Me._supplierName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTitle", DbType:="VarChar(1000)")>  _
	Public Property eventTitle() As String
		Get
			Return Me._eventTitle
		End Get
		Set
			If (String.Equals(Me._eventTitle, value) = false) Then
				Me._eventTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventDate", DbType:="SmallDateTime")>  _
	Public Property eventDate() As System.Nullable(Of Date)
		Get
			Return Me._eventDate
		End Get
		Set
			If (Me._eventDate.Equals(value) = false) Then
				Me._eventDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_startTime", DbType:="SmallDateTime")>  _
	Public Property startTime() As System.Nullable(Of Date)
		Get
			Return Me._startTime
		End Get
		Set
			If (Me._startTime.Equals(value) = false) Then
				Me._startTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_endTime", DbType:="SmallDateTime")>  _
	Public Property endTime() As System.Nullable(Of Date)
		Get
			Return Me._endTime
		End Get
		Set
			If (Me._endTime.Equals(value) = false) Then
				Me._endTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", DbType:="Int")>  _
	Public Property clientID() As System.Nullable(Of Integer)
		Get
			Return Me._clientID
		End Get
		Set
			If (Me._clientID.Equals(value) = false) Then
				Me._clientID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_statusID", DbType:="Int NOT NULL")>  _
	Public Property statusID() As Integer
		Get
			Return Me._statusID
		End Get
		Set
			If ((Me._statusID = value)  _
						= false) Then
				Me._statusID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_statusName", DbType:="NVarChar(50)")>  _
	Public Property statusName() As String
		Get
			Return Me._statusName
		End Get
		Set
			If (String.Equals(Me._statusName, value) = false) Then
				Me._statusName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTypeID", DbType:="Int")>  _
	Public Property eventTypeID() As System.Nullable(Of Integer)
		Get
			Return Me._eventTypeID
		End Get
		Set
			If (Me._eventTypeID.Equals(value) = false) Then
				Me._eventTypeID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTypeName", DbType:="NVarChar(50)")>  _
	Public Property eventTypeName() As String
		Get
			Return Me._eventTypeName
		End Get
		Set
			If (String.Equals(Me._eventTypeName, value) = false) Then
				Me._eventTypeName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="Int")>  _
	Public Property marketID() As System.Nullable(Of Integer)
		Get
			Return Me._marketID
		End Get
		Set
			If (Me._marketID.Equals(value) = false) Then
				Me._marketID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketName", DbType:="VarChar(50)")>  _
	Public Property marketName() As String
		Get
			Return Me._marketName
		End Get
		Set
			If (String.Equals(Me._marketName, value) = false) Then
				Me._marketName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_locationID", DbType:="Int")>  _
	Public Property locationID() As System.Nullable(Of Integer)
		Get
			Return Me._locationID
		End Get
		Set
			If (Me._locationID.Equals(value) = false) Then
				Me._locationID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="Int NOT NULL")>  _
	Public Property accountID() As Integer
		Get
			Return Me._accountID
		End Get
		Set
			If ((Me._accountID = value)  _
						= false) Then
				Me._accountID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Vpid", DbType:="Int")>  _
	Public Property Vpid() As System.Nullable(Of Integer)
		Get
			Return Me._Vpid
		End Get
		Set
			If (Me._Vpid.Equals(value) = false) Then
				Me._Vpid = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountName", DbType:="VarChar(256)")>  _
	Public Property accountName() As String
		Get
			Return Me._accountName
		End Get
		Set
			If (String.Equals(Me._accountName, value) = false) Then
				Me._accountName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_address", DbType:="VarChar(256)")>  _
	Public Property address() As String
		Get
			Return Me._address
		End Get
		Set
			If (String.Equals(Me._address, value) = false) Then
				Me._address = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_city", DbType:="VarChar(50)")>  _
	Public Property city() As String
		Get
			Return Me._city
		End Get
		Set
			If (String.Equals(Me._city, value) = false) Then
				Me._city = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_state", DbType:="NVarChar(20)")>  _
	Public Property state() As String
		Get
			Return Me._state
		End Get
		Set
			If (String.Equals(Me._state, value) = false) Then
				Me._state = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brands", DbType:="VarChar(MAX)")>  _
	Public Property brands() As String
		Get
			Return Me._brands
		End Get
		Set
			If (String.Equals(Me._brands, value) = false) Then
				Me._brands = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_latitude", DbType:="Float")>  _
	Public Property latitude() As System.Nullable(Of Double)
		Get
			Return Me._latitude
		End Get
		Set
			If (Me._latitude.Equals(value) = false) Then
				Me._latitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_longitude", DbType:="Float")>  _
	Public Property longitude() As System.Nullable(Of Double)
		Get
			Return Me._longitude
		End Get
		Set
			If (Me._longitude.Equals(value) = false) Then
				Me._longitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_shape", DbType:="VarChar(9) NOT NULL", CanBeNull:=false)>  _
	Public Property shape() As String
		Get
			Return Me._shape
		End Get
		Set
			If (String.Equals(Me._shape, value) = false) Then
				Me._shape = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tooltiptext", DbType:="NVarChar(4000)")>  _
	Public Property tooltiptext() As String
		Get
			Return Me._tooltiptext
		End Get
		Set
			If (String.Equals(Me._tooltiptext, value) = false) Then
				Me._tooltiptext = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tooltipformap", DbType:="NVarChar(4000)")>  _
	Public Property tooltipformap() As String
		Get
			Return Me._tooltipformap
		End Get
		Set
			If (String.Equals(Me._tooltipformap, value) = false) Then
				Me._tooltipformap = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_formatedEventDate", DbType:="NVarChar(4000)")>  _
	Public Property formatedEventDate() As String
		Get
			Return Me._formatedEventDate
		End Get
		Set
			If (String.Equals(Me._formatedEventDate, value) = false) Then
				Me._formatedEventDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_formatedStartTime", DbType:="NVarChar(4000)")>  _
	Public Property formatedStartTime() As String
		Get
			Return Me._formatedStartTime
		End Get
		Set
			If (String.Equals(Me._formatedStartTime, value) = false) Then
				Me._formatedStartTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hours", DbType:="Int")>  _
	Public Property hours() As System.Nullable(Of Integer)
		Get
			Return Me._hours
		End Get
		Set
			If (Me._hours.Equals(value) = false) Then
				Me._hours = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_checkedIn", DbType:="Bit")>  _
	Public Property checkedIn() As System.Nullable(Of Boolean)
		Get
			Return Me._checkedIn
		End Get
		Set
			If (Me._checkedIn.Equals(value) = false) Then
				Me._checkedIn = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryGetAccountActivities")>  _
Partial Public Class qryGetAccountActivity
	
	Private _accountActivityID As Integer
	
	Private _Account As String
	
	Private _accountID As Integer
	
	Private _ActivityName As String
	
	Private _activityDate As System.Nullable(Of Date)
	
	Private _status As String
	
	Private _AccountType As String
	
	Private _Market As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountActivityID", DbType:="Int NOT NULL")>  _
	Public Property accountActivityID() As Integer
		Get
			Return Me._accountActivityID
		End Get
		Set
			If ((Me._accountActivityID = value)  _
						= false) Then
				Me._accountActivityID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Account", DbType:="VarChar(50)")>  _
	Public Property Account() As String
		Get
			Return Me._Account
		End Get
		Set
			If (String.Equals(Me._Account, value) = false) Then
				Me._Account = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="Int NOT NULL")>  _
	Public Property accountID() As Integer
		Get
			Return Me._accountID
		End Get
		Set
			If ((Me._accountID = value)  _
						= false) Then
				Me._accountID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ActivityName", DbType:="VarChar(50)")>  _
	Public Property ActivityName() As String
		Get
			Return Me._ActivityName
		End Get
		Set
			If (String.Equals(Me._ActivityName, value) = false) Then
				Me._ActivityName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_activityDate", DbType:="SmallDateTime")>  _
	Public Property activityDate() As System.Nullable(Of Date)
		Get
			Return Me._activityDate
		End Get
		Set
			If (Me._activityDate.Equals(value) = false) Then
				Me._activityDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", DbType:="NVarChar(50)")>  _
	Public Property status() As String
		Get
			Return Me._status
		End Get
		Set
			If (String.Equals(Me._status, value) = false) Then
				Me._status = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountType", DbType:="VarChar(MAX)")>  _
	Public Property AccountType() As String
		Get
			Return Me._AccountType
		End Get
		Set
			If (String.Equals(Me._AccountType, value) = false) Then
				Me._AccountType = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Market", DbType:="VarChar(50)")>  _
	Public Property Market() As String
		Get
			Return Me._Market
		End Get
		Set
			If (String.Equals(Me._Market, value) = false) Then
				Me._Market = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryViewPendingAmbassador")>  _
Partial Public Class qryViewPendingAmbassador
	
	Private _ambassadorID As Integer
	
	Private _userID As String
	
	Private _userName As String
	
	Private _FirstName As String
	
	Private _LastName As String
	
	Private _EmailAddress As String
	
	Private _City As String
	
	Private _State As String
	
	Private _LastLoginDate As String
	
	Private _labelText As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ambassadorID", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property ambassadorID() As Integer
		Get
			Return Me._ambassadorID
		End Get
		Set
			If ((Me._ambassadorID = value)  _
						= false) Then
				Me._ambassadorID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me._userID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userName", DbType:="NVarChar(50)")>  _
	Public Property userName() As String
		Get
			Return Me._userName
		End Get
		Set
			If (String.Equals(Me._userName, value) = false) Then
				Me._userName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="NVarChar(50)")>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me._FirstName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="NVarChar(50)")>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me._LastName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmailAddress", DbType:="NVarChar(50)")>  _
	Public Property EmailAddress() As String
		Get
			Return Me._EmailAddress
		End Get
		Set
			If (String.Equals(Me._EmailAddress, value) = false) Then
				Me._EmailAddress = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", DbType:="NVarChar(50)")>  _
	Public Property City() As String
		Get
			Return Me._City
		End Get
		Set
			If (String.Equals(Me._City, value) = false) Then
				Me._City = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_State", DbType:="VarChar(MAX)")>  _
	Public Property State() As String
		Get
			Return Me._State
		End Get
		Set
			If (String.Equals(Me._State, value) = false) Then
				Me._State = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastLoginDate", DbType:="NVarChar(100)")>  _
	Public Property LastLoginDate() As String
		Get
			Return Me._LastLoginDate
		End Get
		Set
			If (String.Equals(Me._LastLoginDate, value) = false) Then
				Me._LastLoginDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_labelText", DbType:="VarChar(101)")>  _
	Public Property labelText() As String
		Get
			Return Me._labelText
		End Get
		Set
			If (String.Equals(Me._labelText, value) = false) Then
				Me._labelText = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryViewRejectedAmbassador")>  _
Partial Public Class qryViewRejectedAmbassador
	
	Private _ambassadorID As Integer
	
	Private _userID As String
	
	Private _userName As String
	
	Private _FirstName As String
	
	Private _LastName As String
	
	Private _EmailAddress As String
	
	Private _City As String
	
	Private _State As String
	
	Private _LastLoginDate As String
	
	Private _labelText As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ambassadorID", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property ambassadorID() As Integer
		Get
			Return Me._ambassadorID
		End Get
		Set
			If ((Me._ambassadorID = value)  _
						= false) Then
				Me._ambassadorID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me._userID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userName", DbType:="NVarChar(50)")>  _
	Public Property userName() As String
		Get
			Return Me._userName
		End Get
		Set
			If (String.Equals(Me._userName, value) = false) Then
				Me._userName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="NVarChar(50)")>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me._FirstName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="NVarChar(50)")>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me._LastName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmailAddress", DbType:="NVarChar(50)")>  _
	Public Property EmailAddress() As String
		Get
			Return Me._EmailAddress
		End Get
		Set
			If (String.Equals(Me._EmailAddress, value) = false) Then
				Me._EmailAddress = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", DbType:="NVarChar(50)")>  _
	Public Property City() As String
		Get
			Return Me._City
		End Get
		Set
			If (String.Equals(Me._City, value) = false) Then
				Me._City = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_State", DbType:="VarChar(MAX)")>  _
	Public Property State() As String
		Get
			Return Me._State
		End Get
		Set
			If (String.Equals(Me._State, value) = false) Then
				Me._State = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastLoginDate", DbType:="NVarChar(100)")>  _
	Public Property LastLoginDate() As String
		Get
			Return Me._LastLoginDate
		End Get
		Set
			If (String.Equals(Me._LastLoginDate, value) = false) Then
				Me._LastLoginDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_labelText", DbType:="VarChar(101)")>  _
	Public Property labelText() As String
		Get
			Return Me._labelText
		End Get
		Set
			If (String.Equals(Me._labelText, value) = false) Then
				Me._labelText = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryViewTerminatedAmbassador")>  _
Partial Public Class qryViewTerminatedAmbassador
	
	Private _ambassadorID As Integer
	
	Private _userID As String
	
	Private _userName As String
	
	Private _FirstName As String
	
	Private _LastName As String
	
	Private _EmailAddress As String
	
	Private _City As String
	
	Private _State As String
	
	Private _LastLoginDate As String
	
	Private _labelText As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ambassadorID", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property ambassadorID() As Integer
		Get
			Return Me._ambassadorID
		End Get
		Set
			If ((Me._ambassadorID = value)  _
						= false) Then
				Me._ambassadorID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me._userID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userName", DbType:="NVarChar(50)")>  _
	Public Property userName() As String
		Get
			Return Me._userName
		End Get
		Set
			If (String.Equals(Me._userName, value) = false) Then
				Me._userName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="NVarChar(50)")>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me._FirstName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="NVarChar(50)")>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me._LastName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmailAddress", DbType:="NVarChar(50)")>  _
	Public Property EmailAddress() As String
		Get
			Return Me._EmailAddress
		End Get
		Set
			If (String.Equals(Me._EmailAddress, value) = false) Then
				Me._EmailAddress = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", DbType:="NVarChar(50)")>  _
	Public Property City() As String
		Get
			Return Me._City
		End Get
		Set
			If (String.Equals(Me._City, value) = false) Then
				Me._City = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_State", DbType:="VarChar(MAX)")>  _
	Public Property State() As String
		Get
			Return Me._State
		End Get
		Set
			If (String.Equals(Me._State, value) = false) Then
				Me._State = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastLoginDate", DbType:="NVarChar(100)")>  _
	Public Property LastLoginDate() As String
		Get
			Return Me._LastLoginDate
		End Get
		Set
			If (String.Equals(Me._LastLoginDate, value) = false) Then
				Me._LastLoginDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_labelText", DbType:="VarChar(101)")>  _
	Public Property labelText() As String
		Get
			Return Me._labelText
		End Get
		Set
			If (String.Equals(Me._labelText, value) = false) Then
				Me._labelText = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryEventTypeByClient")>  _
Partial Public Class qryEventTypeByClient
	
	Private _eventTypeID As Integer
	
	Private _eventTypeName As String
	
	Private _clientID As System.Nullable(Of Integer)
	
	Private _active As System.Nullable(Of Boolean)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTypeID", DbType:="Int NOT NULL")>  _
	Public Property eventTypeID() As Integer
		Get
			Return Me._eventTypeID
		End Get
		Set
			If ((Me._eventTypeID = value)  _
						= false) Then
				Me._eventTypeID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTypeName", DbType:="NVarChar(50)")>  _
	Public Property eventTypeName() As String
		Get
			Return Me._eventTypeName
		End Get
		Set
			If (String.Equals(Me._eventTypeName, value) = false) Then
				Me._eventTypeName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", DbType:="Int")>  _
	Public Property clientID() As System.Nullable(Of Integer)
		Get
			Return Me._clientID
		End Get
		Set
			If (Me._clientID.Equals(value) = false) Then
				Me._clientID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_active", DbType:="Bit")>  _
	Public Property active() As System.Nullable(Of Boolean)
		Get
			Return Me._active
		End Get
		Set
			If (Me._active.Equals(value) = false) Then
				Me._active = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryMarketsbyClient")>  _
Partial Public Class qryMarketsbyClient
	
	Private _clientMarketID As Integer
	
	Private _marketID As System.Nullable(Of Integer)
	
	Private _clientID As System.Nullable(Of Integer)
	
	Private _marketName As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientMarketID", DbType:="Int NOT NULL")>  _
	Public Property clientMarketID() As Integer
		Get
			Return Me._clientMarketID
		End Get
		Set
			If ((Me._clientMarketID = value)  _
						= false) Then
				Me._clientMarketID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="Int")>  _
	Public Property marketID() As System.Nullable(Of Integer)
		Get
			Return Me._marketID
		End Get
		Set
			If (Me._marketID.Equals(value) = false) Then
				Me._marketID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", DbType:="Int")>  _
	Public Property clientID() As System.Nullable(Of Integer)
		Get
			Return Me._clientID
		End Get
		Set
			If (Me._clientID.Equals(value) = false) Then
				Me._clientID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketName", DbType:="VarChar(50)")>  _
	Public Property marketName() As String
		Get
			Return Me._marketName
		End Get
		Set
			If (String.Equals(Me._marketName, value) = false) Then
				Me._marketName = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryGetEventCourse")>  _
Partial Public Class qryGetEventCourse
	
	Private _eventID As System.Nullable(Of Integer)
	
	Private _CourseTitle As String
	
	Private _curriculumTitle As String
	
	Private _curriculumID As String
	
	Private _icon As String
	
	Private _contentID As System.Nullable(Of Integer)
	
	Private _testID As String
	
	Private _url As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int")>  _
	Public Property eventID() As System.Nullable(Of Integer)
		Get
			Return Me._eventID
		End Get
		Set
			If (Me._eventID.Equals(value) = false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CourseTitle", DbType:="VarChar(256)")>  _
	Public Property CourseTitle() As String
		Get
			Return Me._CourseTitle
		End Get
		Set
			If (String.Equals(Me._CourseTitle, value) = false) Then
				Me._CourseTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_curriculumTitle", DbType:="NVarChar(256)")>  _
	Public Property curriculumTitle() As String
		Get
			Return Me._curriculumTitle
		End Get
		Set
			If (String.Equals(Me._curriculumTitle, value) = false) Then
				Me._curriculumTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_curriculumID", DbType:="NVarChar(50)")>  _
	Public Property curriculumID() As String
		Get
			Return Me._curriculumID
		End Get
		Set
			If (String.Equals(Me._curriculumID, value) = false) Then
				Me._curriculumID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_icon", DbType:="NVarChar(256)")>  _
	Public Property icon() As String
		Get
			Return Me._icon
		End Get
		Set
			If (String.Equals(Me._icon, value) = false) Then
				Me._icon = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_contentID", DbType:="Int")>  _
	Public Property contentID() As System.Nullable(Of Integer)
		Get
			Return Me._contentID
		End Get
		Set
			If (Me._contentID.Equals(value) = false) Then
				Me._contentID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_testID", DbType:="NVarChar(256)")>  _
	Public Property testID() As String
		Get
			Return Me._testID
		End Get
		Set
			If (String.Equals(Me._testID, value) = false) Then
				Me._testID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_url", DbType:="NVarChar(296)")>  _
	Public Property url() As String
		Get
			Return Me._url
		End Get
		Set
			If (String.Equals(Me._url, value) = false) Then
				Me._url = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryGetEventImportList")>  _
Partial Public Class qryGetEventImportList
	
	Private _eventImportID As Integer
	
	Private _fileName As String
	
	Private _SupplierID As System.Nullable(Of Integer)
	
	Private _SupplierName As String
	
	Private _CreatedBy As String
	
	Private _requestedBy As String
	
	Private _createdDate As System.Nullable(Of Date)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventImportID", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property eventImportID() As Integer
		Get
			Return Me._eventImportID
		End Get
		Set
			If ((Me._eventImportID = value)  _
						= false) Then
				Me._eventImportID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fileName", DbType:="NVarChar(256)")>  _
	Public Property fileName() As String
		Get
			Return Me._fileName
		End Get
		Set
			If (String.Equals(Me._fileName, value) = false) Then
				Me._fileName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SupplierID", DbType:="Int")>  _
	Public Property SupplierID() As System.Nullable(Of Integer)
		Get
			Return Me._SupplierID
		End Get
		Set
			If (Me._SupplierID.Equals(value) = false) Then
				Me._SupplierID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SupplierName", DbType:="VarChar(MAX)")>  _
	Public Property SupplierName() As String
		Get
			Return Me._SupplierName
		End Get
		Set
			If (String.Equals(Me._SupplierName, value) = false) Then
				Me._SupplierName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="VarChar(MAX)")>  _
	Public Property CreatedBy() As String
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (String.Equals(Me._CreatedBy, value) = false) Then
				Me._CreatedBy = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_requestedBy", DbType:="NVarChar(50)")>  _
	Public Property requestedBy() As String
		Get
			Return Me._requestedBy
		End Get
		Set
			If (String.Equals(Me._requestedBy, value) = false) Then
				Me._requestedBy = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_createdDate", DbType:="SmallDateTime")>  _
	Public Property createdDate() As System.Nullable(Of Date)
		Get
			Return Me._createdDate
		End Get
		Set
			If (Me._createdDate.Equals(value) = false) Then
				Me._createdDate = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryGetAssignedAmbassaorsbyEventID")>  _
Partial Public Class qryGetAssignedAmbassaorsbyEventID
	
	Private _RequirementID As Integer
	
	Private _assignedUserName As String
	
	Private _userID As String
	
	Private _eventID As Integer
	
	Private _fullName As String
	
	Private _fullAddress As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RequirementID", DbType:="Int NOT NULL")>  _
	Public Property RequirementID() As Integer
		Get
			Return Me._RequirementID
		End Get
		Set
			If ((Me._RequirementID = value)  _
						= false) Then
				Me._RequirementID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_assignedUserName", DbType:="NVarChar(50)")>  _
	Public Property assignedUserName() As String
		Get
			Return Me._assignedUserName
		End Get
		Set
			If (String.Equals(Me._assignedUserName, value) = false) Then
				Me._assignedUserName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me._userID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fullName", DbType:="NVarChar(101)")>  _
	Public Property fullName() As String
		Get
			Return Me._fullName
		End Get
		Set
			If (String.Equals(Me._fullName, value) = false) Then
				Me._fullName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fullAddress", DbType:="NVarChar(205)")>  _
	Public Property fullAddress() As String
		Get
			Return Me._fullAddress
		End Get
		Set
			If (String.Equals(Me._fullAddress, value) = false) Then
				Me._fullAddress = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblClient")>  _
Partial Public Class tblClient
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _clientID As Integer
	
	Private _clientName As String
	
	Private _active As System.Nullable(Of Boolean)
	
	Private _logoURL As String
	
	Private _country As String
	
	Private _units As String
	
	Private _suppliers As System.Nullable(Of Boolean)
	
	Private _dashboard As System.Nullable(Of Boolean)
	
	Private _tablet As System.Nullable(Of Boolean)
	
	Private _phone As System.Nullable(Of Boolean)
	
	Private _portalLogoURL As String
	
	Private _phoneNumber As String
	
	Private _streetAddress As String
	
	Private _city As String
	
	Private _state As String
	
	Private _zipCode As String
	
	Private _contactPerson As String
	
	Private _contactPhone As String
	
	Private _contactEmail As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnclientIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnclientIDChanged()
    End Sub
    Partial Private Sub OnclientNameChanging(value As String)
    End Sub
    Partial Private Sub OnclientNameChanged()
    End Sub
    Partial Private Sub OnactiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnactiveChanged()
    End Sub
    Partial Private Sub OnlogoURLChanging(value As String)
    End Sub
    Partial Private Sub OnlogoURLChanged()
    End Sub
    Partial Private Sub OncountryChanging(value As String)
    End Sub
    Partial Private Sub OncountryChanged()
    End Sub
    Partial Private Sub OnunitsChanging(value As String)
    End Sub
    Partial Private Sub OnunitsChanged()
    End Sub
    Partial Private Sub OnsuppliersChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnsuppliersChanged()
    End Sub
    Partial Private Sub OndashboardChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OndashboardChanged()
    End Sub
    Partial Private Sub OntabletChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OntabletChanged()
    End Sub
    Partial Private Sub OnphoneChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnphoneChanged()
    End Sub
    Partial Private Sub OnportalLogoURLChanging(value As String)
    End Sub
    Partial Private Sub OnportalLogoURLChanged()
    End Sub
    Partial Private Sub OnphoneNumberChanging(value As String)
    End Sub
    Partial Private Sub OnphoneNumberChanged()
    End Sub
    Partial Private Sub OnstreetAddressChanging(value As String)
    End Sub
    Partial Private Sub OnstreetAddressChanged()
    End Sub
    Partial Private Sub OncityChanging(value As String)
    End Sub
    Partial Private Sub OncityChanged()
    End Sub
    Partial Private Sub OnstateChanging(value As String)
    End Sub
    Partial Private Sub OnstateChanged()
    End Sub
    Partial Private Sub OnzipCodeChanging(value As String)
    End Sub
    Partial Private Sub OnzipCodeChanged()
    End Sub
    Partial Private Sub OncontactPersonChanging(value As String)
    End Sub
    Partial Private Sub OncontactPersonChanged()
    End Sub
    Partial Private Sub OncontactPhoneChanging(value As String)
    End Sub
    Partial Private Sub OncontactPhoneChanged()
    End Sub
    Partial Private Sub OncontactEmailChanging(value As String)
    End Sub
    Partial Private Sub OncontactEmailChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property clientID() As Integer
		Get
			Return Me._clientID
		End Get
		Set
			If ((Me._clientID = value)  _
						= false) Then
				Me.OnclientIDChanging(value)
				Me.SendPropertyChanging
				Me._clientID = value
				Me.SendPropertyChanged("clientID")
				Me.OnclientIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property clientName() As String
		Get
			Return Me._clientName
		End Get
		Set
			If (String.Equals(Me._clientName, value) = false) Then
				Me.OnclientNameChanging(value)
				Me.SendPropertyChanging
				Me._clientName = value
				Me.SendPropertyChanged("clientName")
				Me.OnclientNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_active", DbType:="Bit")>  _
	Public Property active() As System.Nullable(Of Boolean)
		Get
			Return Me._active
		End Get
		Set
			If (Me._active.Equals(value) = false) Then
				Me.OnactiveChanging(value)
				Me.SendPropertyChanging
				Me._active = value
				Me.SendPropertyChanged("active")
				Me.OnactiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_logoURL", DbType:="NVarChar(256)")>  _
	Public Property logoURL() As String
		Get
			Return Me._logoURL
		End Get
		Set
			If (String.Equals(Me._logoURL, value) = false) Then
				Me.OnlogoURLChanging(value)
				Me.SendPropertyChanging
				Me._logoURL = value
				Me.SendPropertyChanged("logoURL")
				Me.OnlogoURLChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_country", DbType:="VarChar(50)")>  _
	Public Property country() As String
		Get
			Return Me._country
		End Get
		Set
			If (String.Equals(Me._country, value) = false) Then
				Me.OncountryChanging(value)
				Me.SendPropertyChanging
				Me._country = value
				Me.SendPropertyChanged("country")
				Me.OncountryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_units", DbType:="VarChar(50)")>  _
	Public Property units() As String
		Get
			Return Me._units
		End Get
		Set
			If (String.Equals(Me._units, value) = false) Then
				Me.OnunitsChanging(value)
				Me.SendPropertyChanging
				Me._units = value
				Me.SendPropertyChanged("units")
				Me.OnunitsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_suppliers", DbType:="Bit")>  _
	Public Property suppliers() As System.Nullable(Of Boolean)
		Get
			Return Me._suppliers
		End Get
		Set
			If (Me._suppliers.Equals(value) = false) Then
				Me.OnsuppliersChanging(value)
				Me.SendPropertyChanging
				Me._suppliers = value
				Me.SendPropertyChanged("suppliers")
				Me.OnsuppliersChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dashboard", DbType:="Bit")>  _
	Public Property dashboard() As System.Nullable(Of Boolean)
		Get
			Return Me._dashboard
		End Get
		Set
			If (Me._dashboard.Equals(value) = false) Then
				Me.OndashboardChanging(value)
				Me.SendPropertyChanging
				Me._dashboard = value
				Me.SendPropertyChanged("dashboard")
				Me.OndashboardChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tablet", DbType:="Bit")>  _
	Public Property tablet() As System.Nullable(Of Boolean)
		Get
			Return Me._tablet
		End Get
		Set
			If (Me._tablet.Equals(value) = false) Then
				Me.OntabletChanging(value)
				Me.SendPropertyChanging
				Me._tablet = value
				Me.SendPropertyChanged("tablet")
				Me.OntabletChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_phone", DbType:="Bit")>  _
	Public Property phone() As System.Nullable(Of Boolean)
		Get
			Return Me._phone
		End Get
		Set
			If (Me._phone.Equals(value) = false) Then
				Me.OnphoneChanging(value)
				Me.SendPropertyChanging
				Me._phone = value
				Me.SendPropertyChanged("phone")
				Me.OnphoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_portalLogoURL", DbType:="NVarChar(256)")>  _
	Public Property portalLogoURL() As String
		Get
			Return Me._portalLogoURL
		End Get
		Set
			If (String.Equals(Me._portalLogoURL, value) = false) Then
				Me.OnportalLogoURLChanging(value)
				Me.SendPropertyChanging
				Me._portalLogoURL = value
				Me.SendPropertyChanged("portalLogoURL")
				Me.OnportalLogoURLChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_phoneNumber", DbType:="NVarChar(50)")>  _
	Public Property phoneNumber() As String
		Get
			Return Me._phoneNumber
		End Get
		Set
			If (String.Equals(Me._phoneNumber, value) = false) Then
				Me.OnphoneNumberChanging(value)
				Me.SendPropertyChanging
				Me._phoneNumber = value
				Me.SendPropertyChanged("phoneNumber")
				Me.OnphoneNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_streetAddress", DbType:="NVarChar(50)")>  _
	Public Property streetAddress() As String
		Get
			Return Me._streetAddress
		End Get
		Set
			If (String.Equals(Me._streetAddress, value) = false) Then
				Me.OnstreetAddressChanging(value)
				Me.SendPropertyChanging
				Me._streetAddress = value
				Me.SendPropertyChanged("streetAddress")
				Me.OnstreetAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_city", DbType:="NVarChar(50)")>  _
	Public Property city() As String
		Get
			Return Me._city
		End Get
		Set
			If (String.Equals(Me._city, value) = false) Then
				Me.OncityChanging(value)
				Me.SendPropertyChanging
				Me._city = value
				Me.SendPropertyChanged("city")
				Me.OncityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_state", DbType:="NVarChar(50)")>  _
	Public Property state() As String
		Get
			Return Me._state
		End Get
		Set
			If (String.Equals(Me._state, value) = false) Then
				Me.OnstateChanging(value)
				Me.SendPropertyChanging
				Me._state = value
				Me.SendPropertyChanged("state")
				Me.OnstateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_zipCode", DbType:="NVarChar(50)")>  _
	Public Property zipCode() As String
		Get
			Return Me._zipCode
		End Get
		Set
			If (String.Equals(Me._zipCode, value) = false) Then
				Me.OnzipCodeChanging(value)
				Me.SendPropertyChanging
				Me._zipCode = value
				Me.SendPropertyChanged("zipCode")
				Me.OnzipCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_contactPerson", DbType:="NVarChar(50)")>  _
	Public Property contactPerson() As String
		Get
			Return Me._contactPerson
		End Get
		Set
			If (String.Equals(Me._contactPerson, value) = false) Then
				Me.OncontactPersonChanging(value)
				Me.SendPropertyChanging
				Me._contactPerson = value
				Me.SendPropertyChanged("contactPerson")
				Me.OncontactPersonChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_contactPhone", DbType:="NVarChar(50)")>  _
	Public Property contactPhone() As String
		Get
			Return Me._contactPhone
		End Get
		Set
			If (String.Equals(Me._contactPhone, value) = false) Then
				Me.OncontactPhoneChanging(value)
				Me.SendPropertyChanging
				Me._contactPhone = value
				Me.SendPropertyChanged("contactPhone")
				Me.OncontactPhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_contactEmail", DbType:="NVarChar(50)")>  _
	Public Property contactEmail() As String
		Get
			Return Me._contactEmail
		End Get
		Set
			If (String.Equals(Me._contactEmail, value) = false) Then
				Me.OncontactEmailChanging(value)
				Me.SendPropertyChanging
				Me._contactEmail = value
				Me.SendPropertyChanged("contactEmail")
				Me.OncontactEmailChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblBrands")>  _
Partial Public Class tblBrand
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _brandID As Integer
	
	Private _brandGroupID As System.Nullable(Of Integer)
	
	Private _brandName As String
	
	Private _docketNumber As String
	
	Private _active As System.Nullable(Of Boolean)
	
	Private _brandStartDate As System.Nullable(Of Date)
	
	Private _brandEndDate As System.Nullable(Of Date)
	
	Private _brandDataEndDate As System.Nullable(Of Date)
	
	Private _brandManagerID As System.Nullable(Of Integer)
	
	Private _defaultEventDescription As String
	
	Private _clientID As System.Nullable(Of Integer)
	
	Private _categoryID As System.Nullable(Of Integer)
	
	Private _typeID As System.Nullable(Of Integer)
	
	Private _varietyID As System.Nullable(Of Integer)
	
	Private _countryOrigin As System.Nullable(Of Integer)
	
	Private _packageSize As String
	
	Private _abv As String
	
	Private _avaeragePrice As System.Nullable(Of Decimal)
	
	Private _courseID As String
	
	Private _courseGroupID As String
	
	Private _modifiedBy As String
	
	Private _modifiedDate As System.Nullable(Of Date)
	
	Private _upc As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnbrandIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnbrandIDChanged()
    End Sub
    Partial Private Sub OnbrandGroupIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnbrandGroupIDChanged()
    End Sub
    Partial Private Sub OnbrandNameChanging(value As String)
    End Sub
    Partial Private Sub OnbrandNameChanged()
    End Sub
    Partial Private Sub OndocketNumberChanging(value As String)
    End Sub
    Partial Private Sub OndocketNumberChanged()
    End Sub
    Partial Private Sub OnactiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnactiveChanged()
    End Sub
    Partial Private Sub OnbrandStartDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnbrandStartDateChanged()
    End Sub
    Partial Private Sub OnbrandEndDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnbrandEndDateChanged()
    End Sub
    Partial Private Sub OnbrandDataEndDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnbrandDataEndDateChanged()
    End Sub
    Partial Private Sub OnbrandManagerIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnbrandManagerIDChanged()
    End Sub
    Partial Private Sub OndefaultEventDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OndefaultEventDescriptionChanged()
    End Sub
    Partial Private Sub OnclientIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnclientIDChanged()
    End Sub
    Partial Private Sub OncategoryIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OncategoryIDChanged()
    End Sub
    Partial Private Sub OntypeIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OntypeIDChanged()
    End Sub
    Partial Private Sub OnvarietyIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnvarietyIDChanged()
    End Sub
    Partial Private Sub OncountryOriginChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OncountryOriginChanged()
    End Sub
    Partial Private Sub OnpackageSizeChanging(value As String)
    End Sub
    Partial Private Sub OnpackageSizeChanged()
    End Sub
    Partial Private Sub OnabvChanging(value As String)
    End Sub
    Partial Private Sub OnabvChanged()
    End Sub
    Partial Private Sub OnavaeragePriceChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnavaeragePriceChanged()
    End Sub
    Partial Private Sub OncourseIDChanging(value As String)
    End Sub
    Partial Private Sub OncourseIDChanged()
    End Sub
    Partial Private Sub OncourseGroupIDChanging(value As String)
    End Sub
    Partial Private Sub OncourseGroupIDChanged()
    End Sub
    Partial Private Sub OnmodifiedByChanging(value As String)
    End Sub
    Partial Private Sub OnmodifiedByChanged()
    End Sub
    Partial Private Sub OnmodifiedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnmodifiedDateChanged()
    End Sub
    Partial Private Sub OnupcChanging(value As String)
    End Sub
    Partial Private Sub OnupcChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property brandID() As Integer
		Get
			Return Me._brandID
		End Get
		Set
			If ((Me._brandID = value)  _
						= false) Then
				Me.OnbrandIDChanging(value)
				Me.SendPropertyChanging
				Me._brandID = value
				Me.SendPropertyChanged("brandID")
				Me.OnbrandIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandGroupID", DbType:="Int")>  _
	Public Property brandGroupID() As System.Nullable(Of Integer)
		Get
			Return Me._brandGroupID
		End Get
		Set
			If (Me._brandGroupID.Equals(value) = false) Then
				Me.OnbrandGroupIDChanging(value)
				Me.SendPropertyChanging
				Me._brandGroupID = value
				Me.SendPropertyChanged("brandGroupID")
				Me.OnbrandGroupIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandName", DbType:="NVarChar(256)")>  _
	Public Property brandName() As String
		Get
			Return Me._brandName
		End Get
		Set
			If (String.Equals(Me._brandName, value) = false) Then
				Me.OnbrandNameChanging(value)
				Me.SendPropertyChanging
				Me._brandName = value
				Me.SendPropertyChanged("brandName")
				Me.OnbrandNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_docketNumber", DbType:="VarChar(50)")>  _
	Public Property docketNumber() As String
		Get
			Return Me._docketNumber
		End Get
		Set
			If (String.Equals(Me._docketNumber, value) = false) Then
				Me.OndocketNumberChanging(value)
				Me.SendPropertyChanging
				Me._docketNumber = value
				Me.SendPropertyChanged("docketNumber")
				Me.OndocketNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_active", DbType:="Bit")>  _
	Public Property active() As System.Nullable(Of Boolean)
		Get
			Return Me._active
		End Get
		Set
			If (Me._active.Equals(value) = false) Then
				Me.OnactiveChanging(value)
				Me.SendPropertyChanging
				Me._active = value
				Me.SendPropertyChanged("active")
				Me.OnactiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandStartDate", DbType:="SmallDateTime")>  _
	Public Property brandStartDate() As System.Nullable(Of Date)
		Get
			Return Me._brandStartDate
		End Get
		Set
			If (Me._brandStartDate.Equals(value) = false) Then
				Me.OnbrandStartDateChanging(value)
				Me.SendPropertyChanging
				Me._brandStartDate = value
				Me.SendPropertyChanged("brandStartDate")
				Me.OnbrandStartDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandEndDate", DbType:="SmallDateTime")>  _
	Public Property brandEndDate() As System.Nullable(Of Date)
		Get
			Return Me._brandEndDate
		End Get
		Set
			If (Me._brandEndDate.Equals(value) = false) Then
				Me.OnbrandEndDateChanging(value)
				Me.SendPropertyChanging
				Me._brandEndDate = value
				Me.SendPropertyChanged("brandEndDate")
				Me.OnbrandEndDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandDataEndDate", DbType:="SmallDateTime")>  _
	Public Property brandDataEndDate() As System.Nullable(Of Date)
		Get
			Return Me._brandDataEndDate
		End Get
		Set
			If (Me._brandDataEndDate.Equals(value) = false) Then
				Me.OnbrandDataEndDateChanging(value)
				Me.SendPropertyChanging
				Me._brandDataEndDate = value
				Me.SendPropertyChanged("brandDataEndDate")
				Me.OnbrandDataEndDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandManagerID", DbType:="Int")>  _
	Public Property brandManagerID() As System.Nullable(Of Integer)
		Get
			Return Me._brandManagerID
		End Get
		Set
			If (Me._brandManagerID.Equals(value) = false) Then
				Me.OnbrandManagerIDChanging(value)
				Me.SendPropertyChanging
				Me._brandManagerID = value
				Me.SendPropertyChanged("brandManagerID")
				Me.OnbrandManagerIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_defaultEventDescription", DbType:="NVarChar(MAX)")>  _
	Public Property defaultEventDescription() As String
		Get
			Return Me._defaultEventDescription
		End Get
		Set
			If (String.Equals(Me._defaultEventDescription, value) = false) Then
				Me.OndefaultEventDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._defaultEventDescription = value
				Me.SendPropertyChanged("defaultEventDescription")
				Me.OndefaultEventDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", DbType:="Int")>  _
	Public Property clientID() As System.Nullable(Of Integer)
		Get
			Return Me._clientID
		End Get
		Set
			If (Me._clientID.Equals(value) = false) Then
				Me.OnclientIDChanging(value)
				Me.SendPropertyChanging
				Me._clientID = value
				Me.SendPropertyChanged("clientID")
				Me.OnclientIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_categoryID", DbType:="Int")>  _
	Public Property categoryID() As System.Nullable(Of Integer)
		Get
			Return Me._categoryID
		End Get
		Set
			If (Me._categoryID.Equals(value) = false) Then
				Me.OncategoryIDChanging(value)
				Me.SendPropertyChanging
				Me._categoryID = value
				Me.SendPropertyChanged("categoryID")
				Me.OncategoryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_typeID", DbType:="Int")>  _
	Public Property typeID() As System.Nullable(Of Integer)
		Get
			Return Me._typeID
		End Get
		Set
			If (Me._typeID.Equals(value) = false) Then
				Me.OntypeIDChanging(value)
				Me.SendPropertyChanging
				Me._typeID = value
				Me.SendPropertyChanged("typeID")
				Me.OntypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_varietyID", DbType:="Int")>  _
	Public Property varietyID() As System.Nullable(Of Integer)
		Get
			Return Me._varietyID
		End Get
		Set
			If (Me._varietyID.Equals(value) = false) Then
				Me.OnvarietyIDChanging(value)
				Me.SendPropertyChanging
				Me._varietyID = value
				Me.SendPropertyChanged("varietyID")
				Me.OnvarietyIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_countryOrigin", DbType:="Int")>  _
	Public Property countryOrigin() As System.Nullable(Of Integer)
		Get
			Return Me._countryOrigin
		End Get
		Set
			If (Me._countryOrigin.Equals(value) = false) Then
				Me.OncountryOriginChanging(value)
				Me.SendPropertyChanging
				Me._countryOrigin = value
				Me.SendPropertyChanged("countryOrigin")
				Me.OncountryOriginChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_packageSize", DbType:="NVarChar(50)")>  _
	Public Property packageSize() As String
		Get
			Return Me._packageSize
		End Get
		Set
			If (String.Equals(Me._packageSize, value) = false) Then
				Me.OnpackageSizeChanging(value)
				Me.SendPropertyChanging
				Me._packageSize = value
				Me.SendPropertyChanged("packageSize")
				Me.OnpackageSizeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_abv", DbType:="NVarChar(50)")>  _
	Public Property abv() As String
		Get
			Return Me._abv
		End Get
		Set
			If (String.Equals(Me._abv, value) = false) Then
				Me.OnabvChanging(value)
				Me.SendPropertyChanging
				Me._abv = value
				Me.SendPropertyChanged("abv")
				Me.OnabvChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_avaeragePrice", DbType:="Decimal(18,0)")>  _
	Public Property avaeragePrice() As System.Nullable(Of Decimal)
		Get
			Return Me._avaeragePrice
		End Get
		Set
			If (Me._avaeragePrice.Equals(value) = false) Then
				Me.OnavaeragePriceChanging(value)
				Me.SendPropertyChanging
				Me._avaeragePrice = value
				Me.SendPropertyChanged("avaeragePrice")
				Me.OnavaeragePriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_courseID", DbType:="NVarChar(50)")>  _
	Public Property courseID() As String
		Get
			Return Me._courseID
		End Get
		Set
			If (String.Equals(Me._courseID, value) = false) Then
				Me.OncourseIDChanging(value)
				Me.SendPropertyChanging
				Me._courseID = value
				Me.SendPropertyChanged("courseID")
				Me.OncourseIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_courseGroupID", DbType:="NVarChar(50)")>  _
	Public Property courseGroupID() As String
		Get
			Return Me._courseGroupID
		End Get
		Set
			If (String.Equals(Me._courseGroupID, value) = false) Then
				Me.OncourseGroupIDChanging(value)
				Me.SendPropertyChanging
				Me._courseGroupID = value
				Me.SendPropertyChanged("courseGroupID")
				Me.OncourseGroupIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_modifiedBy", DbType:="NVarChar(50)")>  _
	Public Property modifiedBy() As String
		Get
			Return Me._modifiedBy
		End Get
		Set
			If (String.Equals(Me._modifiedBy, value) = false) Then
				Me.OnmodifiedByChanging(value)
				Me.SendPropertyChanging
				Me._modifiedBy = value
				Me.SendPropertyChanged("modifiedBy")
				Me.OnmodifiedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_modifiedDate", DbType:="SmallDateTime")>  _
	Public Property modifiedDate() As System.Nullable(Of Date)
		Get
			Return Me._modifiedDate
		End Get
		Set
			If (Me._modifiedDate.Equals(value) = false) Then
				Me.OnmodifiedDateChanging(value)
				Me.SendPropertyChanging
				Me._modifiedDate = value
				Me.SendPropertyChanged("modifiedDate")
				Me.OnmodifiedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_upc", DbType:="NVarChar(50)")>  _
	Public Property upc() As String
		Get
			Return Me._upc
		End Get
		Set
			If (String.Equals(Me._upc, value) = false) Then
				Me.OnupcChanging(value)
				Me.SendPropertyChanging
				Me._upc = value
				Me.SendPropertyChanged("upc")
				Me.OnupcChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryGetBrands")>  _
Partial Public Class qryGetBrand
	
	Private _brandID As Integer
	
	Private _brandName As String
	
	Private _brandGroupName As String
	
	Private _Category As String
	
	Private _categoryID As System.Nullable(Of Integer)
	
	Private _Type As String
	
	Private _typeID As System.Nullable(Of Integer)
	
	Private _Variety As String
	
	Private _varietyID As System.Nullable(Of Integer)
	
	Private _hasCourse As String
	
	Private _active As System.Nullable(Of Boolean)
	
	Private _clientID As System.Nullable(Of Integer)
	
	Private _brandStartDate As System.Nullable(Of Date)
	
	Private _brandEndDate As System.Nullable(Of Date)
	
	Private _price As System.Nullable(Of Decimal)
	
	Private _upc As String
	
	Private _supplier As String
	
	Private _NumberEvents As System.Nullable(Of Double)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandID", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property brandID() As Integer
		Get
			Return Me._brandID
		End Get
		Set
			If ((Me._brandID = value)  _
						= false) Then
				Me._brandID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandName", DbType:="NVarChar(256)")>  _
	Public Property brandName() As String
		Get
			Return Me._brandName
		End Get
		Set
			If (String.Equals(Me._brandName, value) = false) Then
				Me._brandName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandGroupName", DbType:="VarChar(MAX)")>  _
	Public Property brandGroupName() As String
		Get
			Return Me._brandGroupName
		End Get
		Set
			If (String.Equals(Me._brandGroupName, value) = false) Then
				Me._brandGroupName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Category", DbType:="VarChar(MAX)")>  _
	Public Property Category() As String
		Get
			Return Me._Category
		End Get
		Set
			If (String.Equals(Me._Category, value) = false) Then
				Me._Category = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_categoryID", DbType:="Int")>  _
	Public Property categoryID() As System.Nullable(Of Integer)
		Get
			Return Me._categoryID
		End Get
		Set
			If (Me._categoryID.Equals(value) = false) Then
				Me._categoryID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Type", DbType:="VarChar(MAX)")>  _
	Public Property Type() As String
		Get
			Return Me._Type
		End Get
		Set
			If (String.Equals(Me._Type, value) = false) Then
				Me._Type = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_typeID", DbType:="Int")>  _
	Public Property typeID() As System.Nullable(Of Integer)
		Get
			Return Me._typeID
		End Get
		Set
			If (Me._typeID.Equals(value) = false) Then
				Me._typeID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Variety", DbType:="NVarChar(50)")>  _
	Public Property Variety() As String
		Get
			Return Me._Variety
		End Get
		Set
			If (String.Equals(Me._Variety, value) = false) Then
				Me._Variety = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_varietyID", DbType:="Int")>  _
	Public Property varietyID() As System.Nullable(Of Integer)
		Get
			Return Me._varietyID
		End Get
		Set
			If (Me._varietyID.Equals(value) = false) Then
				Me._varietyID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hasCourse", DbType:="VarChar(MAX)")>  _
	Public Property hasCourse() As String
		Get
			Return Me._hasCourse
		End Get
		Set
			If (String.Equals(Me._hasCourse, value) = false) Then
				Me._hasCourse = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_active", DbType:="Bit")>  _
	Public Property active() As System.Nullable(Of Boolean)
		Get
			Return Me._active
		End Get
		Set
			If (Me._active.Equals(value) = false) Then
				Me._active = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", DbType:="Int")>  _
	Public Property clientID() As System.Nullable(Of Integer)
		Get
			Return Me._clientID
		End Get
		Set
			If (Me._clientID.Equals(value) = false) Then
				Me._clientID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandStartDate", DbType:="SmallDateTime")>  _
	Public Property brandStartDate() As System.Nullable(Of Date)
		Get
			Return Me._brandStartDate
		End Get
		Set
			If (Me._brandStartDate.Equals(value) = false) Then
				Me._brandStartDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandEndDate", DbType:="SmallDateTime")>  _
	Public Property brandEndDate() As System.Nullable(Of Date)
		Get
			Return Me._brandEndDate
		End Get
		Set
			If (Me._brandEndDate.Equals(value) = false) Then
				Me._brandEndDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_price", DbType:="Decimal(18,0)")>  _
	Public Property price() As System.Nullable(Of Decimal)
		Get
			Return Me._price
		End Get
		Set
			If (Me._price.Equals(value) = false) Then
				Me._price = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_upc", DbType:="NVarChar(50)")>  _
	Public Property upc() As String
		Get
			Return Me._upc
		End Get
		Set
			If (String.Equals(Me._upc, value) = false) Then
				Me._upc = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplier", DbType:="VarChar(MAX)")>  _
	Public Property supplier() As String
		Get
			Return Me._supplier
		End Get
		Set
			If (String.Equals(Me._supplier, value) = false) Then
				Me._supplier = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumberEvents", DbType:="Float")>  _
	Public Property NumberEvents() As System.Nullable(Of Double)
		Get
			Return Me._NumberEvents
		End Get
		Set
			If (Me._NumberEvents.Equals(value) = false) Then
				Me._NumberEvents = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblShippingMethod")>  _
Partial Public Class tblShippingMethod
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _shippingMethodID As Integer
	
	Private _shippingMethodTitle As String
	
	Private _shippingVendorID As System.Nullable(Of Integer)
	
	Private _clientID As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnshippingMethodIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnshippingMethodIDChanged()
    End Sub
    Partial Private Sub OnshippingMethodTitleChanging(value As String)
    End Sub
    Partial Private Sub OnshippingMethodTitleChanged()
    End Sub
    Partial Private Sub OnshippingVendorIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnshippingVendorIDChanged()
    End Sub
    Partial Private Sub OnclientIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnclientIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_shippingMethodID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property shippingMethodID() As Integer
		Get
			Return Me._shippingMethodID
		End Get
		Set
			If ((Me._shippingMethodID = value)  _
						= false) Then
				Me.OnshippingMethodIDChanging(value)
				Me.SendPropertyChanging
				Me._shippingMethodID = value
				Me.SendPropertyChanged("shippingMethodID")
				Me.OnshippingMethodIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_shippingMethodTitle", DbType:="NVarChar(256)")>  _
	Public Property shippingMethodTitle() As String
		Get
			Return Me._shippingMethodTitle
		End Get
		Set
			If (String.Equals(Me._shippingMethodTitle, value) = false) Then
				Me.OnshippingMethodTitleChanging(value)
				Me.SendPropertyChanging
				Me._shippingMethodTitle = value
				Me.SendPropertyChanged("shippingMethodTitle")
				Me.OnshippingMethodTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_shippingVendorID", DbType:="Int")>  _
	Public Property shippingVendorID() As System.Nullable(Of Integer)
		Get
			Return Me._shippingVendorID
		End Get
		Set
			If (Me._shippingVendorID.Equals(value) = false) Then
				Me.OnshippingVendorIDChanging(value)
				Me.SendPropertyChanging
				Me._shippingVendorID = value
				Me.SendPropertyChanged("shippingVendorID")
				Me.OnshippingVendorIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", DbType:="Int")>  _
	Public Property clientID() As System.Nullable(Of Integer)
		Get
			Return Me._clientID
		End Get
		Set
			If (Me._clientID.Equals(value) = false) Then
				Me.OnclientIDChanging(value)
				Me.SendPropertyChanging
				Me._clientID = value
				Me.SendPropertyChanged("clientID")
				Me.OnclientIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tempBrandCategory")>  _
Partial Public Class tempBrandCategory
	
	Private _categoryID As String
	
	Private _categoryName As String
	
	Private _clientID As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_categoryID", DbType:="NVarChar(50)")>  _
	Public Property categoryID() As String
		Get
			Return Me._categoryID
		End Get
		Set
			If (String.Equals(Me._categoryID, value) = false) Then
				Me._categoryID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_categoryName", DbType:="NVarChar(50)")>  _
	Public Property categoryName() As String
		Get
			Return Me._categoryName
		End Get
		Set
			If (String.Equals(Me._categoryName, value) = false) Then
				Me._categoryName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", DbType:="Int")>  _
	Public Property clientID() As System.Nullable(Of Integer)
		Get
			Return Me._clientID
		End Get
		Set
			If (Me._clientID.Equals(value) = false) Then
				Me._clientID = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tempBrandCategoryType")>  _
Partial Public Class tempBrandCategoryType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _tempID As Integer
	
	Private _tempBrandCategoryID As String
	
	Private _categoryTypeName As String
	
	Private _clientID As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OntempIDChanging(value As Integer)
    End Sub
    Partial Private Sub OntempIDChanged()
    End Sub
    Partial Private Sub OntempBrandCategoryIDChanging(value As String)
    End Sub
    Partial Private Sub OntempBrandCategoryIDChanged()
    End Sub
    Partial Private Sub OncategoryTypeNameChanging(value As String)
    End Sub
    Partial Private Sub OncategoryTypeNameChanged()
    End Sub
    Partial Private Sub OnclientIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnclientIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tempID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property tempID() As Integer
		Get
			Return Me._tempID
		End Get
		Set
			If ((Me._tempID = value)  _
						= false) Then
				Me.OntempIDChanging(value)
				Me.SendPropertyChanging
				Me._tempID = value
				Me.SendPropertyChanged("tempID")
				Me.OntempIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tempBrandCategoryID", DbType:="NVarChar(50)")>  _
	Public Property tempBrandCategoryID() As String
		Get
			Return Me._tempBrandCategoryID
		End Get
		Set
			If (String.Equals(Me._tempBrandCategoryID, value) = false) Then
				Me.OntempBrandCategoryIDChanging(value)
				Me.SendPropertyChanging
				Me._tempBrandCategoryID = value
				Me.SendPropertyChanged("tempBrandCategoryID")
				Me.OntempBrandCategoryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_categoryTypeName", DbType:="NVarChar(50)")>  _
	Public Property categoryTypeName() As String
		Get
			Return Me._categoryTypeName
		End Get
		Set
			If (String.Equals(Me._categoryTypeName, value) = false) Then
				Me.OncategoryTypeNameChanging(value)
				Me.SendPropertyChanging
				Me._categoryTypeName = value
				Me.SendPropertyChanged("categoryTypeName")
				Me.OncategoryTypeNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", DbType:="Int")>  _
	Public Property clientID() As System.Nullable(Of Integer)
		Get
			Return Me._clientID
		End Get
		Set
			If (Me._clientID.Equals(value) = false) Then
				Me.OnclientIDChanging(value)
				Me.SendPropertyChanging
				Me._clientID = value
				Me.SendPropertyChanged("clientID")
				Me.OnclientIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblBrandCategory")>  _
Partial Public Class tblBrandCategory
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _brandCategoryID As Integer
	
	Private _categoryName As String
	
	Private _clientID As Integer
	
	Private _modifiedBy As String
	
	Private _modifiedDate As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnbrandCategoryIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnbrandCategoryIDChanged()
    End Sub
    Partial Private Sub OncategoryNameChanging(value As String)
    End Sub
    Partial Private Sub OncategoryNameChanged()
    End Sub
    Partial Private Sub OnclientIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnclientIDChanged()
    End Sub
    Partial Private Sub OnmodifiedByChanging(value As String)
    End Sub
    Partial Private Sub OnmodifiedByChanged()
    End Sub
    Partial Private Sub OnmodifiedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnmodifiedDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandCategoryID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property brandCategoryID() As Integer
		Get
			Return Me._brandCategoryID
		End Get
		Set
			If ((Me._brandCategoryID = value)  _
						= false) Then
				Me.OnbrandCategoryIDChanging(value)
				Me.SendPropertyChanging
				Me._brandCategoryID = value
				Me.SendPropertyChanged("brandCategoryID")
				Me.OnbrandCategoryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_categoryName", DbType:="NVarChar(50)")>  _
	Public Property categoryName() As String
		Get
			Return Me._categoryName
		End Get
		Set
			If (String.Equals(Me._categoryName, value) = false) Then
				Me.OncategoryNameChanging(value)
				Me.SendPropertyChanging
				Me._categoryName = value
				Me.SendPropertyChanged("categoryName")
				Me.OncategoryNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", DbType:="Int NOT NULL")>  _
	Public Property clientID() As Integer
		Get
			Return Me._clientID
		End Get
		Set
			If ((Me._clientID = value)  _
						= false) Then
				Me.OnclientIDChanging(value)
				Me.SendPropertyChanging
				Me._clientID = value
				Me.SendPropertyChanged("clientID")
				Me.OnclientIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_modifiedBy", DbType:="NVarChar(50)")>  _
	Public Property modifiedBy() As String
		Get
			Return Me._modifiedBy
		End Get
		Set
			If (String.Equals(Me._modifiedBy, value) = false) Then
				Me.OnmodifiedByChanging(value)
				Me.SendPropertyChanging
				Me._modifiedBy = value
				Me.SendPropertyChanged("modifiedBy")
				Me.OnmodifiedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_modifiedDate", DbType:="SmallDateTime")>  _
	Public Property modifiedDate() As System.Nullable(Of Date)
		Get
			Return Me._modifiedDate
		End Get
		Set
			If (Me._modifiedDate.Equals(value) = false) Then
				Me.OnmodifiedDateChanging(value)
				Me.SendPropertyChanging
				Me._modifiedDate = value
				Me.SendPropertyChanged("modifiedDate")
				Me.OnmodifiedDateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tempBrandCategorySubType")>  _
Partial Public Class tempBrandCategorySubType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _tempID As Integer
	
	Private _tempBrandCategorySubTypeID As Integer
	
	Private _tempSubCategoryName As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OntempIDChanging(value As Integer)
    End Sub
    Partial Private Sub OntempIDChanged()
    End Sub
    Partial Private Sub OntempBrandCategorySubTypeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OntempBrandCategorySubTypeIDChanged()
    End Sub
    Partial Private Sub OntempSubCategoryNameChanging(value As String)
    End Sub
    Partial Private Sub OntempSubCategoryNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tempID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property tempID() As Integer
		Get
			Return Me._tempID
		End Get
		Set
			If ((Me._tempID = value)  _
						= false) Then
				Me.OntempIDChanging(value)
				Me.SendPropertyChanging
				Me._tempID = value
				Me.SendPropertyChanged("tempID")
				Me.OntempIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tempBrandCategorySubTypeID", DbType:="Int NOT NULL")>  _
	Public Property tempBrandCategorySubTypeID() As Integer
		Get
			Return Me._tempBrandCategorySubTypeID
		End Get
		Set
			If ((Me._tempBrandCategorySubTypeID = value)  _
						= false) Then
				Me.OntempBrandCategorySubTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._tempBrandCategorySubTypeID = value
				Me.SendPropertyChanged("tempBrandCategorySubTypeID")
				Me.OntempBrandCategorySubTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tempSubCategoryName", DbType:="NVarChar(50)")>  _
	Public Property tempSubCategoryName() As String
		Get
			Return Me._tempSubCategoryName
		End Get
		Set
			If (String.Equals(Me._tempSubCategoryName, value) = false) Then
				Me.OntempSubCategoryNameChanging(value)
				Me.SendPropertyChanging
				Me._tempSubCategoryName = value
				Me.SendPropertyChanged("tempSubCategoryName")
				Me.OntempSubCategoryNameChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblBrandProducts")>  _
Partial Public Class tblBrandProduct
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _productID As Long
	
	Private _productName As String
	
	Private _brandID As System.Nullable(Of Integer)
	
	Private _supplierID As System.Nullable(Of Integer)
	
	Private _categoryID As System.Nullable(Of Integer)
	
	Private _typeID As System.Nullable(Of Integer)
	
	Private _varietyID As System.Nullable(Of Integer)
	
	Private _packageSize As String
	
	Private _abv As String
	
	Private _averagePrice As System.Nullable(Of Decimal)
	
	Private _upc As String
	
	Private _countryOrigin As System.Nullable(Of Integer)
	
	Private _active As System.Nullable(Of Boolean)
	
	Private _modifiedBy As String
	
	Private _modifiedDate As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnproductIDChanging(value As Long)
    End Sub
    Partial Private Sub OnproductIDChanged()
    End Sub
    Partial Private Sub OnproductNameChanging(value As String)
    End Sub
    Partial Private Sub OnproductNameChanged()
    End Sub
    Partial Private Sub OnbrandIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnbrandIDChanged()
    End Sub
    Partial Private Sub OnsupplierIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnsupplierIDChanged()
    End Sub
    Partial Private Sub OncategoryIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OncategoryIDChanged()
    End Sub
    Partial Private Sub OntypeIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OntypeIDChanged()
    End Sub
    Partial Private Sub OnvarietyIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnvarietyIDChanged()
    End Sub
    Partial Private Sub OnpackageSizeChanging(value As String)
    End Sub
    Partial Private Sub OnpackageSizeChanged()
    End Sub
    Partial Private Sub OnabvChanging(value As String)
    End Sub
    Partial Private Sub OnabvChanged()
    End Sub
    Partial Private Sub OnaveragePriceChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnaveragePriceChanged()
    End Sub
    Partial Private Sub OnupcChanging(value As String)
    End Sub
    Partial Private Sub OnupcChanged()
    End Sub
    Partial Private Sub OncountryOriginChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OncountryOriginChanged()
    End Sub
    Partial Private Sub OnactiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnactiveChanged()
    End Sub
    Partial Private Sub OnmodifiedByChanging(value As String)
    End Sub
    Partial Private Sub OnmodifiedByChanged()
    End Sub
    Partial Private Sub OnmodifiedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnmodifiedDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_productID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property productID() As Long
		Get
			Return Me._productID
		End Get
		Set
			If ((Me._productID = value)  _
						= false) Then
				Me.OnproductIDChanging(value)
				Me.SendPropertyChanging
				Me._productID = value
				Me.SendPropertyChanged("productID")
				Me.OnproductIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_productName", DbType:="NVarChar(50)")>  _
	Public Property productName() As String
		Get
			Return Me._productName
		End Get
		Set
			If (String.Equals(Me._productName, value) = false) Then
				Me.OnproductNameChanging(value)
				Me.SendPropertyChanging
				Me._productName = value
				Me.SendPropertyChanged("productName")
				Me.OnproductNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandID", DbType:="Int")>  _
	Public Property brandID() As System.Nullable(Of Integer)
		Get
			Return Me._brandID
		End Get
		Set
			If (Me._brandID.Equals(value) = false) Then
				Me.OnbrandIDChanging(value)
				Me.SendPropertyChanging
				Me._brandID = value
				Me.SendPropertyChanged("brandID")
				Me.OnbrandIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int")>  _
	Public Property supplierID() As System.Nullable(Of Integer)
		Get
			Return Me._supplierID
		End Get
		Set
			If (Me._supplierID.Equals(value) = false) Then
				Me.OnsupplierIDChanging(value)
				Me.SendPropertyChanging
				Me._supplierID = value
				Me.SendPropertyChanged("supplierID")
				Me.OnsupplierIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_categoryID", DbType:="Int")>  _
	Public Property categoryID() As System.Nullable(Of Integer)
		Get
			Return Me._categoryID
		End Get
		Set
			If (Me._categoryID.Equals(value) = false) Then
				Me.OncategoryIDChanging(value)
				Me.SendPropertyChanging
				Me._categoryID = value
				Me.SendPropertyChanged("categoryID")
				Me.OncategoryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_typeID", DbType:="Int")>  _
	Public Property typeID() As System.Nullable(Of Integer)
		Get
			Return Me._typeID
		End Get
		Set
			If (Me._typeID.Equals(value) = false) Then
				Me.OntypeIDChanging(value)
				Me.SendPropertyChanging
				Me._typeID = value
				Me.SendPropertyChanged("typeID")
				Me.OntypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_varietyID", DbType:="Int")>  _
	Public Property varietyID() As System.Nullable(Of Integer)
		Get
			Return Me._varietyID
		End Get
		Set
			If (Me._varietyID.Equals(value) = false) Then
				Me.OnvarietyIDChanging(value)
				Me.SendPropertyChanging
				Me._varietyID = value
				Me.SendPropertyChanged("varietyID")
				Me.OnvarietyIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_packageSize", DbType:="NVarChar(50)")>  _
	Public Property packageSize() As String
		Get
			Return Me._packageSize
		End Get
		Set
			If (String.Equals(Me._packageSize, value) = false) Then
				Me.OnpackageSizeChanging(value)
				Me.SendPropertyChanging
				Me._packageSize = value
				Me.SendPropertyChanged("packageSize")
				Me.OnpackageSizeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_abv", DbType:="NVarChar(50)")>  _
	Public Property abv() As String
		Get
			Return Me._abv
		End Get
		Set
			If (String.Equals(Me._abv, value) = false) Then
				Me.OnabvChanging(value)
				Me.SendPropertyChanging
				Me._abv = value
				Me.SendPropertyChanged("abv")
				Me.OnabvChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_averagePrice", DbType:="Decimal(18,0)")>  _
	Public Property averagePrice() As System.Nullable(Of Decimal)
		Get
			Return Me._averagePrice
		End Get
		Set
			If (Me._averagePrice.Equals(value) = false) Then
				Me.OnaveragePriceChanging(value)
				Me.SendPropertyChanging
				Me._averagePrice = value
				Me.SendPropertyChanged("averagePrice")
				Me.OnaveragePriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_upc", DbType:="NVarChar(50)")>  _
	Public Property upc() As String
		Get
			Return Me._upc
		End Get
		Set
			If (String.Equals(Me._upc, value) = false) Then
				Me.OnupcChanging(value)
				Me.SendPropertyChanging
				Me._upc = value
				Me.SendPropertyChanged("upc")
				Me.OnupcChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_countryOrigin", DbType:="Int")>  _
	Public Property countryOrigin() As System.Nullable(Of Integer)
		Get
			Return Me._countryOrigin
		End Get
		Set
			If (Me._countryOrigin.Equals(value) = false) Then
				Me.OncountryOriginChanging(value)
				Me.SendPropertyChanging
				Me._countryOrigin = value
				Me.SendPropertyChanged("countryOrigin")
				Me.OncountryOriginChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_active", DbType:="Bit")>  _
	Public Property active() As System.Nullable(Of Boolean)
		Get
			Return Me._active
		End Get
		Set
			If (Me._active.Equals(value) = false) Then
				Me.OnactiveChanging(value)
				Me.SendPropertyChanging
				Me._active = value
				Me.SendPropertyChanged("active")
				Me.OnactiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_modifiedBy", DbType:="NVarChar(50)")>  _
	Public Property modifiedBy() As String
		Get
			Return Me._modifiedBy
		End Get
		Set
			If (String.Equals(Me._modifiedBy, value) = false) Then
				Me.OnmodifiedByChanging(value)
				Me.SendPropertyChanging
				Me._modifiedBy = value
				Me.SendPropertyChanged("modifiedBy")
				Me.OnmodifiedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_modifiedDate", DbType:="SmallDateTime")>  _
	Public Property modifiedDate() As System.Nullable(Of Date)
		Get
			Return Me._modifiedDate
		End Get
		Set
			If (Me._modifiedDate.Equals(value) = false) Then
				Me.OnmodifiedDateChanging(value)
				Me.SendPropertyChanging
				Me._modifiedDate = value
				Me.SendPropertyChanged("modifiedDate")
				Me.OnmodifiedDateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.getProductsByBrand")>  _
Partial Public Class getProductsByBrand
	
	Private _brand As String
	
	Private _supplier As String
	
	Private _productID As Long
	
	Private _productName As String
	
	Private _brandID As System.Nullable(Of Integer)
	
	Private _supplierID As System.Nullable(Of Integer)
	
	Private _categoryID As System.Nullable(Of Integer)
	
	Private _typeID As System.Nullable(Of Integer)
	
	Private _varietyID As System.Nullable(Of Integer)
	
	Private _packageSize As String
	
	Private _abv As String
	
	Private _averagePrice As System.Nullable(Of Decimal)
	
	Private _upc As String
	
	Private _countryOrigin As System.Nullable(Of Integer)
	
	Private _active As System.Nullable(Of Boolean)
	
	Private _modifiedBy As String
	
	Private _modifiedDate As System.Nullable(Of Date)
	
	Private _Category As String
	
	Private _Type As String
	
	Private _Variety As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brand", DbType:="NVarChar(256)")>  _
	Public Property brand() As String
		Get
			Return Me._brand
		End Get
		Set
			If (String.Equals(Me._brand, value) = false) Then
				Me._brand = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplier", DbType:="NVarChar(50)")>  _
	Public Property supplier() As String
		Get
			Return Me._supplier
		End Get
		Set
			If (String.Equals(Me._supplier, value) = false) Then
				Me._supplier = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_productID", DbType:="BigInt NOT NULL")>  _
	Public Property productID() As Long
		Get
			Return Me._productID
		End Get
		Set
			If ((Me._productID = value)  _
						= false) Then
				Me._productID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_productName", DbType:="NVarChar(50)")>  _
	Public Property productName() As String
		Get
			Return Me._productName
		End Get
		Set
			If (String.Equals(Me._productName, value) = false) Then
				Me._productName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandID", DbType:="Int")>  _
	Public Property brandID() As System.Nullable(Of Integer)
		Get
			Return Me._brandID
		End Get
		Set
			If (Me._brandID.Equals(value) = false) Then
				Me._brandID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int")>  _
	Public Property supplierID() As System.Nullable(Of Integer)
		Get
			Return Me._supplierID
		End Get
		Set
			If (Me._supplierID.Equals(value) = false) Then
				Me._supplierID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_categoryID", DbType:="Int")>  _
	Public Property categoryID() As System.Nullable(Of Integer)
		Get
			Return Me._categoryID
		End Get
		Set
			If (Me._categoryID.Equals(value) = false) Then
				Me._categoryID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_typeID", DbType:="Int")>  _
	Public Property typeID() As System.Nullable(Of Integer)
		Get
			Return Me._typeID
		End Get
		Set
			If (Me._typeID.Equals(value) = false) Then
				Me._typeID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_varietyID", DbType:="Int")>  _
	Public Property varietyID() As System.Nullable(Of Integer)
		Get
			Return Me._varietyID
		End Get
		Set
			If (Me._varietyID.Equals(value) = false) Then
				Me._varietyID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_packageSize", DbType:="NVarChar(50)")>  _
	Public Property packageSize() As String
		Get
			Return Me._packageSize
		End Get
		Set
			If (String.Equals(Me._packageSize, value) = false) Then
				Me._packageSize = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_abv", DbType:="NVarChar(50)")>  _
	Public Property abv() As String
		Get
			Return Me._abv
		End Get
		Set
			If (String.Equals(Me._abv, value) = false) Then
				Me._abv = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_averagePrice", DbType:="Decimal(18,0)")>  _
	Public Property averagePrice() As System.Nullable(Of Decimal)
		Get
			Return Me._averagePrice
		End Get
		Set
			If (Me._averagePrice.Equals(value) = false) Then
				Me._averagePrice = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_upc", DbType:="NVarChar(50)")>  _
	Public Property upc() As String
		Get
			Return Me._upc
		End Get
		Set
			If (String.Equals(Me._upc, value) = false) Then
				Me._upc = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_countryOrigin", DbType:="Int")>  _
	Public Property countryOrigin() As System.Nullable(Of Integer)
		Get
			Return Me._countryOrigin
		End Get
		Set
			If (Me._countryOrigin.Equals(value) = false) Then
				Me._countryOrigin = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_active", DbType:="Bit")>  _
	Public Property active() As System.Nullable(Of Boolean)
		Get
			Return Me._active
		End Get
		Set
			If (Me._active.Equals(value) = false) Then
				Me._active = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_modifiedBy", DbType:="NVarChar(50)")>  _
	Public Property modifiedBy() As String
		Get
			Return Me._modifiedBy
		End Get
		Set
			If (String.Equals(Me._modifiedBy, value) = false) Then
				Me._modifiedBy = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_modifiedDate", DbType:="SmallDateTime")>  _
	Public Property modifiedDate() As System.Nullable(Of Date)
		Get
			Return Me._modifiedDate
		End Get
		Set
			If (Me._modifiedDate.Equals(value) = false) Then
				Me._modifiedDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Category", DbType:="NVarChar(50)")>  _
	Public Property Category() As String
		Get
			Return Me._Category
		End Get
		Set
			If (String.Equals(Me._Category, value) = false) Then
				Me._Category = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Type", DbType:="NVarChar(50)")>  _
	Public Property Type() As String
		Get
			Return Me._Type
		End Get
		Set
			If (String.Equals(Me._Type, value) = false) Then
				Me._Type = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Variety", DbType:="NVarChar(50)")>  _
	Public Property Variety() As String
		Get
			Return Me._Variety
		End Get
		Set
			If (String.Equals(Me._Variety, value) = false) Then
				Me._Variety = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblBrandProductPhoto")>  _
Partial Public Class tblBrandProductPhoto
	
	Private _ProductPhotoID As Integer
	
	Private _photoID As Integer
	
	Private _brandProductID As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductPhotoID", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property ProductPhotoID() As Integer
		Get
			Return Me._ProductPhotoID
		End Get
		Set
			If ((Me._ProductPhotoID = value)  _
						= false) Then
				Me._ProductPhotoID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_photoID", DbType:="Int NOT NULL")>  _
	Public Property photoID() As Integer
		Get
			Return Me._photoID
		End Get
		Set
			If ((Me._photoID = value)  _
						= false) Then
				Me._photoID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandProductID", DbType:="Int NOT NULL")>  _
	Public Property brandProductID() As Integer
		Get
			Return Me._brandProductID
		End Get
		Set
			If ((Me._brandProductID = value)  _
						= false) Then
				Me._brandProductID = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblBrandProductImage")>  _
Partial Public Class tblBrandProductImage
	
	Private _brandProductImageID As Integer
	
	Private _brandProductID As Integer
	
	Private _photo As System.Data.Linq.Binary
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandProductImageID", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property brandProductImageID() As Integer
		Get
			Return Me._brandProductImageID
		End Get
		Set
			If ((Me._brandProductImageID = value)  _
						= false) Then
				Me._brandProductImageID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandProductID", DbType:="Int NOT NULL")>  _
	Public Property brandProductID() As Integer
		Get
			Return Me._brandProductID
		End Get
		Set
			If ((Me._brandProductID = value)  _
						= false) Then
				Me._brandProductID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_photo", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property photo() As System.Data.Linq.Binary
		Get
			Return Me._photo
		End Get
		Set
			If (Object.Equals(Me._photo, value) = false) Then
				Me._photo = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblCategory")>  _
Partial Public Class tblCategory
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CategoryID As Integer
	
	Private _Name As String
	
	Private _ParentID As System.Nullable(Of Integer)
	
	Private _ClientID As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCategoryIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCategoryIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnParentIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnParentIDChanged()
    End Sub
    Partial Private Sub OnClientIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnClientIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CategoryID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property CategoryID() As Integer
		Get
			Return Me._CategoryID
		End Get
		Set
			If ((Me._CategoryID = value)  _
						= false) Then
				Me.OnCategoryIDChanging(value)
				Me.SendPropertyChanging
				Me._CategoryID = value
				Me.SendPropertyChanged("CategoryID")
				Me.OnCategoryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ParentID", DbType:="Int")>  _
	Public Property ParentID() As System.Nullable(Of Integer)
		Get
			Return Me._ParentID
		End Get
		Set
			If (Me._ParentID.Equals(value) = false) Then
				Me.OnParentIDChanging(value)
				Me.SendPropertyChanging
				Me._ParentID = value
				Me.SendPropertyChanged("ParentID")
				Me.OnParentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientID", DbType:="Int")>  _
	Public Property ClientID() As System.Nullable(Of Integer)
		Get
			Return Me._ClientID
		End Get
		Set
			If (Me._ClientID.Equals(value) = false) Then
				Me.OnClientIDChanging(value)
				Me.SendPropertyChanging
				Me._ClientID = value
				Me.SendPropertyChanged("ClientID")
				Me.OnClientIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblSupplier")>  _
Partial Public Class tblSupplier
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _supplierID As Integer
	
	Private _supplierName As String
	
	Private _active As System.Nullable(Of Boolean)
	
	Private _clientID As System.Nullable(Of Integer)
	
	Private _supplierAddress1 As String
	
	Private _supplierAddress2 As String
	
	Private _supplierCity As String
	
	Private _supplierState As String
	
	Private _supplierZip As String
	
	Private _supplierPhone As String
	
	Private _contactName As String
	
	Private _contactEmail As String
	
	Private _supplierWebSite As String
	
	Private _invoiceHeader As String
	
	Private _billingContactName As String
	
	Private _billingContactEmail As String
	
	Private _billingContactPhone As String
	
	Private _billingNotes As String
	
	Private _managementFeePercent As System.Nullable(Of Integer)
	
	Private _samplingFeePercent As System.Nullable(Of Integer)
	
	Private _posStorageFee As System.Nullable(Of Decimal)
	
	Private _CourseID As String
	
	Private _shortName As String
	
	Private _modifiedDate As System.Nullable(Of Date)
	
	Private _modifiedBy As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnsupplierIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnsupplierIDChanged()
    End Sub
    Partial Private Sub OnsupplierNameChanging(value As String)
    End Sub
    Partial Private Sub OnsupplierNameChanged()
    End Sub
    Partial Private Sub OnactiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnactiveChanged()
    End Sub
    Partial Private Sub OnclientIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnclientIDChanged()
    End Sub
    Partial Private Sub OnsupplierAddress1Changing(value As String)
    End Sub
    Partial Private Sub OnsupplierAddress1Changed()
    End Sub
    Partial Private Sub OnsupplierAddress2Changing(value As String)
    End Sub
    Partial Private Sub OnsupplierAddress2Changed()
    End Sub
    Partial Private Sub OnsupplierCityChanging(value As String)
    End Sub
    Partial Private Sub OnsupplierCityChanged()
    End Sub
    Partial Private Sub OnsupplierStateChanging(value As String)
    End Sub
    Partial Private Sub OnsupplierStateChanged()
    End Sub
    Partial Private Sub OnsupplierZipChanging(value As String)
    End Sub
    Partial Private Sub OnsupplierZipChanged()
    End Sub
    Partial Private Sub OnsupplierPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnsupplierPhoneChanged()
    End Sub
    Partial Private Sub OncontactNameChanging(value As String)
    End Sub
    Partial Private Sub OncontactNameChanged()
    End Sub
    Partial Private Sub OncontactEmailChanging(value As String)
    End Sub
    Partial Private Sub OncontactEmailChanged()
    End Sub
    Partial Private Sub OnsupplierWebSiteChanging(value As String)
    End Sub
    Partial Private Sub OnsupplierWebSiteChanged()
    End Sub
    Partial Private Sub OninvoiceHeaderChanging(value As String)
    End Sub
    Partial Private Sub OninvoiceHeaderChanged()
    End Sub
    Partial Private Sub OnbillingContactNameChanging(value As String)
    End Sub
    Partial Private Sub OnbillingContactNameChanged()
    End Sub
    Partial Private Sub OnbillingContactEmailChanging(value As String)
    End Sub
    Partial Private Sub OnbillingContactEmailChanged()
    End Sub
    Partial Private Sub OnbillingContactPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnbillingContactPhoneChanged()
    End Sub
    Partial Private Sub OnbillingNotesChanging(value As String)
    End Sub
    Partial Private Sub OnbillingNotesChanged()
    End Sub
    Partial Private Sub OnmanagementFeePercentChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnmanagementFeePercentChanged()
    End Sub
    Partial Private Sub OnsamplingFeePercentChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnsamplingFeePercentChanged()
    End Sub
    Partial Private Sub OnposStorageFeeChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnposStorageFeeChanged()
    End Sub
    Partial Private Sub OnCourseIDChanging(value As String)
    End Sub
    Partial Private Sub OnCourseIDChanged()
    End Sub
    Partial Private Sub OnshortNameChanging(value As String)
    End Sub
    Partial Private Sub OnshortNameChanged()
    End Sub
    Partial Private Sub OnmodifiedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnmodifiedDateChanged()
    End Sub
    Partial Private Sub OnmodifiedByChanging(value As String)
    End Sub
    Partial Private Sub OnmodifiedByChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property supplierID() As Integer
		Get
			Return Me._supplierID
		End Get
		Set
			If ((Me._supplierID = value)  _
						= false) Then
				Me.OnsupplierIDChanging(value)
				Me.SendPropertyChanging
				Me._supplierID = value
				Me.SendPropertyChanged("supplierID")
				Me.OnsupplierIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierName", DbType:="NVarChar(50)")>  _
	Public Property supplierName() As String
		Get
			Return Me._supplierName
		End Get
		Set
			If (String.Equals(Me._supplierName, value) = false) Then
				Me.OnsupplierNameChanging(value)
				Me.SendPropertyChanging
				Me._supplierName = value
				Me.SendPropertyChanged("supplierName")
				Me.OnsupplierNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_active", DbType:="Bit")>  _
	Public Property active() As System.Nullable(Of Boolean)
		Get
			Return Me._active
		End Get
		Set
			If (Me._active.Equals(value) = false) Then
				Me.OnactiveChanging(value)
				Me.SendPropertyChanging
				Me._active = value
				Me.SendPropertyChanged("active")
				Me.OnactiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", DbType:="Int")>  _
	Public Property clientID() As System.Nullable(Of Integer)
		Get
			Return Me._clientID
		End Get
		Set
			If (Me._clientID.Equals(value) = false) Then
				Me.OnclientIDChanging(value)
				Me.SendPropertyChanging
				Me._clientID = value
				Me.SendPropertyChanged("clientID")
				Me.OnclientIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierAddress1", DbType:="NVarChar(50)")>  _
	Public Property supplierAddress1() As String
		Get
			Return Me._supplierAddress1
		End Get
		Set
			If (String.Equals(Me._supplierAddress1, value) = false) Then
				Me.OnsupplierAddress1Changing(value)
				Me.SendPropertyChanging
				Me._supplierAddress1 = value
				Me.SendPropertyChanged("supplierAddress1")
				Me.OnsupplierAddress1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierAddress2", DbType:="NVarChar(50)")>  _
	Public Property supplierAddress2() As String
		Get
			Return Me._supplierAddress2
		End Get
		Set
			If (String.Equals(Me._supplierAddress2, value) = false) Then
				Me.OnsupplierAddress2Changing(value)
				Me.SendPropertyChanging
				Me._supplierAddress2 = value
				Me.SendPropertyChanged("supplierAddress2")
				Me.OnsupplierAddress2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierCity", DbType:="NVarChar(50)")>  _
	Public Property supplierCity() As String
		Get
			Return Me._supplierCity
		End Get
		Set
			If (String.Equals(Me._supplierCity, value) = false) Then
				Me.OnsupplierCityChanging(value)
				Me.SendPropertyChanging
				Me._supplierCity = value
				Me.SendPropertyChanged("supplierCity")
				Me.OnsupplierCityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierState", DbType:="NVarChar(50)")>  _
	Public Property supplierState() As String
		Get
			Return Me._supplierState
		End Get
		Set
			If (String.Equals(Me._supplierState, value) = false) Then
				Me.OnsupplierStateChanging(value)
				Me.SendPropertyChanging
				Me._supplierState = value
				Me.SendPropertyChanged("supplierState")
				Me.OnsupplierStateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierZip", DbType:="VarChar(50)")>  _
	Public Property supplierZip() As String
		Get
			Return Me._supplierZip
		End Get
		Set
			If (String.Equals(Me._supplierZip, value) = false) Then
				Me.OnsupplierZipChanging(value)
				Me.SendPropertyChanging
				Me._supplierZip = value
				Me.SendPropertyChanged("supplierZip")
				Me.OnsupplierZipChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierPhone", DbType:="VarChar(50)")>  _
	Public Property supplierPhone() As String
		Get
			Return Me._supplierPhone
		End Get
		Set
			If (String.Equals(Me._supplierPhone, value) = false) Then
				Me.OnsupplierPhoneChanging(value)
				Me.SendPropertyChanging
				Me._supplierPhone = value
				Me.SendPropertyChanged("supplierPhone")
				Me.OnsupplierPhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_contactName", DbType:="VarChar(50)")>  _
	Public Property contactName() As String
		Get
			Return Me._contactName
		End Get
		Set
			If (String.Equals(Me._contactName, value) = false) Then
				Me.OncontactNameChanging(value)
				Me.SendPropertyChanging
				Me._contactName = value
				Me.SendPropertyChanged("contactName")
				Me.OncontactNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_contactEmail", DbType:="NVarChar(50)")>  _
	Public Property contactEmail() As String
		Get
			Return Me._contactEmail
		End Get
		Set
			If (String.Equals(Me._contactEmail, value) = false) Then
				Me.OncontactEmailChanging(value)
				Me.SendPropertyChanging
				Me._contactEmail = value
				Me.SendPropertyChanged("contactEmail")
				Me.OncontactEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierWebSite", DbType:="NVarChar(50)")>  _
	Public Property supplierWebSite() As String
		Get
			Return Me._supplierWebSite
		End Get
		Set
			If (String.Equals(Me._supplierWebSite, value) = false) Then
				Me.OnsupplierWebSiteChanging(value)
				Me.SendPropertyChanging
				Me._supplierWebSite = value
				Me.SendPropertyChanged("supplierWebSite")
				Me.OnsupplierWebSiteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_invoiceHeader", DbType:="NVarChar(MAX)")>  _
	Public Property invoiceHeader() As String
		Get
			Return Me._invoiceHeader
		End Get
		Set
			If (String.Equals(Me._invoiceHeader, value) = false) Then
				Me.OninvoiceHeaderChanging(value)
				Me.SendPropertyChanging
				Me._invoiceHeader = value
				Me.SendPropertyChanged("invoiceHeader")
				Me.OninvoiceHeaderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_billingContactName", DbType:="NVarChar(50)")>  _
	Public Property billingContactName() As String
		Get
			Return Me._billingContactName
		End Get
		Set
			If (String.Equals(Me._billingContactName, value) = false) Then
				Me.OnbillingContactNameChanging(value)
				Me.SendPropertyChanging
				Me._billingContactName = value
				Me.SendPropertyChanged("billingContactName")
				Me.OnbillingContactNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_billingContactEmail", DbType:="NVarChar(256)")>  _
	Public Property billingContactEmail() As String
		Get
			Return Me._billingContactEmail
		End Get
		Set
			If (String.Equals(Me._billingContactEmail, value) = false) Then
				Me.OnbillingContactEmailChanging(value)
				Me.SendPropertyChanging
				Me._billingContactEmail = value
				Me.SendPropertyChanged("billingContactEmail")
				Me.OnbillingContactEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_billingContactPhone", DbType:="NVarChar(50)")>  _
	Public Property billingContactPhone() As String
		Get
			Return Me._billingContactPhone
		End Get
		Set
			If (String.Equals(Me._billingContactPhone, value) = false) Then
				Me.OnbillingContactPhoneChanging(value)
				Me.SendPropertyChanging
				Me._billingContactPhone = value
				Me.SendPropertyChanged("billingContactPhone")
				Me.OnbillingContactPhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_billingNotes", DbType:="NVarChar(MAX)")>  _
	Public Property billingNotes() As String
		Get
			Return Me._billingNotes
		End Get
		Set
			If (String.Equals(Me._billingNotes, value) = false) Then
				Me.OnbillingNotesChanging(value)
				Me.SendPropertyChanging
				Me._billingNotes = value
				Me.SendPropertyChanged("billingNotes")
				Me.OnbillingNotesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_managementFeePercent", DbType:="Int")>  _
	Public Property managementFeePercent() As System.Nullable(Of Integer)
		Get
			Return Me._managementFeePercent
		End Get
		Set
			If (Me._managementFeePercent.Equals(value) = false) Then
				Me.OnmanagementFeePercentChanging(value)
				Me.SendPropertyChanging
				Me._managementFeePercent = value
				Me.SendPropertyChanged("managementFeePercent")
				Me.OnmanagementFeePercentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_samplingFeePercent", DbType:="Int")>  _
	Public Property samplingFeePercent() As System.Nullable(Of Integer)
		Get
			Return Me._samplingFeePercent
		End Get
		Set
			If (Me._samplingFeePercent.Equals(value) = false) Then
				Me.OnsamplingFeePercentChanging(value)
				Me.SendPropertyChanging
				Me._samplingFeePercent = value
				Me.SendPropertyChanged("samplingFeePercent")
				Me.OnsamplingFeePercentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_posStorageFee", DbType:="Decimal(6,2)")>  _
	Public Property posStorageFee() As System.Nullable(Of Decimal)
		Get
			Return Me._posStorageFee
		End Get
		Set
			If (Me._posStorageFee.Equals(value) = false) Then
				Me.OnposStorageFeeChanging(value)
				Me.SendPropertyChanging
				Me._posStorageFee = value
				Me.SendPropertyChanged("posStorageFee")
				Me.OnposStorageFeeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CourseID", DbType:="NVarChar(50)")>  _
	Public Property CourseID() As String
		Get
			Return Me._CourseID
		End Get
		Set
			If (String.Equals(Me._CourseID, value) = false) Then
				Me.OnCourseIDChanging(value)
				Me.SendPropertyChanging
				Me._CourseID = value
				Me.SendPropertyChanged("CourseID")
				Me.OnCourseIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_shortName", DbType:="NVarChar(50)")>  _
	Public Property shortName() As String
		Get
			Return Me._shortName
		End Get
		Set
			If (String.Equals(Me._shortName, value) = false) Then
				Me.OnshortNameChanging(value)
				Me.SendPropertyChanging
				Me._shortName = value
				Me.SendPropertyChanged("shortName")
				Me.OnshortNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_modifiedDate", DbType:="SmallDateTime")>  _
	Public Property modifiedDate() As System.Nullable(Of Date)
		Get
			Return Me._modifiedDate
		End Get
		Set
			If (Me._modifiedDate.Equals(value) = false) Then
				Me.OnmodifiedDateChanging(value)
				Me.SendPropertyChanging
				Me._modifiedDate = value
				Me.SendPropertyChanged("modifiedDate")
				Me.OnmodifiedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_modifiedBy", DbType:="NVarChar(50)")>  _
	Public Property modifiedBy() As String
		Get
			Return Me._modifiedBy
		End Get
		Set
			If (String.Equals(Me._modifiedBy, value) = false) Then
				Me.OnmodifiedByChanging(value)
				Me.SendPropertyChanging
				Me._modifiedBy = value
				Me.SendPropertyChanged("modifiedBy")
				Me.OnmodifiedByChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblSupplierBrands")>  _
Partial Public Class tblSupplierBrand
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _supplierBrandID As Integer
	
	Private _supplierID As Integer
	
	Private _brandID As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnsupplierBrandIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnsupplierBrandIDChanged()
    End Sub
    Partial Private Sub OnsupplierIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnsupplierIDChanged()
    End Sub
    Partial Private Sub OnbrandIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnbrandIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierBrandID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property supplierBrandID() As Integer
		Get
			Return Me._supplierBrandID
		End Get
		Set
			If ((Me._supplierBrandID = value)  _
						= false) Then
				Me.OnsupplierBrandIDChanging(value)
				Me.SendPropertyChanging
				Me._supplierBrandID = value
				Me.SendPropertyChanged("supplierBrandID")
				Me.OnsupplierBrandIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int NOT NULL")>  _
	Public Property supplierID() As Integer
		Get
			Return Me._supplierID
		End Get
		Set
			If ((Me._supplierID = value)  _
						= false) Then
				Me.OnsupplierIDChanging(value)
				Me.SendPropertyChanging
				Me._supplierID = value
				Me.SendPropertyChanged("supplierID")
				Me.OnsupplierIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandID", DbType:="Int NOT NULL")>  _
	Public Property brandID() As Integer
		Get
			Return Me._brandID
		End Get
		Set
			If ((Me._brandID = value)  _
						= false) Then
				Me.OnbrandIDChanging(value)
				Me.SendPropertyChanging
				Me._brandID = value
				Me.SendPropertyChanged("brandID")
				Me.OnbrandIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryGetBrandsBySuppler")>  _
Partial Public Class qryGetBrandsBySuppler
	
	Private _brandID As Integer
	
	Private _brandName As String
	
	Private _brandGroupName As String
	
	Private _Category As String
	
	Private _categoryID As System.Nullable(Of Integer)
	
	Private _Type As String
	
	Private _typeID As System.Nullable(Of Integer)
	
	Private _Variety As String
	
	Private _varietyID As System.Nullable(Of Integer)
	
	Private _hasCourse As String
	
	Private _active As System.Nullable(Of Boolean)
	
	Private _clientID As System.Nullable(Of Integer)
	
	Private _brandStartDate As System.Nullable(Of Date)
	
	Private _brandEndDate As System.Nullable(Of Date)
	
	Private _price As System.Nullable(Of Decimal)
	
	Private _supplier As String
	
	Private _NumberEvents As System.Nullable(Of Double)
	
	Private _supplierID As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandID", DbType:="Int NOT NULL")>  _
	Public Property brandID() As Integer
		Get
			Return Me._brandID
		End Get
		Set
			If ((Me._brandID = value)  _
						= false) Then
				Me._brandID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandName", DbType:="NVarChar(256)")>  _
	Public Property brandName() As String
		Get
			Return Me._brandName
		End Get
		Set
			If (String.Equals(Me._brandName, value) = false) Then
				Me._brandName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandGroupName", DbType:="VarChar(MAX)")>  _
	Public Property brandGroupName() As String
		Get
			Return Me._brandGroupName
		End Get
		Set
			If (String.Equals(Me._brandGroupName, value) = false) Then
				Me._brandGroupName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Category", DbType:="VarChar(MAX)")>  _
	Public Property Category() As String
		Get
			Return Me._Category
		End Get
		Set
			If (String.Equals(Me._Category, value) = false) Then
				Me._Category = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_categoryID", DbType:="Int")>  _
	Public Property categoryID() As System.Nullable(Of Integer)
		Get
			Return Me._categoryID
		End Get
		Set
			If (Me._categoryID.Equals(value) = false) Then
				Me._categoryID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Type", DbType:="VarChar(MAX)")>  _
	Public Property Type() As String
		Get
			Return Me._Type
		End Get
		Set
			If (String.Equals(Me._Type, value) = false) Then
				Me._Type = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_typeID", DbType:="Int")>  _
	Public Property typeID() As System.Nullable(Of Integer)
		Get
			Return Me._typeID
		End Get
		Set
			If (Me._typeID.Equals(value) = false) Then
				Me._typeID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Variety", DbType:="NVarChar(50)")>  _
	Public Property Variety() As String
		Get
			Return Me._Variety
		End Get
		Set
			If (String.Equals(Me._Variety, value) = false) Then
				Me._Variety = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_varietyID", DbType:="Int")>  _
	Public Property varietyID() As System.Nullable(Of Integer)
		Get
			Return Me._varietyID
		End Get
		Set
			If (Me._varietyID.Equals(value) = false) Then
				Me._varietyID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hasCourse", DbType:="VarChar(MAX)")>  _
	Public Property hasCourse() As String
		Get
			Return Me._hasCourse
		End Get
		Set
			If (String.Equals(Me._hasCourse, value) = false) Then
				Me._hasCourse = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_active", DbType:="Bit")>  _
	Public Property active() As System.Nullable(Of Boolean)
		Get
			Return Me._active
		End Get
		Set
			If (Me._active.Equals(value) = false) Then
				Me._active = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", DbType:="Int")>  _
	Public Property clientID() As System.Nullable(Of Integer)
		Get
			Return Me._clientID
		End Get
		Set
			If (Me._clientID.Equals(value) = false) Then
				Me._clientID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandStartDate", DbType:="SmallDateTime")>  _
	Public Property brandStartDate() As System.Nullable(Of Date)
		Get
			Return Me._brandStartDate
		End Get
		Set
			If (Me._brandStartDate.Equals(value) = false) Then
				Me._brandStartDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandEndDate", DbType:="SmallDateTime")>  _
	Public Property brandEndDate() As System.Nullable(Of Date)
		Get
			Return Me._brandEndDate
		End Get
		Set
			If (Me._brandEndDate.Equals(value) = false) Then
				Me._brandEndDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_price", DbType:="Decimal(18,0)")>  _
	Public Property price() As System.Nullable(Of Decimal)
		Get
			Return Me._price
		End Get
		Set
			If (Me._price.Equals(value) = false) Then
				Me._price = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplier", DbType:="VarChar(MAX)")>  _
	Public Property supplier() As String
		Get
			Return Me._supplier
		End Get
		Set
			If (String.Equals(Me._supplier, value) = false) Then
				Me._supplier = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumberEvents", DbType:="Float")>  _
	Public Property NumberEvents() As System.Nullable(Of Double)
		Get
			Return Me._NumberEvents
		End Get
		Set
			If (Me._NumberEvents.Equals(value) = false) Then
				Me._NumberEvents = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int NOT NULL")>  _
	Public Property supplierID() As Integer
		Get
			Return Me._supplierID
		End Get
		Set
			If ((Me._supplierID = value)  _
						= false) Then
				Me._supplierID = value
			End If
		End Set
	End Property
End Class

Partial Public Class AA_getAvailableAmbassadorResult
	
	Private _userID As String
	
	Private _userName As String
	
	Private _FirstName As String
	
	Private _LastName As String
	
	Private _FullName As String
	
	Private _latitude As System.Nullable(Of Double)
	
	Private _longitude As System.Nullable(Of Double)
	
	Private _marketID As System.Nullable(Of Integer)
	
	Private _positionID As System.Nullable(Of Integer)
	
	Private _miles As System.Nullable(Of Double)
	
	Private _EmailAddress As String
	
	Private _Phone As String
	
	Private _DOB As String
	
	Private _Address1 As String
	
	Private _City As String
	
	Private _State As String
	
	Private _Zip As String
	
	Private _requestID As String
	
	Private _Requested As String
	
	Private _IsRequested As String
	
	Private _Positions As String
	
	Private _Markets As String
	
	Private _Training As String
	
	Private _YTDEventCount As String
	
	Private _YTDHours As String
	
	Private _YTDPay As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me._userID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userName", DbType:="NVarChar(50)")>  _
	Public Property userName() As String
		Get
			Return Me._userName
		End Get
		Set
			If (String.Equals(Me._userName, value) = false) Then
				Me._userName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="NVarChar(30)")>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me._FirstName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="NVarChar(30)")>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me._LastName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FullName", DbType:="NVarChar(101)")>  _
	Public Property FullName() As String
		Get
			Return Me._FullName
		End Get
		Set
			If (String.Equals(Me._FullName, value) = false) Then
				Me._FullName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_latitude", DbType:="Float")>  _
	Public Property latitude() As System.Nullable(Of Double)
		Get
			Return Me._latitude
		End Get
		Set
			If (Me._latitude.Equals(value) = false) Then
				Me._latitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_longitude", DbType:="Float")>  _
	Public Property longitude() As System.Nullable(Of Double)
		Get
			Return Me._longitude
		End Get
		Set
			If (Me._longitude.Equals(value) = false) Then
				Me._longitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="Int")>  _
	Public Property marketID() As System.Nullable(Of Integer)
		Get
			Return Me._marketID
		End Get
		Set
			If (Me._marketID.Equals(value) = false) Then
				Me._marketID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_positionID", DbType:="Int")>  _
	Public Property positionID() As System.Nullable(Of Integer)
		Get
			Return Me._positionID
		End Get
		Set
			If (Me._positionID.Equals(value) = false) Then
				Me._positionID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_miles", DbType:="Float")>  _
	Public Property miles() As System.Nullable(Of Double)
		Get
			Return Me._miles
		End Get
		Set
			If (Me._miles.Equals(value) = false) Then
				Me._miles = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmailAddress", DbType:="NVarChar(50)")>  _
	Public Property EmailAddress() As String
		Get
			Return Me._EmailAddress
		End Get
		Set
			If (String.Equals(Me._EmailAddress, value) = false) Then
				Me._EmailAddress = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone", DbType:="VarChar(256)")>  _
	Public Property Phone() As String
		Get
			Return Me._Phone
		End Get
		Set
			If (String.Equals(Me._Phone, value) = false) Then
				Me._Phone = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DOB", DbType:="NVarChar(100)")>  _
	Public Property DOB() As String
		Get
			Return Me._DOB
		End Get
		Set
			If (String.Equals(Me._DOB, value) = false) Then
				Me._DOB = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address1", DbType:="NVarChar(50)")>  _
	Public Property Address1() As String
		Get
			Return Me._Address1
		End Get
		Set
			If (String.Equals(Me._Address1, value) = false) Then
				Me._Address1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", DbType:="NVarChar(50)")>  _
	Public Property City() As String
		Get
			Return Me._City
		End Get
		Set
			If (String.Equals(Me._City, value) = false) Then
				Me._City = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_State", DbType:="NVarChar(50)")>  _
	Public Property State() As String
		Get
			Return Me._State
		End Get
		Set
			If (String.Equals(Me._State, value) = false) Then
				Me._State = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Zip", DbType:="NVarChar(50)")>  _
	Public Property Zip() As String
		Get
			Return Me._Zip
		End Get
		Set
			If (String.Equals(Me._Zip, value) = false) Then
				Me._Zip = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_requestID", DbType:="VarChar(MAX)")>  _
	Public Property requestID() As String
		Get
			Return Me._requestID
		End Get
		Set
			If (String.Equals(Me._requestID, value) = false) Then
				Me._requestID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Requested", DbType:="VarChar(60) NOT NULL", CanBeNull:=false)>  _
	Public Property Requested() As String
		Get
			Return Me._Requested
		End Get
		Set
			If (String.Equals(Me._Requested, value) = false) Then
				Me._Requested = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsRequested", DbType:="VarChar(5) NOT NULL", CanBeNull:=false)>  _
	Public Property IsRequested() As String
		Get
			Return Me._IsRequested
		End Get
		Set
			If (String.Equals(Me._IsRequested, value) = false) Then
				Me._IsRequested = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Positions", DbType:="VarChar(1) NOT NULL", CanBeNull:=false)>  _
	Public Property Positions() As String
		Get
			Return Me._Positions
		End Get
		Set
			If (String.Equals(Me._Positions, value) = false) Then
				Me._Positions = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Markets", DbType:="VarChar(1) NOT NULL", CanBeNull:=false)>  _
	Public Property Markets() As String
		Get
			Return Me._Markets
		End Get
		Set
			If (String.Equals(Me._Markets, value) = false) Then
				Me._Markets = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Training", DbType:="VarChar(1) NOT NULL", CanBeNull:=false)>  _
	Public Property Training() As String
		Get
			Return Me._Training
		End Get
		Set
			If (String.Equals(Me._Training, value) = false) Then
				Me._Training = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YTDEventCount", DbType:="VarChar(1) NOT NULL", CanBeNull:=false)>  _
	Public Property YTDEventCount() As String
		Get
			Return Me._YTDEventCount
		End Get
		Set
			If (String.Equals(Me._YTDEventCount, value) = false) Then
				Me._YTDEventCount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YTDHours", DbType:="VarChar(1) NOT NULL", CanBeNull:=false)>  _
	Public Property YTDHours() As String
		Get
			Return Me._YTDHours
		End Get
		Set
			If (String.Equals(Me._YTDHours, value) = false) Then
				Me._YTDHours = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YTDPay", DbType:="VarChar(1) NOT NULL", CanBeNull:=false)>  _
	Public Property YTDPay() As String
		Get
			Return Me._YTDPay
		End Get
		Set
			If (String.Equals(Me._YTDPay, value) = false) Then
				Me._YTDPay = value
			End If
		End Set
	End Property
End Class

Partial Public Class ViewScheduledPaymentsByAmbassadorResult
	
	Private _RequirementID As Integer
	
	Private _locationID As System.Nullable(Of Integer)
	
	Private _accountID As Integer
	
	Private _accountName As String
	
	Private _eventID As Integer
	
	Private _supplierName As String
	
	Private _userID As String
	
	Private _userName As String
	
	Private _FullName As String
	
	Private _positionTitle As String
	
	Private _statusID As System.Nullable(Of Integer)
	
	Private _rate As System.Nullable(Of Decimal)
	
	Private _hours As System.Nullable(Of Double)
	
	Private _labor As System.Nullable(Of Double)
	
	Private _paymentStatus As String
	
	Private _paymentID As System.Nullable(Of Integer)
	
	Private _expenses As System.Nullable(Of Decimal)
	
	Private _Total As System.Nullable(Of Double)
	
	Private _paymentDate As System.Nullable(Of Date)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RequirementID", DbType:="Int NOT NULL")>  _
	Public Property RequirementID() As Integer
		Get
			Return Me._RequirementID
		End Get
		Set
			If ((Me._RequirementID = value)  _
						= false) Then
				Me._RequirementID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_locationID", DbType:="Int")>  _
	Public Property locationID() As System.Nullable(Of Integer)
		Get
			Return Me._locationID
		End Get
		Set
			If (Me._locationID.Equals(value) = false) Then
				Me._locationID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="Int NOT NULL")>  _
	Public Property accountID() As Integer
		Get
			Return Me._accountID
		End Get
		Set
			If ((Me._accountID = value)  _
						= false) Then
				Me._accountID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountName", DbType:="VarChar(256)")>  _
	Public Property accountName() As String
		Get
			Return Me._accountName
		End Get
		Set
			If (String.Equals(Me._accountName, value) = false) Then
				Me._accountName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierName", DbType:="NVarChar(50)")>  _
	Public Property supplierName() As String
		Get
			Return Me._supplierName
		End Get
		Set
			If (String.Equals(Me._supplierName, value) = false) Then
				Me._supplierName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me._userID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userName", DbType:="NVarChar(50)")>  _
	Public Property userName() As String
		Get
			Return Me._userName
		End Get
		Set
			If (String.Equals(Me._userName, value) = false) Then
				Me._userName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FullName", DbType:="NVarChar(101)")>  _
	Public Property FullName() As String
		Get
			Return Me._FullName
		End Get
		Set
			If (String.Equals(Me._FullName, value) = false) Then
				Me._FullName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_positionTitle", DbType:="NVarChar(50)")>  _
	Public Property positionTitle() As String
		Get
			Return Me._positionTitle
		End Get
		Set
			If (String.Equals(Me._positionTitle, value) = false) Then
				Me._positionTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_statusID", DbType:="Int")>  _
	Public Property statusID() As System.Nullable(Of Integer)
		Get
			Return Me._statusID
		End Get
		Set
			If (Me._statusID.Equals(value) = false) Then
				Me._statusID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rate", DbType:="Decimal(18,2)")>  _
	Public Property rate() As System.Nullable(Of Decimal)
		Get
			Return Me._rate
		End Get
		Set
			If (Me._rate.Equals(value) = false) Then
				Me._rate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hours", DbType:="Float")>  _
	Public Property hours() As System.Nullable(Of Double)
		Get
			Return Me._hours
		End Get
		Set
			If (Me._hours.Equals(value) = false) Then
				Me._hours = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_labor", DbType:="Float")>  _
	Public Property labor() As System.Nullable(Of Double)
		Get
			Return Me._labor
		End Get
		Set
			If (Me._labor.Equals(value) = false) Then
				Me._labor = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentStatus", DbType:="VarChar(50)")>  _
	Public Property paymentStatus() As String
		Get
			Return Me._paymentStatus
		End Get
		Set
			If (String.Equals(Me._paymentStatus, value) = false) Then
				Me._paymentStatus = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentID", DbType:="Int")>  _
	Public Property paymentID() As System.Nullable(Of Integer)
		Get
			Return Me._paymentID
		End Get
		Set
			If (Me._paymentID.Equals(value) = false) Then
				Me._paymentID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_expenses", DbType:="Money")>  _
	Public Property expenses() As System.Nullable(Of Decimal)
		Get
			Return Me._expenses
		End Get
		Set
			If (Me._expenses.Equals(value) = false) Then
				Me._expenses = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Total", DbType:="Float")>  _
	Public Property Total() As System.Nullable(Of Double)
		Get
			Return Me._Total
		End Get
		Set
			If (Me._Total.Equals(value) = false) Then
				Me._Total = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentDate", DbType:="SmallDateTime")>  _
	Public Property paymentDate() As System.Nullable(Of Date)
		Get
			Return Me._paymentDate
		End Get
		Set
			If (Me._paymentDate.Equals(value) = false) Then
				Me._paymentDate = value
			End If
		End Set
	End Property
End Class

Partial Public Class getAccountsByUserIDResult
	
	Private _accountID As Integer
	
	Private _Vpid As System.Nullable(Of Integer)
	
	Private _accountName As String
	
	Private _streetAddress1 As String
	
	Private _city As String
	
	Private _StateName As String
	
	Private _zipCode As String
	
	Private _accountTypeID As System.Nullable(Of Integer)
	
	Private _accountTypeName As String
	
	Private _marketID As System.Nullable(Of Integer)
	
	Private _marketName As String
	
	Private _latitude As System.Nullable(Of Double)
	
	Private _longitude As System.Nullable(Of Double)
	
	Private _shape As String
	
	Private _tooltipformap As String
	
	Private _brandChampion As System.Nullable(Of Boolean)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="Int NOT NULL")>  _
	Public Property accountID() As Integer
		Get
			Return Me._accountID
		End Get
		Set
			If ((Me._accountID = value)  _
						= false) Then
				Me._accountID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Vpid", DbType:="Int")>  _
	Public Property Vpid() As System.Nullable(Of Integer)
		Get
			Return Me._Vpid
		End Get
		Set
			If (Me._Vpid.Equals(value) = false) Then
				Me._Vpid = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountName", DbType:="VarChar(256)")>  _
	Public Property accountName() As String
		Get
			Return Me._accountName
		End Get
		Set
			If (String.Equals(Me._accountName, value) = false) Then
				Me._accountName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_streetAddress1", DbType:="VarChar(256)")>  _
	Public Property streetAddress1() As String
		Get
			Return Me._streetAddress1
		End Get
		Set
			If (String.Equals(Me._streetAddress1, value) = false) Then
				Me._streetAddress1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_city", DbType:="VarChar(50)")>  _
	Public Property city() As String
		Get
			Return Me._city
		End Get
		Set
			If (String.Equals(Me._city, value) = false) Then
				Me._city = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StateName", DbType:="VarChar(250)")>  _
	Public Property StateName() As String
		Get
			Return Me._StateName
		End Get
		Set
			If (String.Equals(Me._StateName, value) = false) Then
				Me._StateName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_zipCode", DbType:="VarChar(10)")>  _
	Public Property zipCode() As String
		Get
			Return Me._zipCode
		End Get
		Set
			If (String.Equals(Me._zipCode, value) = false) Then
				Me._zipCode = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountTypeID", DbType:="Int")>  _
	Public Property accountTypeID() As System.Nullable(Of Integer)
		Get
			Return Me._accountTypeID
		End Get
		Set
			If (Me._accountTypeID.Equals(value) = false) Then
				Me._accountTypeID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountTypeName", DbType:="VarChar(256)")>  _
	Public Property accountTypeName() As String
		Get
			Return Me._accountTypeName
		End Get
		Set
			If (String.Equals(Me._accountTypeName, value) = false) Then
				Me._accountTypeName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="Int")>  _
	Public Property marketID() As System.Nullable(Of Integer)
		Get
			Return Me._marketID
		End Get
		Set
			If (Me._marketID.Equals(value) = false) Then
				Me._marketID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketName", DbType:="VarChar(50)")>  _
	Public Property marketName() As String
		Get
			Return Me._marketName
		End Get
		Set
			If (String.Equals(Me._marketName, value) = false) Then
				Me._marketName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_latitude", DbType:="Float")>  _
	Public Property latitude() As System.Nullable(Of Double)
		Get
			Return Me._latitude
		End Get
		Set
			If (Me._latitude.Equals(value) = false) Then
				Me._latitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_longitude", DbType:="Float")>  _
	Public Property longitude() As System.Nullable(Of Double)
		Get
			Return Me._longitude
		End Get
		Set
			If (Me._longitude.Equals(value) = false) Then
				Me._longitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_shape", DbType:="VarChar(9) NOT NULL", CanBeNull:=false)>  _
	Public Property shape() As String
		Get
			Return Me._shape
		End Get
		Set
			If (String.Equals(Me._shape, value) = false) Then
				Me._shape = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tooltipformap", DbType:="VarChar(328)")>  _
	Public Property tooltipformap() As String
		Get
			Return Me._tooltipformap
		End Get
		Set
			If (String.Equals(Me._tooltipformap, value) = false) Then
				Me._tooltipformap = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandChampion", DbType:="Bit")>  _
	Public Property brandChampion() As System.Nullable(Of Boolean)
		Get
			Return Me._brandChampion
		End Get
		Set
			If (Me._brandChampion.Equals(value) = false) Then
				Me._brandChampion = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetAccountsCityListResult
	
	Private _city As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_city", DbType:="VarChar(50)")>  _
	Public Property city() As String
		Get
			Return Me._city
		End Get
		Set
			If (String.Equals(Me._city, value) = false) Then
				Me._city = value
			End If
		End Set
	End Property
End Class

Partial Public Class getActiveAmbassador_byMarketIDResult
	
	Private _ambassadorID As Integer
	
	Private _userID As String
	
	Private _userName As String
	
	Private _FirstName As String
	
	Private _LastName As String
	
	Private _EmailAddress As String
	
	Private _City As String
	
	Private _State As String
	
	Private _LastLoginDate As String
	
	Private _labelText As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ambassadorID", DbType:="Int NOT NULL")>  _
	Public Property ambassadorID() As Integer
		Get
			Return Me._ambassadorID
		End Get
		Set
			If ((Me._ambassadorID = value)  _
						= false) Then
				Me._ambassadorID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me._userID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userName", DbType:="NVarChar(50)")>  _
	Public Property userName() As String
		Get
			Return Me._userName
		End Get
		Set
			If (String.Equals(Me._userName, value) = false) Then
				Me._userName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="NVarChar(50)")>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me._FirstName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="NVarChar(50)")>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me._LastName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmailAddress", DbType:="NVarChar(50)")>  _
	Public Property EmailAddress() As String
		Get
			Return Me._EmailAddress
		End Get
		Set
			If (String.Equals(Me._EmailAddress, value) = false) Then
				Me._EmailAddress = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", DbType:="NVarChar(50)")>  _
	Public Property City() As String
		Get
			Return Me._City
		End Get
		Set
			If (String.Equals(Me._City, value) = false) Then
				Me._City = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_State", DbType:="VarChar(MAX)")>  _
	Public Property State() As String
		Get
			Return Me._State
		End Get
		Set
			If (String.Equals(Me._State, value) = false) Then
				Me._State = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastLoginDate", DbType:="VarChar(23)")>  _
	Public Property LastLoginDate() As String
		Get
			Return Me._LastLoginDate
		End Get
		Set
			If (String.Equals(Me._LastLoginDate, value) = false) Then
				Me._LastLoginDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_labelText", DbType:="VarChar(101)")>  _
	Public Property labelText() As String
		Get
			Return Me._labelText
		End Get
		Set
			If (String.Equals(Me._labelText, value) = false) Then
				Me._labelText = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetActiveClientsByUserIDResult
	
	Private _clientID As Integer
	
	Private _clientName As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", DbType:="Int NOT NULL")>  _
	Public Property clientID() As Integer
		Get
			Return Me._clientID
		End Get
		Set
			If ((Me._clientID = value)  _
						= false) Then
				Me._clientID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property clientName() As String
		Get
			Return Me._clientName
		End Get
		Set
			If (String.Equals(Me._clientName, value) = false) Then
				Me._clientName = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetAmbassadorbyMarketIDResult
	
	Private _userID As String
	
	Private _userName As String
	
	Private _FirstName As String
	
	Private _LastName As String
	
	Private _City As String
	
	Private _State As String
	
	Private _latitude As System.Nullable(Of Double)
	
	Private _longitude As System.Nullable(Of Double)
	
	Private _shape As String
	
	Private _marketID As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me._userID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userName", DbType:="NVarChar(50)")>  _
	Public Property userName() As String
		Get
			Return Me._userName
		End Get
		Set
			If (String.Equals(Me._userName, value) = false) Then
				Me._userName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="NVarChar(50)")>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me._FirstName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="NVarChar(50)")>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me._LastName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", DbType:="NVarChar(50)")>  _
	Public Property City() As String
		Get
			Return Me._City
		End Get
		Set
			If (String.Equals(Me._City, value) = false) Then
				Me._City = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_State", DbType:="NVarChar(50)")>  _
	Public Property State() As String
		Get
			Return Me._State
		End Get
		Set
			If (String.Equals(Me._State, value) = false) Then
				Me._State = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_latitude", DbType:="Float")>  _
	Public Property latitude() As System.Nullable(Of Double)
		Get
			Return Me._latitude
		End Get
		Set
			If (Me._latitude.Equals(value) = false) Then
				Me._latitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_longitude", DbType:="Float")>  _
	Public Property longitude() As System.Nullable(Of Double)
		Get
			Return Me._longitude
		End Get
		Set
			If (Me._longitude.Equals(value) = false) Then
				Me._longitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_shape", DbType:="VarChar(9) NOT NULL", CanBeNull:=false)>  _
	Public Property shape() As String
		Get
			Return Me._shape
		End Get
		Set
			If (String.Equals(Me._shape, value) = false) Then
				Me._shape = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="Int")>  _
	Public Property marketID() As System.Nullable(Of Integer)
		Get
			Return Me._marketID
		End Get
		Set
			If (Me._marketID.Equals(value) = false) Then
				Me._marketID = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetAmbassadorbyMarketID_withAccountsResult
	
	Private _FirstName As String
	
	Private _latitude As System.Nullable(Of Double)
	
	Private _longitude As System.Nullable(Of Double)
	
	Private _shape As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="NVarChar(256)")>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me._FirstName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_latitude", DbType:="Float")>  _
	Public Property latitude() As System.Nullable(Of Double)
		Get
			Return Me._latitude
		End Get
		Set
			If (Me._latitude.Equals(value) = false) Then
				Me._latitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_longitude", DbType:="Float")>  _
	Public Property longitude() As System.Nullable(Of Double)
		Get
			Return Me._longitude
		End Get
		Set
			If (Me._longitude.Equals(value) = false) Then
				Me._longitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_shape", DbType:="VarChar(9) NOT NULL", CanBeNull:=false)>  _
	Public Property shape() As String
		Get
			Return Me._shape
		End Get
		Set
			If (String.Equals(Me._shape, value) = false) Then
				Me._shape = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetAmbassadorbyMarketID_withScheduledEventsResult
	
	Private _FirstName As String
	
	Private _latitude As System.Nullable(Of Double)
	
	Private _longitude As System.Nullable(Of Double)
	
	Private _shape As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="NVarChar(MAX)")>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me._FirstName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_latitude", DbType:="Float")>  _
	Public Property latitude() As System.Nullable(Of Double)
		Get
			Return Me._latitude
		End Get
		Set
			If (Me._latitude.Equals(value) = false) Then
				Me._latitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_longitude", DbType:="Float")>  _
	Public Property longitude() As System.Nullable(Of Double)
		Get
			Return Me._longitude
		End Get
		Set
			If (Me._longitude.Equals(value) = false) Then
				Me._longitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_shape", DbType:="VarChar(9) NOT NULL", CanBeNull:=false)>  _
	Public Property shape() As String
		Get
			Return Me._shape
		End Get
		Set
			If (String.Equals(Me._shape, value) = false) Then
				Me._shape = value
			End If
		End Set
	End Property
End Class

Partial Public Class getAmbassadorClientsResult
	
	Private _userID As String
	
	Private _clientID As System.Nullable(Of Integer)
	
	Private _clientName As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me._userID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", DbType:="Int")>  _
	Public Property clientID() As System.Nullable(Of Integer)
		Get
			Return Me._clientID
		End Get
		Set
			If (Me._clientID.Equals(value) = false) Then
				Me._clientID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property clientName() As String
		Get
			Return Me._clientName
		End Get
		Set
			If (String.Equals(Me._clientName, value) = false) Then
				Me._clientName = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetAmbassadorEventsWithBrandsResult
	
	Private _userID As String
	
	Private _eventID As Integer
	
	Private _supplierID As System.Nullable(Of Integer)
	
	Private _supplierName As String
	
	Private _eventTitle As String
	
	Private _brandID As System.Nullable(Of Integer)
	
	Private _brandName As String
	
	Private _courseID As String
	
	Private _courseGroupID As String
	
	Private _eventDate As System.Nullable(Of Date)
	
	Private _startTime As System.Nullable(Of Date)
	
	Private _endTime As System.Nullable(Of Date)
	
	Private _clientID As System.Nullable(Of Integer)
	
	Private _statusID As Integer
	
	Private _statusName As String
	
	Private _eventTypeID As System.Nullable(Of Integer)
	
	Private _eventTypeName As String
	
	Private _marketID As System.Nullable(Of Integer)
	
	Private _marketName As String
	
	Private _locationID As System.Nullable(Of Integer)
	
	Private _accountID As Integer
	
	Private _Vpid As System.Nullable(Of Integer)
	
	Private _accountName As String
	
	Private _address As String
	
	Private _city As String
	
	Private _state As String
	
	Private _brands As String
	
	Private _latitude As System.Nullable(Of Double)
	
	Private _longitude As System.Nullable(Of Double)
	
	Private _formatedEventDate As String
	
	Private _formatedStartTime As String
	
	Private _hours As System.Nullable(Of Integer)
	
	Private _checkedIn As System.Nullable(Of Boolean)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me._userID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int")>  _
	Public Property supplierID() As System.Nullable(Of Integer)
		Get
			Return Me._supplierID
		End Get
		Set
			If (Me._supplierID.Equals(value) = false) Then
				Me._supplierID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierName", DbType:="NVarChar(50)")>  _
	Public Property supplierName() As String
		Get
			Return Me._supplierName
		End Get
		Set
			If (String.Equals(Me._supplierName, value) = false) Then
				Me._supplierName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTitle", DbType:="VarChar(1000)")>  _
	Public Property eventTitle() As String
		Get
			Return Me._eventTitle
		End Get
		Set
			If (String.Equals(Me._eventTitle, value) = false) Then
				Me._eventTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandID", DbType:="Int")>  _
	Public Property brandID() As System.Nullable(Of Integer)
		Get
			Return Me._brandID
		End Get
		Set
			If (Me._brandID.Equals(value) = false) Then
				Me._brandID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandName", DbType:="NVarChar(256)")>  _
	Public Property brandName() As String
		Get
			Return Me._brandName
		End Get
		Set
			If (String.Equals(Me._brandName, value) = false) Then
				Me._brandName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_courseID", DbType:="NVarChar(50)")>  _
	Public Property courseID() As String
		Get
			Return Me._courseID
		End Get
		Set
			If (String.Equals(Me._courseID, value) = false) Then
				Me._courseID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_courseGroupID", DbType:="NVarChar(50)")>  _
	Public Property courseGroupID() As String
		Get
			Return Me._courseGroupID
		End Get
		Set
			If (String.Equals(Me._courseGroupID, value) = false) Then
				Me._courseGroupID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventDate", DbType:="SmallDateTime")>  _
	Public Property eventDate() As System.Nullable(Of Date)
		Get
			Return Me._eventDate
		End Get
		Set
			If (Me._eventDate.Equals(value) = false) Then
				Me._eventDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_startTime", DbType:="SmallDateTime")>  _
	Public Property startTime() As System.Nullable(Of Date)
		Get
			Return Me._startTime
		End Get
		Set
			If (Me._startTime.Equals(value) = false) Then
				Me._startTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_endTime", DbType:="SmallDateTime")>  _
	Public Property endTime() As System.Nullable(Of Date)
		Get
			Return Me._endTime
		End Get
		Set
			If (Me._endTime.Equals(value) = false) Then
				Me._endTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", DbType:="Int")>  _
	Public Property clientID() As System.Nullable(Of Integer)
		Get
			Return Me._clientID
		End Get
		Set
			If (Me._clientID.Equals(value) = false) Then
				Me._clientID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_statusID", DbType:="Int NOT NULL")>  _
	Public Property statusID() As Integer
		Get
			Return Me._statusID
		End Get
		Set
			If ((Me._statusID = value)  _
						= false) Then
				Me._statusID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_statusName", DbType:="NVarChar(50)")>  _
	Public Property statusName() As String
		Get
			Return Me._statusName
		End Get
		Set
			If (String.Equals(Me._statusName, value) = false) Then
				Me._statusName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTypeID", DbType:="Int")>  _
	Public Property eventTypeID() As System.Nullable(Of Integer)
		Get
			Return Me._eventTypeID
		End Get
		Set
			If (Me._eventTypeID.Equals(value) = false) Then
				Me._eventTypeID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTypeName", DbType:="NVarChar(50)")>  _
	Public Property eventTypeName() As String
		Get
			Return Me._eventTypeName
		End Get
		Set
			If (String.Equals(Me._eventTypeName, value) = false) Then
				Me._eventTypeName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="Int")>  _
	Public Property marketID() As System.Nullable(Of Integer)
		Get
			Return Me._marketID
		End Get
		Set
			If (Me._marketID.Equals(value) = false) Then
				Me._marketID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketName", DbType:="VarChar(50)")>  _
	Public Property marketName() As String
		Get
			Return Me._marketName
		End Get
		Set
			If (String.Equals(Me._marketName, value) = false) Then
				Me._marketName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_locationID", DbType:="Int")>  _
	Public Property locationID() As System.Nullable(Of Integer)
		Get
			Return Me._locationID
		End Get
		Set
			If (Me._locationID.Equals(value) = false) Then
				Me._locationID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="Int NOT NULL")>  _
	Public Property accountID() As Integer
		Get
			Return Me._accountID
		End Get
		Set
			If ((Me._accountID = value)  _
						= false) Then
				Me._accountID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Vpid", DbType:="Int")>  _
	Public Property Vpid() As System.Nullable(Of Integer)
		Get
			Return Me._Vpid
		End Get
		Set
			If (Me._Vpid.Equals(value) = false) Then
				Me._Vpid = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountName", DbType:="VarChar(256)")>  _
	Public Property accountName() As String
		Get
			Return Me._accountName
		End Get
		Set
			If (String.Equals(Me._accountName, value) = false) Then
				Me._accountName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_address", DbType:="VarChar(256)")>  _
	Public Property address() As String
		Get
			Return Me._address
		End Get
		Set
			If (String.Equals(Me._address, value) = false) Then
				Me._address = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_city", DbType:="VarChar(50)")>  _
	Public Property city() As String
		Get
			Return Me._city
		End Get
		Set
			If (String.Equals(Me._city, value) = false) Then
				Me._city = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_state", DbType:="NVarChar(20)")>  _
	Public Property state() As String
		Get
			Return Me._state
		End Get
		Set
			If (String.Equals(Me._state, value) = false) Then
				Me._state = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brands", DbType:="VarChar(MAX)")>  _
	Public Property brands() As String
		Get
			Return Me._brands
		End Get
		Set
			If (String.Equals(Me._brands, value) = false) Then
				Me._brands = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_latitude", DbType:="Float")>  _
	Public Property latitude() As System.Nullable(Of Double)
		Get
			Return Me._latitude
		End Get
		Set
			If (Me._latitude.Equals(value) = false) Then
				Me._latitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_longitude", DbType:="Float")>  _
	Public Property longitude() As System.Nullable(Of Double)
		Get
			Return Me._longitude
		End Get
		Set
			If (Me._longitude.Equals(value) = false) Then
				Me._longitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_formatedEventDate", DbType:="NVarChar(4000)")>  _
	Public Property formatedEventDate() As String
		Get
			Return Me._formatedEventDate
		End Get
		Set
			If (String.Equals(Me._formatedEventDate, value) = false) Then
				Me._formatedEventDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_formatedStartTime", DbType:="NVarChar(4000)")>  _
	Public Property formatedStartTime() As String
		Get
			Return Me._formatedStartTime
		End Get
		Set
			If (String.Equals(Me._formatedStartTime, value) = false) Then
				Me._formatedStartTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hours", DbType:="Int")>  _
	Public Property hours() As System.Nullable(Of Integer)
		Get
			Return Me._hours
		End Get
		Set
			If (Me._hours.Equals(value) = false) Then
				Me._hours = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_checkedIn", DbType:="Bit")>  _
	Public Property checkedIn() As System.Nullable(Of Boolean)
		Get
			Return Me._checkedIn
		End Get
		Set
			If (Me._checkedIn.Equals(value) = false) Then
				Me._checkedIn = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetAmbassadorForAmbassadorMapResult
	
	Private _FirstName As String
	
	Private _latitude As System.Nullable(Of Double)
	
	Private _longitude As System.Nullable(Of Double)
	
	Private _shape As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="NVarChar(101)")>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me._FirstName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_latitude", DbType:="Float")>  _
	Public Property latitude() As System.Nullable(Of Double)
		Get
			Return Me._latitude
		End Get
		Set
			If (Me._latitude.Equals(value) = false) Then
				Me._latitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_longitude", DbType:="Float")>  _
	Public Property longitude() As System.Nullable(Of Double)
		Get
			Return Me._longitude
		End Get
		Set
			If (Me._longitude.Equals(value) = false) Then
				Me._longitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_shape", DbType:="VarChar(9) NOT NULL", CanBeNull:=false)>  _
	Public Property shape() As String
		Get
			Return Me._shape
		End Get
		Set
			If (String.Equals(Me._shape, value) = false) Then
				Me._shape = value
			End If
		End Set
	End Property
End Class

Partial Public Class getAmbassadorMarketsResult
	
	Private _userID As String
	
	Private _marketID As System.Nullable(Of Integer)
	
	Private _marketName As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me._userID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="Int")>  _
	Public Property marketID() As System.Nullable(Of Integer)
		Get
			Return Me._marketID
		End Get
		Set
			If (Me._marketID.Equals(value) = false) Then
				Me._marketID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketName", DbType:="VarChar(50)")>  _
	Public Property marketName() As String
		Get
			Return Me._marketName
		End Get
		Set
			If (String.Equals(Me._marketName, value) = false) Then
				Me._marketName = value
			End If
		End Set
	End Property
End Class

Partial Public Class getAmbassadorPositionResult
	
	Private _userID As String
	
	Private _staffingPositionID As System.Nullable(Of Integer)
	
	Private _positionTitle As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me._userID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_staffingPositionID", DbType:="Int")>  _
	Public Property staffingPositionID() As System.Nullable(Of Integer)
		Get
			Return Me._staffingPositionID
		End Get
		Set
			If (Me._staffingPositionID.Equals(value) = false) Then
				Me._staffingPositionID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_positionTitle", DbType:="NVarChar(50)")>  _
	Public Property positionTitle() As String
		Get
			Return Me._positionTitle
		End Get
		Set
			If (String.Equals(Me._positionTitle, value) = false) Then
				Me._positionTitle = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetApprovedPayments_toProcessByDateResult
	
	Private _RequirementID As Integer
	
	Private _eventDate As System.Nullable(Of Date)
	
	Private _UserName As String
	
	Private _userID As String
	
	Private _FullName As String
	
	Private _Hours As System.Nullable(Of Integer)
	
	Private _Labor As System.Nullable(Of Decimal)
	
	Private _Expenses As System.Nullable(Of Decimal)
	
	Private _Bonus As System.Nullable(Of Decimal)
	
	Private _Total As System.Nullable(Of Decimal)
	
	Private _paymentID As System.Nullable(Of Integer)
	
	Private _clientID As System.Nullable(Of Integer)
	
	Private _work_type_name As String
	
	Private _quantity As System.Nullable(Of Decimal)
	
	Private _display_name As String
	
	Private _external_worker_id As String
	
	Private _email As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RequirementID", DbType:="Int NOT NULL")>  _
	Public Property RequirementID() As Integer
		Get
			Return Me._RequirementID
		End Get
		Set
			If ((Me._RequirementID = value)  _
						= false) Then
				Me._RequirementID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventDate", DbType:="SmallDateTime")>  _
	Public Property eventDate() As System.Nullable(Of Date)
		Get
			Return Me._eventDate
		End Get
		Set
			If (Me._eventDate.Equals(value) = false) Then
				Me._eventDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="NVarChar(50)")>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me._UserName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me._userID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FullName", DbType:="NVarChar(101)")>  _
	Public Property FullName() As String
		Get
			Return Me._FullName
		End Get
		Set
			If (String.Equals(Me._FullName, value) = false) Then
				Me._FullName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Hours", DbType:="Int")>  _
	Public Property Hours() As System.Nullable(Of Integer)
		Get
			Return Me._Hours
		End Get
		Set
			If (Me._Hours.Equals(value) = false) Then
				Me._Hours = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Labor", DbType:="Decimal(38,2)")>  _
	Public Property Labor() As System.Nullable(Of Decimal)
		Get
			Return Me._Labor
		End Get
		Set
			If (Me._Labor.Equals(value) = false) Then
				Me._Labor = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Expenses", DbType:="Money")>  _
	Public Property Expenses() As System.Nullable(Of Decimal)
		Get
			Return Me._Expenses
		End Get
		Set
			If (Me._Expenses.Equals(value) = false) Then
				Me._Expenses = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Bonus", DbType:="Money")>  _
	Public Property Bonus() As System.Nullable(Of Decimal)
		Get
			Return Me._Bonus
		End Get
		Set
			If (Me._Bonus.Equals(value) = false) Then
				Me._Bonus = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Total", DbType:="Decimal(38,4)")>  _
	Public Property Total() As System.Nullable(Of Decimal)
		Get
			Return Me._Total
		End Get
		Set
			If (Me._Total.Equals(value) = false) Then
				Me._Total = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentID", DbType:="Int")>  _
	Public Property paymentID() As System.Nullable(Of Integer)
		Get
			Return Me._paymentID
		End Get
		Set
			If (Me._paymentID.Equals(value) = false) Then
				Me._paymentID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", DbType:="Int")>  _
	Public Property clientID() As System.Nullable(Of Integer)
		Get
			Return Me._clientID
		End Get
		Set
			If (Me._clientID.Equals(value) = false) Then
				Me._clientID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_work_type_name", DbType:="VarChar(8) NOT NULL", CanBeNull:=false)>  _
	Public Property work_type_name() As String
		Get
			Return Me._work_type_name
		End Get
		Set
			If (String.Equals(Me._work_type_name, value) = false) Then
				Me._work_type_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_quantity", DbType:="Decimal(38,4)")>  _
	Public Property quantity() As System.Nullable(Of Decimal)
		Get
			Return Me._quantity
		End Get
		Set
			If (Me._quantity.Equals(value) = false) Then
				Me._quantity = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_display_name", DbType:="NVarChar(101)")>  _
	Public Property display_name() As String
		Get
			Return Me._display_name
		End Get
		Set
			If (String.Equals(Me._display_name, value) = false) Then
				Me._display_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_external_worker_id", DbType:="NVarChar(50)")>  _
	Public Property external_worker_id() As String
		Get
			Return Me._external_worker_id
		End Get
		Set
			If (String.Equals(Me._external_worker_id, value) = false) Then
				Me._external_worker_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_email", DbType:="NVarChar(50)")>  _
	Public Property email() As String
		Get
			Return Me._email
		End Get
		Set
			If (String.Equals(Me._email, value) = false) Then
				Me._email = value
			End If
		End Set
	End Property
End Class

Partial Public Class getAssignments_ByUserIDResult
	
	Private _eventID As Integer
	
	Private _eventTitle As String
	
	Private _supplierID As System.Nullable(Of Integer)
	
	Private _supplierName As String
	
	Private _statusName As String
	
	Private _EventDate As String
	
	Private _StartTime As String
	
	Private _EndTime As String
	
	Private _shortEventDate As String
	
	Private _shortStartTime As String
	
	Private _shortEndTime As String
	
	Private _UserName As String
	
	Private _ID As String
	
	Private _UserID As String
	
	Private _AmbassadorName As String
	
	Private _showBALink As String
	
	Private _showtrackingLink As String
	
	Private _shippingAddress As String
	
	Private _shippingAddress2 As String
	
	Private _EmailAddress As String
	
	Private _Phone As String
	
	Private _brands As String
	
	Private _PosStatus As String
	
	Private _trackingNumber As String
	
	Private _shippingMethodID As System.Nullable(Of Integer)
	
	Private _ShippingAddress1 As String
	
	Private _shippingCity As String
	
	Private _shippingState As String
	
	Private _checkInTime As System.Nullable(Of Date)
	
	Private _checkedIn As System.Nullable(Of Boolean)
	
	Private _locationID As System.Nullable(Of Integer)
	
	Private _accountName As String
	
	Private _address As String
	
	Private _city As String
	
	Private _state As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTitle", DbType:="VarChar(1000)")>  _
	Public Property eventTitle() As String
		Get
			Return Me._eventTitle
		End Get
		Set
			If (String.Equals(Me._eventTitle, value) = false) Then
				Me._eventTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int")>  _
	Public Property supplierID() As System.Nullable(Of Integer)
		Get
			Return Me._supplierID
		End Get
		Set
			If (Me._supplierID.Equals(value) = false) Then
				Me._supplierID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierName", DbType:="NVarChar(50)")>  _
	Public Property supplierName() As String
		Get
			Return Me._supplierName
		End Get
		Set
			If (String.Equals(Me._supplierName, value) = false) Then
				Me._supplierName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_statusName", DbType:="NVarChar(50)")>  _
	Public Property statusName() As String
		Get
			Return Me._statusName
		End Get
		Set
			If (String.Equals(Me._statusName, value) = false) Then
				Me._statusName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EventDate", DbType:="NVarChar(4000)")>  _
	Public Property EventDate() As String
		Get
			Return Me._EventDate
		End Get
		Set
			If (String.Equals(Me._EventDate, value) = false) Then
				Me._EventDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartTime", DbType:="NVarChar(4000)")>  _
	Public Property StartTime() As String
		Get
			Return Me._StartTime
		End Get
		Set
			If (String.Equals(Me._StartTime, value) = false) Then
				Me._StartTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndTime", DbType:="NVarChar(4000)")>  _
	Public Property EndTime() As String
		Get
			Return Me._EndTime
		End Get
		Set
			If (String.Equals(Me._EndTime, value) = false) Then
				Me._EndTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_shortEventDate", DbType:="NVarChar(4000)")>  _
	Public Property shortEventDate() As String
		Get
			Return Me._shortEventDate
		End Get
		Set
			If (String.Equals(Me._shortEventDate, value) = false) Then
				Me._shortEventDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_shortStartTime", DbType:="NVarChar(4000)")>  _
	Public Property shortStartTime() As String
		Get
			Return Me._shortStartTime
		End Get
		Set
			If (String.Equals(Me._shortStartTime, value) = false) Then
				Me._shortStartTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_shortEndTime", DbType:="NVarChar(4000)")>  _
	Public Property shortEndTime() As String
		Get
			Return Me._shortEndTime
		End Get
		Set
			If (String.Equals(Me._shortEndTime, value) = false) Then
				Me._shortEndTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="NVarChar(50)")>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me._UserName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="NVarChar(50)")>  _
	Public Property ID() As String
		Get
			Return Me._ID
		End Get
		Set
			If (String.Equals(Me._ID, value) = false) Then
				Me._ID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="NVarChar(50)")>  _
	Public Property UserID() As String
		Get
			Return Me._UserID
		End Get
		Set
			If (String.Equals(Me._UserID, value) = false) Then
				Me._UserID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AmbassadorName", DbType:="NVarChar(101)")>  _
	Public Property AmbassadorName() As String
		Get
			Return Me._AmbassadorName
		End Get
		Set
			If (String.Equals(Me._AmbassadorName, value) = false) Then
				Me._AmbassadorName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_showBALink", DbType:="VarChar(5) NOT NULL", CanBeNull:=false)>  _
	Public Property showBALink() As String
		Get
			Return Me._showBALink
		End Get
		Set
			If (String.Equals(Me._showBALink, value) = false) Then
				Me._showBALink = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_showtrackingLink", DbType:="VarChar(5) NOT NULL", CanBeNull:=false)>  _
	Public Property showtrackingLink() As String
		Get
			Return Me._showtrackingLink
		End Get
		Set
			If (String.Equals(Me._showtrackingLink, value) = false) Then
				Me._showtrackingLink = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_shippingAddress", DbType:="NVarChar(50)")>  _
	Public Property shippingAddress() As String
		Get
			Return Me._shippingAddress
		End Get
		Set
			If (String.Equals(Me._shippingAddress, value) = false) Then
				Me._shippingAddress = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_shippingAddress2", DbType:="NVarChar(102)")>  _
	Public Property shippingAddress2() As String
		Get
			Return Me._shippingAddress2
		End Get
		Set
			If (String.Equals(Me._shippingAddress2, value) = false) Then
				Me._shippingAddress2 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmailAddress", DbType:="NVarChar(50)")>  _
	Public Property EmailAddress() As String
		Get
			Return Me._EmailAddress
		End Get
		Set
			If (String.Equals(Me._EmailAddress, value) = false) Then
				Me._EmailAddress = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone", DbType:="VarChar(12)")>  _
	Public Property Phone() As String
		Get
			Return Me._Phone
		End Get
		Set
			If (String.Equals(Me._Phone, value) = false) Then
				Me._Phone = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brands", DbType:="VarChar(MAX)")>  _
	Public Property brands() As String
		Get
			Return Me._brands
		End Get
		Set
			If (String.Equals(Me._brands, value) = false) Then
				Me._brands = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PosStatus", DbType:="NVarChar(50)")>  _
	Public Property PosStatus() As String
		Get
			Return Me._PosStatus
		End Get
		Set
			If (String.Equals(Me._PosStatus, value) = false) Then
				Me._PosStatus = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_trackingNumber", DbType:="NVarChar(150)")>  _
	Public Property trackingNumber() As String
		Get
			Return Me._trackingNumber
		End Get
		Set
			If (String.Equals(Me._trackingNumber, value) = false) Then
				Me._trackingNumber = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_shippingMethodID", DbType:="Int")>  _
	Public Property shippingMethodID() As System.Nullable(Of Integer)
		Get
			Return Me._shippingMethodID
		End Get
		Set
			If (Me._shippingMethodID.Equals(value) = false) Then
				Me._shippingMethodID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShippingAddress1", DbType:="NVarChar(50)")>  _
	Public Property ShippingAddress1() As String
		Get
			Return Me._ShippingAddress1
		End Get
		Set
			If (String.Equals(Me._ShippingAddress1, value) = false) Then
				Me._ShippingAddress1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_shippingCity", DbType:="NVarChar(50)")>  _
	Public Property shippingCity() As String
		Get
			Return Me._shippingCity
		End Get
		Set
			If (String.Equals(Me._shippingCity, value) = false) Then
				Me._shippingCity = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_shippingState", DbType:="NVarChar(50)")>  _
	Public Property shippingState() As String
		Get
			Return Me._shippingState
		End Get
		Set
			If (String.Equals(Me._shippingState, value) = false) Then
				Me._shippingState = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_checkInTime", DbType:="SmallDateTime")>  _
	Public Property checkInTime() As System.Nullable(Of Date)
		Get
			Return Me._checkInTime
		End Get
		Set
			If (Me._checkInTime.Equals(value) = false) Then
				Me._checkInTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_checkedIn", DbType:="Bit")>  _
	Public Property checkedIn() As System.Nullable(Of Boolean)
		Get
			Return Me._checkedIn
		End Get
		Set
			If (Me._checkedIn.Equals(value) = false) Then
				Me._checkedIn = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_locationID", DbType:="Int")>  _
	Public Property locationID() As System.Nullable(Of Integer)
		Get
			Return Me._locationID
		End Get
		Set
			If (Me._locationID.Equals(value) = false) Then
				Me._locationID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountName", DbType:="VarChar(256)")>  _
	Public Property accountName() As String
		Get
			Return Me._accountName
		End Get
		Set
			If (String.Equals(Me._accountName, value) = false) Then
				Me._accountName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_address", DbType:="VarChar(256)")>  _
	Public Property address() As String
		Get
			Return Me._address
		End Get
		Set
			If (String.Equals(Me._address, value) = false) Then
				Me._address = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_city", DbType:="VarChar(50)")>  _
	Public Property city() As String
		Get
			Return Me._city
		End Get
		Set
			If (String.Equals(Me._city, value) = false) Then
				Me._city = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_state", DbType:="NVarChar(20)")>  _
	Public Property state() As String
		Get
			Return Me._state
		End Get
		Set
			If (String.Equals(Me._state, value) = false) Then
				Me._state = value
			End If
		End Set
	End Property
End Class

Partial Public Class getAvailableAmbassadorResult
	
	Private _userID As String
	
	Private _userName As String
	
	Private _FirstName As String
	
	Private _LastName As String
	
	Private _FullName As String
	
	Private _latitude As System.Nullable(Of Double)
	
	Private _longitude As System.Nullable(Of Double)
	
	Private _marketID As System.Nullable(Of Integer)
	
	Private _positionID As System.Nullable(Of Integer)
	
	Private _miles As System.Nullable(Of Double)
	
	Private _headShot As System.Data.Linq.Binary
	
	Private _EmailAddress As String
	
	Private _Phone As String
	
	Private _DOB As String
	
	Private _Address1 As String
	
	Private _City As String
	
	Private _State As String
	
	Private _Zip As String
	
	Private _requestID As String
	
	Private _Requested As String
	
	Private _IsRequested As String
	
	Private _Positions As String
	
	Private _Markets As String
	
	Private _Training As String
	
	Private _YTDEventCount As String
	
	Private _YTDHours As String
	
	Private _YTDPay As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me._userID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userName", DbType:="NVarChar(50)")>  _
	Public Property userName() As String
		Get
			Return Me._userName
		End Get
		Set
			If (String.Equals(Me._userName, value) = false) Then
				Me._userName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="NVarChar(30)")>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me._FirstName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="NVarChar(30)")>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me._LastName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FullName", DbType:="NVarChar(101)")>  _
	Public Property FullName() As String
		Get
			Return Me._FullName
		End Get
		Set
			If (String.Equals(Me._FullName, value) = false) Then
				Me._FullName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_latitude", DbType:="Float")>  _
	Public Property latitude() As System.Nullable(Of Double)
		Get
			Return Me._latitude
		End Get
		Set
			If (Me._latitude.Equals(value) = false) Then
				Me._latitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_longitude", DbType:="Float")>  _
	Public Property longitude() As System.Nullable(Of Double)
		Get
			Return Me._longitude
		End Get
		Set
			If (Me._longitude.Equals(value) = false) Then
				Me._longitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="Int")>  _
	Public Property marketID() As System.Nullable(Of Integer)
		Get
			Return Me._marketID
		End Get
		Set
			If (Me._marketID.Equals(value) = false) Then
				Me._marketID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_positionID", DbType:="Int")>  _
	Public Property positionID() As System.Nullable(Of Integer)
		Get
			Return Me._positionID
		End Get
		Set
			If (Me._positionID.Equals(value) = false) Then
				Me._positionID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_miles", DbType:="Float")>  _
	Public Property miles() As System.Nullable(Of Double)
		Get
			Return Me._miles
		End Get
		Set
			If (Me._miles.Equals(value) = false) Then
				Me._miles = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_headShot", DbType:="VarBinary(MAX)")>  _
	Public Property headShot() As System.Data.Linq.Binary
		Get
			Return Me._headShot
		End Get
		Set
			If (Object.Equals(Me._headShot, value) = false) Then
				Me._headShot = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmailAddress", DbType:="NVarChar(50)")>  _
	Public Property EmailAddress() As String
		Get
			Return Me._EmailAddress
		End Get
		Set
			If (String.Equals(Me._EmailAddress, value) = false) Then
				Me._EmailAddress = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone", DbType:="VarChar(256)")>  _
	Public Property Phone() As String
		Get
			Return Me._Phone
		End Get
		Set
			If (String.Equals(Me._Phone, value) = false) Then
				Me._Phone = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DOB", DbType:="NVarChar(100)")>  _
	Public Property DOB() As String
		Get
			Return Me._DOB
		End Get
		Set
			If (String.Equals(Me._DOB, value) = false) Then
				Me._DOB = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address1", DbType:="NVarChar(50)")>  _
	Public Property Address1() As String
		Get
			Return Me._Address1
		End Get
		Set
			If (String.Equals(Me._Address1, value) = false) Then
				Me._Address1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", DbType:="NVarChar(50)")>  _
	Public Property City() As String
		Get
			Return Me._City
		End Get
		Set
			If (String.Equals(Me._City, value) = false) Then
				Me._City = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_State", DbType:="NVarChar(50)")>  _
	Public Property State() As String
		Get
			Return Me._State
		End Get
		Set
			If (String.Equals(Me._State, value) = false) Then
				Me._State = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Zip", DbType:="NVarChar(50)")>  _
	Public Property Zip() As String
		Get
			Return Me._Zip
		End Get
		Set
			If (String.Equals(Me._Zip, value) = false) Then
				Me._Zip = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_requestID", DbType:="VarChar(MAX)")>  _
	Public Property requestID() As String
		Get
			Return Me._requestID
		End Get
		Set
			If (String.Equals(Me._requestID, value) = false) Then
				Me._requestID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Requested", DbType:="VarChar(60) NOT NULL", CanBeNull:=false)>  _
	Public Property Requested() As String
		Get
			Return Me._Requested
		End Get
		Set
			If (String.Equals(Me._Requested, value) = false) Then
				Me._Requested = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsRequested", DbType:="VarChar(5) NOT NULL", CanBeNull:=false)>  _
	Public Property IsRequested() As String
		Get
			Return Me._IsRequested
		End Get
		Set
			If (String.Equals(Me._IsRequested, value) = false) Then
				Me._IsRequested = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Positions", DbType:="VarChar(1) NOT NULL", CanBeNull:=false)>  _
	Public Property Positions() As String
		Get
			Return Me._Positions
		End Get
		Set
			If (String.Equals(Me._Positions, value) = false) Then
				Me._Positions = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Markets", DbType:="VarChar(1) NOT NULL", CanBeNull:=false)>  _
	Public Property Markets() As String
		Get
			Return Me._Markets
		End Get
		Set
			If (String.Equals(Me._Markets, value) = false) Then
				Me._Markets = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Training", DbType:="VarChar(1) NOT NULL", CanBeNull:=false)>  _
	Public Property Training() As String
		Get
			Return Me._Training
		End Get
		Set
			If (String.Equals(Me._Training, value) = false) Then
				Me._Training = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YTDEventCount", DbType:="VarChar(1) NOT NULL", CanBeNull:=false)>  _
	Public Property YTDEventCount() As String
		Get
			Return Me._YTDEventCount
		End Get
		Set
			If (String.Equals(Me._YTDEventCount, value) = false) Then
				Me._YTDEventCount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YTDHours", DbType:="VarChar(1) NOT NULL", CanBeNull:=false)>  _
	Public Property YTDHours() As String
		Get
			Return Me._YTDHours
		End Get
		Set
			If (String.Equals(Me._YTDHours, value) = false) Then
				Me._YTDHours = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YTDPay", DbType:="VarChar(1) NOT NULL", CanBeNull:=false)>  _
	Public Property YTDPay() As String
		Get
			Return Me._YTDPay
		End Get
		Set
			If (String.Equals(Me._YTDPay, value) = false) Then
				Me._YTDPay = value
			End If
		End Set
	End Property
End Class

Partial Public Class getAvailableAmbassadorByEventIDResult
	
	Private _userID As String
	
	Private _userName As String
	
	Private _FirstName As String
	
	Private _LastName As String
	
	Private _FullName As String
	
	Private _latitude As System.Nullable(Of Double)
	
	Private _longitude As System.Nullable(Of Double)
	
	Private _marketID As System.Nullable(Of Integer)
	
	Private _positionID As System.Nullable(Of Integer)
	
	Private _miles As System.Nullable(Of Double)
	
	Private _headShot As System.Data.Linq.Binary
	
	Private _EmailAddress As String
	
	Private _Phone As String
	
	Private _DOB As String
	
	Private _Address1 As String
	
	Private _City As String
	
	Private _State As String
	
	Private _Zip As String
	
	Private _requestID As String
	
	Private _Requested As String
	
	Private _IsRequested As String
	
	Private _Positions As String
	
	Private _Markets As String
	
	Private _Training As String
	
	Private _YTDEventCount As String
	
	Private _YTDHours As String
	
	Private _YTDPay As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me._userID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userName", DbType:="NVarChar(50)")>  _
	Public Property userName() As String
		Get
			Return Me._userName
		End Get
		Set
			If (String.Equals(Me._userName, value) = false) Then
				Me._userName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="NVarChar(30)")>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me._FirstName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="NVarChar(30)")>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me._LastName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FullName", DbType:="NVarChar(101)")>  _
	Public Property FullName() As String
		Get
			Return Me._FullName
		End Get
		Set
			If (String.Equals(Me._FullName, value) = false) Then
				Me._FullName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_latitude", DbType:="Float")>  _
	Public Property latitude() As System.Nullable(Of Double)
		Get
			Return Me._latitude
		End Get
		Set
			If (Me._latitude.Equals(value) = false) Then
				Me._latitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_longitude", DbType:="Float")>  _
	Public Property longitude() As System.Nullable(Of Double)
		Get
			Return Me._longitude
		End Get
		Set
			If (Me._longitude.Equals(value) = false) Then
				Me._longitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="Int")>  _
	Public Property marketID() As System.Nullable(Of Integer)
		Get
			Return Me._marketID
		End Get
		Set
			If (Me._marketID.Equals(value) = false) Then
				Me._marketID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_positionID", DbType:="Int")>  _
	Public Property positionID() As System.Nullable(Of Integer)
		Get
			Return Me._positionID
		End Get
		Set
			If (Me._positionID.Equals(value) = false) Then
				Me._positionID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_miles", DbType:="Float")>  _
	Public Property miles() As System.Nullable(Of Double)
		Get
			Return Me._miles
		End Get
		Set
			If (Me._miles.Equals(value) = false) Then
				Me._miles = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_headShot", DbType:="VarBinary(MAX)")>  _
	Public Property headShot() As System.Data.Linq.Binary
		Get
			Return Me._headShot
		End Get
		Set
			If (Object.Equals(Me._headShot, value) = false) Then
				Me._headShot = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmailAddress", DbType:="NVarChar(50)")>  _
	Public Property EmailAddress() As String
		Get
			Return Me._EmailAddress
		End Get
		Set
			If (String.Equals(Me._EmailAddress, value) = false) Then
				Me._EmailAddress = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone", DbType:="VarChar(256)")>  _
	Public Property Phone() As String
		Get
			Return Me._Phone
		End Get
		Set
			If (String.Equals(Me._Phone, value) = false) Then
				Me._Phone = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DOB", DbType:="NVarChar(100)")>  _
	Public Property DOB() As String
		Get
			Return Me._DOB
		End Get
		Set
			If (String.Equals(Me._DOB, value) = false) Then
				Me._DOB = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address1", DbType:="NVarChar(50)")>  _
	Public Property Address1() As String
		Get
			Return Me._Address1
		End Get
		Set
			If (String.Equals(Me._Address1, value) = false) Then
				Me._Address1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", DbType:="NVarChar(50)")>  _
	Public Property City() As String
		Get
			Return Me._City
		End Get
		Set
			If (String.Equals(Me._City, value) = false) Then
				Me._City = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_State", DbType:="NVarChar(50)")>  _
	Public Property State() As String
		Get
			Return Me._State
		End Get
		Set
			If (String.Equals(Me._State, value) = false) Then
				Me._State = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Zip", DbType:="NVarChar(50)")>  _
	Public Property Zip() As String
		Get
			Return Me._Zip
		End Get
		Set
			If (String.Equals(Me._Zip, value) = false) Then
				Me._Zip = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_requestID", DbType:="VarChar(MAX)")>  _
	Public Property requestID() As String
		Get
			Return Me._requestID
		End Get
		Set
			If (String.Equals(Me._requestID, value) = false) Then
				Me._requestID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Requested", DbType:="VarChar(60) NOT NULL", CanBeNull:=false)>  _
	Public Property Requested() As String
		Get
			Return Me._Requested
		End Get
		Set
			If (String.Equals(Me._Requested, value) = false) Then
				Me._Requested = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsRequested", DbType:="VarChar(5) NOT NULL", CanBeNull:=false)>  _
	Public Property IsRequested() As String
		Get
			Return Me._IsRequested
		End Get
		Set
			If (String.Equals(Me._IsRequested, value) = false) Then
				Me._IsRequested = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Positions", DbType:="VarChar(500)")>  _
	Public Property Positions() As String
		Get
			Return Me._Positions
		End Get
		Set
			If (String.Equals(Me._Positions, value) = false) Then
				Me._Positions = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Markets", DbType:="VarChar(1000)")>  _
	Public Property Markets() As String
		Get
			Return Me._Markets
		End Get
		Set
			If (String.Equals(Me._Markets, value) = false) Then
				Me._Markets = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Training", DbType:="VarChar(1) NOT NULL", CanBeNull:=false)>  _
	Public Property Training() As String
		Get
			Return Me._Training
		End Get
		Set
			If (String.Equals(Me._Training, value) = false) Then
				Me._Training = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YTDEventCount", DbType:="NVarChar(50)")>  _
	Public Property YTDEventCount() As String
		Get
			Return Me._YTDEventCount
		End Get
		Set
			If (String.Equals(Me._YTDEventCount, value) = false) Then
				Me._YTDEventCount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YTDHours", DbType:="NVarChar(50)")>  _
	Public Property YTDHours() As String
		Get
			Return Me._YTDHours
		End Get
		Set
			If (String.Equals(Me._YTDHours, value) = false) Then
				Me._YTDHours = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YTDPay", DbType:="NVarChar(50)")>  _
	Public Property YTDPay() As String
		Get
			Return Me._YTDPay
		End Get
		Set
			If (String.Equals(Me._YTDPay, value) = false) Then
				Me._YTDPay = value
			End If
		End Set
	End Property
End Class

Partial Public Class getAvailableAmbassadorbyMarketIDResult
	
	Private _userID As String
	
	Private _userName As String
	
	Private _FirstName As String
	
	Private _LastName As String
	
	Private _FullName As String
	
	Private _latitude As System.Nullable(Of Double)
	
	Private _longitude As System.Nullable(Of Double)
	
	Private _marketID As System.Nullable(Of Integer)
	
	Private _positionID As System.Nullable(Of Integer)
	
	Private _EmailAddress As String
	
	Private _Phone As String
	
	Private _DOB As String
	
	Private _Address1 As String
	
	Private _City As String
	
	Private _State As String
	
	Private _Zip As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me._userID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userName", DbType:="NVarChar(50)")>  _
	Public Property userName() As String
		Get
			Return Me._userName
		End Get
		Set
			If (String.Equals(Me._userName, value) = false) Then
				Me._userName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="NVarChar(30)")>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me._FirstName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="NVarChar(30)")>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me._LastName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FullName", DbType:="NVarChar(101)")>  _
	Public Property FullName() As String
		Get
			Return Me._FullName
		End Get
		Set
			If (String.Equals(Me._FullName, value) = false) Then
				Me._FullName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_latitude", DbType:="Float")>  _
	Public Property latitude() As System.Nullable(Of Double)
		Get
			Return Me._latitude
		End Get
		Set
			If (Me._latitude.Equals(value) = false) Then
				Me._latitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_longitude", DbType:="Float")>  _
	Public Property longitude() As System.Nullable(Of Double)
		Get
			Return Me._longitude
		End Get
		Set
			If (Me._longitude.Equals(value) = false) Then
				Me._longitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="Int")>  _
	Public Property marketID() As System.Nullable(Of Integer)
		Get
			Return Me._marketID
		End Get
		Set
			If (Me._marketID.Equals(value) = false) Then
				Me._marketID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_positionID", DbType:="Int")>  _
	Public Property positionID() As System.Nullable(Of Integer)
		Get
			Return Me._positionID
		End Get
		Set
			If (Me._positionID.Equals(value) = false) Then
				Me._positionID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmailAddress", DbType:="NVarChar(50)")>  _
	Public Property EmailAddress() As String
		Get
			Return Me._EmailAddress
		End Get
		Set
			If (String.Equals(Me._EmailAddress, value) = false) Then
				Me._EmailAddress = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone", DbType:="VarChar(256)")>  _
	Public Property Phone() As String
		Get
			Return Me._Phone
		End Get
		Set
			If (String.Equals(Me._Phone, value) = false) Then
				Me._Phone = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DOB", DbType:="NVarChar(100)")>  _
	Public Property DOB() As String
		Get
			Return Me._DOB
		End Get
		Set
			If (String.Equals(Me._DOB, value) = false) Then
				Me._DOB = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address1", DbType:="NVarChar(50)")>  _
	Public Property Address1() As String
		Get
			Return Me._Address1
		End Get
		Set
			If (String.Equals(Me._Address1, value) = false) Then
				Me._Address1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", DbType:="NVarChar(50)")>  _
	Public Property City() As String
		Get
			Return Me._City
		End Get
		Set
			If (String.Equals(Me._City, value) = false) Then
				Me._City = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_State", DbType:="NVarChar(50)")>  _
	Public Property State() As String
		Get
			Return Me._State
		End Get
		Set
			If (String.Equals(Me._State, value) = false) Then
				Me._State = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Zip", DbType:="NVarChar(50)")>  _
	Public Property Zip() As String
		Get
			Return Me._Zip
		End Get
		Set
			If (String.Equals(Me._Zip, value) = false) Then
				Me._Zip = value
			End If
		End Set
	End Property
End Class

Partial Public Class getAvailableAmbassadorByUserIDResult
	
	Private _userID As String
	
	Private _userName As String
	
	Private _FirstName As String
	
	Private _LastName As String
	
	Private _FullName As String
	
	Private _latitude As System.Nullable(Of Double)
	
	Private _longitude As System.Nullable(Of Double)
	
	Private _marketID As System.Nullable(Of Integer)
	
	Private _positionID As System.Nullable(Of Integer)
	
	Private _miles As System.Nullable(Of Double)
	
	Private _headShot As System.Data.Linq.Binary
	
	Private _EmailAddress As String
	
	Private _Phone As String
	
	Private _DOB As String
	
	Private _Address1 As String
	
	Private _City As String
	
	Private _State As String
	
	Private _Zip As String
	
	Private _requestID As String
	
	Private _Requested As String
	
	Private _IsRequested As String
	
	Private _Positions As String
	
	Private _Markets As String
	
	Private _Training As String
	
	Private _YTDEventCount As String
	
	Private _YTDHours As String
	
	Private _YTDPay As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me._userID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userName", DbType:="NVarChar(50)")>  _
	Public Property userName() As String
		Get
			Return Me._userName
		End Get
		Set
			If (String.Equals(Me._userName, value) = false) Then
				Me._userName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="NVarChar(30)")>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me._FirstName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="NVarChar(30)")>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me._LastName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FullName", DbType:="NVarChar(101)")>  _
	Public Property FullName() As String
		Get
			Return Me._FullName
		End Get
		Set
			If (String.Equals(Me._FullName, value) = false) Then
				Me._FullName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_latitude", DbType:="Float")>  _
	Public Property latitude() As System.Nullable(Of Double)
		Get
			Return Me._latitude
		End Get
		Set
			If (Me._latitude.Equals(value) = false) Then
				Me._latitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_longitude", DbType:="Float")>  _
	Public Property longitude() As System.Nullable(Of Double)
		Get
			Return Me._longitude
		End Get
		Set
			If (Me._longitude.Equals(value) = false) Then
				Me._longitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="Int")>  _
	Public Property marketID() As System.Nullable(Of Integer)
		Get
			Return Me._marketID
		End Get
		Set
			If (Me._marketID.Equals(value) = false) Then
				Me._marketID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_positionID", DbType:="Int")>  _
	Public Property positionID() As System.Nullable(Of Integer)
		Get
			Return Me._positionID
		End Get
		Set
			If (Me._positionID.Equals(value) = false) Then
				Me._positionID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_miles", DbType:="Float")>  _
	Public Property miles() As System.Nullable(Of Double)
		Get
			Return Me._miles
		End Get
		Set
			If (Me._miles.Equals(value) = false) Then
				Me._miles = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_headShot", DbType:="VarBinary(MAX)")>  _
	Public Property headShot() As System.Data.Linq.Binary
		Get
			Return Me._headShot
		End Get
		Set
			If (Object.Equals(Me._headShot, value) = false) Then
				Me._headShot = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmailAddress", DbType:="NVarChar(50)")>  _
	Public Property EmailAddress() As String
		Get
			Return Me._EmailAddress
		End Get
		Set
			If (String.Equals(Me._EmailAddress, value) = false) Then
				Me._EmailAddress = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone", DbType:="VarChar(256)")>  _
	Public Property Phone() As String
		Get
			Return Me._Phone
		End Get
		Set
			If (String.Equals(Me._Phone, value) = false) Then
				Me._Phone = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DOB", DbType:="NVarChar(100)")>  _
	Public Property DOB() As String
		Get
			Return Me._DOB
		End Get
		Set
			If (String.Equals(Me._DOB, value) = false) Then
				Me._DOB = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address1", DbType:="NVarChar(50)")>  _
	Public Property Address1() As String
		Get
			Return Me._Address1
		End Get
		Set
			If (String.Equals(Me._Address1, value) = false) Then
				Me._Address1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", DbType:="NVarChar(50)")>  _
	Public Property City() As String
		Get
			Return Me._City
		End Get
		Set
			If (String.Equals(Me._City, value) = false) Then
				Me._City = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_State", DbType:="NVarChar(50)")>  _
	Public Property State() As String
		Get
			Return Me._State
		End Get
		Set
			If (String.Equals(Me._State, value) = false) Then
				Me._State = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Zip", DbType:="NVarChar(50)")>  _
	Public Property Zip() As String
		Get
			Return Me._Zip
		End Get
		Set
			If (String.Equals(Me._Zip, value) = false) Then
				Me._Zip = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_requestID", DbType:="VarChar(MAX)")>  _
	Public Property requestID() As String
		Get
			Return Me._requestID
		End Get
		Set
			If (String.Equals(Me._requestID, value) = false) Then
				Me._requestID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Requested", DbType:="VarChar(60) NOT NULL", CanBeNull:=false)>  _
	Public Property Requested() As String
		Get
			Return Me._Requested
		End Get
		Set
			If (String.Equals(Me._Requested, value) = false) Then
				Me._Requested = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsRequested", DbType:="VarChar(5) NOT NULL", CanBeNull:=false)>  _
	Public Property IsRequested() As String
		Get
			Return Me._IsRequested
		End Get
		Set
			If (String.Equals(Me._IsRequested, value) = false) Then
				Me._IsRequested = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Positions", DbType:="VarChar(500)")>  _
	Public Property Positions() As String
		Get
			Return Me._Positions
		End Get
		Set
			If (String.Equals(Me._Positions, value) = false) Then
				Me._Positions = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Markets", DbType:="VarChar(1000)")>  _
	Public Property Markets() As String
		Get
			Return Me._Markets
		End Get
		Set
			If (String.Equals(Me._Markets, value) = false) Then
				Me._Markets = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Training", DbType:="VarChar(1) NOT NULL", CanBeNull:=false)>  _
	Public Property Training() As String
		Get
			Return Me._Training
		End Get
		Set
			If (String.Equals(Me._Training, value) = false) Then
				Me._Training = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YTDEventCount", DbType:="NVarChar(50)")>  _
	Public Property YTDEventCount() As String
		Get
			Return Me._YTDEventCount
		End Get
		Set
			If (String.Equals(Me._YTDEventCount, value) = false) Then
				Me._YTDEventCount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YTDHours", DbType:="NVarChar(50)")>  _
	Public Property YTDHours() As String
		Get
			Return Me._YTDHours
		End Get
		Set
			If (String.Equals(Me._YTDHours, value) = false) Then
				Me._YTDHours = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YTDPay", DbType:="NVarChar(50)")>  _
	Public Property YTDPay() As String
		Get
			Return Me._YTDPay
		End Get
		Set
			If (String.Equals(Me._YTDPay, value) = false) Then
				Me._YTDPay = value
			End If
		End Set
	End Property
End Class

Partial Public Class getAvailableAmbassadorEmailStringResult
	
	Private _BCC As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BCC", DbType:="VarChar(MAX)")>  _
	Public Property BCC() As String
		Get
			Return Me._BCC
		End Get
		Set
			If (String.Equals(Me._BCC, value) = false) Then
				Me._BCC = value
			End If
		End Set
	End Property
End Class

Partial Public Class getAvailableAmbassadorNameListResult
	
	Private _userID As String
	
	Private _userName As String
	
	Private _FirstName As String
	
	Private _LastName As String
	
	Private _FullName As String
	
	Private _EmailAddress As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me._userID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userName", DbType:="NVarChar(50)")>  _
	Public Property userName() As String
		Get
			Return Me._userName
		End Get
		Set
			If (String.Equals(Me._userName, value) = false) Then
				Me._userName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="NVarChar(50)")>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me._FirstName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="NVarChar(50)")>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me._LastName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FullName", DbType:="NVarChar(101)")>  _
	Public Property FullName() As String
		Get
			Return Me._FullName
		End Get
		Set
			If (String.Equals(Me._FullName, value) = false) Then
				Me._FullName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmailAddress", DbType:="NVarChar(50)")>  _
	Public Property EmailAddress() As String
		Get
			Return Me._EmailAddress
		End Get
		Set
			If (String.Equals(Me._EmailAddress, value) = false) Then
				Me._EmailAddress = value
			End If
		End Set
	End Property
End Class

Partial Public Class getAvailableAmbassadorNoThumbnailResult
	
	Private _userID As String
	
	Private _userName As String
	
	Private _FirstName As String
	
	Private _LastName As String
	
	Private _FullName As String
	
	Private _latitude As System.Nullable(Of Double)
	
	Private _longitude As System.Nullable(Of Double)
	
	Private _marketID As System.Nullable(Of Integer)
	
	Private _positionID As System.Nullable(Of Integer)
	
	Private _miles As System.Nullable(Of Double)
	
	Private _EmailAddress As String
	
	Private _Phone As String
	
	Private _DOB As String
	
	Private _Address1 As String
	
	Private _City As String
	
	Private _State As String
	
	Private _Zip As String
	
	Private _requestID As String
	
	Private _Requested As String
	
	Private _Positions As String
	
	Private _Markets As String
	
	Private _Training As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me._userID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userName", DbType:="NVarChar(50)")>  _
	Public Property userName() As String
		Get
			Return Me._userName
		End Get
		Set
			If (String.Equals(Me._userName, value) = false) Then
				Me._userName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="NVarChar(50)")>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me._FirstName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="NVarChar(50)")>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me._LastName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FullName", DbType:="NVarChar(101)")>  _
	Public Property FullName() As String
		Get
			Return Me._FullName
		End Get
		Set
			If (String.Equals(Me._FullName, value) = false) Then
				Me._FullName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_latitude", DbType:="Float")>  _
	Public Property latitude() As System.Nullable(Of Double)
		Get
			Return Me._latitude
		End Get
		Set
			If (Me._latitude.Equals(value) = false) Then
				Me._latitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_longitude", DbType:="Float")>  _
	Public Property longitude() As System.Nullable(Of Double)
		Get
			Return Me._longitude
		End Get
		Set
			If (Me._longitude.Equals(value) = false) Then
				Me._longitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="Int")>  _
	Public Property marketID() As System.Nullable(Of Integer)
		Get
			Return Me._marketID
		End Get
		Set
			If (Me._marketID.Equals(value) = false) Then
				Me._marketID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_positionID", DbType:="Int")>  _
	Public Property positionID() As System.Nullable(Of Integer)
		Get
			Return Me._positionID
		End Get
		Set
			If (Me._positionID.Equals(value) = false) Then
				Me._positionID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_miles", DbType:="Float")>  _
	Public Property miles() As System.Nullable(Of Double)
		Get
			Return Me._miles
		End Get
		Set
			If (Me._miles.Equals(value) = false) Then
				Me._miles = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmailAddress", DbType:="NVarChar(50)")>  _
	Public Property EmailAddress() As String
		Get
			Return Me._EmailAddress
		End Get
		Set
			If (String.Equals(Me._EmailAddress, value) = false) Then
				Me._EmailAddress = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone", DbType:="VarChar(256)")>  _
	Public Property Phone() As String
		Get
			Return Me._Phone
		End Get
		Set
			If (String.Equals(Me._Phone, value) = false) Then
				Me._Phone = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DOB", DbType:="NVarChar(100)")>  _
	Public Property DOB() As String
		Get
			Return Me._DOB
		End Get
		Set
			If (String.Equals(Me._DOB, value) = false) Then
				Me._DOB = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address1", DbType:="NVarChar(50)")>  _
	Public Property Address1() As String
		Get
			Return Me._Address1
		End Get
		Set
			If (String.Equals(Me._Address1, value) = false) Then
				Me._Address1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", DbType:="NVarChar(50)")>  _
	Public Property City() As String
		Get
			Return Me._City
		End Get
		Set
			If (String.Equals(Me._City, value) = false) Then
				Me._City = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_State", DbType:="NVarChar(50)")>  _
	Public Property State() As String
		Get
			Return Me._State
		End Get
		Set
			If (String.Equals(Me._State, value) = false) Then
				Me._State = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Zip", DbType:="NVarChar(50)")>  _
	Public Property Zip() As String
		Get
			Return Me._Zip
		End Get
		Set
			If (String.Equals(Me._Zip, value) = false) Then
				Me._Zip = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_requestID", DbType:="VarChar(MAX)")>  _
	Public Property requestID() As String
		Get
			Return Me._requestID
		End Get
		Set
			If (String.Equals(Me._requestID, value) = false) Then
				Me._requestID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Requested", DbType:="VarChar(60) NOT NULL", CanBeNull:=false)>  _
	Public Property Requested() As String
		Get
			Return Me._Requested
		End Get
		Set
			If (String.Equals(Me._Requested, value) = false) Then
				Me._Requested = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Positions", DbType:="VarChar(500)")>  _
	Public Property Positions() As String
		Get
			Return Me._Positions
		End Get
		Set
			If (String.Equals(Me._Positions, value) = false) Then
				Me._Positions = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Markets", DbType:="VarChar(1000)")>  _
	Public Property Markets() As String
		Get
			Return Me._Markets
		End Get
		Set
			If (String.Equals(Me._Markets, value) = false) Then
				Me._Markets = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Training", DbType:="VarChar(1) NOT NULL", CanBeNull:=false)>  _
	Public Property Training() As String
		Get
			Return Me._Training
		End Get
		Set
			If (String.Equals(Me._Training, value) = false) Then
				Me._Training = value
			End If
		End Set
	End Property
End Class

Partial Public Class getAvailableBrandsBySupplierForEventResult
	
	Private _DataKeyID As Integer
	
	Private _InsertID As Integer
	
	Private _supplierBrandID As Integer
	
	Private _brandID As Integer
	
	Private _supplierID As Integer
	
	Private _brandName As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataKeyID", DbType:="Int NOT NULL")>  _
	Public Property DataKeyID() As Integer
		Get
			Return Me._DataKeyID
		End Get
		Set
			If ((Me._DataKeyID = value)  _
						= false) Then
				Me._DataKeyID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InsertID", DbType:="Int NOT NULL")>  _
	Public Property InsertID() As Integer
		Get
			Return Me._InsertID
		End Get
		Set
			If ((Me._InsertID = value)  _
						= false) Then
				Me._InsertID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierBrandID", DbType:="Int NOT NULL")>  _
	Public Property supplierBrandID() As Integer
		Get
			Return Me._supplierBrandID
		End Get
		Set
			If ((Me._supplierBrandID = value)  _
						= false) Then
				Me._supplierBrandID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandID", DbType:="Int NOT NULL")>  _
	Public Property brandID() As Integer
		Get
			Return Me._brandID
		End Get
		Set
			If ((Me._brandID = value)  _
						= false) Then
				Me._brandID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int NOT NULL")>  _
	Public Property supplierID() As Integer
		Get
			Return Me._supplierID
		End Get
		Set
			If ((Me._supplierID = value)  _
						= false) Then
				Me._supplierID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandName", DbType:="NVarChar(256)")>  _
	Public Property brandName() As String
		Get
			Return Me._brandName
		End Get
		Set
			If (String.Equals(Me._brandName, value) = false) Then
				Me._brandName = value
			End If
		End Set
	End Property
End Class

Partial Public Class getAvailableBrandsBySupplierForRequestedEventResult
	
	Private _DataKeyID As Integer
	
	Private _InsertID As Integer
	
	Private _supplierBrandID As Integer
	
	Private _brandID As Integer
	
	Private _supplierID As Integer
	
	Private _brandName As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataKeyID", DbType:="Int NOT NULL")>  _
	Public Property DataKeyID() As Integer
		Get
			Return Me._DataKeyID
		End Get
		Set
			If ((Me._DataKeyID = value)  _
						= false) Then
				Me._DataKeyID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InsertID", DbType:="Int NOT NULL")>  _
	Public Property InsertID() As Integer
		Get
			Return Me._InsertID
		End Get
		Set
			If ((Me._InsertID = value)  _
						= false) Then
				Me._InsertID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierBrandID", DbType:="Int NOT NULL")>  _
	Public Property supplierBrandID() As Integer
		Get
			Return Me._supplierBrandID
		End Get
		Set
			If ((Me._supplierBrandID = value)  _
						= false) Then
				Me._supplierBrandID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandID", DbType:="Int NOT NULL")>  _
	Public Property brandID() As Integer
		Get
			Return Me._brandID
		End Get
		Set
			If ((Me._brandID = value)  _
						= false) Then
				Me._brandID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int NOT NULL")>  _
	Public Property supplierID() As Integer
		Get
			Return Me._supplierID
		End Get
		Set
			If ((Me._supplierID = value)  _
						= false) Then
				Me._supplierID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandName", DbType:="NVarChar(256)")>  _
	Public Property brandName() As String
		Get
			Return Me._brandName
		End Get
		Set
			If (String.Equals(Me._brandName, value) = false) Then
				Me._brandName = value
			End If
		End Set
	End Property
End Class

Partial Public Class getAvailableClientForStaffResult
	
	Private _DataKeyID As Integer
	
	Private _InsertID As Integer
	
	Private _clientName As String
	
	Private _clientID As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataKeyID", DbType:="Int NOT NULL")>  _
	Public Property DataKeyID() As Integer
		Get
			Return Me._DataKeyID
		End Get
		Set
			If ((Me._DataKeyID = value)  _
						= false) Then
				Me._DataKeyID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InsertID", DbType:="Int NOT NULL")>  _
	Public Property InsertID() As Integer
		Get
			Return Me._InsertID
		End Get
		Set
			If ((Me._InsertID = value)  _
						= false) Then
				Me._InsertID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property clientName() As String
		Get
			Return Me._clientName
		End Get
		Set
			If (String.Equals(Me._clientName, value) = false) Then
				Me._clientName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", DbType:="Int NOT NULL")>  _
	Public Property clientID() As Integer
		Get
			Return Me._clientID
		End Get
		Set
			If ((Me._clientID = value)  _
						= false) Then
				Me._clientID = value
			End If
		End Set
	End Property
End Class

Partial Public Class getAvailableClientsForAmbassadorResult
	
	Private _DataKeyID As Integer
	
	Private _InsertID As Integer
	
	Private _clientName As String
	
	Private _clientID As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataKeyID", DbType:="Int NOT NULL")>  _
	Public Property DataKeyID() As Integer
		Get
			Return Me._DataKeyID
		End Get
		Set
			If ((Me._DataKeyID = value)  _
						= false) Then
				Me._DataKeyID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InsertID", DbType:="Int NOT NULL")>  _
	Public Property InsertID() As Integer
		Get
			Return Me._InsertID
		End Get
		Set
			If ((Me._InsertID = value)  _
						= false) Then
				Me._InsertID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property clientName() As String
		Get
			Return Me._clientName
		End Get
		Set
			If (String.Equals(Me._clientName, value) = false) Then
				Me._clientName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", DbType:="Int NOT NULL")>  _
	Public Property clientID() As Integer
		Get
			Return Me._clientID
		End Get
		Set
			If ((Me._clientID = value)  _
						= false) Then
				Me._clientID = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetAvailableEventsbyAmbassadorResult
	
	Private _eventID As Integer
	
	Private _eventTitle As String
	
	Private _accountID As System.Nullable(Of Integer)
	
	Private _AccountName As String
	
	Private _marketID As System.Nullable(Of Integer)
	
	Private _eventDate As System.Nullable(Of Date)
	
	Private _positionTitle As String
	
	Private _statusID As System.Nullable(Of Integer)
	
	Private _hours As System.Nullable(Of Integer)
	
	Private _startTime As System.Nullable(Of Date)
	
	Private _endTime As System.Nullable(Of Date)
	
	Private _supplierName As String
	
	Private _miles As System.Nullable(Of Double)
	
	Private _ButtonText As String
	
	Private _ButtonCSS As String
	
	Private _EnableButton As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTitle", DbType:="VarChar(1000)")>  _
	Public Property eventTitle() As String
		Get
			Return Me._eventTitle
		End Get
		Set
			If (String.Equals(Me._eventTitle, value) = false) Then
				Me._eventTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="Int")>  _
	Public Property accountID() As System.Nullable(Of Integer)
		Get
			Return Me._accountID
		End Get
		Set
			If (Me._accountID.Equals(value) = false) Then
				Me._accountID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountName", DbType:="VarChar(MAX)")>  _
	Public Property AccountName() As String
		Get
			Return Me._AccountName
		End Get
		Set
			If (String.Equals(Me._AccountName, value) = false) Then
				Me._AccountName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="Int")>  _
	Public Property marketID() As System.Nullable(Of Integer)
		Get
			Return Me._marketID
		End Get
		Set
			If (Me._marketID.Equals(value) = false) Then
				Me._marketID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventDate", DbType:="SmallDateTime")>  _
	Public Property eventDate() As System.Nullable(Of Date)
		Get
			Return Me._eventDate
		End Get
		Set
			If (Me._eventDate.Equals(value) = false) Then
				Me._eventDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_positionTitle", DbType:="VarChar(MAX)")>  _
	Public Property positionTitle() As String
		Get
			Return Me._positionTitle
		End Get
		Set
			If (String.Equals(Me._positionTitle, value) = false) Then
				Me._positionTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_statusID", DbType:="Int")>  _
	Public Property statusID() As System.Nullable(Of Integer)
		Get
			Return Me._statusID
		End Get
		Set
			If (Me._statusID.Equals(value) = false) Then
				Me._statusID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hours", DbType:="Int")>  _
	Public Property hours() As System.Nullable(Of Integer)
		Get
			Return Me._hours
		End Get
		Set
			If (Me._hours.Equals(value) = false) Then
				Me._hours = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_startTime", DbType:="SmallDateTime")>  _
	Public Property startTime() As System.Nullable(Of Date)
		Get
			Return Me._startTime
		End Get
		Set
			If (Me._startTime.Equals(value) = false) Then
				Me._startTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_endTime", DbType:="SmallDateTime")>  _
	Public Property endTime() As System.Nullable(Of Date)
		Get
			Return Me._endTime
		End Get
		Set
			If (Me._endTime.Equals(value) = false) Then
				Me._endTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierName", DbType:="VarChar(MAX)")>  _
	Public Property supplierName() As String
		Get
			Return Me._supplierName
		End Get
		Set
			If (String.Equals(Me._supplierName, value) = false) Then
				Me._supplierName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_miles", DbType:="Float")>  _
	Public Property miles() As System.Nullable(Of Double)
		Get
			Return Me._miles
		End Get
		Set
			If (Me._miles.Equals(value) = false) Then
				Me._miles = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ButtonText", DbType:="VarChar(12) NOT NULL", CanBeNull:=false)>  _
	Public Property ButtonText() As String
		Get
			Return Me._ButtonText
		End Get
		Set
			If (String.Equals(Me._ButtonText, value) = false) Then
				Me._ButtonText = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ButtonCSS", DbType:="VarChar(22) NOT NULL", CanBeNull:=false)>  _
	Public Property ButtonCSS() As String
		Get
			Return Me._ButtonCSS
		End Get
		Set
			If (String.Equals(Me._ButtonCSS, value) = false) Then
				Me._ButtonCSS = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EnableButton", DbType:="VarChar(5) NOT NULL", CanBeNull:=false)>  _
	Public Property EnableButton() As String
		Get
			Return Me._EnableButton
		End Get
		Set
			If (String.Equals(Me._EnableButton, value) = false) Then
				Me._EnableButton = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetAvailableEventsbyAmbassadorIDResult
	
	Private _eventID As Integer
	
	Private _eventTitle As String
	
	Private _accountID As System.Nullable(Of Integer)
	
	Private _AccountName As String
	
	Private _marketID As System.Nullable(Of Integer)
	
	Private _eventDate As System.Nullable(Of Date)
	
	Private _positionTitle As String
	
	Private _statusID As System.Nullable(Of Integer)
	
	Private _hours As System.Nullable(Of Integer)
	
	Private _startTime As System.Nullable(Of Date)
	
	Private _endTime As System.Nullable(Of Date)
	
	Private _supplierName As String
	
	Private _miles As System.Nullable(Of Double)
	
	Private _accountName1 As String
	
	Private _streetAddress1 As String
	
	Private _city As String
	
	Private _state As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTitle", DbType:="VarChar(1000)")>  _
	Public Property eventTitle() As String
		Get
			Return Me._eventTitle
		End Get
		Set
			If (String.Equals(Me._eventTitle, value) = false) Then
				Me._eventTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="Int")>  _
	Public Property accountID() As System.Nullable(Of Integer)
		Get
			Return Me._accountID
		End Get
		Set
			If (Me._accountID.Equals(value) = false) Then
				Me._accountID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountName", DbType:="VarChar(MAX)")>  _
	Public Property AccountName() As String
		Get
			Return Me._AccountName
		End Get
		Set
			If (String.Equals(Me._AccountName, value) = false) Then
				Me._AccountName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="Int")>  _
	Public Property marketID() As System.Nullable(Of Integer)
		Get
			Return Me._marketID
		End Get
		Set
			If (Me._marketID.Equals(value) = false) Then
				Me._marketID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventDate", DbType:="SmallDateTime")>  _
	Public Property eventDate() As System.Nullable(Of Date)
		Get
			Return Me._eventDate
		End Get
		Set
			If (Me._eventDate.Equals(value) = false) Then
				Me._eventDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_positionTitle", DbType:="VarChar(MAX)")>  _
	Public Property positionTitle() As String
		Get
			Return Me._positionTitle
		End Get
		Set
			If (String.Equals(Me._positionTitle, value) = false) Then
				Me._positionTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_statusID", DbType:="Int")>  _
	Public Property statusID() As System.Nullable(Of Integer)
		Get
			Return Me._statusID
		End Get
		Set
			If (Me._statusID.Equals(value) = false) Then
				Me._statusID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hours", DbType:="Int")>  _
	Public Property hours() As System.Nullable(Of Integer)
		Get
			Return Me._hours
		End Get
		Set
			If (Me._hours.Equals(value) = false) Then
				Me._hours = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_startTime", DbType:="SmallDateTime")>  _
	Public Property startTime() As System.Nullable(Of Date)
		Get
			Return Me._startTime
		End Get
		Set
			If (Me._startTime.Equals(value) = false) Then
				Me._startTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_endTime", DbType:="SmallDateTime")>  _
	Public Property endTime() As System.Nullable(Of Date)
		Get
			Return Me._endTime
		End Get
		Set
			If (Me._endTime.Equals(value) = false) Then
				Me._endTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierName", DbType:="VarChar(MAX)")>  _
	Public Property supplierName() As String
		Get
			Return Me._supplierName
		End Get
		Set
			If (String.Equals(Me._supplierName, value) = false) Then
				Me._supplierName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_miles", DbType:="Float")>  _
	Public Property miles() As System.Nullable(Of Double)
		Get
			Return Me._miles
		End Get
		Set
			If (Me._miles.Equals(value) = false) Then
				Me._miles = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountName1", DbType:="VarChar(256)")>  _
	Public Property accountName1() As String
		Get
			Return Me._accountName1
		End Get
		Set
			If (String.Equals(Me._accountName1, value) = false) Then
				Me._accountName1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_streetAddress1", DbType:="VarChar(256)")>  _
	Public Property streetAddress1() As String
		Get
			Return Me._streetAddress1
		End Get
		Set
			If (String.Equals(Me._streetAddress1, value) = false) Then
				Me._streetAddress1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_city", DbType:="VarChar(50)")>  _
	Public Property city() As String
		Get
			Return Me._city
		End Get
		Set
			If (String.Equals(Me._city, value) = false) Then
				Me._city = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_state", DbType:="NVarChar(20)")>  _
	Public Property state() As String
		Get
			Return Me._state
		End Get
		Set
			If (String.Equals(Me._state, value) = false) Then
				Me._state = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetAvailableEventsMapbyAmbassadorResult
	
	Private _eventID As Integer
	
	Private _eventTitle As String
	
	Private _accountID As System.Nullable(Of Integer)
	
	Private _AccountName As String
	
	Private _marketID As System.Nullable(Of Integer)
	
	Private _eventDate As System.Nullable(Of Date)
	
	Private _positionTitle As String
	
	Private _statusID As System.Nullable(Of Integer)
	
	Private _hours As System.Nullable(Of Integer)
	
	Private _startTime As System.Nullable(Of Date)
	
	Private _endTime As System.Nullable(Of Date)
	
	Private _supplierName As String
	
	Private _miles As System.Nullable(Of Double)
	
	Private _UserID As String
	
	Private _accountName1 As String
	
	Private _address As String
	
	Private _city As String
	
	Private _state As String
	
	Private _latitude As System.Nullable(Of Double)
	
	Private _longitude As System.Nullable(Of Double)
	
	Private _ButtonText As String
	
	Private _ButtonCSS As String
	
	Private _EnableButton As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTitle", DbType:="VarChar(1000)")>  _
	Public Property eventTitle() As String
		Get
			Return Me._eventTitle
		End Get
		Set
			If (String.Equals(Me._eventTitle, value) = false) Then
				Me._eventTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="Int")>  _
	Public Property accountID() As System.Nullable(Of Integer)
		Get
			Return Me._accountID
		End Get
		Set
			If (Me._accountID.Equals(value) = false) Then
				Me._accountID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountName", DbType:="VarChar(MAX)")>  _
	Public Property AccountName() As String
		Get
			Return Me._AccountName
		End Get
		Set
			If (String.Equals(Me._AccountName, value) = false) Then
				Me._AccountName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="Int")>  _
	Public Property marketID() As System.Nullable(Of Integer)
		Get
			Return Me._marketID
		End Get
		Set
			If (Me._marketID.Equals(value) = false) Then
				Me._marketID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventDate", DbType:="SmallDateTime")>  _
	Public Property eventDate() As System.Nullable(Of Date)
		Get
			Return Me._eventDate
		End Get
		Set
			If (Me._eventDate.Equals(value) = false) Then
				Me._eventDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_positionTitle", DbType:="VarChar(MAX)")>  _
	Public Property positionTitle() As String
		Get
			Return Me._positionTitle
		End Get
		Set
			If (String.Equals(Me._positionTitle, value) = false) Then
				Me._positionTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_statusID", DbType:="Int")>  _
	Public Property statusID() As System.Nullable(Of Integer)
		Get
			Return Me._statusID
		End Get
		Set
			If (Me._statusID.Equals(value) = false) Then
				Me._statusID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hours", DbType:="Int")>  _
	Public Property hours() As System.Nullable(Of Integer)
		Get
			Return Me._hours
		End Get
		Set
			If (Me._hours.Equals(value) = false) Then
				Me._hours = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_startTime", DbType:="SmallDateTime")>  _
	Public Property startTime() As System.Nullable(Of Date)
		Get
			Return Me._startTime
		End Get
		Set
			If (Me._startTime.Equals(value) = false) Then
				Me._startTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_endTime", DbType:="SmallDateTime")>  _
	Public Property endTime() As System.Nullable(Of Date)
		Get
			Return Me._endTime
		End Get
		Set
			If (Me._endTime.Equals(value) = false) Then
				Me._endTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierName", DbType:="VarChar(MAX)")>  _
	Public Property supplierName() As String
		Get
			Return Me._supplierName
		End Get
		Set
			If (String.Equals(Me._supplierName, value) = false) Then
				Me._supplierName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_miles", DbType:="Float")>  _
	Public Property miles() As System.Nullable(Of Double)
		Get
			Return Me._miles
		End Get
		Set
			If (Me._miles.Equals(value) = false) Then
				Me._miles = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="NVarChar(50)")>  _
	Public Property UserID() As String
		Get
			Return Me._UserID
		End Get
		Set
			If (String.Equals(Me._UserID, value) = false) Then
				Me._UserID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountName1", DbType:="VarChar(256)")>  _
	Public Property accountName1() As String
		Get
			Return Me._accountName1
		End Get
		Set
			If (String.Equals(Me._accountName1, value) = false) Then
				Me._accountName1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_address", DbType:="VarChar(256)")>  _
	Public Property address() As String
		Get
			Return Me._address
		End Get
		Set
			If (String.Equals(Me._address, value) = false) Then
				Me._address = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_city", DbType:="VarChar(50)")>  _
	Public Property city() As String
		Get
			Return Me._city
		End Get
		Set
			If (String.Equals(Me._city, value) = false) Then
				Me._city = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_state", DbType:="NVarChar(20)")>  _
	Public Property state() As String
		Get
			Return Me._state
		End Get
		Set
			If (String.Equals(Me._state, value) = false) Then
				Me._state = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_latitude", DbType:="Float")>  _
	Public Property latitude() As System.Nullable(Of Double)
		Get
			Return Me._latitude
		End Get
		Set
			If (Me._latitude.Equals(value) = false) Then
				Me._latitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_longitude", DbType:="Float")>  _
	Public Property longitude() As System.Nullable(Of Double)
		Get
			Return Me._longitude
		End Get
		Set
			If (Me._longitude.Equals(value) = false) Then
				Me._longitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ButtonText", DbType:="VarChar(12) NOT NULL", CanBeNull:=false)>  _
	Public Property ButtonText() As String
		Get
			Return Me._ButtonText
		End Get
		Set
			If (String.Equals(Me._ButtonText, value) = false) Then
				Me._ButtonText = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ButtonCSS", DbType:="VarChar(22) NOT NULL", CanBeNull:=false)>  _
	Public Property ButtonCSS() As String
		Get
			Return Me._ButtonCSS
		End Get
		Set
			If (String.Equals(Me._ButtonCSS, value) = false) Then
				Me._ButtonCSS = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EnableButton", DbType:="VarChar(5) NOT NULL", CanBeNull:=false)>  _
	Public Property EnableButton() As String
		Get
			Return Me._EnableButton
		End Get
		Set
			If (String.Equals(Me._EnableButton, value) = false) Then
				Me._EnableButton = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetAvailableEventsMapbyAmbassadorSelectedEventResult
	
	Private _eventID As Integer
	
	Private _eventTitle As String
	
	Private _accountID As System.Nullable(Of Integer)
	
	Private _AccountName As String
	
	Private _marketID As System.Nullable(Of Integer)
	
	Private _eventDate As System.Nullable(Of Date)
	
	Private _positionTitle As String
	
	Private _statusID As System.Nullable(Of Integer)
	
	Private _StatusName As String
	
	Private _hours As System.Nullable(Of Integer)
	
	Private _startTime As System.Nullable(Of Date)
	
	Private _endTime As System.Nullable(Of Date)
	
	Private _supplierName As String
	
	Private _miles As System.Nullable(Of Double)
	
	Private _UserID As String
	
	Private _accountName1 As String
	
	Private _address As String
	
	Private _city As String
	
	Private _state As String
	
	Private _latitude As System.Nullable(Of Double)
	
	Private _longitude As System.Nullable(Of Double)
	
	Private _ButtonText As String
	
	Private _ButtonCSS As String
	
	Private _EnableButton As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTitle", DbType:="VarChar(1000)")>  _
	Public Property eventTitle() As String
		Get
			Return Me._eventTitle
		End Get
		Set
			If (String.Equals(Me._eventTitle, value) = false) Then
				Me._eventTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="Int")>  _
	Public Property accountID() As System.Nullable(Of Integer)
		Get
			Return Me._accountID
		End Get
		Set
			If (Me._accountID.Equals(value) = false) Then
				Me._accountID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountName", DbType:="VarChar(MAX)")>  _
	Public Property AccountName() As String
		Get
			Return Me._AccountName
		End Get
		Set
			If (String.Equals(Me._AccountName, value) = false) Then
				Me._AccountName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="Int")>  _
	Public Property marketID() As System.Nullable(Of Integer)
		Get
			Return Me._marketID
		End Get
		Set
			If (Me._marketID.Equals(value) = false) Then
				Me._marketID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventDate", DbType:="SmallDateTime")>  _
	Public Property eventDate() As System.Nullable(Of Date)
		Get
			Return Me._eventDate
		End Get
		Set
			If (Me._eventDate.Equals(value) = false) Then
				Me._eventDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_positionTitle", DbType:="VarChar(MAX)")>  _
	Public Property positionTitle() As String
		Get
			Return Me._positionTitle
		End Get
		Set
			If (String.Equals(Me._positionTitle, value) = false) Then
				Me._positionTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_statusID", DbType:="Int")>  _
	Public Property statusID() As System.Nullable(Of Integer)
		Get
			Return Me._statusID
		End Get
		Set
			If (Me._statusID.Equals(value) = false) Then
				Me._statusID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StatusName", DbType:="VarChar(9) NOT NULL", CanBeNull:=false)>  _
	Public Property StatusName() As String
		Get
			Return Me._StatusName
		End Get
		Set
			If (String.Equals(Me._StatusName, value) = false) Then
				Me._StatusName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hours", DbType:="Int")>  _
	Public Property hours() As System.Nullable(Of Integer)
		Get
			Return Me._hours
		End Get
		Set
			If (Me._hours.Equals(value) = false) Then
				Me._hours = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_startTime", DbType:="SmallDateTime")>  _
	Public Property startTime() As System.Nullable(Of Date)
		Get
			Return Me._startTime
		End Get
		Set
			If (Me._startTime.Equals(value) = false) Then
				Me._startTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_endTime", DbType:="SmallDateTime")>  _
	Public Property endTime() As System.Nullable(Of Date)
		Get
			Return Me._endTime
		End Get
		Set
			If (Me._endTime.Equals(value) = false) Then
				Me._endTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierName", DbType:="VarChar(MAX)")>  _
	Public Property supplierName() As String
		Get
			Return Me._supplierName
		End Get
		Set
			If (String.Equals(Me._supplierName, value) = false) Then
				Me._supplierName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_miles", DbType:="Float")>  _
	Public Property miles() As System.Nullable(Of Double)
		Get
			Return Me._miles
		End Get
		Set
			If (Me._miles.Equals(value) = false) Then
				Me._miles = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="NVarChar(50)")>  _
	Public Property UserID() As String
		Get
			Return Me._UserID
		End Get
		Set
			If (String.Equals(Me._UserID, value) = false) Then
				Me._UserID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountName1", DbType:="VarChar(256)")>  _
	Public Property accountName1() As String
		Get
			Return Me._accountName1
		End Get
		Set
			If (String.Equals(Me._accountName1, value) = false) Then
				Me._accountName1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_address", DbType:="VarChar(256)")>  _
	Public Property address() As String
		Get
			Return Me._address
		End Get
		Set
			If (String.Equals(Me._address, value) = false) Then
				Me._address = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_city", DbType:="VarChar(50)")>  _
	Public Property city() As String
		Get
			Return Me._city
		End Get
		Set
			If (String.Equals(Me._city, value) = false) Then
				Me._city = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_state", DbType:="NVarChar(20)")>  _
	Public Property state() As String
		Get
			Return Me._state
		End Get
		Set
			If (String.Equals(Me._state, value) = false) Then
				Me._state = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_latitude", DbType:="Float")>  _
	Public Property latitude() As System.Nullable(Of Double)
		Get
			Return Me._latitude
		End Get
		Set
			If (Me._latitude.Equals(value) = false) Then
				Me._latitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_longitude", DbType:="Float")>  _
	Public Property longitude() As System.Nullable(Of Double)
		Get
			Return Me._longitude
		End Get
		Set
			If (Me._longitude.Equals(value) = false) Then
				Me._longitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ButtonText", DbType:="VarChar(12) NOT NULL", CanBeNull:=false)>  _
	Public Property ButtonText() As String
		Get
			Return Me._ButtonText
		End Get
		Set
			If (String.Equals(Me._ButtonText, value) = false) Then
				Me._ButtonText = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ButtonCSS", DbType:="VarChar(22) NOT NULL", CanBeNull:=false)>  _
	Public Property ButtonCSS() As String
		Get
			Return Me._ButtonCSS
		End Get
		Set
			If (String.Equals(Me._ButtonCSS, value) = false) Then
				Me._ButtonCSS = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EnableButton", DbType:="VarChar(5) NOT NULL", CanBeNull:=false)>  _
	Public Property EnableButton() As String
		Get
			Return Me._EnableButton
		End Get
		Set
			If (String.Equals(Me._EnableButton, value) = false) Then
				Me._EnableButton = value
			End If
		End Set
	End Property
End Class

Partial Public Class getAvailableMarketForStaffResult
	
	Private _DataKeyID As Integer
	
	Private _InsertID As Integer
	
	Private _marketName As String
	
	Private _marketID As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataKeyID", DbType:="Int NOT NULL")>  _
	Public Property DataKeyID() As Integer
		Get
			Return Me._DataKeyID
		End Get
		Set
			If ((Me._DataKeyID = value)  _
						= false) Then
				Me._DataKeyID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InsertID", DbType:="Int NOT NULL")>  _
	Public Property InsertID() As Integer
		Get
			Return Me._InsertID
		End Get
		Set
			If ((Me._InsertID = value)  _
						= false) Then
				Me._InsertID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketName", DbType:="VarChar(50)")>  _
	Public Property marketName() As String
		Get
			Return Me._marketName
		End Get
		Set
			If (String.Equals(Me._marketName, value) = false) Then
				Me._marketName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="Int NOT NULL")>  _
	Public Property marketID() As Integer
		Get
			Return Me._marketID
		End Get
		Set
			If ((Me._marketID = value)  _
						= false) Then
				Me._marketID = value
			End If
		End Set
	End Property
End Class

Partial Public Class getAvailableMarketsForAmbassadorResult
	
	Private _DataKeyID As Integer
	
	Private _InsertID As Integer
	
	Private _marketName As String
	
	Private _marketID As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataKeyID", DbType:="Int NOT NULL")>  _
	Public Property DataKeyID() As Integer
		Get
			Return Me._DataKeyID
		End Get
		Set
			If ((Me._DataKeyID = value)  _
						= false) Then
				Me._DataKeyID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InsertID", DbType:="Int NOT NULL")>  _
	Public Property InsertID() As Integer
		Get
			Return Me._InsertID
		End Get
		Set
			If ((Me._InsertID = value)  _
						= false) Then
				Me._InsertID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketName", DbType:="VarChar(50)")>  _
	Public Property marketName() As String
		Get
			Return Me._marketName
		End Get
		Set
			If (String.Equals(Me._marketName, value) = false) Then
				Me._marketName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="Int NOT NULL")>  _
	Public Property marketID() As Integer
		Get
			Return Me._marketID
		End Get
		Set
			If ((Me._marketID = value)  _
						= false) Then
				Me._marketID = value
			End If
		End Set
	End Property
End Class

Partial Public Class getAvailablePositionsForAmbassadorResult
	
	Private _DataKeyID As Integer
	
	Private _InsertID As Integer
	
	Private _positionTitle As String
	
	Private _staffingPositionID As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataKeyID", DbType:="Int NOT NULL")>  _
	Public Property DataKeyID() As Integer
		Get
			Return Me._DataKeyID
		End Get
		Set
			If ((Me._DataKeyID = value)  _
						= false) Then
				Me._DataKeyID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InsertID", DbType:="Int NOT NULL")>  _
	Public Property InsertID() As Integer
		Get
			Return Me._InsertID
		End Get
		Set
			If ((Me._InsertID = value)  _
						= false) Then
				Me._InsertID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_positionTitle", DbType:="NVarChar(50)")>  _
	Public Property positionTitle() As String
		Get
			Return Me._positionTitle
		End Get
		Set
			If (String.Equals(Me._positionTitle, value) = false) Then
				Me._positionTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_staffingPositionID", DbType:="Int NOT NULL")>  _
	Public Property staffingPositionID() As Integer
		Get
			Return Me._staffingPositionID
		End Get
		Set
			If ((Me._staffingPositionID = value)  _
						= false) Then
				Me._staffingPositionID = value
			End If
		End Set
	End Property
End Class

Partial Public Class getAvailableSupplierForStaffResult
	
	Private _DataKeyID As Integer
	
	Private _InsertID As Integer
	
	Private _supplierName As String
	
	Private _supplierID As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataKeyID", DbType:="Int NOT NULL")>  _
	Public Property DataKeyID() As Integer
		Get
			Return Me._DataKeyID
		End Get
		Set
			If ((Me._DataKeyID = value)  _
						= false) Then
				Me._DataKeyID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InsertID", DbType:="Int NOT NULL")>  _
	Public Property InsertID() As Integer
		Get
			Return Me._InsertID
		End Get
		Set
			If ((Me._InsertID = value)  _
						= false) Then
				Me._InsertID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierName", DbType:="NVarChar(50)")>  _
	Public Property supplierName() As String
		Get
			Return Me._supplierName
		End Get
		Set
			If (String.Equals(Me._supplierName, value) = false) Then
				Me._supplierName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int NOT NULL")>  _
	Public Property supplierID() As Integer
		Get
			Return Me._supplierID
		End Get
		Set
			If ((Me._supplierID = value)  _
						= false) Then
				Me._supplierID = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetBillingRateBySupplierResult
	
	Private _billingRate As System.Nullable(Of Double)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_billingRate", DbType:="Float")>  _
	Public Property billingRate() As System.Nullable(Of Double)
		Get
			Return Me._billingRate
		End Get
		Set
			If (Me._billingRate.Equals(value) = false) Then
				Me._billingRate = value
			End If
		End Set
	End Property
End Class

Partial Public Class getBrandsInEventResult
	
	Private _eventID As System.Nullable(Of Integer)
	
	Private _brandID As System.Nullable(Of Integer)
	
	Private _brandName As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int")>  _
	Public Property eventID() As System.Nullable(Of Integer)
		Get
			Return Me._eventID
		End Get
		Set
			If (Me._eventID.Equals(value) = false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandID", DbType:="Int")>  _
	Public Property brandID() As System.Nullable(Of Integer)
		Get
			Return Me._brandID
		End Get
		Set
			If (Me._brandID.Equals(value) = false) Then
				Me._brandID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandName", DbType:="NVarChar(256)")>  _
	Public Property brandName() As String
		Get
			Return Me._brandName
		End Get
		Set
			If (String.Equals(Me._brandName, value) = false) Then
				Me._brandName = value
			End If
		End Set
	End Property
End Class

Partial Public Class getBrandsInRequestedEventResult
	
	Private _requestedEventID As System.Nullable(Of Integer)
	
	Private _brandID As System.Nullable(Of Integer)
	
	Private _brandName As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_requestedEventID", DbType:="Int")>  _
	Public Property requestedEventID() As System.Nullable(Of Integer)
		Get
			Return Me._requestedEventID
		End Get
		Set
			If (Me._requestedEventID.Equals(value) = false) Then
				Me._requestedEventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandID", DbType:="Int")>  _
	Public Property brandID() As System.Nullable(Of Integer)
		Get
			Return Me._brandID
		End Get
		Set
			If (Me._brandID.Equals(value) = false) Then
				Me._brandID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandName", DbType:="NVarChar(256)")>  _
	Public Property brandName() As String
		Get
			Return Me._brandName
		End Get
		Set
			If (String.Equals(Me._brandName, value) = false) Then
				Me._brandName = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetCaseCountByEventType_SupplierResult
	
	Private _cases As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cases", DbType:="VarChar(MAX)")>  _
	Public Property cases() As String
		Get
			Return Me._cases
		End Get
		Set
			If (String.Equals(Me._cases, value) = false) Then
				Me._cases = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetCaseDisplayCountByEventType_SupplierResult
	
	Private _CaseDisplays As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CaseDisplays", DbType:="Int")>  _
	Public Property CaseDisplays() As System.Nullable(Of Integer)
		Get
			Return Me._CaseDisplays
		End Get
		Set
			If (Me._CaseDisplays.Equals(value) = false) Then
				Me._CaseDisplays = value
			End If
		End Set
	End Property
End Class

Partial Public Class getClientMarketsResult
	
	Private _marketID As Integer
	
	Private _marketName As String
	
	Private _active As System.Nullable(Of Boolean)
	
	Private _regionID As System.Nullable(Of Integer)
	
	Private _active1 As System.Nullable(Of Boolean)
	
	Private _Region As String
	
	Private _IsActive As String
	
	Private _buttonCSS As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="Int NOT NULL")>  _
	Public Property marketID() As Integer
		Get
			Return Me._marketID
		End Get
		Set
			If ((Me._marketID = value)  _
						= false) Then
				Me._marketID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketName", DbType:="VarChar(50)")>  _
	Public Property marketName() As String
		Get
			Return Me._marketName
		End Get
		Set
			If (String.Equals(Me._marketName, value) = false) Then
				Me._marketName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_active", DbType:="Bit")>  _
	Public Property active() As System.Nullable(Of Boolean)
		Get
			Return Me._active
		End Get
		Set
			If (Me._active.Equals(value) = false) Then
				Me._active = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_regionID", DbType:="Int")>  _
	Public Property regionID() As System.Nullable(Of Integer)
		Get
			Return Me._regionID
		End Get
		Set
			If (Me._regionID.Equals(value) = false) Then
				Me._regionID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_active1", DbType:="Bit")>  _
	Public Property active1() As System.Nullable(Of Boolean)
		Get
			Return Me._active1
		End Get
		Set
			If (Me._active1.Equals(value) = false) Then
				Me._active1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Region", DbType:="VarChar(4) NOT NULL", CanBeNull:=false)>  _
	Public Property Region() As String
		Get
			Return Me._Region
		End Get
		Set
			If (String.Equals(Me._Region, value) = false) Then
				Me._Region = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="VarChar(8) NOT NULL", CanBeNull:=false)>  _
	Public Property IsActive() As String
		Get
			Return Me._IsActive
		End Get
		Set
			If (String.Equals(Me._IsActive, value) = false) Then
				Me._IsActive = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_buttonCSS", DbType:="VarChar(22) NOT NULL", CanBeNull:=false)>  _
	Public Property buttonCSS() As String
		Get
			Return Me._buttonCSS
		End Get
		Set
			If (String.Equals(Me._buttonCSS, value) = false) Then
				Me._buttonCSS = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetCurrentEventsByAmbassadorsByUserIDResult
	
	Private _eventID As Integer
	
	Private _eventDate As System.Nullable(Of Date)
	
	Private _eventTitle As String
	
	Private _statusName As String
	
	Private _brands As String
	
	Private _accountID As Integer
	
	Private _accountName As String
	
	Private _supplierName As String
	
	Private _startTime As System.Nullable(Of Date)
	
	Private _endTime As System.Nullable(Of Date)
	
	Private _userID As String
	
	Private _positionTitle As String
	
	Private _rate As System.Nullable(Of Decimal)
	
	Private _hours As System.Nullable(Of Integer)
	
	Private _Total As System.Nullable(Of Decimal)
	
	Private _EnableLink As String
	
	Private _EnableLabel As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventDate", DbType:="SmallDateTime")>  _
	Public Property eventDate() As System.Nullable(Of Date)
		Get
			Return Me._eventDate
		End Get
		Set
			If (Me._eventDate.Equals(value) = false) Then
				Me._eventDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTitle", DbType:="VarChar(1000)")>  _
	Public Property eventTitle() As String
		Get
			Return Me._eventTitle
		End Get
		Set
			If (String.Equals(Me._eventTitle, value) = false) Then
				Me._eventTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_statusName", DbType:="NVarChar(50)")>  _
	Public Property statusName() As String
		Get
			Return Me._statusName
		End Get
		Set
			If (String.Equals(Me._statusName, value) = false) Then
				Me._statusName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brands", DbType:="VarChar(MAX)")>  _
	Public Property brands() As String
		Get
			Return Me._brands
		End Get
		Set
			If (String.Equals(Me._brands, value) = false) Then
				Me._brands = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="Int NOT NULL")>  _
	Public Property accountID() As Integer
		Get
			Return Me._accountID
		End Get
		Set
			If ((Me._accountID = value)  _
						= false) Then
				Me._accountID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountName", DbType:="VarChar(256)")>  _
	Public Property accountName() As String
		Get
			Return Me._accountName
		End Get
		Set
			If (String.Equals(Me._accountName, value) = false) Then
				Me._accountName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierName", DbType:="NVarChar(50)")>  _
	Public Property supplierName() As String
		Get
			Return Me._supplierName
		End Get
		Set
			If (String.Equals(Me._supplierName, value) = false) Then
				Me._supplierName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_startTime", DbType:="SmallDateTime")>  _
	Public Property startTime() As System.Nullable(Of Date)
		Get
			Return Me._startTime
		End Get
		Set
			If (Me._startTime.Equals(value) = false) Then
				Me._startTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_endTime", DbType:="SmallDateTime")>  _
	Public Property endTime() As System.Nullable(Of Date)
		Get
			Return Me._endTime
		End Get
		Set
			If (Me._endTime.Equals(value) = false) Then
				Me._endTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me._userID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_positionTitle", DbType:="NVarChar(50)")>  _
	Public Property positionTitle() As String
		Get
			Return Me._positionTitle
		End Get
		Set
			If (String.Equals(Me._positionTitle, value) = false) Then
				Me._positionTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rate", DbType:="Decimal(18,2)")>  _
	Public Property rate() As System.Nullable(Of Decimal)
		Get
			Return Me._rate
		End Get
		Set
			If (Me._rate.Equals(value) = false) Then
				Me._rate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hours", DbType:="Int")>  _
	Public Property hours() As System.Nullable(Of Integer)
		Get
			Return Me._hours
		End Get
		Set
			If (Me._hours.Equals(value) = false) Then
				Me._hours = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Total", DbType:="Decimal(29,2)")>  _
	Public Property Total() As System.Nullable(Of Decimal)
		Get
			Return Me._Total
		End Get
		Set
			If (Me._Total.Equals(value) = false) Then
				Me._Total = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EnableLink", DbType:="VarChar(5) NOT NULL", CanBeNull:=false)>  _
	Public Property EnableLink() As String
		Get
			Return Me._EnableLink
		End Get
		Set
			If (String.Equals(Me._EnableLink, value) = false) Then
				Me._EnableLink = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EnableLabel", DbType:="VarChar(5) NOT NULL", CanBeNull:=false)>  _
	Public Property EnableLabel() As String
		Get
			Return Me._EnableLabel
		End Get
		Set
			If (String.Equals(Me._EnableLabel, value) = false) Then
				Me._EnableLabel = value
			End If
		End Set
	End Property
End Class

Partial Public Class getEventBrandsCountResult
	
	Private _count As System.Nullable(Of Integer)
	
	Private _brandID As System.Nullable(Of Integer)
	
	Private _brandName As String
	
	Private _brandName1 As String
	
	Private _supplierID As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_count", DbType:="Int")>  _
	Public Property count() As System.Nullable(Of Integer)
		Get
			Return Me._count
		End Get
		Set
			If (Me._count.Equals(value) = false) Then
				Me._count = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandID", DbType:="Int")>  _
	Public Property brandID() As System.Nullable(Of Integer)
		Get
			Return Me._brandID
		End Get
		Set
			If (Me._brandID.Equals(value) = false) Then
				Me._brandID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandName", DbType:="NVarChar(256)")>  _
	Public Property brandName() As String
		Get
			Return Me._brandName
		End Get
		Set
			If (String.Equals(Me._brandName, value) = false) Then
				Me._brandName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandName1", DbType:="NVarChar(256)")>  _
	Public Property brandName1() As String
		Get
			Return Me._brandName1
		End Get
		Set
			If (String.Equals(Me._brandName1, value) = false) Then
				Me._brandName1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int")>  _
	Public Property supplierID() As System.Nullable(Of Integer)
		Get
			Return Me._supplierID
		End Get
		Set
			If (Me._supplierID.Equals(value) = false) Then
				Me._supplierID = value
			End If
		End Set
	End Property
End Class

Partial Public Class getEventBrandsCountbyMarketsResult
	
	Private _count As System.Nullable(Of Integer)
	
	Private _brandID As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_count", DbType:="Int")>  _
	Public Property count() As System.Nullable(Of Integer)
		Get
			Return Me._count
		End Get
		Set
			If (Me._count.Equals(value) = false) Then
				Me._count = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandID", DbType:="Int")>  _
	Public Property brandID() As System.Nullable(Of Integer)
		Get
			Return Me._brandID
		End Get
		Set
			If (Me._brandID.Equals(value) = false) Then
				Me._brandID = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetEventCountByWeekResult
	
	Private _WEEK As System.Nullable(Of Integer)
	
	Private _MONTH As System.Nullable(Of Integer)
	
	Private _YEAR As System.Nullable(Of Integer)
	
	Private _COUNT As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WEEK", DbType:="Int")>  _
	Public Property WEEK() As System.Nullable(Of Integer)
		Get
			Return Me._WEEK
		End Get
		Set
			If (Me._WEEK.Equals(value) = false) Then
				Me._WEEK = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MONTH", DbType:="Int")>  _
	Public Property MONTH() As System.Nullable(Of Integer)
		Get
			Return Me._MONTH
		End Get
		Set
			If (Me._MONTH.Equals(value) = false) Then
				Me._MONTH = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YEAR", DbType:="Int")>  _
	Public Property YEAR() As System.Nullable(Of Integer)
		Get
			Return Me._YEAR
		End Get
		Set
			If (Me._YEAR.Equals(value) = false) Then
				Me._YEAR = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_COUNT", DbType:="Int NOT NULL")>  _
	Public Property COUNT() As Integer
		Get
			Return Me._COUNT
		End Get
		Set
			If ((Me._COUNT = value)  _
						= false) Then
				Me._COUNT = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetEventCountByWeek_EventTypeResult
	
	Private _WEEK As System.Nullable(Of Integer)
	
	Private _MONTH As System.Nullable(Of Integer)
	
	Private _YEAR As System.Nullable(Of Integer)
	
	Private _COUNT As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WEEK", DbType:="Int")>  _
	Public Property WEEK() As System.Nullable(Of Integer)
		Get
			Return Me._WEEK
		End Get
		Set
			If (Me._WEEK.Equals(value) = false) Then
				Me._WEEK = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MONTH", DbType:="Int")>  _
	Public Property MONTH() As System.Nullable(Of Integer)
		Get
			Return Me._MONTH
		End Get
		Set
			If (Me._MONTH.Equals(value) = false) Then
				Me._MONTH = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YEAR", DbType:="Int")>  _
	Public Property YEAR() As System.Nullable(Of Integer)
		Get
			Return Me._YEAR
		End Get
		Set
			If (Me._YEAR.Equals(value) = false) Then
				Me._YEAR = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_COUNT", DbType:="Int NOT NULL")>  _
	Public Property COUNT() As Integer
		Get
			Return Me._COUNT
		End Get
		Set
			If ((Me._COUNT = value)  _
						= false) Then
				Me._COUNT = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetEventDurationMinutesResult
	
	Private _Duration As System.Nullable(Of Decimal)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Duration", DbType:="Decimal(38,2)")>  _
	Public Property Duration() As System.Nullable(Of Decimal)
		Get
			Return Me._Duration
		End Get
		Set
			If (Me._Duration.Equals(value) = false) Then
				Me._Duration = value
			End If
		End Set
	End Property
End Class

Partial Public Class getEvents_ByUserIDResult
	
	Private _importFileID As System.Nullable(Of Integer)
	
	Private _eventID As Integer
	
	Private _supplierID As System.Nullable(Of Integer)
	
	Private _supplierName As String
	
	Private _eventTitle As String
	
	Private _eventDate As System.Nullable(Of Date)
	
	Private _startTime As System.Nullable(Of Date)
	
	Private _endTime As System.Nullable(Of Date)
	
	Private _clientID As System.Nullable(Of Integer)
	
	Private _statusID As Integer
	
	Private _statusName As String
	
	Private _eventTypeID As System.Nullable(Of Integer)
	
	Private _eventTypeName As String
	
	Private _marketID As System.Nullable(Of Integer)
	
	Private _marketName As String
	
	Private _locationID As System.Nullable(Of Integer)
	
	Private _accountID As Integer
	
	Private _Vpid As System.Nullable(Of Integer)
	
	Private _accountName As String
	
	Private _address As String
	
	Private _city As String
	
	Private _state As String
	
	Private _brands As String
	
	Private _latitude As System.Nullable(Of Double)
	
	Private _longitude As System.Nullable(Of Double)
	
	Private _shape As String
	
	Private _tooltiptext As String
	
	Private _tooltipformap As String
	
	Private _formatedEventDate As String
	
	Private _shortEventDate As String
	
	Private _formatedStartTime As String
	
	Private _formatedEndTime As String
	
	Private _hours As System.Nullable(Of Integer)
	
	Private _labelText As String
	
	Private _Stage As String
	
	Private _RequestedLabel As String
	
	Private _iconURL As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_importFileID", DbType:="Int")>  _
	Public Property importFileID() As System.Nullable(Of Integer)
		Get
			Return Me._importFileID
		End Get
		Set
			If (Me._importFileID.Equals(value) = false) Then
				Me._importFileID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int")>  _
	Public Property supplierID() As System.Nullable(Of Integer)
		Get
			Return Me._supplierID
		End Get
		Set
			If (Me._supplierID.Equals(value) = false) Then
				Me._supplierID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierName", DbType:="NVarChar(50)")>  _
	Public Property supplierName() As String
		Get
			Return Me._supplierName
		End Get
		Set
			If (String.Equals(Me._supplierName, value) = false) Then
				Me._supplierName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTitle", DbType:="VarChar(1000)")>  _
	Public Property eventTitle() As String
		Get
			Return Me._eventTitle
		End Get
		Set
			If (String.Equals(Me._eventTitle, value) = false) Then
				Me._eventTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventDate", DbType:="SmallDateTime")>  _
	Public Property eventDate() As System.Nullable(Of Date)
		Get
			Return Me._eventDate
		End Get
		Set
			If (Me._eventDate.Equals(value) = false) Then
				Me._eventDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_startTime", DbType:="SmallDateTime")>  _
	Public Property startTime() As System.Nullable(Of Date)
		Get
			Return Me._startTime
		End Get
		Set
			If (Me._startTime.Equals(value) = false) Then
				Me._startTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_endTime", DbType:="SmallDateTime")>  _
	Public Property endTime() As System.Nullable(Of Date)
		Get
			Return Me._endTime
		End Get
		Set
			If (Me._endTime.Equals(value) = false) Then
				Me._endTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", DbType:="Int")>  _
	Public Property clientID() As System.Nullable(Of Integer)
		Get
			Return Me._clientID
		End Get
		Set
			If (Me._clientID.Equals(value) = false) Then
				Me._clientID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_statusID", DbType:="Int NOT NULL")>  _
	Public Property statusID() As Integer
		Get
			Return Me._statusID
		End Get
		Set
			If ((Me._statusID = value)  _
						= false) Then
				Me._statusID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_statusName", DbType:="NVarChar(50)")>  _
	Public Property statusName() As String
		Get
			Return Me._statusName
		End Get
		Set
			If (String.Equals(Me._statusName, value) = false) Then
				Me._statusName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTypeID", DbType:="Int")>  _
	Public Property eventTypeID() As System.Nullable(Of Integer)
		Get
			Return Me._eventTypeID
		End Get
		Set
			If (Me._eventTypeID.Equals(value) = false) Then
				Me._eventTypeID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTypeName", DbType:="NVarChar(50)")>  _
	Public Property eventTypeName() As String
		Get
			Return Me._eventTypeName
		End Get
		Set
			If (String.Equals(Me._eventTypeName, value) = false) Then
				Me._eventTypeName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="Int")>  _
	Public Property marketID() As System.Nullable(Of Integer)
		Get
			Return Me._marketID
		End Get
		Set
			If (Me._marketID.Equals(value) = false) Then
				Me._marketID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketName", DbType:="NVarChar(50)")>  _
	Public Property marketName() As String
		Get
			Return Me._marketName
		End Get
		Set
			If (String.Equals(Me._marketName, value) = false) Then
				Me._marketName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_locationID", DbType:="Int")>  _
	Public Property locationID() As System.Nullable(Of Integer)
		Get
			Return Me._locationID
		End Get
		Set
			If (Me._locationID.Equals(value) = false) Then
				Me._locationID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="Int NOT NULL")>  _
	Public Property accountID() As Integer
		Get
			Return Me._accountID
		End Get
		Set
			If ((Me._accountID = value)  _
						= false) Then
				Me._accountID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Vpid", DbType:="Int")>  _
	Public Property Vpid() As System.Nullable(Of Integer)
		Get
			Return Me._Vpid
		End Get
		Set
			If (Me._Vpid.Equals(value) = false) Then
				Me._Vpid = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountName", DbType:="VarChar(256)")>  _
	Public Property accountName() As String
		Get
			Return Me._accountName
		End Get
		Set
			If (String.Equals(Me._accountName, value) = false) Then
				Me._accountName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_address", DbType:="VarChar(256)")>  _
	Public Property address() As String
		Get
			Return Me._address
		End Get
		Set
			If (String.Equals(Me._address, value) = false) Then
				Me._address = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_city", DbType:="VarChar(50)")>  _
	Public Property city() As String
		Get
			Return Me._city
		End Get
		Set
			If (String.Equals(Me._city, value) = false) Then
				Me._city = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_state", DbType:="NVarChar(20)")>  _
	Public Property state() As String
		Get
			Return Me._state
		End Get
		Set
			If (String.Equals(Me._state, value) = false) Then
				Me._state = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brands", DbType:="VarChar(MAX)")>  _
	Public Property brands() As String
		Get
			Return Me._brands
		End Get
		Set
			If (String.Equals(Me._brands, value) = false) Then
				Me._brands = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_latitude", DbType:="Float")>  _
	Public Property latitude() As System.Nullable(Of Double)
		Get
			Return Me._latitude
		End Get
		Set
			If (Me._latitude.Equals(value) = false) Then
				Me._latitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_longitude", DbType:="Float")>  _
	Public Property longitude() As System.Nullable(Of Double)
		Get
			Return Me._longitude
		End Get
		Set
			If (Me._longitude.Equals(value) = false) Then
				Me._longitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_shape", DbType:="VarChar(9) NOT NULL", CanBeNull:=false)>  _
	Public Property shape() As String
		Get
			Return Me._shape
		End Get
		Set
			If (String.Equals(Me._shape, value) = false) Then
				Me._shape = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tooltiptext", DbType:="NVarChar(4000)")>  _
	Public Property tooltiptext() As String
		Get
			Return Me._tooltiptext
		End Get
		Set
			If (String.Equals(Me._tooltiptext, value) = false) Then
				Me._tooltiptext = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tooltipformap", DbType:="NVarChar(4000)")>  _
	Public Property tooltipformap() As String
		Get
			Return Me._tooltipformap
		End Get
		Set
			If (String.Equals(Me._tooltipformap, value) = false) Then
				Me._tooltipformap = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_formatedEventDate", DbType:="NVarChar(4000)")>  _
	Public Property formatedEventDate() As String
		Get
			Return Me._formatedEventDate
		End Get
		Set
			If (String.Equals(Me._formatedEventDate, value) = false) Then
				Me._formatedEventDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_shortEventDate", DbType:="NVarChar(4000)")>  _
	Public Property shortEventDate() As String
		Get
			Return Me._shortEventDate
		End Get
		Set
			If (String.Equals(Me._shortEventDate, value) = false) Then
				Me._shortEventDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_formatedStartTime", DbType:="NVarChar(4000)")>  _
	Public Property formatedStartTime() As String
		Get
			Return Me._formatedStartTime
		End Get
		Set
			If (String.Equals(Me._formatedStartTime, value) = false) Then
				Me._formatedStartTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_formatedEndTime", DbType:="NVarChar(4000)")>  _
	Public Property formatedEndTime() As String
		Get
			Return Me._formatedEndTime
		End Get
		Set
			If (String.Equals(Me._formatedEndTime, value) = false) Then
				Me._formatedEndTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hours", DbType:="Int")>  _
	Public Property hours() As System.Nullable(Of Integer)
		Get
			Return Me._hours
		End Get
		Set
			If (Me._hours.Equals(value) = false) Then
				Me._hours = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_labelText", DbType:="VarChar(101)")>  _
	Public Property labelText() As String
		Get
			Return Me._labelText
		End Get
		Set
			If (String.Equals(Me._labelText, value) = false) Then
				Me._labelText = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Stage", DbType:="VarChar(7) NOT NULL", CanBeNull:=false)>  _
	Public Property Stage() As String
		Get
			Return Me._Stage
		End Get
		Set
			If (String.Equals(Me._Stage, value) = false) Then
				Me._Stage = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RequestedLabel", DbType:="VarChar(102)")>  _
	Public Property RequestedLabel() As String
		Get
			Return Me._RequestedLabel
		End Get
		Set
			If (String.Equals(Me._RequestedLabel, value) = false) Then
				Me._RequestedLabel = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_iconURL", DbType:="VarChar(34)")>  _
	Public Property iconURL() As String
		Get
			Return Me._iconURL
		End Get
		Set
			If (String.Equals(Me._iconURL, value) = false) Then
				Me._iconURL = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetEventsbyStatusResult
	
	Private _eventID As Integer
	
	Private _supplierID As System.Nullable(Of Integer)
	
	Private _supplierName As String
	
	Private _eventTitle As String
	
	Private _eventDate As System.Nullable(Of Date)
	
	Private _startTime As System.Nullable(Of Date)
	
	Private _endTime As System.Nullable(Of Date)
	
	Private _clientID As System.Nullable(Of Integer)
	
	Private _statusID As Integer
	
	Private _statusName As String
	
	Private _eventTypeID As System.Nullable(Of Integer)
	
	Private _eventTypeName As String
	
	Private _marketID As System.Nullable(Of Integer)
	
	Private _marketName As String
	
	Private _locationID As System.Nullable(Of Integer)
	
	Private _accountID As Integer
	
	Private _Vpid As System.Nullable(Of Integer)
	
	Private _accountName As String
	
	Private _address As String
	
	Private _city As String
	
	Private _state As String
	
	Private _brands As String
	
	Private _latitude As System.Nullable(Of Double)
	
	Private _longitude As System.Nullable(Of Double)
	
	Private _shape As String
	
	Private _tooltiptext As String
	
	Private _tooltipformap As String
	
	Private _formatedEventDate As String
	
	Private _formatedStartTime As String
	
	Private _hours As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int")>  _
	Public Property supplierID() As System.Nullable(Of Integer)
		Get
			Return Me._supplierID
		End Get
		Set
			If (Me._supplierID.Equals(value) = false) Then
				Me._supplierID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierName", DbType:="NVarChar(50)")>  _
	Public Property supplierName() As String
		Get
			Return Me._supplierName
		End Get
		Set
			If (String.Equals(Me._supplierName, value) = false) Then
				Me._supplierName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTitle", DbType:="VarChar(1000)")>  _
	Public Property eventTitle() As String
		Get
			Return Me._eventTitle
		End Get
		Set
			If (String.Equals(Me._eventTitle, value) = false) Then
				Me._eventTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventDate", DbType:="SmallDateTime")>  _
	Public Property eventDate() As System.Nullable(Of Date)
		Get
			Return Me._eventDate
		End Get
		Set
			If (Me._eventDate.Equals(value) = false) Then
				Me._eventDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_startTime", DbType:="SmallDateTime")>  _
	Public Property startTime() As System.Nullable(Of Date)
		Get
			Return Me._startTime
		End Get
		Set
			If (Me._startTime.Equals(value) = false) Then
				Me._startTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_endTime", DbType:="SmallDateTime")>  _
	Public Property endTime() As System.Nullable(Of Date)
		Get
			Return Me._endTime
		End Get
		Set
			If (Me._endTime.Equals(value) = false) Then
				Me._endTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", DbType:="Int")>  _
	Public Property clientID() As System.Nullable(Of Integer)
		Get
			Return Me._clientID
		End Get
		Set
			If (Me._clientID.Equals(value) = false) Then
				Me._clientID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_statusID", DbType:="Int NOT NULL")>  _
	Public Property statusID() As Integer
		Get
			Return Me._statusID
		End Get
		Set
			If ((Me._statusID = value)  _
						= false) Then
				Me._statusID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_statusName", DbType:="NVarChar(50)")>  _
	Public Property statusName() As String
		Get
			Return Me._statusName
		End Get
		Set
			If (String.Equals(Me._statusName, value) = false) Then
				Me._statusName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTypeID", DbType:="Int")>  _
	Public Property eventTypeID() As System.Nullable(Of Integer)
		Get
			Return Me._eventTypeID
		End Get
		Set
			If (Me._eventTypeID.Equals(value) = false) Then
				Me._eventTypeID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTypeName", DbType:="NVarChar(50)")>  _
	Public Property eventTypeName() As String
		Get
			Return Me._eventTypeName
		End Get
		Set
			If (String.Equals(Me._eventTypeName, value) = false) Then
				Me._eventTypeName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="Int")>  _
	Public Property marketID() As System.Nullable(Of Integer)
		Get
			Return Me._marketID
		End Get
		Set
			If (Me._marketID.Equals(value) = false) Then
				Me._marketID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketName", DbType:="VarChar(50)")>  _
	Public Property marketName() As String
		Get
			Return Me._marketName
		End Get
		Set
			If (String.Equals(Me._marketName, value) = false) Then
				Me._marketName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_locationID", DbType:="Int")>  _
	Public Property locationID() As System.Nullable(Of Integer)
		Get
			Return Me._locationID
		End Get
		Set
			If (Me._locationID.Equals(value) = false) Then
				Me._locationID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="Int NOT NULL")>  _
	Public Property accountID() As Integer
		Get
			Return Me._accountID
		End Get
		Set
			If ((Me._accountID = value)  _
						= false) Then
				Me._accountID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Vpid", DbType:="Int")>  _
	Public Property Vpid() As System.Nullable(Of Integer)
		Get
			Return Me._Vpid
		End Get
		Set
			If (Me._Vpid.Equals(value) = false) Then
				Me._Vpid = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountName", DbType:="VarChar(256)")>  _
	Public Property accountName() As String
		Get
			Return Me._accountName
		End Get
		Set
			If (String.Equals(Me._accountName, value) = false) Then
				Me._accountName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_address", DbType:="VarChar(256)")>  _
	Public Property address() As String
		Get
			Return Me._address
		End Get
		Set
			If (String.Equals(Me._address, value) = false) Then
				Me._address = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_city", DbType:="VarChar(50)")>  _
	Public Property city() As String
		Get
			Return Me._city
		End Get
		Set
			If (String.Equals(Me._city, value) = false) Then
				Me._city = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_state", DbType:="NVarChar(20)")>  _
	Public Property state() As String
		Get
			Return Me._state
		End Get
		Set
			If (String.Equals(Me._state, value) = false) Then
				Me._state = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brands", DbType:="VarChar(MAX)")>  _
	Public Property brands() As String
		Get
			Return Me._brands
		End Get
		Set
			If (String.Equals(Me._brands, value) = false) Then
				Me._brands = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_latitude", DbType:="Float")>  _
	Public Property latitude() As System.Nullable(Of Double)
		Get
			Return Me._latitude
		End Get
		Set
			If (Me._latitude.Equals(value) = false) Then
				Me._latitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_longitude", DbType:="Float")>  _
	Public Property longitude() As System.Nullable(Of Double)
		Get
			Return Me._longitude
		End Get
		Set
			If (Me._longitude.Equals(value) = false) Then
				Me._longitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_shape", DbType:="VarChar(9) NOT NULL", CanBeNull:=false)>  _
	Public Property shape() As String
		Get
			Return Me._shape
		End Get
		Set
			If (String.Equals(Me._shape, value) = false) Then
				Me._shape = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tooltiptext", DbType:="NVarChar(4000)")>  _
	Public Property tooltiptext() As String
		Get
			Return Me._tooltiptext
		End Get
		Set
			If (String.Equals(Me._tooltiptext, value) = false) Then
				Me._tooltiptext = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tooltipformap", DbType:="NVarChar(4000)")>  _
	Public Property tooltipformap() As String
		Get
			Return Me._tooltipformap
		End Get
		Set
			If (String.Equals(Me._tooltipformap, value) = false) Then
				Me._tooltipformap = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_formatedEventDate", DbType:="NVarChar(4000)")>  _
	Public Property formatedEventDate() As String
		Get
			Return Me._formatedEventDate
		End Get
		Set
			If (String.Equals(Me._formatedEventDate, value) = false) Then
				Me._formatedEventDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_formatedStartTime", DbType:="NVarChar(4000)")>  _
	Public Property formatedStartTime() As String
		Get
			Return Me._formatedStartTime
		End Get
		Set
			If (String.Equals(Me._formatedStartTime, value) = false) Then
				Me._formatedStartTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hours", DbType:="Int")>  _
	Public Property hours() As System.Nullable(Of Integer)
		Get
			Return Me._hours
		End Get
		Set
			If (Me._hours.Equals(value) = false) Then
				Me._hours = value
			End If
		End Set
	End Property
End Class

Partial Public Class getEventStateCountResult
	
	Private _count As System.Nullable(Of Integer)
	
	Private _state As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_count", DbType:="Int")>  _
	Public Property count() As System.Nullable(Of Integer)
		Get
			Return Me._count
		End Get
		Set
			If (Me._count.Equals(value) = false) Then
				Me._count = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_state", DbType:="NVarChar(20)")>  _
	Public Property state() As String
		Get
			Return Me._state
		End Get
		Set
			If (String.Equals(Me._state, value) = false) Then
				Me._state = value
			End If
		End Set
	End Property
End Class

Partial Public Class getEventStateCountbyMarketsResult
	
	Private _count As System.Nullable(Of Integer)
	
	Private _state As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_count", DbType:="Int")>  _
	Public Property count() As System.Nullable(Of Integer)
		Get
			Return Me._count
		End Get
		Set
			If (Me._count.Equals(value) = false) Then
				Me._count = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_state", DbType:="NVarChar(20)")>  _
	Public Property state() As String
		Get
			Return Me._state
		End Get
		Set
			If (String.Equals(Me._state, value) = false) Then
				Me._state = value
			End If
		End Set
	End Property
End Class

Partial Public Class getEventStateCountByUserIDResult
	
	Private _count As System.Nullable(Of Integer)
	
	Private _state As String
	
	Private _supplierID As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_count", DbType:="Int")>  _
	Public Property count() As System.Nullable(Of Integer)
		Get
			Return Me._count
		End Get
		Set
			If (Me._count.Equals(value) = false) Then
				Me._count = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_state", DbType:="NVarChar(20)")>  _
	Public Property state() As String
		Get
			Return Me._state
		End Get
		Set
			If (String.Equals(Me._state, value) = false) Then
				Me._state = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int")>  _
	Public Property supplierID() As System.Nullable(Of Integer)
		Get
			Return Me._supplierID
		End Get
		Set
			If (Me._supplierID.Equals(value) = false) Then
				Me._supplierID = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetEventStatusTotalsByUserIDResult
	
	Private _Total As System.Nullable(Of Integer)
	
	Private _Approved As System.Nullable(Of Integer)
	
	Private _Booked As System.Nullable(Of Integer)
	
	Private _Cancelled As System.Nullable(Of Integer)
	
	Private _Scheduled As System.Nullable(Of Integer)
	
	Private _Toplined As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Total", DbType:="Int")>  _
	Public Property Total() As System.Nullable(Of Integer)
		Get
			Return Me._Total
		End Get
		Set
			If (Me._Total.Equals(value) = false) Then
				Me._Total = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Approved", DbType:="Int")>  _
	Public Property Approved() As System.Nullable(Of Integer)
		Get
			Return Me._Approved
		End Get
		Set
			If (Me._Approved.Equals(value) = false) Then
				Me._Approved = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Booked", DbType:="Int")>  _
	Public Property Booked() As System.Nullable(Of Integer)
		Get
			Return Me._Booked
		End Get
		Set
			If (Me._Booked.Equals(value) = false) Then
				Me._Booked = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cancelled", DbType:="Int")>  _
	Public Property Cancelled() As System.Nullable(Of Integer)
		Get
			Return Me._Cancelled
		End Get
		Set
			If (Me._Cancelled.Equals(value) = false) Then
				Me._Cancelled = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Scheduled", DbType:="Int")>  _
	Public Property Scheduled() As System.Nullable(Of Integer)
		Get
			Return Me._Scheduled
		End Get
		Set
			If (Me._Scheduled.Equals(value) = false) Then
				Me._Scheduled = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Toplined", DbType:="Int")>  _
	Public Property Toplined() As System.Nullable(Of Integer)
		Get
			Return Me._Toplined
		End Get
		Set
			If (Me._Toplined.Equals(value) = false) Then
				Me._Toplined = value
			End If
		End Set
	End Property
End Class

Partial Public Class getEventSupplierCountResult
	
	Private _count As System.Nullable(Of Integer)
	
	Private _supplierID As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_count", DbType:="Int")>  _
	Public Property count() As System.Nullable(Of Integer)
		Get
			Return Me._count
		End Get
		Set
			If (Me._count.Equals(value) = false) Then
				Me._count = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int")>  _
	Public Property supplierID() As System.Nullable(Of Integer)
		Get
			Return Me._supplierID
		End Get
		Set
			If (Me._supplierID.Equals(value) = false) Then
				Me._supplierID = value
			End If
		End Set
	End Property
End Class

Partial Public Class getEventSupplierCountbyMarketsResult
	
	Private _count As System.Nullable(Of Integer)
	
	Private _supplierID As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_count", DbType:="Int")>  _
	Public Property count() As System.Nullable(Of Integer)
		Get
			Return Me._count
		End Get
		Set
			If (Me._count.Equals(value) = false) Then
				Me._count = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int")>  _
	Public Property supplierID() As System.Nullable(Of Integer)
		Get
			Return Me._supplierID
		End Get
		Set
			If (Me._supplierID.Equals(value) = false) Then
				Me._supplierID = value
			End If
		End Set
	End Property
End Class

Partial Public Class getEventTypeCountResult
	
	Private _count As System.Nullable(Of Integer)
	
	Private _eventTypeID As System.Nullable(Of Integer)
	
	Private _supplierID As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_count", DbType:="Int")>  _
	Public Property count() As System.Nullable(Of Integer)
		Get
			Return Me._count
		End Get
		Set
			If (Me._count.Equals(value) = false) Then
				Me._count = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTypeID", DbType:="Int")>  _
	Public Property eventTypeID() As System.Nullable(Of Integer)
		Get
			Return Me._eventTypeID
		End Get
		Set
			If (Me._eventTypeID.Equals(value) = false) Then
				Me._eventTypeID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int")>  _
	Public Property supplierID() As System.Nullable(Of Integer)
		Get
			Return Me._supplierID
		End Get
		Set
			If (Me._supplierID.Equals(value) = false) Then
				Me._supplierID = value
			End If
		End Set
	End Property
End Class

Partial Public Class getEventTypeCount_AllSuppliersResult
	
	Private _count As System.Nullable(Of Integer)
	
	Private _eventTypeID As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_count", DbType:="Int")>  _
	Public Property count() As System.Nullable(Of Integer)
		Get
			Return Me._count
		End Get
		Set
			If (Me._count.Equals(value) = false) Then
				Me._count = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTypeID", DbType:="Int")>  _
	Public Property eventTypeID() As System.Nullable(Of Integer)
		Get
			Return Me._eventTypeID
		End Get
		Set
			If (Me._eventTypeID.Equals(value) = false) Then
				Me._eventTypeID = value
			End If
		End Set
	End Property
End Class

Partial Public Class getEventTypeCountbyMarketsResult
	
	Private _count As System.Nullable(Of Integer)
	
	Private _eventTypeID As System.Nullable(Of Integer)
	
	Private _supplierID As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_count", DbType:="Int")>  _
	Public Property count() As System.Nullable(Of Integer)
		Get
			Return Me._count
		End Get
		Set
			If (Me._count.Equals(value) = false) Then
				Me._count = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTypeID", DbType:="Int")>  _
	Public Property eventTypeID() As System.Nullable(Of Integer)
		Get
			Return Me._eventTypeID
		End Get
		Set
			If (Me._eventTypeID.Equals(value) = false) Then
				Me._eventTypeID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int")>  _
	Public Property supplierID() As System.Nullable(Of Integer)
		Get
			Return Me._supplierID
		End Get
		Set
			If (Me._supplierID.Equals(value) = false) Then
				Me._supplierID = value
			End If
		End Set
	End Property
End Class

Partial Public Class getGalleryEvents_ByUserIDResult
	
	Private _eventID As Integer
	
	Private _supplierName As String
	
	Private _brands As String
	
	Private _eventDate As System.Nullable(Of Date)
	
	Private _statusName As String
	
	Private _statusID As Integer
	
	Private _marketName As String
	
	Private _eventTypeName As String
	
	Private _accountName As String
	
	Private _locationID As System.Nullable(Of Integer)
	
	Private _address As String
	
	Private _city As String
	
	Private _state As String
	
	Private _Vpid As System.Nullable(Of Integer)
	
	Private _labelText As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierName", DbType:="NVarChar(50)")>  _
	Public Property supplierName() As String
		Get
			Return Me._supplierName
		End Get
		Set
			If (String.Equals(Me._supplierName, value) = false) Then
				Me._supplierName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brands", DbType:="VarChar(MAX)")>  _
	Public Property brands() As String
		Get
			Return Me._brands
		End Get
		Set
			If (String.Equals(Me._brands, value) = false) Then
				Me._brands = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventDate", DbType:="SmallDateTime")>  _
	Public Property eventDate() As System.Nullable(Of Date)
		Get
			Return Me._eventDate
		End Get
		Set
			If (Me._eventDate.Equals(value) = false) Then
				Me._eventDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_statusName", DbType:="NVarChar(50)")>  _
	Public Property statusName() As String
		Get
			Return Me._statusName
		End Get
		Set
			If (String.Equals(Me._statusName, value) = false) Then
				Me._statusName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_statusID", DbType:="Int NOT NULL")>  _
	Public Property statusID() As Integer
		Get
			Return Me._statusID
		End Get
		Set
			If ((Me._statusID = value)  _
						= false) Then
				Me._statusID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketName", DbType:="NVarChar(50)")>  _
	Public Property marketName() As String
		Get
			Return Me._marketName
		End Get
		Set
			If (String.Equals(Me._marketName, value) = false) Then
				Me._marketName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTypeName", DbType:="NVarChar(50)")>  _
	Public Property eventTypeName() As String
		Get
			Return Me._eventTypeName
		End Get
		Set
			If (String.Equals(Me._eventTypeName, value) = false) Then
				Me._eventTypeName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountName", DbType:="VarChar(256)")>  _
	Public Property accountName() As String
		Get
			Return Me._accountName
		End Get
		Set
			If (String.Equals(Me._accountName, value) = false) Then
				Me._accountName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_locationID", DbType:="Int")>  _
	Public Property locationID() As System.Nullable(Of Integer)
		Get
			Return Me._locationID
		End Get
		Set
			If (Me._locationID.Equals(value) = false) Then
				Me._locationID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_address", DbType:="VarChar(256)")>  _
	Public Property address() As String
		Get
			Return Me._address
		End Get
		Set
			If (String.Equals(Me._address, value) = false) Then
				Me._address = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_city", DbType:="VarChar(50)")>  _
	Public Property city() As String
		Get
			Return Me._city
		End Get
		Set
			If (String.Equals(Me._city, value) = false) Then
				Me._city = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_state", DbType:="NVarChar(20)")>  _
	Public Property state() As String
		Get
			Return Me._state
		End Get
		Set
			If (String.Equals(Me._state, value) = false) Then
				Me._state = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Vpid", DbType:="Int")>  _
	Public Property Vpid() As System.Nullable(Of Integer)
		Get
			Return Me._Vpid
		End Get
		Set
			If (Me._Vpid.Equals(value) = false) Then
				Me._Vpid = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_labelText", DbType:="VarChar(101)")>  _
	Public Property labelText() As String
		Get
			Return Me._labelText
		End Get
		Set
			If (String.Equals(Me._labelText, value) = false) Then
				Me._labelText = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetInventoryCountResult
	
	Private _itemID As Integer
	
	Private _itemName As String
	
	Private _QtyOnHand As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_itemID", DbType:="Int NOT NULL")>  _
	Public Property itemID() As Integer
		Get
			Return Me._itemID
		End Get
		Set
			If ((Me._itemID = value)  _
						= false) Then
				Me._itemID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_itemName", DbType:="NVarChar(50)")>  _
	Public Property itemName() As String
		Get
			Return Me._itemName
		End Get
		Set
			If (String.Equals(Me._itemName, value) = false) Then
				Me._itemName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QtyOnHand", DbType:="Int")>  _
	Public Property QtyOnHand() As System.Nullable(Of Integer)
		Get
			Return Me._QtyOnHand
		End Get
		Set
			If (Me._QtyOnHand.Equals(value) = false) Then
				Me._QtyOnHand = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetInventoryItemsbySupplierResult
	
	Private _supplierID As Integer
	
	Private _brandID As Integer
	
	Private _itemID As Integer
	
	Private _itemName As String
	
	Private _unitsInKit As System.Nullable(Of Integer)
	
	Private _packageShippingSize As String
	
	Private _packageSize As String
	
	Private _packageShippingWeight As String
	
	Private _retailPrice As System.Nullable(Of Decimal)
	
	Private _returnToInventory As System.Nullable(Of Boolean)
	
	Private _brandName As String
	
	Private _FullName As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int NOT NULL")>  _
	Public Property supplierID() As Integer
		Get
			Return Me._supplierID
		End Get
		Set
			If ((Me._supplierID = value)  _
						= false) Then
				Me._supplierID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandID", DbType:="Int NOT NULL")>  _
	Public Property brandID() As Integer
		Get
			Return Me._brandID
		End Get
		Set
			If ((Me._brandID = value)  _
						= false) Then
				Me._brandID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_itemID", DbType:="Int NOT NULL")>  _
	Public Property itemID() As Integer
		Get
			Return Me._itemID
		End Get
		Set
			If ((Me._itemID = value)  _
						= false) Then
				Me._itemID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_itemName", DbType:="NVarChar(50)")>  _
	Public Property itemName() As String
		Get
			Return Me._itemName
		End Get
		Set
			If (String.Equals(Me._itemName, value) = false) Then
				Me._itemName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_unitsInKit", DbType:="Int")>  _
	Public Property unitsInKit() As System.Nullable(Of Integer)
		Get
			Return Me._unitsInKit
		End Get
		Set
			If (Me._unitsInKit.Equals(value) = false) Then
				Me._unitsInKit = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_packageShippingSize", DbType:="VarChar(50)")>  _
	Public Property packageShippingSize() As String
		Get
			Return Me._packageShippingSize
		End Get
		Set
			If (String.Equals(Me._packageShippingSize, value) = false) Then
				Me._packageShippingSize = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_packageSize", DbType:="VarChar(50)")>  _
	Public Property packageSize() As String
		Get
			Return Me._packageSize
		End Get
		Set
			If (String.Equals(Me._packageSize, value) = false) Then
				Me._packageSize = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_packageShippingWeight", DbType:="VarChar(50)")>  _
	Public Property packageShippingWeight() As String
		Get
			Return Me._packageShippingWeight
		End Get
		Set
			If (String.Equals(Me._packageShippingWeight, value) = false) Then
				Me._packageShippingWeight = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_retailPrice", DbType:="Decimal(6,2)")>  _
	Public Property retailPrice() As System.Nullable(Of Decimal)
		Get
			Return Me._retailPrice
		End Get
		Set
			If (Me._retailPrice.Equals(value) = false) Then
				Me._retailPrice = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_returnToInventory", DbType:="Bit")>  _
	Public Property returnToInventory() As System.Nullable(Of Boolean)
		Get
			Return Me._returnToInventory
		End Get
		Set
			If (Me._returnToInventory.Equals(value) = false) Then
				Me._returnToInventory = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandName", DbType:="VarChar(MAX)")>  _
	Public Property brandName() As String
		Get
			Return Me._brandName
		End Get
		Set
			If (String.Equals(Me._brandName, value) = false) Then
				Me._brandName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FullName", DbType:="NVarChar(MAX)")>  _
	Public Property FullName() As String
		Get
			Return Me._FullName
		End Get
		Set
			If (String.Equals(Me._FullName, value) = false) Then
				Me._FullName = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetInventoryListResult
	
	Private _itemID As Integer
	
	Private _thumbnail As System.Data.Linq.Binary
	
	Private _itemName As String
	
	Private _Brand As String
	
	Private _retailPrice As System.Nullable(Of Decimal)
	
	Private _packageSize As String
	
	Private _unitsInKit As System.Nullable(Of Integer)
	
	Private _QtyOnHand As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_itemID", DbType:="Int NOT NULL")>  _
	Public Property itemID() As Integer
		Get
			Return Me._itemID
		End Get
		Set
			If ((Me._itemID = value)  _
						= false) Then
				Me._itemID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_thumbnail", DbType:="VarBinary(MAX)")>  _
	Public Property thumbnail() As System.Data.Linq.Binary
		Get
			Return Me._thumbnail
		End Get
		Set
			If (Object.Equals(Me._thumbnail, value) = false) Then
				Me._thumbnail = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_itemName", DbType:="NVarChar(50)")>  _
	Public Property itemName() As String
		Get
			Return Me._itemName
		End Get
		Set
			If (String.Equals(Me._itemName, value) = false) Then
				Me._itemName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Brand", DbType:="VarChar(MAX)")>  _
	Public Property Brand() As String
		Get
			Return Me._Brand
		End Get
		Set
			If (String.Equals(Me._Brand, value) = false) Then
				Me._Brand = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_retailPrice", DbType:="Decimal(6,2)")>  _
	Public Property retailPrice() As System.Nullable(Of Decimal)
		Get
			Return Me._retailPrice
		End Get
		Set
			If (Me._retailPrice.Equals(value) = false) Then
				Me._retailPrice = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_packageSize", DbType:="VarChar(50)")>  _
	Public Property packageSize() As String
		Get
			Return Me._packageSize
		End Get
		Set
			If (String.Equals(Me._packageSize, value) = false) Then
				Me._packageSize = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_unitsInKit", DbType:="Int")>  _
	Public Property unitsInKit() As System.Nullable(Of Integer)
		Get
			Return Me._unitsInKit
		End Get
		Set
			If (Me._unitsInKit.Equals(value) = false) Then
				Me._unitsInKit = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QtyOnHand", DbType:="Int")>  _
	Public Property QtyOnHand() As System.Nullable(Of Integer)
		Get
			Return Me._QtyOnHand
		End Get
		Set
			If (Me._QtyOnHand.Equals(value) = false) Then
				Me._QtyOnHand = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetInvoiceBatchIDResult
	
	Private _Column1 As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="", Storage:="_Column1", DbType:="Int")>  _
	Public Property Column1() As System.Nullable(Of Integer)
		Get
			Return Me._Column1
		End Get
		Set
			If (Me._Column1.Equals(value) = false) Then
				Me._Column1 = value
			End If
		End Set
	End Property
End Class

Partial Public Class getInvoiceItemsResult
	
	Private _eventID As Integer
	
	Private _eventDate As System.Nullable(Of Date)
	
	Private _Location As String
	
	Private _EventType As String
	
	Private _startTime As System.Nullable(Of Date)
	
	Private _EndTime As System.Nullable(Of Date)
	
	Private _Suplier As String
	
	Private _Brands As String
	
	Private _Account As String
	
	Private _statusID As System.Nullable(Of Integer)
	
	Private _Hours As System.Nullable(Of Double)
	
	Private _Bonus As System.Nullable(Of Double)
	
	Private _Parking As System.Nullable(Of Double)
	
	Private _Sampling As System.Nullable(Of Double)
	
	Private _TotalLabor As System.Nullable(Of Double)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventDate", DbType:="SmallDateTime")>  _
	Public Property eventDate() As System.Nullable(Of Date)
		Get
			Return Me._eventDate
		End Get
		Set
			If (Me._eventDate.Equals(value) = false) Then
				Me._eventDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Location", DbType:="VarChar(50)")>  _
	Public Property Location() As String
		Get
			Return Me._Location
		End Get
		Set
			If (String.Equals(Me._Location, value) = false) Then
				Me._Location = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EventType", DbType:="VarChar(MAX)")>  _
	Public Property EventType() As String
		Get
			Return Me._EventType
		End Get
		Set
			If (String.Equals(Me._EventType, value) = false) Then
				Me._EventType = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_startTime", DbType:="SmallDateTime")>  _
	Public Property startTime() As System.Nullable(Of Date)
		Get
			Return Me._startTime
		End Get
		Set
			If (Me._startTime.Equals(value) = false) Then
				Me._startTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndTime", DbType:="SmallDateTime")>  _
	Public Property EndTime() As System.Nullable(Of Date)
		Get
			Return Me._EndTime
		End Get
		Set
			If (Me._EndTime.Equals(value) = false) Then
				Me._EndTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Suplier", DbType:="VarChar(MAX)")>  _
	Public Property Suplier() As String
		Get
			Return Me._Suplier
		End Get
		Set
			If (String.Equals(Me._Suplier, value) = false) Then
				Me._Suplier = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Brands", DbType:="VarChar(MAX)")>  _
	Public Property Brands() As String
		Get
			Return Me._Brands
		End Get
		Set
			If (String.Equals(Me._Brands, value) = false) Then
				Me._Brands = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Account", DbType:="VarChar(MAX)")>  _
	Public Property Account() As String
		Get
			Return Me._Account
		End Get
		Set
			If (String.Equals(Me._Account, value) = false) Then
				Me._Account = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_statusID", DbType:="Int")>  _
	Public Property statusID() As System.Nullable(Of Integer)
		Get
			Return Me._statusID
		End Get
		Set
			If (Me._statusID.Equals(value) = false) Then
				Me._statusID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Hours", DbType:="Float")>  _
	Public Property Hours() As System.Nullable(Of Double)
		Get
			Return Me._Hours
		End Get
		Set
			If (Me._Hours.Equals(value) = false) Then
				Me._Hours = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Bonus", DbType:="Float")>  _
	Public Property Bonus() As System.Nullable(Of Double)
		Get
			Return Me._Bonus
		End Get
		Set
			If (Me._Bonus.Equals(value) = false) Then
				Me._Bonus = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Parking", DbType:="Float")>  _
	Public Property Parking() As System.Nullable(Of Double)
		Get
			Return Me._Parking
		End Get
		Set
			If (Me._Parking.Equals(value) = false) Then
				Me._Parking = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sampling", DbType:="Float")>  _
	Public Property Sampling() As System.Nullable(Of Double)
		Get
			Return Me._Sampling
		End Get
		Set
			If (Me._Sampling.Equals(value) = false) Then
				Me._Sampling = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalLabor", DbType:="Float")>  _
	Public Property TotalLabor() As System.Nullable(Of Double)
		Get
			Return Me._TotalLabor
		End Get
		Set
			If (Me._TotalLabor.Equals(value) = false) Then
				Me._TotalLabor = value
			End If
		End Set
	End Property
End Class

Partial Public Class getInvoiceListByDateResult
	
	Private _invoiceID As Long
	
	Private _billingInvoiceID As System.Nullable(Of Long)
	
	Private _PO As String
	
	Private _clientID As System.Nullable(Of Integer)
	
	Private _supplierID As System.Nullable(Of Integer)
	
	Private _Supplier As String
	
	Private _invoiceDate As System.Nullable(Of Date)
	
	Private _dueDate As System.Nullable(Of Date)
	
	Private _status As String
	
	Private _amount As System.Nullable(Of Decimal)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_invoiceID", DbType:="BigInt NOT NULL")>  _
	Public Property invoiceID() As Long
		Get
			Return Me._invoiceID
		End Get
		Set
			If ((Me._invoiceID = value)  _
						= false) Then
				Me._invoiceID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_billingInvoiceID", DbType:="BigInt")>  _
	Public Property billingInvoiceID() As System.Nullable(Of Long)
		Get
			Return Me._billingInvoiceID
		End Get
		Set
			If (Me._billingInvoiceID.Equals(value) = false) Then
				Me._billingInvoiceID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PO", DbType:="NVarChar(50)")>  _
	Public Property PO() As String
		Get
			Return Me._PO
		End Get
		Set
			If (String.Equals(Me._PO, value) = false) Then
				Me._PO = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", DbType:="Int")>  _
	Public Property clientID() As System.Nullable(Of Integer)
		Get
			Return Me._clientID
		End Get
		Set
			If (Me._clientID.Equals(value) = false) Then
				Me._clientID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int")>  _
	Public Property supplierID() As System.Nullable(Of Integer)
		Get
			Return Me._supplierID
		End Get
		Set
			If (Me._supplierID.Equals(value) = false) Then
				Me._supplierID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Supplier", DbType:="VarChar(MAX)")>  _
	Public Property Supplier() As String
		Get
			Return Me._Supplier
		End Get
		Set
			If (String.Equals(Me._Supplier, value) = false) Then
				Me._Supplier = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_invoiceDate", DbType:="SmallDateTime")>  _
	Public Property invoiceDate() As System.Nullable(Of Date)
		Get
			Return Me._invoiceDate
		End Get
		Set
			If (Me._invoiceDate.Equals(value) = false) Then
				Me._invoiceDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dueDate", DbType:="SmallDateTime")>  _
	Public Property dueDate() As System.Nullable(Of Date)
		Get
			Return Me._dueDate
		End Get
		Set
			If (Me._dueDate.Equals(value) = false) Then
				Me._dueDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", DbType:="VarChar(50)")>  _
	Public Property status() As String
		Get
			Return Me._status
		End Get
		Set
			If (String.Equals(Me._status, value) = false) Then
				Me._status = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_amount", DbType:="Decimal(18,2)")>  _
	Public Property amount() As System.Nullable(Of Decimal)
		Get
			Return Me._amount
		End Get
		Set
			If (Me._amount.Equals(value) = false) Then
				Me._amount = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetLastHourChangeCountResult
	
	Private _Total As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Total", DbType:="Int")>  _
	Public Property Total() As System.Nullable(Of Integer)
		Get
			Return Me._Total
		End Get
		Set
			If (Me._Total.Equals(value) = false) Then
				Me._Total = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetLoggedInUserTotalsResult
	
	Private _Last_24_Hours As System.Nullable(Of Integer)
	
	Private __15minutes As System.Nullable(Of Integer)
	
	Private __30minutes As System.Nullable(Of Integer)
	
	Private _Difference As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Last 24 Hours]", Storage:="_Last_24_Hours", DbType:="Int")>  _
	Public Property Last_24_Hours() As System.Nullable(Of Integer)
		Get
			Return Me._Last_24_Hours
		End Get
		Set
			If (Me._Last_24_Hours.Equals(value) = false) Then
				Me._Last_24_Hours = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[15minutes]", Storage:="__15minutes", DbType:="Int")>  _
	Public Property _15minutes() As System.Nullable(Of Integer)
		Get
			Return Me.__15minutes
		End Get
		Set
			If (Me.__15minutes.Equals(value) = false) Then
				Me.__15minutes = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[30minutes]", Storage:="__30minutes", DbType:="Int")>  _
	Public Property _30minutes() As System.Nullable(Of Integer)
		Get
			Return Me.__30minutes
		End Get
		Set
			If (Me.__30minutes.Equals(value) = false) Then
				Me.__30minutes = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Difference", DbType:="Int")>  _
	Public Property Difference() As System.Nullable(Of Integer)
		Get
			Return Me._Difference
		End Get
		Set
			If (Me._Difference.Equals(value) = false) Then
				Me._Difference = value
			End If
		End Set
	End Property
End Class

Partial Public Class getMarketsByUserIDResult
	
	Private _marketID As Integer
	
	Private _marketName As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="Int NOT NULL")>  _
	Public Property marketID() As Integer
		Get
			Return Me._marketID
		End Get
		Set
			If ((Me._marketID = value)  _
						= false) Then
				Me._marketID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketName", DbType:="VarChar(50)")>  _
	Public Property marketName() As String
		Get
			Return Me._marketName
		End Get
		Set
			If (String.Equals(Me._marketName, value) = false) Then
				Me._marketName = value
			End If
		End Set
	End Property
End Class

Partial Public Class getMatchedLocationResult
	
	Private _accountName As String
	
	Private _accountID As Integer
	
	Private _Vpid As System.Nullable(Of Integer)
	
	Private _shortLatitude As String
	
	Private _shortLongitude As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountName", DbType:="VarChar(256)")>  _
	Public Property accountName() As String
		Get
			Return Me._accountName
		End Get
		Set
			If (String.Equals(Me._accountName, value) = false) Then
				Me._accountName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="Int NOT NULL")>  _
	Public Property accountID() As Integer
		Get
			Return Me._accountID
		End Get
		Set
			If ((Me._accountID = value)  _
						= false) Then
				Me._accountID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Vpid", DbType:="Int")>  _
	Public Property Vpid() As System.Nullable(Of Integer)
		Get
			Return Me._Vpid
		End Get
		Set
			If (Me._Vpid.Equals(value) = false) Then
				Me._Vpid = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_shortLatitude", DbType:="VarChar(30)")>  _
	Public Property shortLatitude() As String
		Get
			Return Me._shortLatitude
		End Get
		Set
			If (String.Equals(Me._shortLatitude, value) = false) Then
				Me._shortLatitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_shortLongitude", DbType:="VarChar(30)")>  _
	Public Property shortLongitude() As String
		Get
			Return Me._shortLongitude
		End Get
		Set
			If (String.Equals(Me._shortLongitude, value) = false) Then
				Me._shortLongitude = value
			End If
		End Set
	End Property
End Class

Partial Public Class getNeedInvoiceListByDateResult
	
	Private _eventID As Integer
	
	Private _Account As String
	
	Private _eventDate As System.Nullable(Of Date)
	
	Private _Supplier As String
	
	Private _Brands As String
	
	Private _CreatedBy As String
	
	Private _Source As String
	
	Private _requestedBy As String
	
	Private _purchaseOrderNumber As String
	
	Private _Market As String
	
	Private _statusID As System.Nullable(Of Integer)
	
	Private _Status As String
	
	Private _EventType As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Account", DbType:="VarChar(MAX)")>  _
	Public Property Account() As String
		Get
			Return Me._Account
		End Get
		Set
			If (String.Equals(Me._Account, value) = false) Then
				Me._Account = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventDate", DbType:="SmallDateTime")>  _
	Public Property eventDate() As System.Nullable(Of Date)
		Get
			Return Me._eventDate
		End Get
		Set
			If (Me._eventDate.Equals(value) = false) Then
				Me._eventDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Supplier", DbType:="VarChar(MAX)")>  _
	Public Property Supplier() As String
		Get
			Return Me._Supplier
		End Get
		Set
			If (String.Equals(Me._Supplier, value) = false) Then
				Me._Supplier = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Brands", DbType:="VarChar(MAX)")>  _
	Public Property Brands() As String
		Get
			Return Me._Brands
		End Get
		Set
			If (String.Equals(Me._Brands, value) = false) Then
				Me._Brands = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="VarChar(MAX)")>  _
	Public Property CreatedBy() As String
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (String.Equals(Me._CreatedBy, value) = false) Then
				Me._CreatedBy = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Source", DbType:="VarChar(9)")>  _
	Public Property Source() As String
		Get
			Return Me._Source
		End Get
		Set
			If (String.Equals(Me._Source, value) = false) Then
				Me._Source = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_requestedBy", DbType:="NVarChar(50)")>  _
	Public Property requestedBy() As String
		Get
			Return Me._requestedBy
		End Get
		Set
			If (String.Equals(Me._requestedBy, value) = false) Then
				Me._requestedBy = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_purchaseOrderNumber", DbType:="NVarChar(20)")>  _
	Public Property purchaseOrderNumber() As String
		Get
			Return Me._purchaseOrderNumber
		End Get
		Set
			If (String.Equals(Me._purchaseOrderNumber, value) = false) Then
				Me._purchaseOrderNumber = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Market", DbType:="VarChar(50)")>  _
	Public Property Market() As String
		Get
			Return Me._Market
		End Get
		Set
			If (String.Equals(Me._Market, value) = false) Then
				Me._Market = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_statusID", DbType:="Int")>  _
	Public Property statusID() As System.Nullable(Of Integer)
		Get
			Return Me._statusID
		End Get
		Set
			If (Me._statusID.Equals(value) = false) Then
				Me._statusID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="VarChar(50)")>  _
	Public Property Status() As String
		Get
			Return Me._Status
		End Get
		Set
			If (String.Equals(Me._Status, value) = false) Then
				Me._Status = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EventType", DbType:="VarChar(MAX)")>  _
	Public Property EventType() As String
		Get
			Return Me._EventType
		End Get
		Set
			If (String.Equals(Me._EventType, value) = false) Then
				Me._EventType = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetNeedsRecapEventsListByUserIDResult
	
	Private _eventID As Integer
	
	Private _eventDate As System.Nullable(Of Date)
	
	Private _eventTitle As String
	
	Private _statusName As String
	
	Private _brands As String
	
	Private _accountID As Integer
	
	Private _accountName As String
	
	Private _supplierName As String
	
	Private _startTime As System.Nullable(Of Date)
	
	Private _endTime As System.Nullable(Of Date)
	
	Private _userID As String
	
	Private _positionTitle As String
	
	Private _rate As System.Nullable(Of Decimal)
	
	Private _hours As System.Nullable(Of Integer)
	
	Private _Total As System.Nullable(Of Decimal)
	
	Private _recapStatus As System.Nullable(Of Integer)
	
	Private _EnableLink As String
	
	Private _EnableLabel As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventDate", DbType:="SmallDateTime")>  _
	Public Property eventDate() As System.Nullable(Of Date)
		Get
			Return Me._eventDate
		End Get
		Set
			If (Me._eventDate.Equals(value) = false) Then
				Me._eventDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTitle", DbType:="VarChar(1000)")>  _
	Public Property eventTitle() As String
		Get
			Return Me._eventTitle
		End Get
		Set
			If (String.Equals(Me._eventTitle, value) = false) Then
				Me._eventTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_statusName", DbType:="NVarChar(50)")>  _
	Public Property statusName() As String
		Get
			Return Me._statusName
		End Get
		Set
			If (String.Equals(Me._statusName, value) = false) Then
				Me._statusName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brands", DbType:="VarChar(MAX)")>  _
	Public Property brands() As String
		Get
			Return Me._brands
		End Get
		Set
			If (String.Equals(Me._brands, value) = false) Then
				Me._brands = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="Int NOT NULL")>  _
	Public Property accountID() As Integer
		Get
			Return Me._accountID
		End Get
		Set
			If ((Me._accountID = value)  _
						= false) Then
				Me._accountID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountName", DbType:="VarChar(256)")>  _
	Public Property accountName() As String
		Get
			Return Me._accountName
		End Get
		Set
			If (String.Equals(Me._accountName, value) = false) Then
				Me._accountName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierName", DbType:="NVarChar(50)")>  _
	Public Property supplierName() As String
		Get
			Return Me._supplierName
		End Get
		Set
			If (String.Equals(Me._supplierName, value) = false) Then
				Me._supplierName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_startTime", DbType:="SmallDateTime")>  _
	Public Property startTime() As System.Nullable(Of Date)
		Get
			Return Me._startTime
		End Get
		Set
			If (Me._startTime.Equals(value) = false) Then
				Me._startTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_endTime", DbType:="SmallDateTime")>  _
	Public Property endTime() As System.Nullable(Of Date)
		Get
			Return Me._endTime
		End Get
		Set
			If (Me._endTime.Equals(value) = false) Then
				Me._endTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me._userID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_positionTitle", DbType:="NVarChar(50)")>  _
	Public Property positionTitle() As String
		Get
			Return Me._positionTitle
		End Get
		Set
			If (String.Equals(Me._positionTitle, value) = false) Then
				Me._positionTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rate", DbType:="Decimal(18,2)")>  _
	Public Property rate() As System.Nullable(Of Decimal)
		Get
			Return Me._rate
		End Get
		Set
			If (Me._rate.Equals(value) = false) Then
				Me._rate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hours", DbType:="Int")>  _
	Public Property hours() As System.Nullable(Of Integer)
		Get
			Return Me._hours
		End Get
		Set
			If (Me._hours.Equals(value) = false) Then
				Me._hours = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Total", DbType:="Decimal(29,2)")>  _
	Public Property Total() As System.Nullable(Of Decimal)
		Get
			Return Me._Total
		End Get
		Set
			If (Me._Total.Equals(value) = false) Then
				Me._Total = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_recapStatus", DbType:="Int")>  _
	Public Property recapStatus() As System.Nullable(Of Integer)
		Get
			Return Me._recapStatus
		End Get
		Set
			If (Me._recapStatus.Equals(value) = false) Then
				Me._recapStatus = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EnableLink", DbType:="VarChar(5) NOT NULL", CanBeNull:=false)>  _
	Public Property EnableLink() As String
		Get
			Return Me._EnableLink
		End Get
		Set
			If (String.Equals(Me._EnableLink, value) = false) Then
				Me._EnableLink = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EnableLabel", DbType:="VarChar(5) NOT NULL", CanBeNull:=false)>  _
	Public Property EnableLabel() As String
		Get
			Return Me._EnableLabel
		End Get
		Set
			If (String.Equals(Me._EnableLabel, value) = false) Then
				Me._EnableLabel = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetNewRegistrationsResult
	
	Private _Last_24_Hours As System.Nullable(Of Integer)
	
	Private __15minutes As System.Nullable(Of Integer)
	
	Private __30minutes As System.Nullable(Of Integer)
	
	Private _Difference As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Last 24 Hours]", Storage:="_Last_24_Hours", DbType:="Int")>  _
	Public Property Last_24_Hours() As System.Nullable(Of Integer)
		Get
			Return Me._Last_24_Hours
		End Get
		Set
			If (Me._Last_24_Hours.Equals(value) = false) Then
				Me._Last_24_Hours = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[15minutes]", Storage:="__15minutes", DbType:="Int")>  _
	Public Property _15minutes() As System.Nullable(Of Integer)
		Get
			Return Me.__15minutes
		End Get
		Set
			If (Me.__15minutes.Equals(value) = false) Then
				Me.__15minutes = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[30minutes]", Storage:="__30minutes", DbType:="Int")>  _
	Public Property _30minutes() As System.Nullable(Of Integer)
		Get
			Return Me.__30minutes
		End Get
		Set
			If (Me.__30minutes.Equals(value) = false) Then
				Me.__30minutes = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Difference", DbType:="Int")>  _
	Public Property Difference() As System.Nullable(Of Integer)
		Get
			Return Me._Difference
		End Get
		Set
			If (Me._Difference.Equals(value) = false) Then
				Me._Difference = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetNewVisitsTotalsResult
	
	Private _Last_24_Hours As System.Nullable(Of Integer)
	
	Private __15minutes As System.Nullable(Of Integer)
	
	Private __30minutes As System.Nullable(Of Integer)
	
	Private _Difference As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Last 24 Hours]", Storage:="_Last_24_Hours", DbType:="Int")>  _
	Public Property Last_24_Hours() As System.Nullable(Of Integer)
		Get
			Return Me._Last_24_Hours
		End Get
		Set
			If (Me._Last_24_Hours.Equals(value) = false) Then
				Me._Last_24_Hours = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[15minutes]", Storage:="__15minutes", DbType:="Int")>  _
	Public Property _15minutes() As System.Nullable(Of Integer)
		Get
			Return Me.__15minutes
		End Get
		Set
			If (Me.__15minutes.Equals(value) = false) Then
				Me.__15minutes = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[30minutes]", Storage:="__30minutes", DbType:="Int")>  _
	Public Property _30minutes() As System.Nullable(Of Integer)
		Get
			Return Me.__30minutes
		End Get
		Set
			If (Me.__30minutes.Equals(value) = false) Then
				Me.__30minutes = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Difference", DbType:="Int")>  _
	Public Property Difference() As System.Nullable(Of Integer)
		Get
			Return Me._Difference
		End Get
		Set
			If (Me._Difference.Equals(value) = false) Then
				Me._Difference = value
			End If
		End Set
	End Property
End Class

Partial Public Class getOffPremisePosItemsByBrandResult
	
	Private _brandID As Integer
	
	Private _eventID As System.Nullable(Of Integer)
	
	Private _itemID As Integer
	
	Private _itemName As String
	
	Private _unitsInKit As System.Nullable(Of Integer)
	
	Private _packageShippingSize As String
	
	Private _packageSize As String
	
	Private _packageShippingWeight As String
	
	Private _retailPrice As System.Nullable(Of Decimal)
	
	Private _returnToInventory As System.Nullable(Of Boolean)
	
	Private _brandName As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandID", DbType:="Int NOT NULL")>  _
	Public Property brandID() As Integer
		Get
			Return Me._brandID
		End Get
		Set
			If ((Me._brandID = value)  _
						= false) Then
				Me._brandID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int")>  _
	Public Property eventID() As System.Nullable(Of Integer)
		Get
			Return Me._eventID
		End Get
		Set
			If (Me._eventID.Equals(value) = false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_itemID", DbType:="Int NOT NULL")>  _
	Public Property itemID() As Integer
		Get
			Return Me._itemID
		End Get
		Set
			If ((Me._itemID = value)  _
						= false) Then
				Me._itemID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_itemName", DbType:="NVarChar(50)")>  _
	Public Property itemName() As String
		Get
			Return Me._itemName
		End Get
		Set
			If (String.Equals(Me._itemName, value) = false) Then
				Me._itemName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_unitsInKit", DbType:="Int")>  _
	Public Property unitsInKit() As System.Nullable(Of Integer)
		Get
			Return Me._unitsInKit
		End Get
		Set
			If (Me._unitsInKit.Equals(value) = false) Then
				Me._unitsInKit = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_packageShippingSize", DbType:="VarChar(50)")>  _
	Public Property packageShippingSize() As String
		Get
			Return Me._packageShippingSize
		End Get
		Set
			If (String.Equals(Me._packageShippingSize, value) = false) Then
				Me._packageShippingSize = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_packageSize", DbType:="VarChar(50)")>  _
	Public Property packageSize() As String
		Get
			Return Me._packageSize
		End Get
		Set
			If (String.Equals(Me._packageSize, value) = false) Then
				Me._packageSize = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_packageShippingWeight", DbType:="VarChar(50)")>  _
	Public Property packageShippingWeight() As String
		Get
			Return Me._packageShippingWeight
		End Get
		Set
			If (String.Equals(Me._packageShippingWeight, value) = false) Then
				Me._packageShippingWeight = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_retailPrice", DbType:="Decimal(6,2)")>  _
	Public Property retailPrice() As System.Nullable(Of Decimal)
		Get
			Return Me._retailPrice
		End Get
		Set
			If (Me._retailPrice.Equals(value) = false) Then
				Me._retailPrice = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_returnToInventory", DbType:="Bit")>  _
	Public Property returnToInventory() As System.Nullable(Of Boolean)
		Get
			Return Me._returnToInventory
		End Get
		Set
			If (Me._returnToInventory.Equals(value) = false) Then
				Me._returnToInventory = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandName", DbType:="VarChar(MAX)")>  _
	Public Property brandName() As String
		Get
			Return Me._brandName
		End Get
		Set
			If (String.Equals(Me._brandName, value) = false) Then
				Me._brandName = value
			End If
		End Set
	End Property
End Class

Partial Public Class getOnPremisePosItemsByBrandResult
	
	Private _brandID As Integer
	
	Private _eventID As System.Nullable(Of Integer)
	
	Private _itemID As Integer
	
	Private _itemName As String
	
	Private _unitsInKit As System.Nullable(Of Integer)
	
	Private _packageShippingSize As String
	
	Private _packageSize As String
	
	Private _packageShippingWeight As String
	
	Private _retailPrice As System.Nullable(Of Decimal)
	
	Private _returnToInventory As System.Nullable(Of Boolean)
	
	Private _brandName As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandID", DbType:="Int NOT NULL")>  _
	Public Property brandID() As Integer
		Get
			Return Me._brandID
		End Get
		Set
			If ((Me._brandID = value)  _
						= false) Then
				Me._brandID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int")>  _
	Public Property eventID() As System.Nullable(Of Integer)
		Get
			Return Me._eventID
		End Get
		Set
			If (Me._eventID.Equals(value) = false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_itemID", DbType:="Int NOT NULL")>  _
	Public Property itemID() As Integer
		Get
			Return Me._itemID
		End Get
		Set
			If ((Me._itemID = value)  _
						= false) Then
				Me._itemID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_itemName", DbType:="NVarChar(50)")>  _
	Public Property itemName() As String
		Get
			Return Me._itemName
		End Get
		Set
			If (String.Equals(Me._itemName, value) = false) Then
				Me._itemName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_unitsInKit", DbType:="Int")>  _
	Public Property unitsInKit() As System.Nullable(Of Integer)
		Get
			Return Me._unitsInKit
		End Get
		Set
			If (Me._unitsInKit.Equals(value) = false) Then
				Me._unitsInKit = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_packageShippingSize", DbType:="VarChar(50)")>  _
	Public Property packageShippingSize() As String
		Get
			Return Me._packageShippingSize
		End Get
		Set
			If (String.Equals(Me._packageShippingSize, value) = false) Then
				Me._packageShippingSize = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_packageSize", DbType:="VarChar(50)")>  _
	Public Property packageSize() As String
		Get
			Return Me._packageSize
		End Get
		Set
			If (String.Equals(Me._packageSize, value) = false) Then
				Me._packageSize = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_packageShippingWeight", DbType:="VarChar(50)")>  _
	Public Property packageShippingWeight() As String
		Get
			Return Me._packageShippingWeight
		End Get
		Set
			If (String.Equals(Me._packageShippingWeight, value) = false) Then
				Me._packageShippingWeight = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_retailPrice", DbType:="Decimal(6,2)")>  _
	Public Property retailPrice() As System.Nullable(Of Decimal)
		Get
			Return Me._retailPrice
		End Get
		Set
			If (Me._retailPrice.Equals(value) = false) Then
				Me._retailPrice = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_returnToInventory", DbType:="Bit")>  _
	Public Property returnToInventory() As System.Nullable(Of Boolean)
		Get
			Return Me._returnToInventory
		End Get
		Set
			If (Me._returnToInventory.Equals(value) = false) Then
				Me._returnToInventory = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandName", DbType:="VarChar(MAX)")>  _
	Public Property brandName() As String
		Get
			Return Me._brandName
		End Get
		Set
			If (String.Equals(Me._brandName, value) = false) Then
				Me._brandName = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetPastEventsByAmbassadorsByUserIDResult
	
	Private _eventID As Integer
	
	Private _eventDate As System.Nullable(Of Date)
	
	Private _eventTitle As String
	
	Private _statusName As String
	
	Private _brands As String
	
	Private _accountID As Integer
	
	Private _accountName As String
	
	Private _supplierName As String
	
	Private _startTime As System.Nullable(Of Date)
	
	Private _endTime As System.Nullable(Of Date)
	
	Private _userID As String
	
	Private _positionTitle As String
	
	Private _rate As System.Nullable(Of Decimal)
	
	Private _hours As System.Nullable(Of Integer)
	
	Private _Total As System.Nullable(Of Decimal)
	
	Private _EnableLink As String
	
	Private _EnableLabel As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventDate", DbType:="SmallDateTime")>  _
	Public Property eventDate() As System.Nullable(Of Date)
		Get
			Return Me._eventDate
		End Get
		Set
			If (Me._eventDate.Equals(value) = false) Then
				Me._eventDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTitle", DbType:="VarChar(1000)")>  _
	Public Property eventTitle() As String
		Get
			Return Me._eventTitle
		End Get
		Set
			If (String.Equals(Me._eventTitle, value) = false) Then
				Me._eventTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_statusName", DbType:="NVarChar(50)")>  _
	Public Property statusName() As String
		Get
			Return Me._statusName
		End Get
		Set
			If (String.Equals(Me._statusName, value) = false) Then
				Me._statusName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brands", DbType:="VarChar(MAX)")>  _
	Public Property brands() As String
		Get
			Return Me._brands
		End Get
		Set
			If (String.Equals(Me._brands, value) = false) Then
				Me._brands = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="Int NOT NULL")>  _
	Public Property accountID() As Integer
		Get
			Return Me._accountID
		End Get
		Set
			If ((Me._accountID = value)  _
						= false) Then
				Me._accountID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountName", DbType:="VarChar(256)")>  _
	Public Property accountName() As String
		Get
			Return Me._accountName
		End Get
		Set
			If (String.Equals(Me._accountName, value) = false) Then
				Me._accountName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierName", DbType:="NVarChar(50)")>  _
	Public Property supplierName() As String
		Get
			Return Me._supplierName
		End Get
		Set
			If (String.Equals(Me._supplierName, value) = false) Then
				Me._supplierName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_startTime", DbType:="SmallDateTime")>  _
	Public Property startTime() As System.Nullable(Of Date)
		Get
			Return Me._startTime
		End Get
		Set
			If (Me._startTime.Equals(value) = false) Then
				Me._startTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_endTime", DbType:="SmallDateTime")>  _
	Public Property endTime() As System.Nullable(Of Date)
		Get
			Return Me._endTime
		End Get
		Set
			If (Me._endTime.Equals(value) = false) Then
				Me._endTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me._userID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_positionTitle", DbType:="NVarChar(50)")>  _
	Public Property positionTitle() As String
		Get
			Return Me._positionTitle
		End Get
		Set
			If (String.Equals(Me._positionTitle, value) = false) Then
				Me._positionTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rate", DbType:="Decimal(18,2)")>  _
	Public Property rate() As System.Nullable(Of Decimal)
		Get
			Return Me._rate
		End Get
		Set
			If (Me._rate.Equals(value) = false) Then
				Me._rate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hours", DbType:="Int")>  _
	Public Property hours() As System.Nullable(Of Integer)
		Get
			Return Me._hours
		End Get
		Set
			If (Me._hours.Equals(value) = false) Then
				Me._hours = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Total", DbType:="Decimal(29,2)")>  _
	Public Property Total() As System.Nullable(Of Decimal)
		Get
			Return Me._Total
		End Get
		Set
			If (Me._Total.Equals(value) = false) Then
				Me._Total = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EnableLink", DbType:="VarChar(5) NOT NULL", CanBeNull:=false)>  _
	Public Property EnableLink() As String
		Get
			Return Me._EnableLink
		End Get
		Set
			If (String.Equals(Me._EnableLink, value) = false) Then
				Me._EnableLink = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EnableLabel", DbType:="VarChar(5) NOT NULL", CanBeNull:=false)>  _
	Public Property EnableLabel() As String
		Get
			Return Me._EnableLabel
		End Get
		Set
			If (String.Equals(Me._EnableLabel, value) = false) Then
				Me._EnableLabel = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetPayrollSummaryForReportResult
	
	Private _RequirementID As Integer
	
	Private _eventID As Integer
	
	Private _userName As String
	
	Private _FullName As String
	
	Private _positionTitle As String
	
	Private _statusID As System.Nullable(Of Integer)
	
	Private _rate As System.Nullable(Of Decimal)
	
	Private _hours As System.Nullable(Of Double)
	
	Private _Total As System.Nullable(Of Double)
	
	Private _paymentStatus As String
	
	Private _paymentDate As System.Nullable(Of Date)
	
	Private _paymentID As System.Nullable(Of Integer)
	
	Private _expenses As System.Nullable(Of Decimal)
	
	Private _TotalAmount As System.Nullable(Of Double)
	
	Private _startTime As System.Nullable(Of Date)
	
	Private _endTime As System.Nullable(Of Date)
	
	Private _clientID As System.Nullable(Of Integer)
	
	Private _supplierID As System.Nullable(Of Integer)
	
	Private _SupplierName As String
	
	Private _eventTitle As String
	
	Private _eventDate As System.Nullable(Of Date)
	
	Private _marketID As System.Nullable(Of Integer)
	
	Private _marketName As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RequirementID", DbType:="Int NOT NULL")>  _
	Public Property RequirementID() As Integer
		Get
			Return Me._RequirementID
		End Get
		Set
			If ((Me._RequirementID = value)  _
						= false) Then
				Me._RequirementID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userName", DbType:="NVarChar(50)")>  _
	Public Property userName() As String
		Get
			Return Me._userName
		End Get
		Set
			If (String.Equals(Me._userName, value) = false) Then
				Me._userName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FullName", DbType:="NVarChar(101)")>  _
	Public Property FullName() As String
		Get
			Return Me._FullName
		End Get
		Set
			If (String.Equals(Me._FullName, value) = false) Then
				Me._FullName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_positionTitle", DbType:="NVarChar(50)")>  _
	Public Property positionTitle() As String
		Get
			Return Me._positionTitle
		End Get
		Set
			If (String.Equals(Me._positionTitle, value) = false) Then
				Me._positionTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_statusID", DbType:="Int")>  _
	Public Property statusID() As System.Nullable(Of Integer)
		Get
			Return Me._statusID
		End Get
		Set
			If (Me._statusID.Equals(value) = false) Then
				Me._statusID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rate", DbType:="Decimal(18,2)")>  _
	Public Property rate() As System.Nullable(Of Decimal)
		Get
			Return Me._rate
		End Get
		Set
			If (Me._rate.Equals(value) = false) Then
				Me._rate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hours", DbType:="Float")>  _
	Public Property hours() As System.Nullable(Of Double)
		Get
			Return Me._hours
		End Get
		Set
			If (Me._hours.Equals(value) = false) Then
				Me._hours = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Total", DbType:="Float")>  _
	Public Property Total() As System.Nullable(Of Double)
		Get
			Return Me._Total
		End Get
		Set
			If (Me._Total.Equals(value) = false) Then
				Me._Total = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentStatus", DbType:="VarChar(50)")>  _
	Public Property paymentStatus() As String
		Get
			Return Me._paymentStatus
		End Get
		Set
			If (String.Equals(Me._paymentStatus, value) = false) Then
				Me._paymentStatus = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentDate", DbType:="SmallDateTime")>  _
	Public Property paymentDate() As System.Nullable(Of Date)
		Get
			Return Me._paymentDate
		End Get
		Set
			If (Me._paymentDate.Equals(value) = false) Then
				Me._paymentDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentID", DbType:="Int")>  _
	Public Property paymentID() As System.Nullable(Of Integer)
		Get
			Return Me._paymentID
		End Get
		Set
			If (Me._paymentID.Equals(value) = false) Then
				Me._paymentID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_expenses", DbType:="Money")>  _
	Public Property expenses() As System.Nullable(Of Decimal)
		Get
			Return Me._expenses
		End Get
		Set
			If (Me._expenses.Equals(value) = false) Then
				Me._expenses = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalAmount", DbType:="Float")>  _
	Public Property TotalAmount() As System.Nullable(Of Double)
		Get
			Return Me._TotalAmount
		End Get
		Set
			If (Me._TotalAmount.Equals(value) = false) Then
				Me._TotalAmount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_startTime", DbType:="SmallDateTime")>  _
	Public Property startTime() As System.Nullable(Of Date)
		Get
			Return Me._startTime
		End Get
		Set
			If (Me._startTime.Equals(value) = false) Then
				Me._startTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_endTime", DbType:="SmallDateTime")>  _
	Public Property endTime() As System.Nullable(Of Date)
		Get
			Return Me._endTime
		End Get
		Set
			If (Me._endTime.Equals(value) = false) Then
				Me._endTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", DbType:="Int")>  _
	Public Property clientID() As System.Nullable(Of Integer)
		Get
			Return Me._clientID
		End Get
		Set
			If (Me._clientID.Equals(value) = false) Then
				Me._clientID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int")>  _
	Public Property supplierID() As System.Nullable(Of Integer)
		Get
			Return Me._supplierID
		End Get
		Set
			If (Me._supplierID.Equals(value) = false) Then
				Me._supplierID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SupplierName", DbType:="VarChar(MAX)")>  _
	Public Property SupplierName() As String
		Get
			Return Me._SupplierName
		End Get
		Set
			If (String.Equals(Me._SupplierName, value) = false) Then
				Me._SupplierName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTitle", DbType:="VarChar(1000)")>  _
	Public Property eventTitle() As String
		Get
			Return Me._eventTitle
		End Get
		Set
			If (String.Equals(Me._eventTitle, value) = false) Then
				Me._eventTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventDate", DbType:="SmallDateTime")>  _
	Public Property eventDate() As System.Nullable(Of Date)
		Get
			Return Me._eventDate
		End Get
		Set
			If (Me._eventDate.Equals(value) = false) Then
				Me._eventDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="Int")>  _
	Public Property marketID() As System.Nullable(Of Integer)
		Get
			Return Me._marketID
		End Get
		Set
			If (Me._marketID.Equals(value) = false) Then
				Me._marketID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketName", DbType:="VarChar(50)")>  _
	Public Property marketName() As String
		Get
			Return Me._marketName
		End Get
		Set
			If (String.Equals(Me._marketName, value) = false) Then
				Me._marketName = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetPayrollSummaryForReport_BARetcResult
	
	Private _RequirementID As Integer
	
	Private _eventID As Integer
	
	Private _userName As String
	
	Private _FullName As String
	
	Private _positionTitle As String
	
	Private _statusID As System.Nullable(Of Integer)
	
	Private _rate As System.Nullable(Of Decimal)
	
	Private _hours As System.Nullable(Of Double)
	
	Private _Total As System.Nullable(Of Double)
	
	Private _paymentStatus As String
	
	Private _paymentDate As System.Nullable(Of Date)
	
	Private _paymentID As System.Nullable(Of Integer)
	
	Private _expenses As System.Nullable(Of Decimal)
	
	Private _TotalAmount As System.Nullable(Of Double)
	
	Private _startTime As System.Nullable(Of Date)
	
	Private _endTime As System.Nullable(Of Date)
	
	Private _clientID As System.Nullable(Of Integer)
	
	Private _supplierID As System.Nullable(Of Integer)
	
	Private _SupplierName As String
	
	Private _eventTitle As String
	
	Private _eventDate As System.Nullable(Of Date)
	
	Private _marketID As System.Nullable(Of Integer)
	
	Private _marketName As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RequirementID", DbType:="Int NOT NULL")>  _
	Public Property RequirementID() As Integer
		Get
			Return Me._RequirementID
		End Get
		Set
			If ((Me._RequirementID = value)  _
						= false) Then
				Me._RequirementID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userName", DbType:="NVarChar(50)")>  _
	Public Property userName() As String
		Get
			Return Me._userName
		End Get
		Set
			If (String.Equals(Me._userName, value) = false) Then
				Me._userName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FullName", DbType:="NVarChar(101)")>  _
	Public Property FullName() As String
		Get
			Return Me._FullName
		End Get
		Set
			If (String.Equals(Me._FullName, value) = false) Then
				Me._FullName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_positionTitle", DbType:="NVarChar(50)")>  _
	Public Property positionTitle() As String
		Get
			Return Me._positionTitle
		End Get
		Set
			If (String.Equals(Me._positionTitle, value) = false) Then
				Me._positionTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_statusID", DbType:="Int")>  _
	Public Property statusID() As System.Nullable(Of Integer)
		Get
			Return Me._statusID
		End Get
		Set
			If (Me._statusID.Equals(value) = false) Then
				Me._statusID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rate", DbType:="Decimal(18,2)")>  _
	Public Property rate() As System.Nullable(Of Decimal)
		Get
			Return Me._rate
		End Get
		Set
			If (Me._rate.Equals(value) = false) Then
				Me._rate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hours", DbType:="Float")>  _
	Public Property hours() As System.Nullable(Of Double)
		Get
			Return Me._hours
		End Get
		Set
			If (Me._hours.Equals(value) = false) Then
				Me._hours = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Total", DbType:="Float")>  _
	Public Property Total() As System.Nullable(Of Double)
		Get
			Return Me._Total
		End Get
		Set
			If (Me._Total.Equals(value) = false) Then
				Me._Total = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentStatus", DbType:="VarChar(50)")>  _
	Public Property paymentStatus() As String
		Get
			Return Me._paymentStatus
		End Get
		Set
			If (String.Equals(Me._paymentStatus, value) = false) Then
				Me._paymentStatus = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentDate", DbType:="SmallDateTime")>  _
	Public Property paymentDate() As System.Nullable(Of Date)
		Get
			Return Me._paymentDate
		End Get
		Set
			If (Me._paymentDate.Equals(value) = false) Then
				Me._paymentDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentID", DbType:="Int")>  _
	Public Property paymentID() As System.Nullable(Of Integer)
		Get
			Return Me._paymentID
		End Get
		Set
			If (Me._paymentID.Equals(value) = false) Then
				Me._paymentID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_expenses", DbType:="Money")>  _
	Public Property expenses() As System.Nullable(Of Decimal)
		Get
			Return Me._expenses
		End Get
		Set
			If (Me._expenses.Equals(value) = false) Then
				Me._expenses = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalAmount", DbType:="Float")>  _
	Public Property TotalAmount() As System.Nullable(Of Double)
		Get
			Return Me._TotalAmount
		End Get
		Set
			If (Me._TotalAmount.Equals(value) = false) Then
				Me._TotalAmount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_startTime", DbType:="SmallDateTime")>  _
	Public Property startTime() As System.Nullable(Of Date)
		Get
			Return Me._startTime
		End Get
		Set
			If (Me._startTime.Equals(value) = false) Then
				Me._startTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_endTime", DbType:="SmallDateTime")>  _
	Public Property endTime() As System.Nullable(Of Date)
		Get
			Return Me._endTime
		End Get
		Set
			If (Me._endTime.Equals(value) = false) Then
				Me._endTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", DbType:="Int")>  _
	Public Property clientID() As System.Nullable(Of Integer)
		Get
			Return Me._clientID
		End Get
		Set
			If (Me._clientID.Equals(value) = false) Then
				Me._clientID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int")>  _
	Public Property supplierID() As System.Nullable(Of Integer)
		Get
			Return Me._supplierID
		End Get
		Set
			If (Me._supplierID.Equals(value) = false) Then
				Me._supplierID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SupplierName", DbType:="VarChar(MAX)")>  _
	Public Property SupplierName() As String
		Get
			Return Me._SupplierName
		End Get
		Set
			If (String.Equals(Me._SupplierName, value) = false) Then
				Me._SupplierName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTitle", DbType:="VarChar(1000)")>  _
	Public Property eventTitle() As String
		Get
			Return Me._eventTitle
		End Get
		Set
			If (String.Equals(Me._eventTitle, value) = false) Then
				Me._eventTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventDate", DbType:="SmallDateTime")>  _
	Public Property eventDate() As System.Nullable(Of Date)
		Get
			Return Me._eventDate
		End Get
		Set
			If (Me._eventDate.Equals(value) = false) Then
				Me._eventDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="Int")>  _
	Public Property marketID() As System.Nullable(Of Integer)
		Get
			Return Me._marketID
		End Get
		Set
			If (Me._marketID.Equals(value) = false) Then
				Me._marketID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketName", DbType:="VarChar(50)")>  _
	Public Property marketName() As String
		Get
			Return Me._marketName
		End Get
		Set
			If (String.Equals(Me._marketName, value) = false) Then
				Me._marketName = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetPayrollSummaryForReport_GalloResult
	
	Private _RequirementID As Integer
	
	Private _eventID As Integer
	
	Private _userName As String
	
	Private _FullName As String
	
	Private _positionTitle As String
	
	Private _statusID As System.Nullable(Of Integer)
	
	Private _rate As System.Nullable(Of Decimal)
	
	Private _hours As System.Nullable(Of Double)
	
	Private _Total As System.Nullable(Of Double)
	
	Private _paymentStatus As String
	
	Private _paymentDate As System.Nullable(Of Date)
	
	Private _paymentID As System.Nullable(Of Integer)
	
	Private _expenses As System.Nullable(Of Decimal)
	
	Private _TotalAmount As System.Nullable(Of Double)
	
	Private _startTime As System.Nullable(Of Date)
	
	Private _endTime As System.Nullable(Of Date)
	
	Private _clientID As System.Nullable(Of Integer)
	
	Private _supplierID As System.Nullable(Of Integer)
	
	Private _SupplierName As String
	
	Private _eventTitle As String
	
	Private _eventDate As System.Nullable(Of Date)
	
	Private _marketID As System.Nullable(Of Integer)
	
	Private _marketName As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RequirementID", DbType:="Int NOT NULL")>  _
	Public Property RequirementID() As Integer
		Get
			Return Me._RequirementID
		End Get
		Set
			If ((Me._RequirementID = value)  _
						= false) Then
				Me._RequirementID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userName", DbType:="NVarChar(50)")>  _
	Public Property userName() As String
		Get
			Return Me._userName
		End Get
		Set
			If (String.Equals(Me._userName, value) = false) Then
				Me._userName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FullName", DbType:="NVarChar(101)")>  _
	Public Property FullName() As String
		Get
			Return Me._FullName
		End Get
		Set
			If (String.Equals(Me._FullName, value) = false) Then
				Me._FullName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_positionTitle", DbType:="NVarChar(50)")>  _
	Public Property positionTitle() As String
		Get
			Return Me._positionTitle
		End Get
		Set
			If (String.Equals(Me._positionTitle, value) = false) Then
				Me._positionTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_statusID", DbType:="Int")>  _
	Public Property statusID() As System.Nullable(Of Integer)
		Get
			Return Me._statusID
		End Get
		Set
			If (Me._statusID.Equals(value) = false) Then
				Me._statusID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rate", DbType:="Decimal(18,2)")>  _
	Public Property rate() As System.Nullable(Of Decimal)
		Get
			Return Me._rate
		End Get
		Set
			If (Me._rate.Equals(value) = false) Then
				Me._rate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hours", DbType:="Float")>  _
	Public Property hours() As System.Nullable(Of Double)
		Get
			Return Me._hours
		End Get
		Set
			If (Me._hours.Equals(value) = false) Then
				Me._hours = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Total", DbType:="Float")>  _
	Public Property Total() As System.Nullable(Of Double)
		Get
			Return Me._Total
		End Get
		Set
			If (Me._Total.Equals(value) = false) Then
				Me._Total = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentStatus", DbType:="VarChar(50)")>  _
	Public Property paymentStatus() As String
		Get
			Return Me._paymentStatus
		End Get
		Set
			If (String.Equals(Me._paymentStatus, value) = false) Then
				Me._paymentStatus = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentDate", DbType:="SmallDateTime")>  _
	Public Property paymentDate() As System.Nullable(Of Date)
		Get
			Return Me._paymentDate
		End Get
		Set
			If (Me._paymentDate.Equals(value) = false) Then
				Me._paymentDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentID", DbType:="Int")>  _
	Public Property paymentID() As System.Nullable(Of Integer)
		Get
			Return Me._paymentID
		End Get
		Set
			If (Me._paymentID.Equals(value) = false) Then
				Me._paymentID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_expenses", DbType:="Money")>  _
	Public Property expenses() As System.Nullable(Of Decimal)
		Get
			Return Me._expenses
		End Get
		Set
			If (Me._expenses.Equals(value) = false) Then
				Me._expenses = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalAmount", DbType:="Float")>  _
	Public Property TotalAmount() As System.Nullable(Of Double)
		Get
			Return Me._TotalAmount
		End Get
		Set
			If (Me._TotalAmount.Equals(value) = false) Then
				Me._TotalAmount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_startTime", DbType:="SmallDateTime")>  _
	Public Property startTime() As System.Nullable(Of Date)
		Get
			Return Me._startTime
		End Get
		Set
			If (Me._startTime.Equals(value) = false) Then
				Me._startTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_endTime", DbType:="SmallDateTime")>  _
	Public Property endTime() As System.Nullable(Of Date)
		Get
			Return Me._endTime
		End Get
		Set
			If (Me._endTime.Equals(value) = false) Then
				Me._endTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", DbType:="Int")>  _
	Public Property clientID() As System.Nullable(Of Integer)
		Get
			Return Me._clientID
		End Get
		Set
			If (Me._clientID.Equals(value) = false) Then
				Me._clientID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int")>  _
	Public Property supplierID() As System.Nullable(Of Integer)
		Get
			Return Me._supplierID
		End Get
		Set
			If (Me._supplierID.Equals(value) = false) Then
				Me._supplierID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SupplierName", DbType:="VarChar(MAX)")>  _
	Public Property SupplierName() As String
		Get
			Return Me._SupplierName
		End Get
		Set
			If (String.Equals(Me._SupplierName, value) = false) Then
				Me._SupplierName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTitle", DbType:="VarChar(1000)")>  _
	Public Property eventTitle() As String
		Get
			Return Me._eventTitle
		End Get
		Set
			If (String.Equals(Me._eventTitle, value) = false) Then
				Me._eventTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventDate", DbType:="SmallDateTime")>  _
	Public Property eventDate() As System.Nullable(Of Date)
		Get
			Return Me._eventDate
		End Get
		Set
			If (Me._eventDate.Equals(value) = false) Then
				Me._eventDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="Int")>  _
	Public Property marketID() As System.Nullable(Of Integer)
		Get
			Return Me._marketID
		End Get
		Set
			If (Me._marketID.Equals(value) = false) Then
				Me._marketID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketName", DbType:="VarChar(50)")>  _
	Public Property marketName() As String
		Get
			Return Me._marketName
		End Get
		Set
			If (String.Equals(Me._marketName, value) = false) Then
				Me._marketName = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetPayrollSummaryForReport_StoliResult
	
	Private _RequirementID As Integer
	
	Private _eventID As Integer
	
	Private _userName As String
	
	Private _FullName As String
	
	Private _positionTitle As String
	
	Private _statusID As System.Nullable(Of Integer)
	
	Private _rate As System.Nullable(Of Decimal)
	
	Private _hours As System.Nullable(Of Double)
	
	Private _Total As System.Nullable(Of Double)
	
	Private _paymentStatus As String
	
	Private _paymentDate As System.Nullable(Of Date)
	
	Private _paymentID As System.Nullable(Of Integer)
	
	Private _expenses As System.Nullable(Of Decimal)
	
	Private _TotalAmount As System.Nullable(Of Double)
	
	Private _startTime As System.Nullable(Of Date)
	
	Private _endTime As System.Nullable(Of Date)
	
	Private _clientID As System.Nullable(Of Integer)
	
	Private _supplierID As System.Nullable(Of Integer)
	
	Private _SupplierName As String
	
	Private _eventTitle As String
	
	Private _eventDate As System.Nullable(Of Date)
	
	Private _marketID As System.Nullable(Of Integer)
	
	Private _marketName As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RequirementID", DbType:="Int NOT NULL")>  _
	Public Property RequirementID() As Integer
		Get
			Return Me._RequirementID
		End Get
		Set
			If ((Me._RequirementID = value)  _
						= false) Then
				Me._RequirementID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userName", DbType:="NVarChar(50)")>  _
	Public Property userName() As String
		Get
			Return Me._userName
		End Get
		Set
			If (String.Equals(Me._userName, value) = false) Then
				Me._userName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FullName", DbType:="NVarChar(101)")>  _
	Public Property FullName() As String
		Get
			Return Me._FullName
		End Get
		Set
			If (String.Equals(Me._FullName, value) = false) Then
				Me._FullName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_positionTitle", DbType:="NVarChar(50)")>  _
	Public Property positionTitle() As String
		Get
			Return Me._positionTitle
		End Get
		Set
			If (String.Equals(Me._positionTitle, value) = false) Then
				Me._positionTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_statusID", DbType:="Int")>  _
	Public Property statusID() As System.Nullable(Of Integer)
		Get
			Return Me._statusID
		End Get
		Set
			If (Me._statusID.Equals(value) = false) Then
				Me._statusID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rate", DbType:="Decimal(18,2)")>  _
	Public Property rate() As System.Nullable(Of Decimal)
		Get
			Return Me._rate
		End Get
		Set
			If (Me._rate.Equals(value) = false) Then
				Me._rate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hours", DbType:="Float")>  _
	Public Property hours() As System.Nullable(Of Double)
		Get
			Return Me._hours
		End Get
		Set
			If (Me._hours.Equals(value) = false) Then
				Me._hours = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Total", DbType:="Float")>  _
	Public Property Total() As System.Nullable(Of Double)
		Get
			Return Me._Total
		End Get
		Set
			If (Me._Total.Equals(value) = false) Then
				Me._Total = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentStatus", DbType:="VarChar(50)")>  _
	Public Property paymentStatus() As String
		Get
			Return Me._paymentStatus
		End Get
		Set
			If (String.Equals(Me._paymentStatus, value) = false) Then
				Me._paymentStatus = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentDate", DbType:="SmallDateTime")>  _
	Public Property paymentDate() As System.Nullable(Of Date)
		Get
			Return Me._paymentDate
		End Get
		Set
			If (Me._paymentDate.Equals(value) = false) Then
				Me._paymentDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentID", DbType:="Int")>  _
	Public Property paymentID() As System.Nullable(Of Integer)
		Get
			Return Me._paymentID
		End Get
		Set
			If (Me._paymentID.Equals(value) = false) Then
				Me._paymentID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_expenses", DbType:="Money")>  _
	Public Property expenses() As System.Nullable(Of Decimal)
		Get
			Return Me._expenses
		End Get
		Set
			If (Me._expenses.Equals(value) = false) Then
				Me._expenses = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalAmount", DbType:="Float")>  _
	Public Property TotalAmount() As System.Nullable(Of Double)
		Get
			Return Me._TotalAmount
		End Get
		Set
			If (Me._TotalAmount.Equals(value) = false) Then
				Me._TotalAmount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_startTime", DbType:="SmallDateTime")>  _
	Public Property startTime() As System.Nullable(Of Date)
		Get
			Return Me._startTime
		End Get
		Set
			If (Me._startTime.Equals(value) = false) Then
				Me._startTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_endTime", DbType:="SmallDateTime")>  _
	Public Property endTime() As System.Nullable(Of Date)
		Get
			Return Me._endTime
		End Get
		Set
			If (Me._endTime.Equals(value) = false) Then
				Me._endTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", DbType:="Int")>  _
	Public Property clientID() As System.Nullable(Of Integer)
		Get
			Return Me._clientID
		End Get
		Set
			If (Me._clientID.Equals(value) = false) Then
				Me._clientID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int")>  _
	Public Property supplierID() As System.Nullable(Of Integer)
		Get
			Return Me._supplierID
		End Get
		Set
			If (Me._supplierID.Equals(value) = false) Then
				Me._supplierID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SupplierName", DbType:="VarChar(MAX)")>  _
	Public Property SupplierName() As String
		Get
			Return Me._SupplierName
		End Get
		Set
			If (String.Equals(Me._SupplierName, value) = false) Then
				Me._SupplierName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTitle", DbType:="VarChar(1000)")>  _
	Public Property eventTitle() As String
		Get
			Return Me._eventTitle
		End Get
		Set
			If (String.Equals(Me._eventTitle, value) = false) Then
				Me._eventTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventDate", DbType:="SmallDateTime")>  _
	Public Property eventDate() As System.Nullable(Of Date)
		Get
			Return Me._eventDate
		End Get
		Set
			If (Me._eventDate.Equals(value) = false) Then
				Me._eventDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="Int")>  _
	Public Property marketID() As System.Nullable(Of Integer)
		Get
			Return Me._marketID
		End Get
		Set
			If (Me._marketID.Equals(value) = false) Then
				Me._marketID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketName", DbType:="VarChar(50)")>  _
	Public Property marketName() As String
		Get
			Return Me._marketName
		End Get
		Set
			If (String.Equals(Me._marketName, value) = false) Then
				Me._marketName = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetPayrollSummaryForReport_WindyHillResult
	
	Private _RequirementID As Integer
	
	Private _eventID As Integer
	
	Private _userName As String
	
	Private _FullName As String
	
	Private _positionTitle As String
	
	Private _statusID As System.Nullable(Of Integer)
	
	Private _rate As System.Nullable(Of Decimal)
	
	Private _hours As System.Nullable(Of Double)
	
	Private _Total As System.Nullable(Of Double)
	
	Private _paymentStatus As String
	
	Private _paymentDate As System.Nullable(Of Date)
	
	Private _paymentID As System.Nullable(Of Integer)
	
	Private _expenses As System.Nullable(Of Decimal)
	
	Private _TotalAmount As System.Nullable(Of Double)
	
	Private _startTime As System.Nullable(Of Date)
	
	Private _endTime As System.Nullable(Of Date)
	
	Private _clientID As System.Nullable(Of Integer)
	
	Private _supplierID As System.Nullable(Of Integer)
	
	Private _SupplierName As String
	
	Private _eventTitle As String
	
	Private _eventDate As System.Nullable(Of Date)
	
	Private _marketID As System.Nullable(Of Integer)
	
	Private _marketName As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RequirementID", DbType:="Int NOT NULL")>  _
	Public Property RequirementID() As Integer
		Get
			Return Me._RequirementID
		End Get
		Set
			If ((Me._RequirementID = value)  _
						= false) Then
				Me._RequirementID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userName", DbType:="NVarChar(50)")>  _
	Public Property userName() As String
		Get
			Return Me._userName
		End Get
		Set
			If (String.Equals(Me._userName, value) = false) Then
				Me._userName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FullName", DbType:="NVarChar(101)")>  _
	Public Property FullName() As String
		Get
			Return Me._FullName
		End Get
		Set
			If (String.Equals(Me._FullName, value) = false) Then
				Me._FullName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_positionTitle", DbType:="NVarChar(50)")>  _
	Public Property positionTitle() As String
		Get
			Return Me._positionTitle
		End Get
		Set
			If (String.Equals(Me._positionTitle, value) = false) Then
				Me._positionTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_statusID", DbType:="Int")>  _
	Public Property statusID() As System.Nullable(Of Integer)
		Get
			Return Me._statusID
		End Get
		Set
			If (Me._statusID.Equals(value) = false) Then
				Me._statusID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rate", DbType:="Decimal(18,2)")>  _
	Public Property rate() As System.Nullable(Of Decimal)
		Get
			Return Me._rate
		End Get
		Set
			If (Me._rate.Equals(value) = false) Then
				Me._rate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hours", DbType:="Float")>  _
	Public Property hours() As System.Nullable(Of Double)
		Get
			Return Me._hours
		End Get
		Set
			If (Me._hours.Equals(value) = false) Then
				Me._hours = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Total", DbType:="Float")>  _
	Public Property Total() As System.Nullable(Of Double)
		Get
			Return Me._Total
		End Get
		Set
			If (Me._Total.Equals(value) = false) Then
				Me._Total = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentStatus", DbType:="VarChar(50)")>  _
	Public Property paymentStatus() As String
		Get
			Return Me._paymentStatus
		End Get
		Set
			If (String.Equals(Me._paymentStatus, value) = false) Then
				Me._paymentStatus = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentDate", DbType:="SmallDateTime")>  _
	Public Property paymentDate() As System.Nullable(Of Date)
		Get
			Return Me._paymentDate
		End Get
		Set
			If (Me._paymentDate.Equals(value) = false) Then
				Me._paymentDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentID", DbType:="Int")>  _
	Public Property paymentID() As System.Nullable(Of Integer)
		Get
			Return Me._paymentID
		End Get
		Set
			If (Me._paymentID.Equals(value) = false) Then
				Me._paymentID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_expenses", DbType:="Money")>  _
	Public Property expenses() As System.Nullable(Of Decimal)
		Get
			Return Me._expenses
		End Get
		Set
			If (Me._expenses.Equals(value) = false) Then
				Me._expenses = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalAmount", DbType:="Float")>  _
	Public Property TotalAmount() As System.Nullable(Of Double)
		Get
			Return Me._TotalAmount
		End Get
		Set
			If (Me._TotalAmount.Equals(value) = false) Then
				Me._TotalAmount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_startTime", DbType:="SmallDateTime")>  _
	Public Property startTime() As System.Nullable(Of Date)
		Get
			Return Me._startTime
		End Get
		Set
			If (Me._startTime.Equals(value) = false) Then
				Me._startTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_endTime", DbType:="SmallDateTime")>  _
	Public Property endTime() As System.Nullable(Of Date)
		Get
			Return Me._endTime
		End Get
		Set
			If (Me._endTime.Equals(value) = false) Then
				Me._endTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", DbType:="Int")>  _
	Public Property clientID() As System.Nullable(Of Integer)
		Get
			Return Me._clientID
		End Get
		Set
			If (Me._clientID.Equals(value) = false) Then
				Me._clientID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int")>  _
	Public Property supplierID() As System.Nullable(Of Integer)
		Get
			Return Me._supplierID
		End Get
		Set
			If (Me._supplierID.Equals(value) = false) Then
				Me._supplierID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SupplierName", DbType:="VarChar(MAX)")>  _
	Public Property SupplierName() As String
		Get
			Return Me._SupplierName
		End Get
		Set
			If (String.Equals(Me._SupplierName, value) = false) Then
				Me._SupplierName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTitle", DbType:="VarChar(1000)")>  _
	Public Property eventTitle() As String
		Get
			Return Me._eventTitle
		End Get
		Set
			If (String.Equals(Me._eventTitle, value) = false) Then
				Me._eventTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventDate", DbType:="SmallDateTime")>  _
	Public Property eventDate() As System.Nullable(Of Date)
		Get
			Return Me._eventDate
		End Get
		Set
			If (Me._eventDate.Equals(value) = false) Then
				Me._eventDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="Int")>  _
	Public Property marketID() As System.Nullable(Of Integer)
		Get
			Return Me._marketID
		End Get
		Set
			If (Me._marketID.Equals(value) = false) Then
				Me._marketID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketName", DbType:="VarChar(50)")>  _
	Public Property marketName() As String
		Get
			Return Me._marketName
		End Get
		Set
			If (String.Equals(Me._marketName, value) = false) Then
				Me._marketName = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetRecapCount_ChangeLastHourResult
	
	Private _Total As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Total", DbType:="Int")>  _
	Public Property Total() As System.Nullable(Of Integer)
		Get
			Return Me._Total
		End Get
		Set
			If (Me._Total.Equals(value) = false) Then
				Me._Total = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetRecapQuestionsForReportBuilderResult
	
	Private _brandRecapQuestionID As Integer
	
	Private _brandID As Integer
	
	Private _question As String
	
	Private _questionType As String
	
	Private _choices As String
	
	Private _displayOption As String
	
	Private _lines As String
	
	Private _description As String
	
	Private _yes_noDefaultValue As String
	
	Private _numberDecimalPlace As System.Nullable(Of Integer)
	
	Private _numberDefaultValue As String
	
	Private _showPercentage As System.Nullable(Of Boolean)
	
	Private _dateFormat As String
	
	Private _dateDefaultValue As String
	
	Private _timeFormat As String
	
	Private _dateDisplay As String
	
	Private _sortOrder As System.Nullable(Of Integer)
	
	Private _desiredOrder As System.Nullable(Of Integer)
	
	Private _required As System.Nullable(Of Boolean)
	
	Private _digit As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandRecapQuestionID", DbType:="Int NOT NULL")>  _
	Public Property brandRecapQuestionID() As Integer
		Get
			Return Me._brandRecapQuestionID
		End Get
		Set
			If ((Me._brandRecapQuestionID = value)  _
						= false) Then
				Me._brandRecapQuestionID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandID", DbType:="Int NOT NULL")>  _
	Public Property brandID() As Integer
		Get
			Return Me._brandID
		End Get
		Set
			If ((Me._brandID = value)  _
						= false) Then
				Me._brandID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_question", DbType:="NVarChar(500)")>  _
	Public Property question() As String
		Get
			Return Me._question
		End Get
		Set
			If (String.Equals(Me._question, value) = false) Then
				Me._question = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_questionType", DbType:="VarChar(50)")>  _
	Public Property questionType() As String
		Get
			Return Me._questionType
		End Get
		Set
			If (String.Equals(Me._questionType, value) = false) Then
				Me._questionType = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_choices", DbType:="NVarChar(MAX)")>  _
	Public Property choices() As String
		Get
			Return Me._choices
		End Get
		Set
			If (String.Equals(Me._choices, value) = false) Then
				Me._choices = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_displayOption", DbType:="NVarChar(50)")>  _
	Public Property displayOption() As String
		Get
			Return Me._displayOption
		End Get
		Set
			If (String.Equals(Me._displayOption, value) = false) Then
				Me._displayOption = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lines", DbType:="VarChar(50)")>  _
	Public Property lines() As String
		Get
			Return Me._lines
		End Get
		Set
			If (String.Equals(Me._lines, value) = false) Then
				Me._lines = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_description", DbType:="NVarChar(2000)")>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me._description = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[yes/noDefaultValue]", Storage:="_yes_noDefaultValue", DbType:="NVarChar(50)")>  _
	Public Property yes_noDefaultValue() As String
		Get
			Return Me._yes_noDefaultValue
		End Get
		Set
			If (String.Equals(Me._yes_noDefaultValue, value) = false) Then
				Me._yes_noDefaultValue = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_numberDecimalPlace", DbType:="Int")>  _
	Public Property numberDecimalPlace() As System.Nullable(Of Integer)
		Get
			Return Me._numberDecimalPlace
		End Get
		Set
			If (Me._numberDecimalPlace.Equals(value) = false) Then
				Me._numberDecimalPlace = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_numberDefaultValue", DbType:="VarChar(50)")>  _
	Public Property numberDefaultValue() As String
		Get
			Return Me._numberDefaultValue
		End Get
		Set
			If (String.Equals(Me._numberDefaultValue, value) = false) Then
				Me._numberDefaultValue = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_showPercentage", DbType:="Bit")>  _
	Public Property showPercentage() As System.Nullable(Of Boolean)
		Get
			Return Me._showPercentage
		End Get
		Set
			If (Me._showPercentage.Equals(value) = false) Then
				Me._showPercentage = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateFormat", DbType:="NVarChar(50)")>  _
	Public Property dateFormat() As String
		Get
			Return Me._dateFormat
		End Get
		Set
			If (String.Equals(Me._dateFormat, value) = false) Then
				Me._dateFormat = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateDefaultValue", DbType:="NVarChar(50)")>  _
	Public Property dateDefaultValue() As String
		Get
			Return Me._dateDefaultValue
		End Get
		Set
			If (String.Equals(Me._dateDefaultValue, value) = false) Then
				Me._dateDefaultValue = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_timeFormat", DbType:="NVarChar(50)")>  _
	Public Property timeFormat() As String
		Get
			Return Me._timeFormat
		End Get
		Set
			If (String.Equals(Me._timeFormat, value) = false) Then
				Me._timeFormat = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateDisplay", DbType:="NVarChar(50)")>  _
	Public Property dateDisplay() As String
		Get
			Return Me._dateDisplay
		End Get
		Set
			If (String.Equals(Me._dateDisplay, value) = false) Then
				Me._dateDisplay = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sortOrder", DbType:="Int")>  _
	Public Property sortOrder() As System.Nullable(Of Integer)
		Get
			Return Me._sortOrder
		End Get
		Set
			If (Me._sortOrder.Equals(value) = false) Then
				Me._sortOrder = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_desiredOrder", DbType:="Int")>  _
	Public Property desiredOrder() As System.Nullable(Of Integer)
		Get
			Return Me._desiredOrder
		End Get
		Set
			If (Me._desiredOrder.Equals(value) = false) Then
				Me._desiredOrder = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_required", DbType:="Bit")>  _
	Public Property required() As System.Nullable(Of Boolean)
		Get
			Return Me._required
		End Get
		Set
			If (Me._required.Equals(value) = false) Then
				Me._required = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_digit", DbType:="Int")>  _
	Public Property digit() As System.Nullable(Of Integer)
		Get
			Return Me._digit
		End Get
		Set
			If (Me._digit.Equals(value) = false) Then
				Me._digit = value
			End If
		End Set
	End Property
End Class

Partial Public Class getRecapResultsbyDateRangeResult
	
	Private _eventRecapQuestionID As Integer
	
	Private _brandID As System.Nullable(Of Integer)
	
	Private _brandName As String
	
	Private _eventID As System.Nullable(Of Integer)
	
	Private _supplierID As System.Nullable(Of Integer)
	
	Private _supplierName As String
	
	Private _total As System.Nullable(Of Integer)
	
	Private _eventDate As System.Nullable(Of Date)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventRecapQuestionID", DbType:="Int NOT NULL")>  _
	Public Property eventRecapQuestionID() As Integer
		Get
			Return Me._eventRecapQuestionID
		End Get
		Set
			If ((Me._eventRecapQuestionID = value)  _
						= false) Then
				Me._eventRecapQuestionID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandID", DbType:="Int")>  _
	Public Property brandID() As System.Nullable(Of Integer)
		Get
			Return Me._brandID
		End Get
		Set
			If (Me._brandID.Equals(value) = false) Then
				Me._brandID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandName", DbType:="NVarChar(256)")>  _
	Public Property brandName() As String
		Get
			Return Me._brandName
		End Get
		Set
			If (String.Equals(Me._brandName, value) = false) Then
				Me._brandName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int")>  _
	Public Property eventID() As System.Nullable(Of Integer)
		Get
			Return Me._eventID
		End Get
		Set
			If (Me._eventID.Equals(value) = false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int")>  _
	Public Property supplierID() As System.Nullable(Of Integer)
		Get
			Return Me._supplierID
		End Get
		Set
			If (Me._supplierID.Equals(value) = false) Then
				Me._supplierID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierName", DbType:="NVarChar(50)")>  _
	Public Property supplierName() As String
		Get
			Return Me._supplierName
		End Get
		Set
			If (String.Equals(Me._supplierName, value) = false) Then
				Me._supplierName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_total", DbType:="Int")>  _
	Public Property total() As System.Nullable(Of Integer)
		Get
			Return Me._total
		End Get
		Set
			If (Me._total.Equals(value) = false) Then
				Me._total = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventDate", DbType:="SmallDateTime")>  _
	Public Property eventDate() As System.Nullable(Of Date)
		Get
			Return Me._eventDate
		End Get
		Set
			If (Me._eventDate.Equals(value) = false) Then
				Me._eventDate = value
			End If
		End Set
	End Property
End Class

Partial Public Class getRecapSummaryForChartbySupplierResult
	
	Private _brandName As String
	
	Private _Event As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandName", DbType:="NVarChar(256)")>  _
	Public Property brandName() As String
		Get
			Return Me._brandName
		End Get
		Set
			If (String.Equals(Me._brandName, value) = false) Then
				Me._brandName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Event", Storage:="_Event", DbType:="Int")>  _
	Public Property [Event]() As System.Nullable(Of Integer)
		Get
			Return Me._Event
		End Get
		Set
			If (Me._Event.Equals(value) = false) Then
				Me._Event = value
			End If
		End Set
	End Property
End Class

Partial Public Class getRecapSummaryTotalsForChartbySupplierResult
	
	Private _brandID As Integer
	
	Private _Column1 As String
	
	Private _Events As System.Nullable(Of Integer)
	
	Private _Sampled As System.Nullable(Of Integer)
	
	Private _BottlesSold As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandID", DbType:="Int NOT NULL")>  _
	Public Property brandID() As Integer
		Get
			Return Me._brandID
		End Get
		Set
			If ((Me._brandID = value)  _
						= false) Then
				Me._brandID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="", Storage:="_Column1", DbType:="VarChar(MAX)")>  _
	Public Property Column1() As String
		Get
			Return Me._Column1
		End Get
		Set
			If (String.Equals(Me._Column1, value) = false) Then
				Me._Column1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Events", DbType:="Int")>  _
	Public Property Events() As System.Nullable(Of Integer)
		Get
			Return Me._Events
		End Get
		Set
			If (Me._Events.Equals(value) = false) Then
				Me._Events = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sampled", DbType:="Int")>  _
	Public Property Sampled() As System.Nullable(Of Integer)
		Get
			Return Me._Sampled
		End Get
		Set
			If (Me._Sampled.Equals(value) = false) Then
				Me._Sampled = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BottlesSold", DbType:="Int")>  _
	Public Property BottlesSold() As System.Nullable(Of Integer)
		Get
			Return Me._BottlesSold
		End Get
		Set
			If (Me._BottlesSold.Equals(value) = false) Then
				Me._BottlesSold = value
			End If
		End Set
	End Property
End Class

Partial Public Class getRecapWeeklyConversionRatebyDateRangeResult
	
	Private _week As System.Nullable(Of Integer)
	
	Private _TOTAL As System.Nullable(Of Integer)
	
	Private _SOLD As System.Nullable(Of Integer)
	
	Private _Conversion As System.Nullable(Of Double)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_week", DbType:="Int")>  _
	Public Property week() As System.Nullable(Of Integer)
		Get
			Return Me._week
		End Get
		Set
			If (Me._week.Equals(value) = false) Then
				Me._week = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TOTAL", DbType:="Int")>  _
	Public Property TOTAL() As System.Nullable(Of Integer)
		Get
			Return Me._TOTAL
		End Get
		Set
			If (Me._TOTAL.Equals(value) = false) Then
				Me._TOTAL = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SOLD", DbType:="Int")>  _
	Public Property SOLD() As System.Nullable(Of Integer)
		Get
			Return Me._SOLD
		End Get
		Set
			If (Me._SOLD.Equals(value) = false) Then
				Me._SOLD = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Conversion", DbType:="Float")>  _
	Public Property Conversion() As System.Nullable(Of Double)
		Get
			Return Me._Conversion
		End Get
		Set
			If (Me._Conversion.Equals(value) = false) Then
				Me._Conversion = value
			End If
		End Set
	End Property
End Class

Partial Public Class getRecapWeeklyEstimatedRevenueResult
	
	Private _week As System.Nullable(Of Integer)
	
	Private _TOTAL As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_week", DbType:="Int")>  _
	Public Property week() As System.Nullable(Of Integer)
		Get
			Return Me._week
		End Get
		Set
			If (Me._week.Equals(value) = false) Then
				Me._week = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TOTAL", DbType:="Int")>  _
	Public Property TOTAL() As System.Nullable(Of Integer)
		Get
			Return Me._TOTAL
		End Get
		Set
			If (Me._TOTAL.Equals(value) = false) Then
				Me._TOTAL = value
			End If
		End Set
	End Property
End Class

Partial Public Class getRecapWeeklyTotalsbyDateRangeResult
	
	Private _week As System.Nullable(Of Integer)
	
	Private _TOTAL As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_week", DbType:="Int")>  _
	Public Property week() As System.Nullable(Of Integer)
		Get
			Return Me._week
		End Get
		Set
			If (Me._week.Equals(value) = false) Then
				Me._week = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TOTAL", DbType:="Int")>  _
	Public Property TOTAL() As System.Nullable(Of Integer)
		Get
			Return Me._TOTAL
		End Get
		Set
			If (Me._TOTAL.Equals(value) = false) Then
				Me._TOTAL = value
			End If
		End Set
	End Property
End Class

Partial Public Class getReportByUserIDResult
	
	Private _reportID As Integer
	
	Private _reportTitle As String
	
	Private _supplierID As System.Nullable(Of Integer)
	
	Private _supplierName As String
	
	Private _modifiedBy As String
	
	Private _modifiedDate As System.Nullable(Of Date)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_reportID", DbType:="Int NOT NULL")>  _
	Public Property reportID() As Integer
		Get
			Return Me._reportID
		End Get
		Set
			If ((Me._reportID = value)  _
						= false) Then
				Me._reportID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_reportTitle", DbType:="NVarChar(255)")>  _
	Public Property reportTitle() As String
		Get
			Return Me._reportTitle
		End Get
		Set
			If (String.Equals(Me._reportTitle, value) = false) Then
				Me._reportTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int")>  _
	Public Property supplierID() As System.Nullable(Of Integer)
		Get
			Return Me._supplierID
		End Get
		Set
			If (Me._supplierID.Equals(value) = false) Then
				Me._supplierID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierName", DbType:="VarChar(MAX)")>  _
	Public Property supplierName() As String
		Get
			Return Me._supplierName
		End Get
		Set
			If (String.Equals(Me._supplierName, value) = false) Then
				Me._supplierName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_modifiedBy", DbType:="VarChar(MAX)")>  _
	Public Property modifiedBy() As String
		Get
			Return Me._modifiedBy
		End Get
		Set
			If (String.Equals(Me._modifiedBy, value) = false) Then
				Me._modifiedBy = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_modifiedDate", DbType:="DateTime")>  _
	Public Property modifiedDate() As System.Nullable(Of Date)
		Get
			Return Me._modifiedDate
		End Get
		Set
			If (Me._modifiedDate.Equals(value) = false) Then
				Me._modifiedDate = value
			End If
		End Set
	End Property
End Class

Partial Public Class getReportByUserIDAndClientIDResult
	
	Private _reportID As Integer
	
	Private _reportTitle As String
	
	Private _supplierID As System.Nullable(Of Integer)
	
	Private _supplierName As String
	
	Private _modifiedBy As String
	
	Private _modifiedDate As System.Nullable(Of Date)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_reportID", DbType:="Int NOT NULL")>  _
	Public Property reportID() As Integer
		Get
			Return Me._reportID
		End Get
		Set
			If ((Me._reportID = value)  _
						= false) Then
				Me._reportID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_reportTitle", DbType:="NVarChar(255)")>  _
	Public Property reportTitle() As String
		Get
			Return Me._reportTitle
		End Get
		Set
			If (String.Equals(Me._reportTitle, value) = false) Then
				Me._reportTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int")>  _
	Public Property supplierID() As System.Nullable(Of Integer)
		Get
			Return Me._supplierID
		End Get
		Set
			If (Me._supplierID.Equals(value) = false) Then
				Me._supplierID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierName", DbType:="VarChar(MAX)")>  _
	Public Property supplierName() As String
		Get
			Return Me._supplierName
		End Get
		Set
			If (String.Equals(Me._supplierName, value) = false) Then
				Me._supplierName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_modifiedBy", DbType:="VarChar(MAX)")>  _
	Public Property modifiedBy() As String
		Get
			Return Me._modifiedBy
		End Get
		Set
			If (String.Equals(Me._modifiedBy, value) = false) Then
				Me._modifiedBy = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_modifiedDate", DbType:="DateTime")>  _
	Public Property modifiedDate() As System.Nullable(Of Date)
		Get
			Return Me._modifiedDate
		End Get
		Set
			If (Me._modifiedDate.Equals(value) = false) Then
				Me._modifiedDate = value
			End If
		End Set
	End Property
End Class

Partial Public Class getShippingCostsResult
	
	Private _kitID As Integer
	
	Private _shipTo As String
	
	Private _ShippingVendorName As String
	
	Private _shippingCity As String
	
	Private _shippingState As String
	
	Private _supplierName As String
	
	Private _shippingCost As System.Nullable(Of Decimal)
	
	Private _handlingFee As System.Nullable(Of Decimal)
	
	Private _Total As System.Nullable(Of Decimal)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_kitID", DbType:="Int NOT NULL")>  _
	Public Property kitID() As Integer
		Get
			Return Me._kitID
		End Get
		Set
			If ((Me._kitID = value)  _
						= false) Then
				Me._kitID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_shipTo", DbType:="NVarChar(50)")>  _
	Public Property shipTo() As String
		Get
			Return Me._shipTo
		End Get
		Set
			If (String.Equals(Me._shipTo, value) = false) Then
				Me._shipTo = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShippingVendorName", DbType:="NVarChar(256)")>  _
	Public Property ShippingVendorName() As String
		Get
			Return Me._ShippingVendorName
		End Get
		Set
			If (String.Equals(Me._ShippingVendorName, value) = false) Then
				Me._ShippingVendorName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_shippingCity", DbType:="NVarChar(50)")>  _
	Public Property shippingCity() As String
		Get
			Return Me._shippingCity
		End Get
		Set
			If (String.Equals(Me._shippingCity, value) = false) Then
				Me._shippingCity = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_shippingState", DbType:="NVarChar(50)")>  _
	Public Property shippingState() As String
		Get
			Return Me._shippingState
		End Get
		Set
			If (String.Equals(Me._shippingState, value) = false) Then
				Me._shippingState = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierName", DbType:="NVarChar(50)")>  _
	Public Property supplierName() As String
		Get
			Return Me._supplierName
		End Get
		Set
			If (String.Equals(Me._supplierName, value) = false) Then
				Me._supplierName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_shippingCost", DbType:="Decimal(6,2)")>  _
	Public Property shippingCost() As System.Nullable(Of Decimal)
		Get
			Return Me._shippingCost
		End Get
		Set
			If (Me._shippingCost.Equals(value) = false) Then
				Me._shippingCost = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_handlingFee", DbType:="Decimal(6,2)")>  _
	Public Property handlingFee() As System.Nullable(Of Decimal)
		Get
			Return Me._handlingFee
		End Get
		Set
			If (Me._handlingFee.Equals(value) = false) Then
				Me._handlingFee = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Total", DbType:="Decimal(7,2)")>  _
	Public Property Total() As System.Nullable(Of Decimal)
		Get
			Return Me._Total
		End Get
		Set
			If (Me._Total.Equals(value) = false) Then
				Me._Total = value
			End If
		End Set
	End Property
End Class

Partial Public Class getSpuppliersbyBrandResult
	
	Private _supplierID As Integer
	
	Private _supplierName As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int NOT NULL")>  _
	Public Property supplierID() As Integer
		Get
			Return Me._supplierID
		End Get
		Set
			If ((Me._supplierID = value)  _
						= false) Then
				Me._supplierID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierName", DbType:="NVarChar(50)")>  _
	Public Property supplierName() As String
		Get
			Return Me._supplierName
		End Get
		Set
			If (String.Equals(Me._supplierName, value) = false) Then
				Me._supplierName = value
			End If
		End Set
	End Property
End Class

Partial Public Class getStaffClientResult
	
	Private _userID As String
	
	Private _clientID As Integer
	
	Private _clientName As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me._userID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", DbType:="Int NOT NULL")>  _
	Public Property clientID() As Integer
		Get
			Return Me._clientID
		End Get
		Set
			If ((Me._clientID = value)  _
						= false) Then
				Me._clientID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property clientName() As String
		Get
			Return Me._clientName
		End Get
		Set
			If (String.Equals(Me._clientName, value) = false) Then
				Me._clientName = value
			End If
		End Set
	End Property
End Class

Partial Public Class getStaffMarketResult
	
	Private _userID As String
	
	Private _marketID As Integer
	
	Private _marketName As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me._userID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="Int NOT NULL")>  _
	Public Property marketID() As Integer
		Get
			Return Me._marketID
		End Get
		Set
			If ((Me._marketID = value)  _
						= false) Then
				Me._marketID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketName", DbType:="VarChar(50)")>  _
	Public Property marketName() As String
		Get
			Return Me._marketName
		End Get
		Set
			If (String.Equals(Me._marketName, value) = false) Then
				Me._marketName = value
			End If
		End Set
	End Property
End Class

Partial Public Class getStaffSuppliersResult
	
	Private _userID As String
	
	Private _supplierID As Integer
	
	Private _supplierName As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me._userID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int NOT NULL")>  _
	Public Property supplierID() As Integer
		Get
			Return Me._supplierID
		End Get
		Set
			If ((Me._supplierID = value)  _
						= false) Then
				Me._supplierID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierName", DbType:="NVarChar(50)")>  _
	Public Property supplierName() As String
		Get
			Return Me._supplierName
		End Get
		Set
			If (String.Equals(Me._supplierName, value) = false) Then
				Me._supplierName = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetSupplierBudgetResultResult
	
	Private _supplierBudgetQuestionResultID As Integer
	
	Private _eventID As System.Nullable(Of Integer)
	
	Private _question As String
	
	Private _fieldType As String
	
	Private _order As System.Nullable(Of Integer)
	
	Private _answer As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierBudgetQuestionResultID", DbType:="Int NOT NULL")>  _
	Public Property supplierBudgetQuestionResultID() As Integer
		Get
			Return Me._supplierBudgetQuestionResultID
		End Get
		Set
			If ((Me._supplierBudgetQuestionResultID = value)  _
						= false) Then
				Me._supplierBudgetQuestionResultID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int")>  _
	Public Property eventID() As System.Nullable(Of Integer)
		Get
			Return Me._eventID
		End Get
		Set
			If (Me._eventID.Equals(value) = false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_question", DbType:="VarChar(256)")>  _
	Public Property question() As String
		Get
			Return Me._question
		End Get
		Set
			If (String.Equals(Me._question, value) = false) Then
				Me._question = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fieldType", DbType:="VarChar(50)")>  _
	Public Property fieldType() As String
		Get
			Return Me._fieldType
		End Get
		Set
			If (String.Equals(Me._fieldType, value) = false) Then
				Me._fieldType = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_order", DbType:="Int")>  _
	Public Property [order]() As System.Nullable(Of Integer)
		Get
			Return Me._order
		End Get
		Set
			If (Me._order.Equals(value) = false) Then
				Me._order = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_answer", DbType:="VarChar(MAX)")>  _
	Public Property answer() As String
		Get
			Return Me._answer
		End Get
		Set
			If (String.Equals(Me._answer, value) = false) Then
				Me._answer = value
			End If
		End Set
	End Property
End Class

Partial Public Class getSuppliersbyBrandIDResult
	
	Private _supplierID As Integer
	
	Private _supplierName As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int NOT NULL")>  _
	Public Property supplierID() As Integer
		Get
			Return Me._supplierID
		End Get
		Set
			If ((Me._supplierID = value)  _
						= false) Then
				Me._supplierID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierName", DbType:="NVarChar(50)")>  _
	Public Property supplierName() As String
		Get
			Return Me._supplierName
		End Get
		Set
			If (String.Equals(Me._supplierName, value) = false) Then
				Me._supplierName = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetSuppliersByClientIDResult
	
	Private _supplierID As Integer
	
	Private _supplierName As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int NOT NULL")>  _
	Public Property supplierID() As Integer
		Get
			Return Me._supplierID
		End Get
		Set
			If ((Me._supplierID = value)  _
						= false) Then
				Me._supplierID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierName", DbType:="NVarChar(50)")>  _
	Public Property supplierName() As String
		Get
			Return Me._supplierName
		End Get
		Set
			If (String.Equals(Me._supplierName, value) = false) Then
				Me._supplierName = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetSuppliersByUserResult
	
	Private _supplierID As Integer
	
	Private _supplierName As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int NOT NULL")>  _
	Public Property supplierID() As Integer
		Get
			Return Me._supplierID
		End Get
		Set
			If ((Me._supplierID = value)  _
						= false) Then
				Me._supplierID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierName", DbType:="NVarChar(50)")>  _
	Public Property supplierName() As String
		Get
			Return Me._supplierName
		End Get
		Set
			If (String.Equals(Me._supplierName, value) = false) Then
				Me._supplierName = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetSuppliersByUserIDandClientIDResult
	
	Private _supplierID As Integer
	
	Private _supplierName As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int NOT NULL")>  _
	Public Property supplierID() As Integer
		Get
			Return Me._supplierID
		End Get
		Set
			If ((Me._supplierID = value)  _
						= false) Then
				Me._supplierID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierName", DbType:="NVarChar(50)")>  _
	Public Property supplierName() As String
		Get
			Return Me._supplierName
		End Get
		Set
			If (String.Equals(Me._supplierName, value) = false) Then
				Me._supplierName = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetSuppliersWithCourseByUserResult
	
	Private _supplierID As Integer
	
	Private _supplierName As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int NOT NULL")>  _
	Public Property supplierID() As Integer
		Get
			Return Me._supplierID
		End Get
		Set
			If ((Me._supplierID = value)  _
						= false) Then
				Me._supplierID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierName", DbType:="NVarChar(50)")>  _
	Public Property supplierName() As String
		Get
			Return Me._supplierName
		End Get
		Set
			If (String.Equals(Me._supplierName, value) = false) Then
				Me._supplierName = value
			End If
		End Set
	End Property
End Class

Partial Public Class getTotalBonusByInvoiceIDResult
	
	Private _totalexpense As System.Nullable(Of Decimal)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_totalexpense", DbType:="Money")>  _
	Public Property totalexpense() As System.Nullable(Of Decimal)
		Get
			Return Me._totalexpense
		End Get
		Set
			If (Me._totalexpense.Equals(value) = false) Then
				Me._totalexpense = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetTotalCaseCountByEventType_SupplierResult
	
	Private _cases As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cases", DbType:="Int")>  _
	Public Property cases() As System.Nullable(Of Integer)
		Get
			Return Me._cases
		End Get
		Set
			If (Me._cases.Equals(value) = false) Then
				Me._cases = value
			End If
		End Set
	End Property
End Class

Partial Public Class getTotalExpensesByInvoiceIDResult
	
	Private _totalexpense As System.Nullable(Of Decimal)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_totalexpense", DbType:="Money")>  _
	Public Property totalexpense() As System.Nullable(Of Decimal)
		Get
			Return Me._totalexpense
		End Get
		Set
			If (Me._totalexpense.Equals(value) = false) Then
				Me._totalexpense = value
			End If
		End Set
	End Property
End Class

Partial Public Class getTotalLaborByInvoiceIDResult
	
	Private _Labor As System.Nullable(Of Double)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Labor", DbType:="Float")>  _
	Public Property Labor() As System.Nullable(Of Double)
		Get
			Return Me._Labor
		End Get
		Set
			If (Me._Labor.Equals(value) = false) Then
				Me._Labor = value
			End If
		End Set
	End Property
End Class

Partial Public Class getWeatherbyEventResult
	
	Private _weatherInfoID As Integer
	
	Private _stateName As String
	
	Private _cityName As String
	
	Private _weatherDate As System.Nullable(Of Date)
	
	Private _lowTemp As String
	
	Private _highTemp As String
	
	Private _dayTemp As String
	
	Private _nightTemp As String
	
	Private _condition As String
	
	Private _icon As String
	
	Private _location As String
	
	Private _day As String
	
	Private _dayNumber As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_weatherInfoID", DbType:="Int NOT NULL")>  _
	Public Property weatherInfoID() As Integer
		Get
			Return Me._weatherInfoID
		End Get
		Set
			If ((Me._weatherInfoID = value)  _
						= false) Then
				Me._weatherInfoID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_stateName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property stateName() As String
		Get
			Return Me._stateName
		End Get
		Set
			If (String.Equals(Me._stateName, value) = false) Then
				Me._stateName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cityName", DbType:="NVarChar(50)")>  _
	Public Property cityName() As String
		Get
			Return Me._cityName
		End Get
		Set
			If (String.Equals(Me._cityName, value) = false) Then
				Me._cityName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_weatherDate", DbType:="SmallDateTime")>  _
	Public Property weatherDate() As System.Nullable(Of Date)
		Get
			Return Me._weatherDate
		End Get
		Set
			If (Me._weatherDate.Equals(value) = false) Then
				Me._weatherDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lowTemp", DbType:="VarChar(50)")>  _
	Public Property lowTemp() As String
		Get
			Return Me._lowTemp
		End Get
		Set
			If (String.Equals(Me._lowTemp, value) = false) Then
				Me._lowTemp = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_highTemp", DbType:="VarChar(50)")>  _
	Public Property highTemp() As String
		Get
			Return Me._highTemp
		End Get
		Set
			If (String.Equals(Me._highTemp, value) = false) Then
				Me._highTemp = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dayTemp", DbType:="VarChar(50)")>  _
	Public Property dayTemp() As String
		Get
			Return Me._dayTemp
		End Get
		Set
			If (String.Equals(Me._dayTemp, value) = false) Then
				Me._dayTemp = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nightTemp", DbType:="VarChar(50)")>  _
	Public Property nightTemp() As String
		Get
			Return Me._nightTemp
		End Get
		Set
			If (String.Equals(Me._nightTemp, value) = false) Then
				Me._nightTemp = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_condition", DbType:="NVarChar(50)")>  _
	Public Property condition() As String
		Get
			Return Me._condition
		End Get
		Set
			If (String.Equals(Me._condition, value) = false) Then
				Me._condition = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_icon", DbType:="NVarChar(50)")>  _
	Public Property icon() As String
		Get
			Return Me._icon
		End Get
		Set
			If (String.Equals(Me._icon, value) = false) Then
				Me._icon = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_location", DbType:="NVarChar(50)")>  _
	Public Property location() As String
		Get
			Return Me._location
		End Get
		Set
			If (String.Equals(Me._location, value) = false) Then
				Me._location = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_day", DbType:="NVarChar(50)")>  _
	Public Property day() As String
		Get
			Return Me._day
		End Get
		Set
			If (String.Equals(Me._day, value) = false) Then
				Me._day = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dayNumber", DbType:="Int")>  _
	Public Property dayNumber() As System.Nullable(Of Integer)
		Get
			Return Me._dayNumber
		End Get
		Set
			If (Me._dayNumber.Equals(value) = false) Then
				Me._dayNumber = value
			End If
		End Set
	End Property
End Class

Partial Public Class LookupAccountResult
	
	Private _ID As Integer
	
	Private _accountID As Integer
	
	Private _Vpid As System.Nullable(Of Integer)
	
	Private _accountName As String
	
	Private _brandChampion As System.Nullable(Of Boolean)
	
	Private _clientID As System.Nullable(Of Integer)
	
	Private _status As String
	
	Private _DBAName As String
	
	Private _streetAddress1 As String
	
	Private _streetAddress2 As String
	
	Private _city As String
	
	Private _state As String
	
	Private _zipCode As String
	
	Private _phone As String
	
	Private _website As String
	
	Private _facebook As String
	
	Private _twitter As String
	
	Private _yelp As String
	
	Private _supplierID As String
	
	Private _distributorID As String
	
	Private _distributorName As String
	
	Private _accountTypeName As String
	
	Private _marketID As System.Nullable(Of Integer)
	
	Private _accountTypeID As System.Nullable(Of Integer)
	
	Private _capacity As System.Nullable(Of Integer)
	
	Private _numberofBars As System.Nullable(Of Integer)
	
	Private _marketName As String
	
	Private _neighborhood As String
	
	Private _traffic As System.Nullable(Of Integer)
	
	Private _permamentbars As System.Nullable(Of Integer)
	
	Private _patioSeating As System.Nullable(Of Boolean)
	
	Private _liveMusic As System.Nullable(Of Boolean)
	
	Private _poolTables As System.Nullable(Of Boolean)
	
	Private _darts As System.Nullable(Of Boolean)
	
	Private _arcade As System.Nullable(Of Boolean)
	
	Private _otherGames As String
	
	Private _latitude As System.Nullable(Of Double)
	
	Private _longitude As System.Nullable(Of Double)
	
	Private _notes As String
	
	Private _createdDate As System.Nullable(Of Date)
	
	Private _modifiedDate As System.Nullable(Of Date)
	
	Private _createdBy As String
	
	Private _modifiedBy As String
	
	Private _geoLocationUpdated As System.Nullable(Of Boolean)
	
	Private _latitude_old As System.Nullable(Of Double)
	
	Private _longitude_old As System.Nullable(Of Double)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="Int NOT NULL")>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me._ID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="Int NOT NULL")>  _
	Public Property accountID() As Integer
		Get
			Return Me._accountID
		End Get
		Set
			If ((Me._accountID = value)  _
						= false) Then
				Me._accountID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Vpid", DbType:="Int")>  _
	Public Property Vpid() As System.Nullable(Of Integer)
		Get
			Return Me._Vpid
		End Get
		Set
			If (Me._Vpid.Equals(value) = false) Then
				Me._Vpid = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountName", DbType:="VarChar(256)")>  _
	Public Property accountName() As String
		Get
			Return Me._accountName
		End Get
		Set
			If (String.Equals(Me._accountName, value) = false) Then
				Me._accountName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandChampion", DbType:="Bit")>  _
	Public Property brandChampion() As System.Nullable(Of Boolean)
		Get
			Return Me._brandChampion
		End Get
		Set
			If (Me._brandChampion.Equals(value) = false) Then
				Me._brandChampion = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", DbType:="Int")>  _
	Public Property clientID() As System.Nullable(Of Integer)
		Get
			Return Me._clientID
		End Get
		Set
			If (Me._clientID.Equals(value) = false) Then
				Me._clientID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", DbType:="VarChar(50)")>  _
	Public Property status() As String
		Get
			Return Me._status
		End Get
		Set
			If (String.Equals(Me._status, value) = false) Then
				Me._status = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DBAName", DbType:="VarChar(256)")>  _
	Public Property DBAName() As String
		Get
			Return Me._DBAName
		End Get
		Set
			If (String.Equals(Me._DBAName, value) = false) Then
				Me._DBAName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_streetAddress1", DbType:="VarChar(256)")>  _
	Public Property streetAddress1() As String
		Get
			Return Me._streetAddress1
		End Get
		Set
			If (String.Equals(Me._streetAddress1, value) = false) Then
				Me._streetAddress1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_streetAddress2", DbType:="VarChar(256)")>  _
	Public Property streetAddress2() As String
		Get
			Return Me._streetAddress2
		End Get
		Set
			If (String.Equals(Me._streetAddress2, value) = false) Then
				Me._streetAddress2 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_city", DbType:="VarChar(50)")>  _
	Public Property city() As String
		Get
			Return Me._city
		End Get
		Set
			If (String.Equals(Me._city, value) = false) Then
				Me._city = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_state", DbType:="NVarChar(20)")>  _
	Public Property state() As String
		Get
			Return Me._state
		End Get
		Set
			If (String.Equals(Me._state, value) = false) Then
				Me._state = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_zipCode", DbType:="VarChar(10)")>  _
	Public Property zipCode() As String
		Get
			Return Me._zipCode
		End Get
		Set
			If (String.Equals(Me._zipCode, value) = false) Then
				Me._zipCode = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_phone", DbType:="VarChar(50)")>  _
	Public Property phone() As String
		Get
			Return Me._phone
		End Get
		Set
			If (String.Equals(Me._phone, value) = false) Then
				Me._phone = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_website", DbType:="VarChar(256)")>  _
	Public Property website() As String
		Get
			Return Me._website
		End Get
		Set
			If (String.Equals(Me._website, value) = false) Then
				Me._website = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_facebook", DbType:="VarChar(256)")>  _
	Public Property facebook() As String
		Get
			Return Me._facebook
		End Get
		Set
			If (String.Equals(Me._facebook, value) = false) Then
				Me._facebook = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_twitter", DbType:="VarChar(256)")>  _
	Public Property twitter() As String
		Get
			Return Me._twitter
		End Get
		Set
			If (String.Equals(Me._twitter, value) = false) Then
				Me._twitter = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_yelp", DbType:="VarChar(256)")>  _
	Public Property yelp() As String
		Get
			Return Me._yelp
		End Get
		Set
			If (String.Equals(Me._yelp, value) = false) Then
				Me._yelp = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="VarChar(256)")>  _
	Public Property supplierID() As String
		Get
			Return Me._supplierID
		End Get
		Set
			If (String.Equals(Me._supplierID, value) = false) Then
				Me._supplierID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_distributorID", DbType:="VarChar(256)")>  _
	Public Property distributorID() As String
		Get
			Return Me._distributorID
		End Get
		Set
			If (String.Equals(Me._distributorID, value) = false) Then
				Me._distributorID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_distributorName", DbType:="VarChar(256)")>  _
	Public Property distributorName() As String
		Get
			Return Me._distributorName
		End Get
		Set
			If (String.Equals(Me._distributorName, value) = false) Then
				Me._distributorName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountTypeName", DbType:="VarChar(50)")>  _
	Public Property accountTypeName() As String
		Get
			Return Me._accountTypeName
		End Get
		Set
			If (String.Equals(Me._accountTypeName, value) = false) Then
				Me._accountTypeName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="Int")>  _
	Public Property marketID() As System.Nullable(Of Integer)
		Get
			Return Me._marketID
		End Get
		Set
			If (Me._marketID.Equals(value) = false) Then
				Me._marketID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountTypeID", DbType:="Int")>  _
	Public Property accountTypeID() As System.Nullable(Of Integer)
		Get
			Return Me._accountTypeID
		End Get
		Set
			If (Me._accountTypeID.Equals(value) = false) Then
				Me._accountTypeID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_capacity", DbType:="Int")>  _
	Public Property capacity() As System.Nullable(Of Integer)
		Get
			Return Me._capacity
		End Get
		Set
			If (Me._capacity.Equals(value) = false) Then
				Me._capacity = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_numberofBars", DbType:="Int")>  _
	Public Property numberofBars() As System.Nullable(Of Integer)
		Get
			Return Me._numberofBars
		End Get
		Set
			If (Me._numberofBars.Equals(value) = false) Then
				Me._numberofBars = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketName", DbType:="VarChar(256)")>  _
	Public Property marketName() As String
		Get
			Return Me._marketName
		End Get
		Set
			If (String.Equals(Me._marketName, value) = false) Then
				Me._marketName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_neighborhood", DbType:="VarChar(256)")>  _
	Public Property neighborhood() As String
		Get
			Return Me._neighborhood
		End Get
		Set
			If (String.Equals(Me._neighborhood, value) = false) Then
				Me._neighborhood = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_traffic", DbType:="Int")>  _
	Public Property traffic() As System.Nullable(Of Integer)
		Get
			Return Me._traffic
		End Get
		Set
			If (Me._traffic.Equals(value) = false) Then
				Me._traffic = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_permamentbars", DbType:="Int")>  _
	Public Property permamentbars() As System.Nullable(Of Integer)
		Get
			Return Me._permamentbars
		End Get
		Set
			If (Me._permamentbars.Equals(value) = false) Then
				Me._permamentbars = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_patioSeating", DbType:="Bit")>  _
	Public Property patioSeating() As System.Nullable(Of Boolean)
		Get
			Return Me._patioSeating
		End Get
		Set
			If (Me._patioSeating.Equals(value) = false) Then
				Me._patioSeating = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_liveMusic", DbType:="Bit")>  _
	Public Property liveMusic() As System.Nullable(Of Boolean)
		Get
			Return Me._liveMusic
		End Get
		Set
			If (Me._liveMusic.Equals(value) = false) Then
				Me._liveMusic = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_poolTables", DbType:="Bit")>  _
	Public Property poolTables() As System.Nullable(Of Boolean)
		Get
			Return Me._poolTables
		End Get
		Set
			If (Me._poolTables.Equals(value) = false) Then
				Me._poolTables = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_darts", DbType:="Bit")>  _
	Public Property darts() As System.Nullable(Of Boolean)
		Get
			Return Me._darts
		End Get
		Set
			If (Me._darts.Equals(value) = false) Then
				Me._darts = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_arcade", DbType:="Bit")>  _
	Public Property arcade() As System.Nullable(Of Boolean)
		Get
			Return Me._arcade
		End Get
		Set
			If (Me._arcade.Equals(value) = false) Then
				Me._arcade = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_otherGames", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property otherGames() As String
		Get
			Return Me._otherGames
		End Get
		Set
			If (String.Equals(Me._otherGames, value) = false) Then
				Me._otherGames = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_latitude", DbType:="Float")>  _
	Public Property latitude() As System.Nullable(Of Double)
		Get
			Return Me._latitude
		End Get
		Set
			If (Me._latitude.Equals(value) = false) Then
				Me._latitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_longitude", DbType:="Float")>  _
	Public Property longitude() As System.Nullable(Of Double)
		Get
			Return Me._longitude
		End Get
		Set
			If (Me._longitude.Equals(value) = false) Then
				Me._longitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_notes", DbType:="NVarChar(MAX)")>  _
	Public Property notes() As String
		Get
			Return Me._notes
		End Get
		Set
			If (String.Equals(Me._notes, value) = false) Then
				Me._notes = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_createdDate", DbType:="SmallDateTime")>  _
	Public Property createdDate() As System.Nullable(Of Date)
		Get
			Return Me._createdDate
		End Get
		Set
			If (Me._createdDate.Equals(value) = false) Then
				Me._createdDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_modifiedDate", DbType:="SmallDateTime")>  _
	Public Property modifiedDate() As System.Nullable(Of Date)
		Get
			Return Me._modifiedDate
		End Get
		Set
			If (Me._modifiedDate.Equals(value) = false) Then
				Me._modifiedDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_createdBy", DbType:="NVarChar(50)")>  _
	Public Property createdBy() As String
		Get
			Return Me._createdBy
		End Get
		Set
			If (String.Equals(Me._createdBy, value) = false) Then
				Me._createdBy = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_modifiedBy", DbType:="NVarChar(50)")>  _
	Public Property modifiedBy() As String
		Get
			Return Me._modifiedBy
		End Get
		Set
			If (String.Equals(Me._modifiedBy, value) = false) Then
				Me._modifiedBy = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_geoLocationUpdated", DbType:="Bit")>  _
	Public Property geoLocationUpdated() As System.Nullable(Of Boolean)
		Get
			Return Me._geoLocationUpdated
		End Get
		Set
			If (Me._geoLocationUpdated.Equals(value) = false) Then
				Me._geoLocationUpdated = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_latitude_old", DbType:="Float")>  _
	Public Property latitude_old() As System.Nullable(Of Double)
		Get
			Return Me._latitude_old
		End Get
		Set
			If (Me._latitude_old.Equals(value) = false) Then
				Me._latitude_old = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_longitude_old", DbType:="Float")>  _
	Public Property longitude_old() As System.Nullable(Of Double)
		Get
			Return Me._longitude_old
		End Get
		Set
			If (Me._longitude_old.Equals(value) = false) Then
				Me._longitude_old = value
			End If
		End Set
	End Property
End Class

Partial Public Class pr_qryEventStaffingStatusResult
	
	Private _eventID As Integer
	
	Private _assignedUserName As String
	
	Private _FullName As String
	
	Private _positionTitle As String
	
	Private _startTime As System.Nullable(Of Date)
	
	Private _endTime As System.Nullable(Of Date)
	
	Private _checkInTime As System.Nullable(Of Date)
	
	Private _hours As System.Nullable(Of Double)
	
	Private _headShot As System.Data.Linq.Binary
	
	Private _userID As String
	
	Private _EnableLink As String
	
	Private _EnableLabel As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_assignedUserName", DbType:="NVarChar(50)")>  _
	Public Property assignedUserName() As String
		Get
			Return Me._assignedUserName
		End Get
		Set
			If (String.Equals(Me._assignedUserName, value) = false) Then
				Me._assignedUserName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FullName", DbType:="NVarChar(101)")>  _
	Public Property FullName() As String
		Get
			Return Me._FullName
		End Get
		Set
			If (String.Equals(Me._FullName, value) = false) Then
				Me._FullName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_positionTitle", DbType:="NVarChar(82)")>  _
	Public Property positionTitle() As String
		Get
			Return Me._positionTitle
		End Get
		Set
			If (String.Equals(Me._positionTitle, value) = false) Then
				Me._positionTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_startTime", DbType:="SmallDateTime")>  _
	Public Property startTime() As System.Nullable(Of Date)
		Get
			Return Me._startTime
		End Get
		Set
			If (Me._startTime.Equals(value) = false) Then
				Me._startTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_endTime", DbType:="SmallDateTime")>  _
	Public Property endTime() As System.Nullable(Of Date)
		Get
			Return Me._endTime
		End Get
		Set
			If (Me._endTime.Equals(value) = false) Then
				Me._endTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_checkInTime", DbType:="SmallDateTime")>  _
	Public Property checkInTime() As System.Nullable(Of Date)
		Get
			Return Me._checkInTime
		End Get
		Set
			If (Me._checkInTime.Equals(value) = false) Then
				Me._checkInTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hours", DbType:="Float")>  _
	Public Property hours() As System.Nullable(Of Double)
		Get
			Return Me._hours
		End Get
		Set
			If (Me._hours.Equals(value) = false) Then
				Me._hours = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_headShot", DbType:="VarBinary(MAX)")>  _
	Public Property headShot() As System.Data.Linq.Binary
		Get
			Return Me._headShot
		End Get
		Set
			If (Object.Equals(Me._headShot, value) = false) Then
				Me._headShot = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me._userID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EnableLink", DbType:="VarChar(5) NOT NULL", CanBeNull:=false)>  _
	Public Property EnableLink() As String
		Get
			Return Me._EnableLink
		End Get
		Set
			If (String.Equals(Me._EnableLink, value) = false) Then
				Me._EnableLink = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EnableLabel", DbType:="VarChar(5) NOT NULL", CanBeNull:=false)>  _
	Public Property EnableLabel() As String
		Get
			Return Me._EnableLabel
		End Get
		Set
			If (String.Equals(Me._EnableLabel, value) = false) Then
				Me._EnableLabel = value
			End If
		End Set
	End Property
End Class

Partial Public Class sp_galleryFiltertestResult
	
	Private _photoID As Integer
	
	Private _photoTitle As String
	
	Private _dateUploaded As System.Nullable(Of Date)
	
	Private _LargeImage As System.Data.Linq.Binary
	
	Private _accountID As String
	
	Private _eventID As String
	
	Private _marketID As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_photoID", DbType:="Int NOT NULL")>  _
	Public Property photoID() As Integer
		Get
			Return Me._photoID
		End Get
		Set
			If ((Me._photoID = value)  _
						= false) Then
				Me._photoID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_photoTitle", DbType:="VarChar(255)")>  _
	Public Property photoTitle() As String
		Get
			Return Me._photoTitle
		End Get
		Set
			If (String.Equals(Me._photoTitle, value) = false) Then
				Me._photoTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateUploaded", DbType:="SmallDateTime")>  _
	Public Property dateUploaded() As System.Nullable(Of Date)
		Get
			Return Me._dateUploaded
		End Get
		Set
			If (Me._dateUploaded.Equals(value) = false) Then
				Me._dateUploaded = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LargeImage", DbType:="Image")>  _
	Public Property LargeImage() As System.Data.Linq.Binary
		Get
			Return Me._LargeImage
		End Get
		Set
			If (Object.Equals(Me._LargeImage, value) = false) Then
				Me._LargeImage = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="NVarChar(50)")>  _
	Public Property accountID() As String
		Get
			Return Me._accountID
		End Get
		Set
			If (String.Equals(Me._accountID, value) = false) Then
				Me._accountID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="NVarChar(50)")>  _
	Public Property eventID() As String
		Get
			Return Me._eventID
		End Get
		Set
			If (String.Equals(Me._eventID, value) = false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="NVarChar(50)")>  _
	Public Property marketID() As String
		Get
			Return Me._marketID
		End Get
		Set
			If (String.Equals(Me._marketID, value) = false) Then
				Me._marketID = value
			End If
		End Set
	End Property
End Class

Partial Public Class sp_GalleryViewResult
	
	Private _photoID As Integer
	
	Private _photoTitle As String
	
	Private _photoDescription As String
	
	Private _dateUploaded As System.Nullable(Of Date)
	
	Private _SmallImage As System.Data.Linq.Binary
	
	Private _accountID As String
	
	Private _eventID As String
	
	Private _brandID As String
	
	Private _keywords As String
	
	Private _marketID As String
	
	Private _clientID As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_photoID", DbType:="Int NOT NULL")>  _
	Public Property photoID() As Integer
		Get
			Return Me._photoID
		End Get
		Set
			If ((Me._photoID = value)  _
						= false) Then
				Me._photoID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_photoTitle", DbType:="VarChar(255)")>  _
	Public Property photoTitle() As String
		Get
			Return Me._photoTitle
		End Get
		Set
			If (String.Equals(Me._photoTitle, value) = false) Then
				Me._photoTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_photoDescription", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property photoDescription() As String
		Get
			Return Me._photoDescription
		End Get
		Set
			If (String.Equals(Me._photoDescription, value) = false) Then
				Me._photoDescription = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateUploaded", DbType:="SmallDateTime")>  _
	Public Property dateUploaded() As System.Nullable(Of Date)
		Get
			Return Me._dateUploaded
		End Get
		Set
			If (Me._dateUploaded.Equals(value) = false) Then
				Me._dateUploaded = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SmallImage", DbType:="VarBinary(MAX)")>  _
	Public Property SmallImage() As System.Data.Linq.Binary
		Get
			Return Me._SmallImage
		End Get
		Set
			If (Object.Equals(Me._SmallImage, value) = false) Then
				Me._SmallImage = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="NVarChar(50)")>  _
	Public Property accountID() As String
		Get
			Return Me._accountID
		End Get
		Set
			If (String.Equals(Me._accountID, value) = false) Then
				Me._accountID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="NVarChar(50)")>  _
	Public Property eventID() As String
		Get
			Return Me._eventID
		End Get
		Set
			If (String.Equals(Me._eventID, value) = false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandID", DbType:="NVarChar(50)")>  _
	Public Property brandID() As String
		Get
			Return Me._brandID
		End Get
		Set
			If (String.Equals(Me._brandID, value) = false) Then
				Me._brandID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_keywords", DbType:="NVarChar(1000)")>  _
	Public Property keywords() As String
		Get
			Return Me._keywords
		End Get
		Set
			If (String.Equals(Me._keywords, value) = false) Then
				Me._keywords = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="NVarChar(50)")>  _
	Public Property marketID() As String
		Get
			Return Me._marketID
		End Get
		Set
			If (String.Equals(Me._marketID, value) = false) Then
				Me._marketID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", DbType:="Int")>  _
	Public Property clientID() As System.Nullable(Of Integer)
		Get
			Return Me._clientID
		End Get
		Set
			If (Me._clientID.Equals(value) = false) Then
				Me._clientID = value
			End If
		End Set
	End Property
End Class

Partial Public Class sp_GalleryView1Result
	
	Private _photoID As Integer
	
	Private _photoTitle As String
	
	Private _photoDescription As String
	
	Private _dateUploaded As System.Nullable(Of Date)
	
	Private _SmallImage As System.Data.Linq.Binary
	
	Private _accountID As String
	
	Private _eventID As String
	
	Private _brandID As String
	
	Private _keywords As String
	
	Private _marketID As String
	
	Private _clientID As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_photoID", DbType:="Int NOT NULL")>  _
	Public Property photoID() As Integer
		Get
			Return Me._photoID
		End Get
		Set
			If ((Me._photoID = value)  _
						= false) Then
				Me._photoID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_photoTitle", DbType:="VarChar(255)")>  _
	Public Property photoTitle() As String
		Get
			Return Me._photoTitle
		End Get
		Set
			If (String.Equals(Me._photoTitle, value) = false) Then
				Me._photoTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_photoDescription", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property photoDescription() As String
		Get
			Return Me._photoDescription
		End Get
		Set
			If (String.Equals(Me._photoDescription, value) = false) Then
				Me._photoDescription = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateUploaded", DbType:="SmallDateTime")>  _
	Public Property dateUploaded() As System.Nullable(Of Date)
		Get
			Return Me._dateUploaded
		End Get
		Set
			If (Me._dateUploaded.Equals(value) = false) Then
				Me._dateUploaded = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SmallImage", DbType:="VarBinary(MAX)")>  _
	Public Property SmallImage() As System.Data.Linq.Binary
		Get
			Return Me._SmallImage
		End Get
		Set
			If (Object.Equals(Me._SmallImage, value) = false) Then
				Me._SmallImage = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="NVarChar(50)")>  _
	Public Property accountID() As String
		Get
			Return Me._accountID
		End Get
		Set
			If (String.Equals(Me._accountID, value) = false) Then
				Me._accountID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="NVarChar(50)")>  _
	Public Property eventID() As String
		Get
			Return Me._eventID
		End Get
		Set
			If (String.Equals(Me._eventID, value) = false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandID", DbType:="NVarChar(50)")>  _
	Public Property brandID() As String
		Get
			Return Me._brandID
		End Get
		Set
			If (String.Equals(Me._brandID, value) = false) Then
				Me._brandID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_keywords", DbType:="NVarChar(1000)")>  _
	Public Property keywords() As String
		Get
			Return Me._keywords
		End Get
		Set
			If (String.Equals(Me._keywords, value) = false) Then
				Me._keywords = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="NVarChar(50)")>  _
	Public Property marketID() As String
		Get
			Return Me._marketID
		End Get
		Set
			If (String.Equals(Me._marketID, value) = false) Then
				Me._marketID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", DbType:="Int")>  _
	Public Property clientID() As System.Nullable(Of Integer)
		Get
			Return Me._clientID
		End Get
		Set
			If (Me._clientID.Equals(value) = false) Then
				Me._clientID = value
			End If
		End Set
	End Property
End Class

Partial Public Class sp_GalleryViewByBrandResult
	
	Private _photoID As Integer
	
	Private _photoTitle As String
	
	Private _dateUploaded As System.Nullable(Of Date)
	
	Private _LargeImage As System.Data.Linq.Binary
	
	Private _accountID As String
	
	Private _eventID As String
	
	Private _marketID As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_photoID", DbType:="Int NOT NULL")>  _
	Public Property photoID() As Integer
		Get
			Return Me._photoID
		End Get
		Set
			If ((Me._photoID = value)  _
						= false) Then
				Me._photoID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_photoTitle", DbType:="VarChar(255)")>  _
	Public Property photoTitle() As String
		Get
			Return Me._photoTitle
		End Get
		Set
			If (String.Equals(Me._photoTitle, value) = false) Then
				Me._photoTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateUploaded", DbType:="SmallDateTime")>  _
	Public Property dateUploaded() As System.Nullable(Of Date)
		Get
			Return Me._dateUploaded
		End Get
		Set
			If (Me._dateUploaded.Equals(value) = false) Then
				Me._dateUploaded = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LargeImage", DbType:="VarBinary(MAX)")>  _
	Public Property LargeImage() As System.Data.Linq.Binary
		Get
			Return Me._LargeImage
		End Get
		Set
			If (Object.Equals(Me._LargeImage, value) = false) Then
				Me._LargeImage = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="NVarChar(50)")>  _
	Public Property accountID() As String
		Get
			Return Me._accountID
		End Get
		Set
			If (String.Equals(Me._accountID, value) = false) Then
				Me._accountID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="NVarChar(50)")>  _
	Public Property eventID() As String
		Get
			Return Me._eventID
		End Get
		Set
			If (String.Equals(Me._eventID, value) = false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="NVarChar(50)")>  _
	Public Property marketID() As String
		Get
			Return Me._marketID
		End Get
		Set
			If (String.Equals(Me._marketID, value) = false) Then
				Me._marketID = value
			End If
		End Set
	End Property
End Class

Partial Public Class sp_GalleryViewByBrandAndDateRangeResult
	
	Private _photoID As Integer
	
	Private _photoTitle As String
	
	Private _dateUploaded As System.Nullable(Of Date)
	
	Private _LargeImage As System.Data.Linq.Binary
	
	Private _accountID As String
	
	Private _eventID As String
	
	Private _marketID As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_photoID", DbType:="Int NOT NULL")>  _
	Public Property photoID() As Integer
		Get
			Return Me._photoID
		End Get
		Set
			If ((Me._photoID = value)  _
						= false) Then
				Me._photoID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_photoTitle", DbType:="VarChar(255)")>  _
	Public Property photoTitle() As String
		Get
			Return Me._photoTitle
		End Get
		Set
			If (String.Equals(Me._photoTitle, value) = false) Then
				Me._photoTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateUploaded", DbType:="SmallDateTime")>  _
	Public Property dateUploaded() As System.Nullable(Of Date)
		Get
			Return Me._dateUploaded
		End Get
		Set
			If (Me._dateUploaded.Equals(value) = false) Then
				Me._dateUploaded = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LargeImage", DbType:="VarBinary(MAX)")>  _
	Public Property LargeImage() As System.Data.Linq.Binary
		Get
			Return Me._LargeImage
		End Get
		Set
			If (Object.Equals(Me._LargeImage, value) = false) Then
				Me._LargeImage = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="NVarChar(50)")>  _
	Public Property accountID() As String
		Get
			Return Me._accountID
		End Get
		Set
			If (String.Equals(Me._accountID, value) = false) Then
				Me._accountID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="NVarChar(50)")>  _
	Public Property eventID() As String
		Get
			Return Me._eventID
		End Get
		Set
			If (String.Equals(Me._eventID, value) = false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="NVarChar(50)")>  _
	Public Property marketID() As String
		Get
			Return Me._marketID
		End Get
		Set
			If (String.Equals(Me._marketID, value) = false) Then
				Me._marketID = value
			End If
		End Set
	End Property
End Class

Partial Public Class sp_GalleryViewByBrandAndMarketResult
	
	Private _photoID As Integer
	
	Private _photoTitle As String
	
	Private _dateUploaded As System.Nullable(Of Date)
	
	Private _LargeImage As System.Data.Linq.Binary
	
	Private _accountID As String
	
	Private _eventID As String
	
	Private _marketID As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_photoID", DbType:="Int NOT NULL")>  _
	Public Property photoID() As Integer
		Get
			Return Me._photoID
		End Get
		Set
			If ((Me._photoID = value)  _
						= false) Then
				Me._photoID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_photoTitle", DbType:="VarChar(255)")>  _
	Public Property photoTitle() As String
		Get
			Return Me._photoTitle
		End Get
		Set
			If (String.Equals(Me._photoTitle, value) = false) Then
				Me._photoTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateUploaded", DbType:="SmallDateTime")>  _
	Public Property dateUploaded() As System.Nullable(Of Date)
		Get
			Return Me._dateUploaded
		End Get
		Set
			If (Me._dateUploaded.Equals(value) = false) Then
				Me._dateUploaded = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LargeImage", DbType:="VarBinary(MAX)")>  _
	Public Property LargeImage() As System.Data.Linq.Binary
		Get
			Return Me._LargeImage
		End Get
		Set
			If (Object.Equals(Me._LargeImage, value) = false) Then
				Me._LargeImage = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="NVarChar(50)")>  _
	Public Property accountID() As String
		Get
			Return Me._accountID
		End Get
		Set
			If (String.Equals(Me._accountID, value) = false) Then
				Me._accountID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="NVarChar(50)")>  _
	Public Property eventID() As String
		Get
			Return Me._eventID
		End Get
		Set
			If (String.Equals(Me._eventID, value) = false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="NVarChar(50)")>  _
	Public Property marketID() As String
		Get
			Return Me._marketID
		End Get
		Set
			If (String.Equals(Me._marketID, value) = false) Then
				Me._marketID = value
			End If
		End Set
	End Property
End Class

Partial Public Class sp_GalleryViewByBrandAndMarketAndDateRangeResult
	
	Private _photoID As Integer
	
	Private _photoTitle As String
	
	Private _dateUploaded As System.Nullable(Of Date)
	
	Private _LargeImage As System.Data.Linq.Binary
	
	Private _accountID As String
	
	Private _eventID As String
	
	Private _marketID As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_photoID", DbType:="Int NOT NULL")>  _
	Public Property photoID() As Integer
		Get
			Return Me._photoID
		End Get
		Set
			If ((Me._photoID = value)  _
						= false) Then
				Me._photoID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_photoTitle", DbType:="VarChar(255)")>  _
	Public Property photoTitle() As String
		Get
			Return Me._photoTitle
		End Get
		Set
			If (String.Equals(Me._photoTitle, value) = false) Then
				Me._photoTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateUploaded", DbType:="SmallDateTime")>  _
	Public Property dateUploaded() As System.Nullable(Of Date)
		Get
			Return Me._dateUploaded
		End Get
		Set
			If (Me._dateUploaded.Equals(value) = false) Then
				Me._dateUploaded = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LargeImage", DbType:="VarBinary(MAX)")>  _
	Public Property LargeImage() As System.Data.Linq.Binary
		Get
			Return Me._LargeImage
		End Get
		Set
			If (Object.Equals(Me._LargeImage, value) = false) Then
				Me._LargeImage = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="NVarChar(50)")>  _
	Public Property accountID() As String
		Get
			Return Me._accountID
		End Get
		Set
			If (String.Equals(Me._accountID, value) = false) Then
				Me._accountID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="NVarChar(50)")>  _
	Public Property eventID() As String
		Get
			Return Me._eventID
		End Get
		Set
			If (String.Equals(Me._eventID, value) = false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="NVarChar(50)")>  _
	Public Property marketID() As String
		Get
			Return Me._marketID
		End Get
		Set
			If (String.Equals(Me._marketID, value) = false) Then
				Me._marketID = value
			End If
		End Set
	End Property
End Class

Partial Public Class sp_GalleryViewByDateRangeResult
	
	Private _photoID As Integer
	
	Private _photoTitle As String
	
	Private _dateUploaded As System.Nullable(Of Date)
	
	Private _LargeImage As System.Data.Linq.Binary
	
	Private _accountID As String
	
	Private _eventID As String
	
	Private _marketID As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_photoID", DbType:="Int NOT NULL")>  _
	Public Property photoID() As Integer
		Get
			Return Me._photoID
		End Get
		Set
			If ((Me._photoID = value)  _
						= false) Then
				Me._photoID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_photoTitle", DbType:="VarChar(255)")>  _
	Public Property photoTitle() As String
		Get
			Return Me._photoTitle
		End Get
		Set
			If (String.Equals(Me._photoTitle, value) = false) Then
				Me._photoTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateUploaded", DbType:="SmallDateTime")>  _
	Public Property dateUploaded() As System.Nullable(Of Date)
		Get
			Return Me._dateUploaded
		End Get
		Set
			If (Me._dateUploaded.Equals(value) = false) Then
				Me._dateUploaded = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LargeImage", DbType:="Image")>  _
	Public Property LargeImage() As System.Data.Linq.Binary
		Get
			Return Me._LargeImage
		End Get
		Set
			If (Object.Equals(Me._LargeImage, value) = false) Then
				Me._LargeImage = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="NVarChar(50)")>  _
	Public Property accountID() As String
		Get
			Return Me._accountID
		End Get
		Set
			If (String.Equals(Me._accountID, value) = false) Then
				Me._accountID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="NVarChar(50)")>  _
	Public Property eventID() As String
		Get
			Return Me._eventID
		End Get
		Set
			If (String.Equals(Me._eventID, value) = false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="NVarChar(50)")>  _
	Public Property marketID() As String
		Get
			Return Me._marketID
		End Get
		Set
			If (String.Equals(Me._marketID, value) = false) Then
				Me._marketID = value
			End If
		End Set
	End Property
End Class

Partial Public Class sp_GalleryViewByMarketResult
	
	Private _photoID As Integer
	
	Private _photoTitle As String
	
	Private _dateUploaded As System.Nullable(Of Date)
	
	Private _LargeImage As System.Data.Linq.Binary
	
	Private _accountID As String
	
	Private _eventID As String
	
	Private _marketID As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_photoID", DbType:="Int NOT NULL")>  _
	Public Property photoID() As Integer
		Get
			Return Me._photoID
		End Get
		Set
			If ((Me._photoID = value)  _
						= false) Then
				Me._photoID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_photoTitle", DbType:="VarChar(255)")>  _
	Public Property photoTitle() As String
		Get
			Return Me._photoTitle
		End Get
		Set
			If (String.Equals(Me._photoTitle, value) = false) Then
				Me._photoTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateUploaded", DbType:="SmallDateTime")>  _
	Public Property dateUploaded() As System.Nullable(Of Date)
		Get
			Return Me._dateUploaded
		End Get
		Set
			If (Me._dateUploaded.Equals(value) = false) Then
				Me._dateUploaded = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LargeImage", DbType:="Image")>  _
	Public Property LargeImage() As System.Data.Linq.Binary
		Get
			Return Me._LargeImage
		End Get
		Set
			If (Object.Equals(Me._LargeImage, value) = false) Then
				Me._LargeImage = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="NVarChar(50)")>  _
	Public Property accountID() As String
		Get
			Return Me._accountID
		End Get
		Set
			If (String.Equals(Me._accountID, value) = false) Then
				Me._accountID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="NVarChar(50)")>  _
	Public Property eventID() As String
		Get
			Return Me._eventID
		End Get
		Set
			If (String.Equals(Me._eventID, value) = false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="NVarChar(50)")>  _
	Public Property marketID() As String
		Get
			Return Me._marketID
		End Get
		Set
			If (String.Equals(Me._marketID, value) = false) Then
				Me._marketID = value
			End If
		End Set
	End Property
End Class

Partial Public Class sp_GalleryViewByMarketAndDateRangeResult
	
	Private _photoID As Integer
	
	Private _photoTitle As String
	
	Private _dateUploaded As System.Nullable(Of Date)
	
	Private _LargeImage As System.Data.Linq.Binary
	
	Private _accountID As String
	
	Private _eventID As String
	
	Private _marketID As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_photoID", DbType:="Int NOT NULL")>  _
	Public Property photoID() As Integer
		Get
			Return Me._photoID
		End Get
		Set
			If ((Me._photoID = value)  _
						= false) Then
				Me._photoID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_photoTitle", DbType:="VarChar(255)")>  _
	Public Property photoTitle() As String
		Get
			Return Me._photoTitle
		End Get
		Set
			If (String.Equals(Me._photoTitle, value) = false) Then
				Me._photoTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateUploaded", DbType:="SmallDateTime")>  _
	Public Property dateUploaded() As System.Nullable(Of Date)
		Get
			Return Me._dateUploaded
		End Get
		Set
			If (Me._dateUploaded.Equals(value) = false) Then
				Me._dateUploaded = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LargeImage", DbType:="Image")>  _
	Public Property LargeImage() As System.Data.Linq.Binary
		Get
			Return Me._LargeImage
		End Get
		Set
			If (Object.Equals(Me._LargeImage, value) = false) Then
				Me._LargeImage = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="NVarChar(50)")>  _
	Public Property accountID() As String
		Get
			Return Me._accountID
		End Get
		Set
			If (String.Equals(Me._accountID, value) = false) Then
				Me._accountID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="NVarChar(50)")>  _
	Public Property eventID() As String
		Get
			Return Me._eventID
		End Get
		Set
			If (String.Equals(Me._eventID, value) = false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="NVarChar(50)")>  _
	Public Property marketID() As String
		Get
			Return Me._marketID
		End Get
		Set
			If (String.Equals(Me._marketID, value) = false) Then
				Me._marketID = value
			End If
		End Set
	End Property
End Class

Partial Public Class UpdateEventRecapStatus_ToplinedResult
	
	Private _paymentStatus As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentStatus", DbType:="VarChar(50)")>  _
	Public Property paymentStatus() As String
		Get
			Return Me._paymentStatus
		End Get
		Set
			If (String.Equals(Me._paymentStatus, value) = false) Then
				Me._paymentStatus = value
			End If
		End Set
	End Property
End Class

Partial Public Class ViewApprovedPaymentsByAmbassadorResult
	
	Private _RequirementID As Integer
	
	Private _locationID As System.Nullable(Of Integer)
	
	Private _accountID As Integer
	
	Private _accountName As String
	
	Private _eventID As Integer
	
	Private _supplierName As String
	
	Private _userID As String
	
	Private _userName As String
	
	Private _FullName As String
	
	Private _positionTitle As String
	
	Private _statusID As System.Nullable(Of Integer)
	
	Private _rate As System.Nullable(Of Decimal)
	
	Private _hours As System.Nullable(Of Integer)
	
	Private _labor As System.Nullable(Of Decimal)
	
	Private _paymentStatus As String
	
	Private _paymentID As System.Nullable(Of Integer)
	
	Private _expenses As System.Nullable(Of Decimal)
	
	Private _Total As System.Nullable(Of Decimal)
	
	Private _paymentDate As System.Nullable(Of Date)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RequirementID", DbType:="Int NOT NULL")>  _
	Public Property RequirementID() As Integer
		Get
			Return Me._RequirementID
		End Get
		Set
			If ((Me._RequirementID = value)  _
						= false) Then
				Me._RequirementID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_locationID", DbType:="Int")>  _
	Public Property locationID() As System.Nullable(Of Integer)
		Get
			Return Me._locationID
		End Get
		Set
			If (Me._locationID.Equals(value) = false) Then
				Me._locationID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="Int NOT NULL")>  _
	Public Property accountID() As Integer
		Get
			Return Me._accountID
		End Get
		Set
			If ((Me._accountID = value)  _
						= false) Then
				Me._accountID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountName", DbType:="VarChar(256)")>  _
	Public Property accountName() As String
		Get
			Return Me._accountName
		End Get
		Set
			If (String.Equals(Me._accountName, value) = false) Then
				Me._accountName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierName", DbType:="NVarChar(50)")>  _
	Public Property supplierName() As String
		Get
			Return Me._supplierName
		End Get
		Set
			If (String.Equals(Me._supplierName, value) = false) Then
				Me._supplierName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me._userID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userName", DbType:="NVarChar(50)")>  _
	Public Property userName() As String
		Get
			Return Me._userName
		End Get
		Set
			If (String.Equals(Me._userName, value) = false) Then
				Me._userName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FullName", DbType:="NVarChar(101)")>  _
	Public Property FullName() As String
		Get
			Return Me._FullName
		End Get
		Set
			If (String.Equals(Me._FullName, value) = false) Then
				Me._FullName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_positionTitle", DbType:="NVarChar(50)")>  _
	Public Property positionTitle() As String
		Get
			Return Me._positionTitle
		End Get
		Set
			If (String.Equals(Me._positionTitle, value) = false) Then
				Me._positionTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_statusID", DbType:="Int")>  _
	Public Property statusID() As System.Nullable(Of Integer)
		Get
			Return Me._statusID
		End Get
		Set
			If (Me._statusID.Equals(value) = false) Then
				Me._statusID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rate", DbType:="Decimal(18,2)")>  _
	Public Property rate() As System.Nullable(Of Decimal)
		Get
			Return Me._rate
		End Get
		Set
			If (Me._rate.Equals(value) = false) Then
				Me._rate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hours", DbType:="Int")>  _
	Public Property hours() As System.Nullable(Of Integer)
		Get
			Return Me._hours
		End Get
		Set
			If (Me._hours.Equals(value) = false) Then
				Me._hours = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_labor", DbType:="Decimal(29,2)")>  _
	Public Property labor() As System.Nullable(Of Decimal)
		Get
			Return Me._labor
		End Get
		Set
			If (Me._labor.Equals(value) = false) Then
				Me._labor = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentStatus", DbType:="VarChar(50)")>  _
	Public Property paymentStatus() As String
		Get
			Return Me._paymentStatus
		End Get
		Set
			If (String.Equals(Me._paymentStatus, value) = false) Then
				Me._paymentStatus = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentID", DbType:="Int")>  _
	Public Property paymentID() As System.Nullable(Of Integer)
		Get
			Return Me._paymentID
		End Get
		Set
			If (Me._paymentID.Equals(value) = false) Then
				Me._paymentID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_expenses", DbType:="Money")>  _
	Public Property expenses() As System.Nullable(Of Decimal)
		Get
			Return Me._expenses
		End Get
		Set
			If (Me._expenses.Equals(value) = false) Then
				Me._expenses = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Total", DbType:="Decimal(32,4)")>  _
	Public Property Total() As System.Nullable(Of Decimal)
		Get
			Return Me._Total
		End Get
		Set
			If (Me._Total.Equals(value) = false) Then
				Me._Total = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentDate", DbType:="SmallDateTime")>  _
	Public Property paymentDate() As System.Nullable(Of Date)
		Get
			Return Me._paymentDate
		End Get
		Set
			If (Me._paymentDate.Equals(value) = false) Then
				Me._paymentDate = value
			End If
		End Set
	End Property
End Class

Partial Public Class ViewBillingSummaryByEventResult
	
	Private _RequirementID As Integer
	
	Private _eventID As Integer
	
	Private _userName As String
	
	Private _FullName As String
	
	Private _positionTitle As String
	
	Private _statusID As System.Nullable(Of Integer)
	
	Private _rate As System.Nullable(Of Decimal)
	
	Private _hours As System.Nullable(Of Double)
	
	Private _Total As System.Nullable(Of Double)
	
	Private _paymentStatus As String
	
	Private _paymentDate As System.Nullable(Of Date)
	
	Private _paymentID As System.Nullable(Of Integer)
	
	Private _expenses As System.Nullable(Of Decimal)
	
	Private _TotalAmount As System.Nullable(Of Double)
	
	Private _startTime As System.Nullable(Of Date)
	
	Private _endTime As System.Nullable(Of Date)
	
	Private _billingRate As System.Nullable(Of Decimal)
	
	Private _TotalBillableLabor As System.Nullable(Of Double)
	
	Private _Sampling As System.Nullable(Of Double)
	
	Private _Bonus As System.Nullable(Of Double)
	
	Private _Parking As System.Nullable(Of Double)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RequirementID", DbType:="Int NOT NULL")>  _
	Public Property RequirementID() As Integer
		Get
			Return Me._RequirementID
		End Get
		Set
			If ((Me._RequirementID = value)  _
						= false) Then
				Me._RequirementID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userName", DbType:="NVarChar(50)")>  _
	Public Property userName() As String
		Get
			Return Me._userName
		End Get
		Set
			If (String.Equals(Me._userName, value) = false) Then
				Me._userName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FullName", DbType:="NVarChar(101)")>  _
	Public Property FullName() As String
		Get
			Return Me._FullName
		End Get
		Set
			If (String.Equals(Me._FullName, value) = false) Then
				Me._FullName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_positionTitle", DbType:="NVarChar(50)")>  _
	Public Property positionTitle() As String
		Get
			Return Me._positionTitle
		End Get
		Set
			If (String.Equals(Me._positionTitle, value) = false) Then
				Me._positionTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_statusID", DbType:="Int")>  _
	Public Property statusID() As System.Nullable(Of Integer)
		Get
			Return Me._statusID
		End Get
		Set
			If (Me._statusID.Equals(value) = false) Then
				Me._statusID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rate", DbType:="Decimal(18,2)")>  _
	Public Property rate() As System.Nullable(Of Decimal)
		Get
			Return Me._rate
		End Get
		Set
			If (Me._rate.Equals(value) = false) Then
				Me._rate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hours", DbType:="Float")>  _
	Public Property hours() As System.Nullable(Of Double)
		Get
			Return Me._hours
		End Get
		Set
			If (Me._hours.Equals(value) = false) Then
				Me._hours = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Total", DbType:="Float")>  _
	Public Property Total() As System.Nullable(Of Double)
		Get
			Return Me._Total
		End Get
		Set
			If (Me._Total.Equals(value) = false) Then
				Me._Total = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentStatus", DbType:="VarChar(50)")>  _
	Public Property paymentStatus() As String
		Get
			Return Me._paymentStatus
		End Get
		Set
			If (String.Equals(Me._paymentStatus, value) = false) Then
				Me._paymentStatus = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentDate", DbType:="SmallDateTime")>  _
	Public Property paymentDate() As System.Nullable(Of Date)
		Get
			Return Me._paymentDate
		End Get
		Set
			If (Me._paymentDate.Equals(value) = false) Then
				Me._paymentDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentID", DbType:="Int")>  _
	Public Property paymentID() As System.Nullable(Of Integer)
		Get
			Return Me._paymentID
		End Get
		Set
			If (Me._paymentID.Equals(value) = false) Then
				Me._paymentID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_expenses", DbType:="Money")>  _
	Public Property expenses() As System.Nullable(Of Decimal)
		Get
			Return Me._expenses
		End Get
		Set
			If (Me._expenses.Equals(value) = false) Then
				Me._expenses = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalAmount", DbType:="Float")>  _
	Public Property TotalAmount() As System.Nullable(Of Double)
		Get
			Return Me._TotalAmount
		End Get
		Set
			If (Me._TotalAmount.Equals(value) = false) Then
				Me._TotalAmount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_startTime", DbType:="SmallDateTime")>  _
	Public Property startTime() As System.Nullable(Of Date)
		Get
			Return Me._startTime
		End Get
		Set
			If (Me._startTime.Equals(value) = false) Then
				Me._startTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_endTime", DbType:="SmallDateTime")>  _
	Public Property endTime() As System.Nullable(Of Date)
		Get
			Return Me._endTime
		End Get
		Set
			If (Me._endTime.Equals(value) = false) Then
				Me._endTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_billingRate", DbType:="Decimal(18,2)")>  _
	Public Property billingRate() As System.Nullable(Of Decimal)
		Get
			Return Me._billingRate
		End Get
		Set
			If (Me._billingRate.Equals(value) = false) Then
				Me._billingRate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalBillableLabor", DbType:="Float")>  _
	Public Property TotalBillableLabor() As System.Nullable(Of Double)
		Get
			Return Me._TotalBillableLabor
		End Get
		Set
			If (Me._TotalBillableLabor.Equals(value) = false) Then
				Me._TotalBillableLabor = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sampling", DbType:="Float")>  _
	Public Property Sampling() As System.Nullable(Of Double)
		Get
			Return Me._Sampling
		End Get
		Set
			If (Me._Sampling.Equals(value) = false) Then
				Me._Sampling = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Bonus", DbType:="Float")>  _
	Public Property Bonus() As System.Nullable(Of Double)
		Get
			Return Me._Bonus
		End Get
		Set
			If (Me._Bonus.Equals(value) = false) Then
				Me._Bonus = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Parking", DbType:="Float")>  _
	Public Property Parking() As System.Nullable(Of Double)
		Get
			Return Me._Parking
		End Get
		Set
			If (Me._Parking.Equals(value) = false) Then
				Me._Parking = value
			End If
		End Set
	End Property
End Class

Partial Public Class ViewInventoryItemListByBrandResult
	
	Private _itemID As Integer
	
	Private _itemName As String
	
	Private _brandID As Integer
	
	Private _inGroup As System.Nullable(Of Boolean)
	
	Private _retailPrice As System.Nullable(Of Decimal)
	
	Private _packageSize As String
	
	Private _unitsInKit As System.Nullable(Of Integer)
	
	Private _brandGroupID As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_itemID", DbType:="Int NOT NULL")>  _
	Public Property itemID() As Integer
		Get
			Return Me._itemID
		End Get
		Set
			If ((Me._itemID = value)  _
						= false) Then
				Me._itemID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_itemName", DbType:="NVarChar(50)")>  _
	Public Property itemName() As String
		Get
			Return Me._itemName
		End Get
		Set
			If (String.Equals(Me._itemName, value) = false) Then
				Me._itemName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandID", DbType:="Int NOT NULL")>  _
	Public Property brandID() As Integer
		Get
			Return Me._brandID
		End Get
		Set
			If ((Me._brandID = value)  _
						= false) Then
				Me._brandID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_inGroup", DbType:="Bit")>  _
	Public Property inGroup() As System.Nullable(Of Boolean)
		Get
			Return Me._inGroup
		End Get
		Set
			If (Me._inGroup.Equals(value) = false) Then
				Me._inGroup = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_retailPrice", DbType:="Decimal(6,2)")>  _
	Public Property retailPrice() As System.Nullable(Of Decimal)
		Get
			Return Me._retailPrice
		End Get
		Set
			If (Me._retailPrice.Equals(value) = false) Then
				Me._retailPrice = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_packageSize", DbType:="VarChar(50)")>  _
	Public Property packageSize() As String
		Get
			Return Me._packageSize
		End Get
		Set
			If (String.Equals(Me._packageSize, value) = false) Then
				Me._packageSize = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_unitsInKit", DbType:="Int")>  _
	Public Property unitsInKit() As System.Nullable(Of Integer)
		Get
			Return Me._unitsInKit
		End Get
		Set
			If (Me._unitsInKit.Equals(value) = false) Then
				Me._unitsInKit = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brandGroupID", DbType:="VarChar(MAX)")>  _
	Public Property brandGroupID() As String
		Get
			Return Me._brandGroupID
		End Get
		Set
			If (String.Equals(Me._brandGroupID, value) = false) Then
				Me._brandGroupID = value
			End If
		End Set
	End Property
End Class

Partial Public Class ViewPaidPaymentsByAmbassadorResult
	
	Private _RequirementID As Integer
	
	Private _locationID As System.Nullable(Of Integer)
	
	Private _accountName As String
	
	Private _eventID As Integer
	
	Private _supplierName As String
	
	Private _userID As String
	
	Private _userName As String
	
	Private _FullName As String
	
	Private _positionTitle As String
	
	Private _statusID As System.Nullable(Of Integer)
	
	Private _rate As System.Nullable(Of Decimal)
	
	Private _hours As System.Nullable(Of Double)
	
	Private _labor As System.Nullable(Of Double)
	
	Private _paymentStatus As String
	
	Private _paymentID As System.Nullable(Of Integer)
	
	Private _expenses As System.Nullable(Of Decimal)
	
	Private _Total As System.Nullable(Of Double)
	
	Private _paymentDate As System.Nullable(Of Date)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RequirementID", DbType:="Int NOT NULL")>  _
	Public Property RequirementID() As Integer
		Get
			Return Me._RequirementID
		End Get
		Set
			If ((Me._RequirementID = value)  _
						= false) Then
				Me._RequirementID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_locationID", DbType:="Int")>  _
	Public Property locationID() As System.Nullable(Of Integer)
		Get
			Return Me._locationID
		End Get
		Set
			If (Me._locationID.Equals(value) = false) Then
				Me._locationID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountName", DbType:="VarChar(256)")>  _
	Public Property accountName() As String
		Get
			Return Me._accountName
		End Get
		Set
			If (String.Equals(Me._accountName, value) = false) Then
				Me._accountName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierName", DbType:="NVarChar(50)")>  _
	Public Property supplierName() As String
		Get
			Return Me._supplierName
		End Get
		Set
			If (String.Equals(Me._supplierName, value) = false) Then
				Me._supplierName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me._userID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userName", DbType:="NVarChar(50)")>  _
	Public Property userName() As String
		Get
			Return Me._userName
		End Get
		Set
			If (String.Equals(Me._userName, value) = false) Then
				Me._userName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FullName", DbType:="NVarChar(101)")>  _
	Public Property FullName() As String
		Get
			Return Me._FullName
		End Get
		Set
			If (String.Equals(Me._FullName, value) = false) Then
				Me._FullName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_positionTitle", DbType:="NVarChar(50)")>  _
	Public Property positionTitle() As String
		Get
			Return Me._positionTitle
		End Get
		Set
			If (String.Equals(Me._positionTitle, value) = false) Then
				Me._positionTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_statusID", DbType:="Int")>  _
	Public Property statusID() As System.Nullable(Of Integer)
		Get
			Return Me._statusID
		End Get
		Set
			If (Me._statusID.Equals(value) = false) Then
				Me._statusID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rate", DbType:="Decimal(18,2)")>  _
	Public Property rate() As System.Nullable(Of Decimal)
		Get
			Return Me._rate
		End Get
		Set
			If (Me._rate.Equals(value) = false) Then
				Me._rate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hours", DbType:="Float")>  _
	Public Property hours() As System.Nullable(Of Double)
		Get
			Return Me._hours
		End Get
		Set
			If (Me._hours.Equals(value) = false) Then
				Me._hours = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_labor", DbType:="Float")>  _
	Public Property labor() As System.Nullable(Of Double)
		Get
			Return Me._labor
		End Get
		Set
			If (Me._labor.Equals(value) = false) Then
				Me._labor = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentStatus", DbType:="VarChar(50)")>  _
	Public Property paymentStatus() As String
		Get
			Return Me._paymentStatus
		End Get
		Set
			If (String.Equals(Me._paymentStatus, value) = false) Then
				Me._paymentStatus = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentID", DbType:="Int")>  _
	Public Property paymentID() As System.Nullable(Of Integer)
		Get
			Return Me._paymentID
		End Get
		Set
			If (Me._paymentID.Equals(value) = false) Then
				Me._paymentID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_expenses", DbType:="Money")>  _
	Public Property expenses() As System.Nullable(Of Decimal)
		Get
			Return Me._expenses
		End Get
		Set
			If (Me._expenses.Equals(value) = false) Then
				Me._expenses = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Total", DbType:="Float")>  _
	Public Property Total() As System.Nullable(Of Double)
		Get
			Return Me._Total
		End Get
		Set
			If (Me._Total.Equals(value) = false) Then
				Me._Total = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentDate", DbType:="SmallDateTime")>  _
	Public Property paymentDate() As System.Nullable(Of Date)
		Get
			Return Me._paymentDate
		End Get
		Set
			If (Me._paymentDate.Equals(value) = false) Then
				Me._paymentDate = value
			End If
		End Set
	End Property
End Class

Partial Public Class ViewPaymentsByAmbassadorResult
	
	Private _RequirementID As Integer
	
	Private _eventID As Integer
	
	Private _supplierName As String
	
	Private _userID As String
	
	Private _userName As String
	
	Private _FullName As String
	
	Private _positionTitle As String
	
	Private _statusID As System.Nullable(Of Integer)
	
	Private _rate As System.Nullable(Of Decimal)
	
	Private _hours As System.Nullable(Of Integer)
	
	Private _Total As System.Nullable(Of Decimal)
	
	Private _paymentStatus As String
	
	Private _paymentID As System.Nullable(Of Integer)
	
	Private _expenses As System.Nullable(Of Decimal)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RequirementID", DbType:="Int NOT NULL")>  _
	Public Property RequirementID() As Integer
		Get
			Return Me._RequirementID
		End Get
		Set
			If ((Me._RequirementID = value)  _
						= false) Then
				Me._RequirementID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierName", DbType:="NVarChar(50)")>  _
	Public Property supplierName() As String
		Get
			Return Me._supplierName
		End Get
		Set
			If (String.Equals(Me._supplierName, value) = false) Then
				Me._supplierName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me._userID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userName", DbType:="NVarChar(50)")>  _
	Public Property userName() As String
		Get
			Return Me._userName
		End Get
		Set
			If (String.Equals(Me._userName, value) = false) Then
				Me._userName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FullName", DbType:="NVarChar(101)")>  _
	Public Property FullName() As String
		Get
			Return Me._FullName
		End Get
		Set
			If (String.Equals(Me._FullName, value) = false) Then
				Me._FullName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_positionTitle", DbType:="NVarChar(50)")>  _
	Public Property positionTitle() As String
		Get
			Return Me._positionTitle
		End Get
		Set
			If (String.Equals(Me._positionTitle, value) = false) Then
				Me._positionTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_statusID", DbType:="Int")>  _
	Public Property statusID() As System.Nullable(Of Integer)
		Get
			Return Me._statusID
		End Get
		Set
			If (Me._statusID.Equals(value) = false) Then
				Me._statusID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rate", DbType:="Decimal(18,2)")>  _
	Public Property rate() As System.Nullable(Of Decimal)
		Get
			Return Me._rate
		End Get
		Set
			If (Me._rate.Equals(value) = false) Then
				Me._rate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hours", DbType:="Int")>  _
	Public Property hours() As System.Nullable(Of Integer)
		Get
			Return Me._hours
		End Get
		Set
			If (Me._hours.Equals(value) = false) Then
				Me._hours = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Total", DbType:="Decimal(29,2)")>  _
	Public Property Total() As System.Nullable(Of Decimal)
		Get
			Return Me._Total
		End Get
		Set
			If (Me._Total.Equals(value) = false) Then
				Me._Total = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentStatus", DbType:="VarChar(50)")>  _
	Public Property paymentStatus() As String
		Get
			Return Me._paymentStatus
		End Get
		Set
			If (String.Equals(Me._paymentStatus, value) = false) Then
				Me._paymentStatus = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentID", DbType:="Int")>  _
	Public Property paymentID() As System.Nullable(Of Integer)
		Get
			Return Me._paymentID
		End Get
		Set
			If (Me._paymentID.Equals(value) = false) Then
				Me._paymentID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_expenses", DbType:="Money")>  _
	Public Property expenses() As System.Nullable(Of Decimal)
		Get
			Return Me._expenses
		End Get
		Set
			If (Me._expenses.Equals(value) = false) Then
				Me._expenses = value
			End If
		End Set
	End Property
End Class

Partial Public Class ViewPayrollSummaryByEventResult
	
	Private _RequirementID As Integer
	
	Private _eventID As Integer
	
	Private _userName As String
	
	Private _FullName As String
	
	Private _positionTitle As String
	
	Private _statusID As System.Nullable(Of Integer)
	
	Private _rate As System.Nullable(Of Decimal)
	
	Private _hours As System.Nullable(Of Double)
	
	Private _Total As System.Nullable(Of Double)
	
	Private _paymentStatus As String
	
	Private _paymentDate As System.Nullable(Of Date)
	
	Private _paymentID As System.Nullable(Of Integer)
	
	Private _expenses As System.Nullable(Of Decimal)
	
	Private _TotalAmount As System.Nullable(Of Double)
	
	Private _startTime As System.Nullable(Of Date)
	
	Private _endTime As System.Nullable(Of Date)
	
	Private _billingRate As System.Nullable(Of Decimal)
	
	Private _TotalBillableLabor As System.Nullable(Of Double)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RequirementID", DbType:="Int NOT NULL")>  _
	Public Property RequirementID() As Integer
		Get
			Return Me._RequirementID
		End Get
		Set
			If ((Me._RequirementID = value)  _
						= false) Then
				Me._RequirementID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userName", DbType:="NVarChar(50)")>  _
	Public Property userName() As String
		Get
			Return Me._userName
		End Get
		Set
			If (String.Equals(Me._userName, value) = false) Then
				Me._userName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FullName", DbType:="NVarChar(101)")>  _
	Public Property FullName() As String
		Get
			Return Me._FullName
		End Get
		Set
			If (String.Equals(Me._FullName, value) = false) Then
				Me._FullName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_positionTitle", DbType:="NVarChar(50)")>  _
	Public Property positionTitle() As String
		Get
			Return Me._positionTitle
		End Get
		Set
			If (String.Equals(Me._positionTitle, value) = false) Then
				Me._positionTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_statusID", DbType:="Int")>  _
	Public Property statusID() As System.Nullable(Of Integer)
		Get
			Return Me._statusID
		End Get
		Set
			If (Me._statusID.Equals(value) = false) Then
				Me._statusID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rate", DbType:="Decimal(18,2)")>  _
	Public Property rate() As System.Nullable(Of Decimal)
		Get
			Return Me._rate
		End Get
		Set
			If (Me._rate.Equals(value) = false) Then
				Me._rate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hours", DbType:="Float")>  _
	Public Property hours() As System.Nullable(Of Double)
		Get
			Return Me._hours
		End Get
		Set
			If (Me._hours.Equals(value) = false) Then
				Me._hours = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Total", DbType:="Float")>  _
	Public Property Total() As System.Nullable(Of Double)
		Get
			Return Me._Total
		End Get
		Set
			If (Me._Total.Equals(value) = false) Then
				Me._Total = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentStatus", DbType:="VarChar(50)")>  _
	Public Property paymentStatus() As String
		Get
			Return Me._paymentStatus
		End Get
		Set
			If (String.Equals(Me._paymentStatus, value) = false) Then
				Me._paymentStatus = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentDate", DbType:="SmallDateTime")>  _
	Public Property paymentDate() As System.Nullable(Of Date)
		Get
			Return Me._paymentDate
		End Get
		Set
			If (Me._paymentDate.Equals(value) = false) Then
				Me._paymentDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentID", DbType:="Int")>  _
	Public Property paymentID() As System.Nullable(Of Integer)
		Get
			Return Me._paymentID
		End Get
		Set
			If (Me._paymentID.Equals(value) = false) Then
				Me._paymentID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_expenses", DbType:="Money")>  _
	Public Property expenses() As System.Nullable(Of Decimal)
		Get
			Return Me._expenses
		End Get
		Set
			If (Me._expenses.Equals(value) = false) Then
				Me._expenses = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalAmount", DbType:="Float")>  _
	Public Property TotalAmount() As System.Nullable(Of Double)
		Get
			Return Me._TotalAmount
		End Get
		Set
			If (Me._TotalAmount.Equals(value) = false) Then
				Me._TotalAmount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_startTime", DbType:="SmallDateTime")>  _
	Public Property startTime() As System.Nullable(Of Date)
		Get
			Return Me._startTime
		End Get
		Set
			If (Me._startTime.Equals(value) = false) Then
				Me._startTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_endTime", DbType:="SmallDateTime")>  _
	Public Property endTime() As System.Nullable(Of Date)
		Get
			Return Me._endTime
		End Get
		Set
			If (Me._endTime.Equals(value) = false) Then
				Me._endTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_billingRate", DbType:="Decimal(18,2)")>  _
	Public Property billingRate() As System.Nullable(Of Decimal)
		Get
			Return Me._billingRate
		End Get
		Set
			If (Me._billingRate.Equals(value) = false) Then
				Me._billingRate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalBillableLabor", DbType:="Float")>  _
	Public Property TotalBillableLabor() As System.Nullable(Of Double)
		Get
			Return Me._TotalBillableLabor
		End Get
		Set
			If (Me._TotalBillableLabor.Equals(value) = false) Then
				Me._TotalBillableLabor = value
			End If
		End Set
	End Property
End Class

Partial Public Class ViewPendingPaymentsByAmbassadorResult
	
	Private _RequirementID As Integer
	
	Private _locationID As System.Nullable(Of Integer)
	
	Private _accountName As String
	
	Private _accountID As Integer
	
	Private _eventID As Integer
	
	Private _supplierName As String
	
	Private _userID As String
	
	Private _userName As String
	
	Private _FullName As String
	
	Private _positionTitle As String
	
	Private _statusID As System.Nullable(Of Integer)
	
	Private _rate As System.Nullable(Of Decimal)
	
	Private _hours As System.Nullable(Of Double)
	
	Private _labor As System.Nullable(Of Double)
	
	Private _paymentStatus As String
	
	Private _paymentID As System.Nullable(Of Integer)
	
	Private _expenses As System.Nullable(Of Decimal)
	
	Private _Total As System.Nullable(Of Double)
	
	Private _paymentDate As System.Nullable(Of Date)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RequirementID", DbType:="Int NOT NULL")>  _
	Public Property RequirementID() As Integer
		Get
			Return Me._RequirementID
		End Get
		Set
			If ((Me._RequirementID = value)  _
						= false) Then
				Me._RequirementID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_locationID", DbType:="Int")>  _
	Public Property locationID() As System.Nullable(Of Integer)
		Get
			Return Me._locationID
		End Get
		Set
			If (Me._locationID.Equals(value) = false) Then
				Me._locationID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountName", DbType:="VarChar(256)")>  _
	Public Property accountName() As String
		Get
			Return Me._accountName
		End Get
		Set
			If (String.Equals(Me._accountName, value) = false) Then
				Me._accountName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountID", DbType:="Int NOT NULL")>  _
	Public Property accountID() As Integer
		Get
			Return Me._accountID
		End Get
		Set
			If ((Me._accountID = value)  _
						= false) Then
				Me._accountID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierName", DbType:="NVarChar(50)")>  _
	Public Property supplierName() As String
		Get
			Return Me._supplierName
		End Get
		Set
			If (String.Equals(Me._supplierName, value) = false) Then
				Me._supplierName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me._userID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userName", DbType:="NVarChar(50)")>  _
	Public Property userName() As String
		Get
			Return Me._userName
		End Get
		Set
			If (String.Equals(Me._userName, value) = false) Then
				Me._userName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FullName", DbType:="NVarChar(101)")>  _
	Public Property FullName() As String
		Get
			Return Me._FullName
		End Get
		Set
			If (String.Equals(Me._FullName, value) = false) Then
				Me._FullName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_positionTitle", DbType:="NVarChar(50)")>  _
	Public Property positionTitle() As String
		Get
			Return Me._positionTitle
		End Get
		Set
			If (String.Equals(Me._positionTitle, value) = false) Then
				Me._positionTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_statusID", DbType:="Int")>  _
	Public Property statusID() As System.Nullable(Of Integer)
		Get
			Return Me._statusID
		End Get
		Set
			If (Me._statusID.Equals(value) = false) Then
				Me._statusID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rate", DbType:="Decimal(18,2)")>  _
	Public Property rate() As System.Nullable(Of Decimal)
		Get
			Return Me._rate
		End Get
		Set
			If (Me._rate.Equals(value) = false) Then
				Me._rate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hours", DbType:="Float")>  _
	Public Property hours() As System.Nullable(Of Double)
		Get
			Return Me._hours
		End Get
		Set
			If (Me._hours.Equals(value) = false) Then
				Me._hours = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_labor", DbType:="Float")>  _
	Public Property labor() As System.Nullable(Of Double)
		Get
			Return Me._labor
		End Get
		Set
			If (Me._labor.Equals(value) = false) Then
				Me._labor = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentStatus", DbType:="VarChar(50)")>  _
	Public Property paymentStatus() As String
		Get
			Return Me._paymentStatus
		End Get
		Set
			If (String.Equals(Me._paymentStatus, value) = false) Then
				Me._paymentStatus = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentID", DbType:="Int")>  _
	Public Property paymentID() As System.Nullable(Of Integer)
		Get
			Return Me._paymentID
		End Get
		Set
			If (Me._paymentID.Equals(value) = false) Then
				Me._paymentID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_expenses", DbType:="Money")>  _
	Public Property expenses() As System.Nullable(Of Decimal)
		Get
			Return Me._expenses
		End Get
		Set
			If (Me._expenses.Equals(value) = false) Then
				Me._expenses = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Total", DbType:="Float")>  _
	Public Property Total() As System.Nullable(Of Double)
		Get
			Return Me._Total
		End Get
		Set
			If (Me._Total.Equals(value) = false) Then
				Me._Total = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentDate", DbType:="SmallDateTime")>  _
	Public Property paymentDate() As System.Nullable(Of Date)
		Get
			Return Me._paymentDate
		End Get
		Set
			If (Me._paymentDate.Equals(value) = false) Then
				Me._paymentDate = value
			End If
		End Set
	End Property
End Class

Partial Public Class ViewProcessingPaymentsByAmbassadorResult
	
	Private _RequirementID As Integer
	
	Private _locationID As System.Nullable(Of Integer)
	
	Private _accountName As String
	
	Private _eventID As Integer
	
	Private _supplierName As String
	
	Private _userID As String
	
	Private _userName As String
	
	Private _FullName As String
	
	Private _positionTitle As String
	
	Private _statusID As System.Nullable(Of Integer)
	
	Private _rate As System.Nullable(Of Decimal)
	
	Private _hours As System.Nullable(Of Integer)
	
	Private _labor As System.Nullable(Of Decimal)
	
	Private _paymentStatus As String
	
	Private _paymentID As System.Nullable(Of Integer)
	
	Private _expenses As System.Nullable(Of Decimal)
	
	Private _Total As System.Nullable(Of Decimal)
	
	Private _paymentDate As System.Nullable(Of Date)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RequirementID", DbType:="Int NOT NULL")>  _
	Public Property RequirementID() As Integer
		Get
			Return Me._RequirementID
		End Get
		Set
			If ((Me._RequirementID = value)  _
						= false) Then
				Me._RequirementID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_locationID", DbType:="Int")>  _
	Public Property locationID() As System.Nullable(Of Integer)
		Get
			Return Me._locationID
		End Get
		Set
			If (Me._locationID.Equals(value) = false) Then
				Me._locationID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accountName", DbType:="VarChar(256)")>  _
	Public Property accountName() As String
		Get
			Return Me._accountName
		End Get
		Set
			If (String.Equals(Me._accountName, value) = false) Then
				Me._accountName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventID", DbType:="Int NOT NULL")>  _
	Public Property eventID() As Integer
		Get
			Return Me._eventID
		End Get
		Set
			If ((Me._eventID = value)  _
						= false) Then
				Me._eventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierName", DbType:="NVarChar(50)")>  _
	Public Property supplierName() As String
		Get
			Return Me._supplierName
		End Get
		Set
			If (String.Equals(Me._supplierName, value) = false) Then
				Me._supplierName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="NVarChar(50)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me._userID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userName", DbType:="NVarChar(50)")>  _
	Public Property userName() As String
		Get
			Return Me._userName
		End Get
		Set
			If (String.Equals(Me._userName, value) = false) Then
				Me._userName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FullName", DbType:="NVarChar(101)")>  _
	Public Property FullName() As String
		Get
			Return Me._FullName
		End Get
		Set
			If (String.Equals(Me._FullName, value) = false) Then
				Me._FullName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_positionTitle", DbType:="NVarChar(50)")>  _
	Public Property positionTitle() As String
		Get
			Return Me._positionTitle
		End Get
		Set
			If (String.Equals(Me._positionTitle, value) = false) Then
				Me._positionTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_statusID", DbType:="Int")>  _
	Public Property statusID() As System.Nullable(Of Integer)
		Get
			Return Me._statusID
		End Get
		Set
			If (Me._statusID.Equals(value) = false) Then
				Me._statusID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rate", DbType:="Decimal(18,2)")>  _
	Public Property rate() As System.Nullable(Of Decimal)
		Get
			Return Me._rate
		End Get
		Set
			If (Me._rate.Equals(value) = false) Then
				Me._rate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hours", DbType:="Int")>  _
	Public Property hours() As System.Nullable(Of Integer)
		Get
			Return Me._hours
		End Get
		Set
			If (Me._hours.Equals(value) = false) Then
				Me._hours = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_labor", DbType:="Decimal(29,2)")>  _
	Public Property labor() As System.Nullable(Of Decimal)
		Get
			Return Me._labor
		End Get
		Set
			If (Me._labor.Equals(value) = false) Then
				Me._labor = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentStatus", DbType:="VarChar(50)")>  _
	Public Property paymentStatus() As String
		Get
			Return Me._paymentStatus
		End Get
		Set
			If (String.Equals(Me._paymentStatus, value) = false) Then
				Me._paymentStatus = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentID", DbType:="Int")>  _
	Public Property paymentID() As System.Nullable(Of Integer)
		Get
			Return Me._paymentID
		End Get
		Set
			If (Me._paymentID.Equals(value) = false) Then
				Me._paymentID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_expenses", DbType:="Money")>  _
	Public Property expenses() As System.Nullable(Of Decimal)
		Get
			Return Me._expenses
		End Get
		Set
			If (Me._expenses.Equals(value) = false) Then
				Me._expenses = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Total", DbType:="Decimal(32,4)")>  _
	Public Property Total() As System.Nullable(Of Decimal)
		Get
			Return Me._Total
		End Get
		Set
			If (Me._Total.Equals(value) = false) Then
				Me._Total = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentDate", DbType:="SmallDateTime")>  _
	Public Property paymentDate() As System.Nullable(Of Date)
		Get
			Return Me._paymentDate
		End Get
		Set
			If (Me._paymentDate.Equals(value) = false) Then
				Me._paymentDate = value
			End If
		End Set
	End Property
End Class
