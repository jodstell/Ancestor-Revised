'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="EventManagerData")>  _
Partial Public Class ReportDataClassesDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertrptMarketFilter(instance As rptMarketFilter)
    End Sub
  Partial Private Sub UpdaterptMarketFilter(instance As rptMarketFilter)
    End Sub
  Partial Private Sub DeleterptMarketFilter(instance As rptMarketFilter)
    End Sub
  Partial Private Sub InsertrptField(instance As rptField)
    End Sub
  Partial Private Sub UpdaterptField(instance As rptField)
    End Sub
  Partial Private Sub DeleterptField(instance As rptField)
    End Sub
  Partial Private Sub InsertrptSupplierFilter(instance As rptSupplierFilter)
    End Sub
  Partial Private Sub UpdaterptSupplierFilter(instance As rptSupplierFilter)
    End Sub
  Partial Private Sub DeleterptSupplierFilter(instance As rptSupplierFilter)
    End Sub
  Partial Private Sub InsertrptColumn(instance As rptColumn)
    End Sub
  Partial Private Sub UpdaterptColumn(instance As rptColumn)
    End Sub
  Partial Private Sub DeleterptColumn(instance As rptColumn)
    End Sub
  Partial Private Sub InsertrptEventTypeFilter(instance As rptEventTypeFilter)
    End Sub
  Partial Private Sub UpdaterptEventTypeFilter(instance As rptEventTypeFilter)
    End Sub
  Partial Private Sub DeleterptEventTypeFilter(instance As rptEventTypeFilter)
    End Sub
  Partial Private Sub InsertrptStatusFilter(instance As rptStatusFilter)
    End Sub
  Partial Private Sub UpdaterptStatusFilter(instance As rptStatusFilter)
    End Sub
  Partial Private Sub DeleterptStatusFilter(instance As rptStatusFilter)
    End Sub
  Partial Private Sub InsertrptReport(instance As rptReport)
    End Sub
  Partial Private Sub UpdaterptReport(instance As rptReport)
    End Sub
  Partial Private Sub DeleterptReport(instance As rptReport)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("DefaultConnection").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property rptMarketFilters() As System.Data.Linq.Table(Of rptMarketFilter)
		Get
			Return Me.GetTable(Of rptMarketFilter)
		End Get
	End Property
	
	Public ReadOnly Property rptFields() As System.Data.Linq.Table(Of rptField)
		Get
			Return Me.GetTable(Of rptField)
		End Get
	End Property
	
	Public ReadOnly Property rptSupplierFilters() As System.Data.Linq.Table(Of rptSupplierFilter)
		Get
			Return Me.GetTable(Of rptSupplierFilter)
		End Get
	End Property
	
	Public ReadOnly Property rptColumns() As System.Data.Linq.Table(Of rptColumn)
		Get
			Return Me.GetTable(Of rptColumn)
		End Get
	End Property
	
	Public ReadOnly Property rptEventTypeFilters() As System.Data.Linq.Table(Of rptEventTypeFilter)
		Get
			Return Me.GetTable(Of rptEventTypeFilter)
		End Get
	End Property
	
	Public ReadOnly Property rptStatusFilters() As System.Data.Linq.Table(Of rptStatusFilter)
		Get
			Return Me.GetTable(Of rptStatusFilter)
		End Get
	End Property
	
	Public ReadOnly Property rptReports() As System.Data.Linq.Table(Of rptReport)
		Get
			Return Me.GetTable(Of rptReport)
		End Get
	End Property
	
	Public ReadOnly Property getEventReportLists() As System.Data.Linq.Table(Of getEventReportList)
		Get
			Return Me.GetTable(Of getEventReportList)
		End Get
	End Property
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteMarketFilter_EventReport")>  _
	Public Function DeleteMarketFilter_EventReport(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal reportID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), reportID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteFilter_EventReport")>  _
	Public Function DeleteFilter_EventReport(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal reportID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), reportID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteStatusFilter_EventReport")>  _
	Public Function DeleteStatusFilter_EventReport(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal reportID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), reportID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteEventTypeFilter_EventReport")>  _
	Public Function DeleteEventTypeFilter_EventReport(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal reportID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), reportID)
		Return CType(result.ReturnValue,Integer)
	End Function
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.rptMarketFilter")>  _
Partial Public Class rptMarketFilter
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _marketFilterID As Integer
	
	Private _reportID As System.Nullable(Of Integer)
	
	Private _marketID As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnmarketFilterIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnmarketFilterIDChanged()
    End Sub
    Partial Private Sub OnreportIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnreportIDChanged()
    End Sub
    Partial Private Sub OnmarketIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnmarketIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketFilterID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property marketFilterID() As Integer
		Get
			Return Me._marketFilterID
		End Get
		Set
			If ((Me._marketFilterID = value)  _
						= false) Then
				Me.OnmarketFilterIDChanging(value)
				Me.SendPropertyChanging
				Me._marketFilterID = value
				Me.SendPropertyChanged("marketFilterID")
				Me.OnmarketFilterIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_reportID", DbType:="Int")>  _
	Public Property reportID() As System.Nullable(Of Integer)
		Get
			Return Me._reportID
		End Get
		Set
			If (Me._reportID.Equals(value) = false) Then
				Me.OnreportIDChanging(value)
				Me.SendPropertyChanging
				Me._reportID = value
				Me.SendPropertyChanged("reportID")
				Me.OnreportIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marketID", DbType:="Int")>  _
	Public Property marketID() As System.Nullable(Of Integer)
		Get
			Return Me._marketID
		End Get
		Set
			If (Me._marketID.Equals(value) = false) Then
				Me.OnmarketIDChanging(value)
				Me.SendPropertyChanging
				Me._marketID = value
				Me.SendPropertyChanged("marketID")
				Me.OnmarketIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.rptField")>  _
Partial Public Class rptField
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _fieldID As Integer
	
	Private _tableName As String
	
	Private _fieldName As String
	
	Private _fieldType As System.Nullable(Of Byte)
	
	Private _fieldTitle As String
	
	Private _sortOrder As System.Nullable(Of Byte)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnfieldIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnfieldIDChanged()
    End Sub
    Partial Private Sub OntableNameChanging(value As String)
    End Sub
    Partial Private Sub OntableNameChanged()
    End Sub
    Partial Private Sub OnfieldNameChanging(value As String)
    End Sub
    Partial Private Sub OnfieldNameChanged()
    End Sub
    Partial Private Sub OnfieldTypeChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnfieldTypeChanged()
    End Sub
    Partial Private Sub OnfieldTitleChanging(value As String)
    End Sub
    Partial Private Sub OnfieldTitleChanged()
    End Sub
    Partial Private Sub OnsortOrderChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnsortOrderChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fieldID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property fieldID() As Integer
		Get
			Return Me._fieldID
		End Get
		Set
			If ((Me._fieldID = value)  _
						= false) Then
				Me.OnfieldIDChanging(value)
				Me.SendPropertyChanging
				Me._fieldID = value
				Me.SendPropertyChanged("fieldID")
				Me.OnfieldIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tableName", DbType:="NVarChar(50)")>  _
	Public Property tableName() As String
		Get
			Return Me._tableName
		End Get
		Set
			If (String.Equals(Me._tableName, value) = false) Then
				Me.OntableNameChanging(value)
				Me.SendPropertyChanging
				Me._tableName = value
				Me.SendPropertyChanged("tableName")
				Me.OntableNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fieldName", DbType:="NVarChar(50)")>  _
	Public Property fieldName() As String
		Get
			Return Me._fieldName
		End Get
		Set
			If (String.Equals(Me._fieldName, value) = false) Then
				Me.OnfieldNameChanging(value)
				Me.SendPropertyChanging
				Me._fieldName = value
				Me.SendPropertyChanged("fieldName")
				Me.OnfieldNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fieldType", DbType:="TinyInt")>  _
	Public Property fieldType() As System.Nullable(Of Byte)
		Get
			Return Me._fieldType
		End Get
		Set
			If (Me._fieldType.Equals(value) = false) Then
				Me.OnfieldTypeChanging(value)
				Me.SendPropertyChanging
				Me._fieldType = value
				Me.SendPropertyChanged("fieldType")
				Me.OnfieldTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fieldTitle", DbType:="NVarChar(256)")>  _
	Public Property fieldTitle() As String
		Get
			Return Me._fieldTitle
		End Get
		Set
			If (String.Equals(Me._fieldTitle, value) = false) Then
				Me.OnfieldTitleChanging(value)
				Me.SendPropertyChanging
				Me._fieldTitle = value
				Me.SendPropertyChanged("fieldTitle")
				Me.OnfieldTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sortOrder", DbType:="TinyInt")>  _
	Public Property sortOrder() As System.Nullable(Of Byte)
		Get
			Return Me._sortOrder
		End Get
		Set
			If (Me._sortOrder.Equals(value) = false) Then
				Me.OnsortOrderChanging(value)
				Me.SendPropertyChanging
				Me._sortOrder = value
				Me.SendPropertyChanged("sortOrder")
				Me.OnsortOrderChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.rptSupplierFilter")>  _
Partial Public Class rptSupplierFilter
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _supplierFilterID As Integer
	
	Private _reportID As Integer
	
	Private _supplierID As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnsupplierFilterIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnsupplierFilterIDChanged()
    End Sub
    Partial Private Sub OnreportIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnreportIDChanged()
    End Sub
    Partial Private Sub OnsupplierIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnsupplierIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierFilterID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property supplierFilterID() As Integer
		Get
			Return Me._supplierFilterID
		End Get
		Set
			If ((Me._supplierFilterID = value)  _
						= false) Then
				Me.OnsupplierFilterIDChanging(value)
				Me.SendPropertyChanging
				Me._supplierFilterID = value
				Me.SendPropertyChanged("supplierFilterID")
				Me.OnsupplierFilterIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_reportID", DbType:="Int NOT NULL")>  _
	Public Property reportID() As Integer
		Get
			Return Me._reportID
		End Get
		Set
			If ((Me._reportID = value)  _
						= false) Then
				Me.OnreportIDChanging(value)
				Me.SendPropertyChanging
				Me._reportID = value
				Me.SendPropertyChanged("reportID")
				Me.OnreportIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int NOT NULL")>  _
	Public Property supplierID() As Integer
		Get
			Return Me._supplierID
		End Get
		Set
			If ((Me._supplierID = value)  _
						= false) Then
				Me.OnsupplierIDChanging(value)
				Me.SendPropertyChanging
				Me._supplierID = value
				Me.SendPropertyChanged("supplierID")
				Me.OnsupplierIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.rptColumn")>  _
Partial Public Class rptColumn
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _columnID As Integer
	
	Private _reportID As System.Nullable(Of Integer)
	
	Private _dataField As String
	
	Private _headerText As String
	
	Private _columnType As String
	
	Private _sortOrder As System.Nullable(Of Byte)
	
	Private _tableName As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OncolumnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OncolumnIDChanged()
    End Sub
    Partial Private Sub OnreportIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnreportIDChanged()
    End Sub
    Partial Private Sub OndataFieldChanging(value As String)
    End Sub
    Partial Private Sub OndataFieldChanged()
    End Sub
    Partial Private Sub OnheaderTextChanging(value As String)
    End Sub
    Partial Private Sub OnheaderTextChanged()
    End Sub
    Partial Private Sub OncolumnTypeChanging(value As String)
    End Sub
    Partial Private Sub OncolumnTypeChanged()
    End Sub
    Partial Private Sub OnsortOrderChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnsortOrderChanged()
    End Sub
    Partial Private Sub OntableNameChanging(value As String)
    End Sub
    Partial Private Sub OntableNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_columnID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property columnID() As Integer
		Get
			Return Me._columnID
		End Get
		Set
			If ((Me._columnID = value)  _
						= false) Then
				Me.OncolumnIDChanging(value)
				Me.SendPropertyChanging
				Me._columnID = value
				Me.SendPropertyChanged("columnID")
				Me.OncolumnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_reportID", DbType:="Int")>  _
	Public Property reportID() As System.Nullable(Of Integer)
		Get
			Return Me._reportID
		End Get
		Set
			If (Me._reportID.Equals(value) = false) Then
				Me.OnreportIDChanging(value)
				Me.SendPropertyChanging
				Me._reportID = value
				Me.SendPropertyChanged("reportID")
				Me.OnreportIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dataField", DbType:="NVarChar(50)")>  _
	Public Property dataField() As String
		Get
			Return Me._dataField
		End Get
		Set
			If (String.Equals(Me._dataField, value) = false) Then
				Me.OndataFieldChanging(value)
				Me.SendPropertyChanging
				Me._dataField = value
				Me.SendPropertyChanged("dataField")
				Me.OndataFieldChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_headerText", DbType:="NVarChar(50)")>  _
	Public Property headerText() As String
		Get
			Return Me._headerText
		End Get
		Set
			If (String.Equals(Me._headerText, value) = false) Then
				Me.OnheaderTextChanging(value)
				Me.SendPropertyChanging
				Me._headerText = value
				Me.SendPropertyChanged("headerText")
				Me.OnheaderTextChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_columnType", DbType:="NVarChar(MAX)")>  _
	Public Property columnType() As String
		Get
			Return Me._columnType
		End Get
		Set
			If (String.Equals(Me._columnType, value) = false) Then
				Me.OncolumnTypeChanging(value)
				Me.SendPropertyChanging
				Me._columnType = value
				Me.SendPropertyChanged("columnType")
				Me.OncolumnTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sortOrder", DbType:="TinyInt")>  _
	Public Property sortOrder() As System.Nullable(Of Byte)
		Get
			Return Me._sortOrder
		End Get
		Set
			If (Me._sortOrder.Equals(value) = false) Then
				Me.OnsortOrderChanging(value)
				Me.SendPropertyChanging
				Me._sortOrder = value
				Me.SendPropertyChanged("sortOrder")
				Me.OnsortOrderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tableName", DbType:="NVarChar(50)")>  _
	Public Property tableName() As String
		Get
			Return Me._tableName
		End Get
		Set
			If (String.Equals(Me._tableName, value) = false) Then
				Me.OntableNameChanging(value)
				Me.SendPropertyChanging
				Me._tableName = value
				Me.SendPropertyChanged("tableName")
				Me.OntableNameChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.rptEventTypeFilter")>  _
Partial Public Class rptEventTypeFilter
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _eventTypeFilterID As Integer
	
	Private _reportID As Integer
	
	Private _eventTypeID As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OneventTypeFilterIDChanging(value As Integer)
    End Sub
    Partial Private Sub OneventTypeFilterIDChanged()
    End Sub
    Partial Private Sub OnreportIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnreportIDChanged()
    End Sub
    Partial Private Sub OneventTypeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OneventTypeIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTypeFilterID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property eventTypeFilterID() As Integer
		Get
			Return Me._eventTypeFilterID
		End Get
		Set
			If ((Me._eventTypeFilterID = value)  _
						= false) Then
				Me.OneventTypeFilterIDChanging(value)
				Me.SendPropertyChanging
				Me._eventTypeFilterID = value
				Me.SendPropertyChanged("eventTypeFilterID")
				Me.OneventTypeFilterIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_reportID", DbType:="Int NOT NULL")>  _
	Public Property reportID() As Integer
		Get
			Return Me._reportID
		End Get
		Set
			If ((Me._reportID = value)  _
						= false) Then
				Me.OnreportIDChanging(value)
				Me.SendPropertyChanging
				Me._reportID = value
				Me.SendPropertyChanged("reportID")
				Me.OnreportIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTypeID", DbType:="Int NOT NULL")>  _
	Public Property eventTypeID() As Integer
		Get
			Return Me._eventTypeID
		End Get
		Set
			If ((Me._eventTypeID = value)  _
						= false) Then
				Me.OneventTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._eventTypeID = value
				Me.SendPropertyChanged("eventTypeID")
				Me.OneventTypeIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.rptStatusFilter")>  _
Partial Public Class rptStatusFilter
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _statusFilterID As Integer
	
	Private _reportID As Integer
	
	Private _statusID As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnstatusFilterIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnstatusFilterIDChanged()
    End Sub
    Partial Private Sub OnreportIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnreportIDChanged()
    End Sub
    Partial Private Sub OnstatusIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnstatusIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_statusFilterID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property statusFilterID() As Integer
		Get
			Return Me._statusFilterID
		End Get
		Set
			If ((Me._statusFilterID = value)  _
						= false) Then
				Me.OnstatusFilterIDChanging(value)
				Me.SendPropertyChanging
				Me._statusFilterID = value
				Me.SendPropertyChanged("statusFilterID")
				Me.OnstatusFilterIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_reportID", DbType:="Int NOT NULL")>  _
	Public Property reportID() As Integer
		Get
			Return Me._reportID
		End Get
		Set
			If ((Me._reportID = value)  _
						= false) Then
				Me.OnreportIDChanging(value)
				Me.SendPropertyChanging
				Me._reportID = value
				Me.SendPropertyChanged("reportID")
				Me.OnreportIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_statusID", DbType:="Int NOT NULL")>  _
	Public Property statusID() As Integer
		Get
			Return Me._statusID
		End Get
		Set
			If ((Me._statusID = value)  _
						= false) Then
				Me.OnstatusIDChanging(value)
				Me.SendPropertyChanging
				Me._statusID = value
				Me.SendPropertyChanged("statusID")
				Me.OnstatusIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.rptReport")>  _
Partial Public Class rptReport
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _reportID As Integer
	
	Private _reportName As String
	
	Private _reportGroupID As Integer
	
	Private _description As String
	
	Private _active As System.Nullable(Of Boolean)
	
	Private _createdBy As String
	
	Private _createdDate As System.Nullable(Of Date)
	
	Private _modifiedBy As String
	
	Private _modifiedDate As System.Nullable(Of Date)
	
	Private _startDate As System.Nullable(Of Date)
	
	Private _endDate As System.Nullable(Of Date)
	
	Private _supplierID As System.Nullable(Of Integer)
	
	Private _eventTypeID As System.Nullable(Of Integer)
	
	Private _allowFilter As System.Nullable(Of Boolean)
	
	Private _allowSorting As System.Nullable(Of Boolean)
	
	Private _allowReorder As System.Nullable(Of Boolean)
	
	Private _groupBy As String
	
	Private _fileName As String
	
	Private _reportTitle As String
	
	Private _allowGrouping As System.Nullable(Of Boolean)
	
	Private _exportPDF As System.Nullable(Of Boolean)
	
	Private _exportExcel As System.Nullable(Of Boolean)
	
	Private _exportCSV As System.Nullable(Of Boolean)
	
	Private _exportWord As System.Nullable(Of Boolean)
	
	Private _showByBrand As System.Nullable(Of Boolean)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnreportIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnreportIDChanged()
    End Sub
    Partial Private Sub OnreportNameChanging(value As String)
    End Sub
    Partial Private Sub OnreportNameChanged()
    End Sub
    Partial Private Sub OnreportGroupIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnreportGroupIDChanged()
    End Sub
    Partial Private Sub OndescriptionChanging(value As String)
    End Sub
    Partial Private Sub OndescriptionChanged()
    End Sub
    Partial Private Sub OnactiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnactiveChanged()
    End Sub
    Partial Private Sub OncreatedByChanging(value As String)
    End Sub
    Partial Private Sub OncreatedByChanged()
    End Sub
    Partial Private Sub OncreatedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OncreatedDateChanged()
    End Sub
    Partial Private Sub OnmodifiedByChanging(value As String)
    End Sub
    Partial Private Sub OnmodifiedByChanged()
    End Sub
    Partial Private Sub OnmodifiedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnmodifiedDateChanged()
    End Sub
    Partial Private Sub OnstartDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnstartDateChanged()
    End Sub
    Partial Private Sub OnendDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnendDateChanged()
    End Sub
    Partial Private Sub OnsupplierIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnsupplierIDChanged()
    End Sub
    Partial Private Sub OneventTypeIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OneventTypeIDChanged()
    End Sub
    Partial Private Sub OnallowFilterChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnallowFilterChanged()
    End Sub
    Partial Private Sub OnallowSortingChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnallowSortingChanged()
    End Sub
    Partial Private Sub OnallowReorderChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnallowReorderChanged()
    End Sub
    Partial Private Sub OngroupByChanging(value As String)
    End Sub
    Partial Private Sub OngroupByChanged()
    End Sub
    Partial Private Sub OnfileNameChanging(value As String)
    End Sub
    Partial Private Sub OnfileNameChanged()
    End Sub
    Partial Private Sub OnreportTitleChanging(value As String)
    End Sub
    Partial Private Sub OnreportTitleChanged()
    End Sub
    Partial Private Sub OnallowGroupingChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnallowGroupingChanged()
    End Sub
    Partial Private Sub OnexportPDFChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnexportPDFChanged()
    End Sub
    Partial Private Sub OnexportExcelChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnexportExcelChanged()
    End Sub
    Partial Private Sub OnexportCSVChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnexportCSVChanged()
    End Sub
    Partial Private Sub OnexportWordChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnexportWordChanged()
    End Sub
    Partial Private Sub OnshowByBrandChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnshowByBrandChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_reportID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property reportID() As Integer
		Get
			Return Me._reportID
		End Get
		Set
			If ((Me._reportID = value)  _
						= false) Then
				Me.OnreportIDChanging(value)
				Me.SendPropertyChanging
				Me._reportID = value
				Me.SendPropertyChanged("reportID")
				Me.OnreportIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_reportName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property reportName() As String
		Get
			Return Me._reportName
		End Get
		Set
			If (String.Equals(Me._reportName, value) = false) Then
				Me.OnreportNameChanging(value)
				Me.SendPropertyChanging
				Me._reportName = value
				Me.SendPropertyChanged("reportName")
				Me.OnreportNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_reportGroupID", DbType:="Int NOT NULL")>  _
	Public Property reportGroupID() As Integer
		Get
			Return Me._reportGroupID
		End Get
		Set
			If ((Me._reportGroupID = value)  _
						= false) Then
				Me.OnreportGroupIDChanging(value)
				Me.SendPropertyChanging
				Me._reportGroupID = value
				Me.SendPropertyChanged("reportGroupID")
				Me.OnreportGroupIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_description", DbType:="NVarChar(MAX)")>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me.OndescriptionChanging(value)
				Me.SendPropertyChanging
				Me._description = value
				Me.SendPropertyChanged("description")
				Me.OndescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_active", DbType:="Bit")>  _
	Public Property active() As System.Nullable(Of Boolean)
		Get
			Return Me._active
		End Get
		Set
			If (Me._active.Equals(value) = false) Then
				Me.OnactiveChanging(value)
				Me.SendPropertyChanging
				Me._active = value
				Me.SendPropertyChanged("active")
				Me.OnactiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_createdBy", DbType:="NVarChar(50)")>  _
	Public Property createdBy() As String
		Get
			Return Me._createdBy
		End Get
		Set
			If (String.Equals(Me._createdBy, value) = false) Then
				Me.OncreatedByChanging(value)
				Me.SendPropertyChanging
				Me._createdBy = value
				Me.SendPropertyChanged("createdBy")
				Me.OncreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_createdDate", DbType:="SmallDateTime")>  _
	Public Property createdDate() As System.Nullable(Of Date)
		Get
			Return Me._createdDate
		End Get
		Set
			If (Me._createdDate.Equals(value) = false) Then
				Me.OncreatedDateChanging(value)
				Me.SendPropertyChanging
				Me._createdDate = value
				Me.SendPropertyChanged("createdDate")
				Me.OncreatedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_modifiedBy", DbType:="NVarChar(50)")>  _
	Public Property modifiedBy() As String
		Get
			Return Me._modifiedBy
		End Get
		Set
			If (String.Equals(Me._modifiedBy, value) = false) Then
				Me.OnmodifiedByChanging(value)
				Me.SendPropertyChanging
				Me._modifiedBy = value
				Me.SendPropertyChanged("modifiedBy")
				Me.OnmodifiedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_modifiedDate", DbType:="SmallDateTime")>  _
	Public Property modifiedDate() As System.Nullable(Of Date)
		Get
			Return Me._modifiedDate
		End Get
		Set
			If (Me._modifiedDate.Equals(value) = false) Then
				Me.OnmodifiedDateChanging(value)
				Me.SendPropertyChanging
				Me._modifiedDate = value
				Me.SendPropertyChanged("modifiedDate")
				Me.OnmodifiedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_startDate", DbType:="SmallDateTime")>  _
	Public Property startDate() As System.Nullable(Of Date)
		Get
			Return Me._startDate
		End Get
		Set
			If (Me._startDate.Equals(value) = false) Then
				Me.OnstartDateChanging(value)
				Me.SendPropertyChanging
				Me._startDate = value
				Me.SendPropertyChanged("startDate")
				Me.OnstartDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_endDate", DbType:="SmallDateTime")>  _
	Public Property endDate() As System.Nullable(Of Date)
		Get
			Return Me._endDate
		End Get
		Set
			If (Me._endDate.Equals(value) = false) Then
				Me.OnendDateChanging(value)
				Me.SendPropertyChanging
				Me._endDate = value
				Me.SendPropertyChanged("endDate")
				Me.OnendDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierID", DbType:="Int")>  _
	Public Property supplierID() As System.Nullable(Of Integer)
		Get
			Return Me._supplierID
		End Get
		Set
			If (Me._supplierID.Equals(value) = false) Then
				Me.OnsupplierIDChanging(value)
				Me.SendPropertyChanging
				Me._supplierID = value
				Me.SendPropertyChanged("supplierID")
				Me.OnsupplierIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTypeID", DbType:="Int")>  _
	Public Property eventTypeID() As System.Nullable(Of Integer)
		Get
			Return Me._eventTypeID
		End Get
		Set
			If (Me._eventTypeID.Equals(value) = false) Then
				Me.OneventTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._eventTypeID = value
				Me.SendPropertyChanged("eventTypeID")
				Me.OneventTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_allowFilter", DbType:="Bit")>  _
	Public Property allowFilter() As System.Nullable(Of Boolean)
		Get
			Return Me._allowFilter
		End Get
		Set
			If (Me._allowFilter.Equals(value) = false) Then
				Me.OnallowFilterChanging(value)
				Me.SendPropertyChanging
				Me._allowFilter = value
				Me.SendPropertyChanged("allowFilter")
				Me.OnallowFilterChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_allowSorting", DbType:="Bit")>  _
	Public Property allowSorting() As System.Nullable(Of Boolean)
		Get
			Return Me._allowSorting
		End Get
		Set
			If (Me._allowSorting.Equals(value) = false) Then
				Me.OnallowSortingChanging(value)
				Me.SendPropertyChanging
				Me._allowSorting = value
				Me.SendPropertyChanged("allowSorting")
				Me.OnallowSortingChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_allowReorder", DbType:="Bit")>  _
	Public Property allowReorder() As System.Nullable(Of Boolean)
		Get
			Return Me._allowReorder
		End Get
		Set
			If (Me._allowReorder.Equals(value) = false) Then
				Me.OnallowReorderChanging(value)
				Me.SendPropertyChanging
				Me._allowReorder = value
				Me.SendPropertyChanged("allowReorder")
				Me.OnallowReorderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_groupBy", DbType:="NVarChar(50)")>  _
	Public Property groupBy() As String
		Get
			Return Me._groupBy
		End Get
		Set
			If (String.Equals(Me._groupBy, value) = false) Then
				Me.OngroupByChanging(value)
				Me.SendPropertyChanging
				Me._groupBy = value
				Me.SendPropertyChanged("groupBy")
				Me.OngroupByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fileName", DbType:="NVarChar(255)")>  _
	Public Property fileName() As String
		Get
			Return Me._fileName
		End Get
		Set
			If (String.Equals(Me._fileName, value) = false) Then
				Me.OnfileNameChanging(value)
				Me.SendPropertyChanging
				Me._fileName = value
				Me.SendPropertyChanged("fileName")
				Me.OnfileNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_reportTitle", DbType:="NVarChar(255)")>  _
	Public Property reportTitle() As String
		Get
			Return Me._reportTitle
		End Get
		Set
			If (String.Equals(Me._reportTitle, value) = false) Then
				Me.OnreportTitleChanging(value)
				Me.SendPropertyChanging
				Me._reportTitle = value
				Me.SendPropertyChanged("reportTitle")
				Me.OnreportTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_allowGrouping", DbType:="Bit")>  _
	Public Property allowGrouping() As System.Nullable(Of Boolean)
		Get
			Return Me._allowGrouping
		End Get
		Set
			If (Me._allowGrouping.Equals(value) = false) Then
				Me.OnallowGroupingChanging(value)
				Me.SendPropertyChanging
				Me._allowGrouping = value
				Me.SendPropertyChanged("allowGrouping")
				Me.OnallowGroupingChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_exportPDF", DbType:="Bit")>  _
	Public Property exportPDF() As System.Nullable(Of Boolean)
		Get
			Return Me._exportPDF
		End Get
		Set
			If (Me._exportPDF.Equals(value) = false) Then
				Me.OnexportPDFChanging(value)
				Me.SendPropertyChanging
				Me._exportPDF = value
				Me.SendPropertyChanged("exportPDF")
				Me.OnexportPDFChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_exportExcel", DbType:="Bit")>  _
	Public Property exportExcel() As System.Nullable(Of Boolean)
		Get
			Return Me._exportExcel
		End Get
		Set
			If (Me._exportExcel.Equals(value) = false) Then
				Me.OnexportExcelChanging(value)
				Me.SendPropertyChanging
				Me._exportExcel = value
				Me.SendPropertyChanged("exportExcel")
				Me.OnexportExcelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_exportCSV", DbType:="Bit")>  _
	Public Property exportCSV() As System.Nullable(Of Boolean)
		Get
			Return Me._exportCSV
		End Get
		Set
			If (Me._exportCSV.Equals(value) = false) Then
				Me.OnexportCSVChanging(value)
				Me.SendPropertyChanging
				Me._exportCSV = value
				Me.SendPropertyChanged("exportCSV")
				Me.OnexportCSVChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_exportWord", DbType:="Bit")>  _
	Public Property exportWord() As System.Nullable(Of Boolean)
		Get
			Return Me._exportWord
		End Get
		Set
			If (Me._exportWord.Equals(value) = false) Then
				Me.OnexportWordChanging(value)
				Me.SendPropertyChanging
				Me._exportWord = value
				Me.SendPropertyChanged("exportWord")
				Me.OnexportWordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_showByBrand", DbType:="Bit")>  _
	Public Property showByBrand() As System.Nullable(Of Boolean)
		Get
			Return Me._showByBrand
		End Get
		Set
			If (Me._showByBrand.Equals(value) = false) Then
				Me.OnshowByBrandChanging(value)
				Me.SendPropertyChanging
				Me._showByBrand = value
				Me.SendPropertyChanged("showByBrand")
				Me.OnshowByBrandChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.getEventReportList")>  _
Partial Public Class getEventReportList
	
	Private _reportID As Integer
	
	Private _reportTitle As String
	
	Private _modifiedBy As String
	
	Private _modifiedDate As System.Nullable(Of Date)
	
	Private _active As System.Nullable(Of Boolean)
	
	Private _clientID As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_reportID", DbType:="Int NOT NULL")>  _
	Public Property reportID() As Integer
		Get
			Return Me._reportID
		End Get
		Set
			If ((Me._reportID = value)  _
						= false) Then
				Me._reportID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_reportTitle", DbType:="NVarChar(255)")>  _
	Public Property reportTitle() As String
		Get
			Return Me._reportTitle
		End Get
		Set
			If (String.Equals(Me._reportTitle, value) = false) Then
				Me._reportTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_modifiedBy", DbType:="NVarChar(101)")>  _
	Public Property modifiedBy() As String
		Get
			Return Me._modifiedBy
		End Get
		Set
			If (String.Equals(Me._modifiedBy, value) = false) Then
				Me._modifiedBy = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_modifiedDate", DbType:="SmallDateTime")>  _
	Public Property modifiedDate() As System.Nullable(Of Date)
		Get
			Return Me._modifiedDate
		End Get
		Set
			If (Me._modifiedDate.Equals(value) = false) Then
				Me._modifiedDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_active", DbType:="Bit")>  _
	Public Property active() As System.Nullable(Of Boolean)
		Get
			Return Me._active
		End Get
		Set
			If (Me._active.Equals(value) = false) Then
				Me._active = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientID", DbType:="Int")>  _
	Public Property clientID() As System.Nullable(Of Integer)
		Get
			Return Me._clientID
		End Get
		Set
			If (Me._clientID.Equals(value) = false) Then
				Me._clientID = value
			End If
		End Set
	End Property
End Class
