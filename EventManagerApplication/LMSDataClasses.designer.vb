'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="BletsianLMS_GigEngyn")>  _
Partial Public Class LMSDataClassesDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertSite(instance As Site)
    End Sub
  Partial Private Sub UpdateSite(instance As Site)
    End Sub
  Partial Private Sub DeleteSite(instance As Site)
    End Sub
  Partial Private Sub InsertAspNetRole(instance As AspNetRole)
    End Sub
  Partial Private Sub UpdateAspNetRole(instance As AspNetRole)
    End Sub
  Partial Private Sub DeleteAspNetRole(instance As AspNetRole)
    End Sub
  Partial Private Sub InsertAspNetUserLogin(instance As AspNetUserLogin)
    End Sub
  Partial Private Sub UpdateAspNetUserLogin(instance As AspNetUserLogin)
    End Sub
  Partial Private Sub DeleteAspNetUserLogin(instance As AspNetUserLogin)
    End Sub
  Partial Private Sub InsertAspNetUserRole(instance As AspNetUserRole)
    End Sub
  Partial Private Sub UpdateAspNetUserRole(instance As AspNetUserRole)
    End Sub
  Partial Private Sub DeleteAspNetUserRole(instance As AspNetUserRole)
    End Sub
  Partial Private Sub InsertAspNetUser(instance As AspNetUser)
    End Sub
  Partial Private Sub UpdateAspNetUser(instance As AspNetUser)
    End Sub
  Partial Private Sub DeleteAspNetUser(instance As AspNetUser)
    End Sub
  Partial Private Sub InsertAspNetUsersProfile(instance As AspNetUsersProfile)
    End Sub
  Partial Private Sub UpdateAspNetUsersProfile(instance As AspNetUsersProfile)
    End Sub
  Partial Private Sub DeleteAspNetUsersProfile(instance As AspNetUsersProfile)
    End Sub
  Partial Private Sub InsertCourse(instance As Course)
    End Sub
  Partial Private Sub UpdateCourse(instance As Course)
    End Sub
  Partial Private Sub DeleteCourse(instance As Course)
    End Sub
  Partial Private Sub InsertCurriculum(instance As Curriculum)
    End Sub
  Partial Private Sub UpdateCurriculum(instance As Curriculum)
    End Sub
  Partial Private Sub DeleteCurriculum(instance As Curriculum)
    End Sub
  Partial Private Sub InsertCurriculumList(instance As CurriculumList)
    End Sub
  Partial Private Sub UpdateCurriculumList(instance As CurriculumList)
    End Sub
  Partial Private Sub DeleteCurriculumList(instance As CurriculumList)
    End Sub
  Partial Private Sub InsertApplicant(instance As Applicant)
    End Sub
  Partial Private Sub UpdateApplicant(instance As Applicant)
    End Sub
  Partial Private Sub DeleteApplicant(instance As Applicant)
    End Sub
  Partial Private Sub InsertTimeZone(instance As TimeZone)
    End Sub
  Partial Private Sub UpdateTimeZone(instance As TimeZone)
    End Sub
  Partial Private Sub DeleteTimeZone(instance As TimeZone)
    End Sub
  Partial Private Sub InsertTestGroup(instance As TestGroup)
    End Sub
  Partial Private Sub UpdateTestGroup(instance As TestGroup)
    End Sub
  Partial Private Sub DeleteTestGroup(instance As TestGroup)
    End Sub
  Partial Private Sub InsertStudentsInGroup(instance As StudentsInGroup)
    End Sub
  Partial Private Sub UpdateStudentsInGroup(instance As StudentsInGroup)
    End Sub
  Partial Private Sub DeleteStudentsInGroup(instance As StudentsInGroup)
    End Sub
  Partial Private Sub InsertStudentsInCourse(instance As StudentsInCourse)
    End Sub
  Partial Private Sub UpdateStudentsInCourse(instance As StudentsInCourse)
    End Sub
  Partial Private Sub DeleteStudentsInCourse(instance As StudentsInCourse)
    End Sub
  Partial Private Sub InsertStudentsInGroup1(instance As StudentsInGroup1)
    End Sub
  Partial Private Sub UpdateStudentsInGroup1(instance As StudentsInGroup1)
    End Sub
  Partial Private Sub DeleteStudentsInGroup1(instance As StudentsInGroup1)
    End Sub
  Partial Private Sub InsertLocation(instance As Location)
    End Sub
  Partial Private Sub UpdateLocation(instance As Location)
    End Sub
  Partial Private Sub DeleteLocation(instance As Location)
    End Sub
  Partial Private Sub InsertInstructor(instance As Instructor)
    End Sub
  Partial Private Sub UpdateInstructor(instance As Instructor)
    End Sub
  Partial Private Sub DeleteInstructor(instance As Instructor)
    End Sub
  Partial Private Sub InsertCultureResource(instance As CultureResource)
    End Sub
  Partial Private Sub UpdateCultureResource(instance As CultureResource)
    End Sub
  Partial Private Sub DeleteCultureResource(instance As CultureResource)
    End Sub
  Partial Private Sub InsertIcon(instance As Icon)
    End Sub
  Partial Private Sub UpdateIcon(instance As Icon)
    End Sub
  Partial Private Sub DeleteIcon(instance As Icon)
    End Sub
  Partial Private Sub InsertCourseWidget(instance As CourseWidget)
    End Sub
  Partial Private Sub UpdateCourseWidget(instance As CourseWidget)
    End Sub
  Partial Private Sub DeleteCourseWidget(instance As CourseWidget)
    End Sub
  Partial Private Sub InsertCourseAnnouncement(instance As CourseAnnouncement)
    End Sub
  Partial Private Sub UpdateCourseAnnouncement(instance As CourseAnnouncement)
    End Sub
  Partial Private Sub DeleteCourseAnnouncement(instance As CourseAnnouncement)
    End Sub
  Partial Private Sub InsertCourseAssignment(instance As CourseAssignment)
    End Sub
  Partial Private Sub UpdateCourseAssignment(instance As CourseAssignment)
    End Sub
  Partial Private Sub DeleteCourseAssignment(instance As CourseAssignment)
    End Sub
  Partial Private Sub InsertCourseAssignmentResult(instance As CourseAssignmentResult)
    End Sub
  Partial Private Sub UpdateCourseAssignmentResult(instance As CourseAssignmentResult)
    End Sub
  Partial Private Sub DeleteCourseAssignmentResult(instance As CourseAssignmentResult)
    End Sub
  Partial Private Sub InsertDashboardTab(instance As DashboardTab)
    End Sub
  Partial Private Sub UpdateDashboardTab(instance As DashboardTab)
    End Sub
  Partial Private Sub DeleteDashboardTab(instance As DashboardTab)
    End Sub
  Partial Private Sub InsertDuscussionBoard(instance As DuscussionBoard)
    End Sub
  Partial Private Sub UpdateDuscussionBoard(instance As DuscussionBoard)
    End Sub
  Partial Private Sub DeleteDuscussionBoard(instance As DuscussionBoard)
    End Sub
  Partial Private Sub InsertDiscussionBoard(instance As DiscussionBoard)
    End Sub
  Partial Private Sub UpdateDiscussionBoard(instance As DiscussionBoard)
    End Sub
  Partial Private Sub DeleteDiscussionBoard(instance As DiscussionBoard)
    End Sub
  Partial Private Sub InsertDiscussionThread(instance As DiscussionThread)
    End Sub
  Partial Private Sub UpdateDiscussionThread(instance As DiscussionThread)
    End Sub
  Partial Private Sub DeleteDiscussionThread(instance As DiscussionThread)
    End Sub
  Partial Private Sub InsertDiscussionTopic(instance As DiscussionTopic)
    End Sub
  Partial Private Sub UpdateDiscussionTopic(instance As DiscussionTopic)
    End Sub
  Partial Private Sub DeleteDiscussionTopic(instance As DiscussionTopic)
    End Sub
  Partial Private Sub InsertActivityLog(instance As ActivityLog)
    End Sub
  Partial Private Sub UpdateActivityLog(instance As ActivityLog)
    End Sub
  Partial Private Sub DeleteActivityLog(instance As ActivityLog)
    End Sub
  Partial Private Sub InsertCurruculumAssessment(instance As CurruculumAssessment)
    End Sub
  Partial Private Sub UpdateCurruculumAssessment(instance As CurruculumAssessment)
    End Sub
  Partial Private Sub DeleteCurruculumAssessment(instance As CurruculumAssessment)
    End Sub
  Partial Private Sub InsertCourseFile(instance As CourseFile)
    End Sub
  Partial Private Sub UpdateCourseFile(instance As CourseFile)
    End Sub
  Partial Private Sub DeleteCourseFile(instance As CourseFile)
    End Sub
  Partial Private Sub InsertCourseLink(instance As CourseLink)
    End Sub
  Partial Private Sub UpdateCourseLink(instance As CourseLink)
    End Sub
  Partial Private Sub DeleteCourseLink(instance As CourseLink)
    End Sub
  Partial Private Sub InsertFile(instance As File)
    End Sub
  Partial Private Sub UpdateFile(instance As File)
    End Sub
  Partial Private Sub DeleteFile(instance As File)
    End Sub
  Partial Private Sub InsertLink(instance As Link)
    End Sub
  Partial Private Sub UpdateLink(instance As Link)
    End Sub
  Partial Private Sub DeleteLink(instance As Link)
    End Sub
  Partial Private Sub InsertAssignmentFile(instance As AssignmentFile)
    End Sub
  Partial Private Sub UpdateAssignmentFile(instance As AssignmentFile)
    End Sub
  Partial Private Sub DeleteAssignmentFile(instance As AssignmentFile)
    End Sub
  Partial Private Sub InsertTest(instance As Test)
    End Sub
  Partial Private Sub UpdateTest(instance As Test)
    End Sub
  Partial Private Sub DeleteTest(instance As Test)
    End Sub
  Partial Private Sub InsertQuestion(instance As Question)
    End Sub
  Partial Private Sub UpdateQuestion(instance As Question)
    End Sub
  Partial Private Sub DeleteQuestion(instance As Question)
    End Sub
  Partial Private Sub InsertTestScore(instance As TestScore)
    End Sub
  Partial Private Sub UpdateTestScore(instance As TestScore)
    End Sub
  Partial Private Sub DeleteTestScore(instance As TestScore)
    End Sub
  Partial Private Sub InsertTestSession(instance As TestSession)
    End Sub
  Partial Private Sub UpdateTestSession(instance As TestSession)
    End Sub
  Partial Private Sub DeleteTestSession(instance As TestSession)
    End Sub
  Partial Private Sub InsertAnswerList(instance As AnswerList)
    End Sub
  Partial Private Sub UpdateAnswerList(instance As AnswerList)
    End Sub
  Partial Private Sub DeleteAnswerList(instance As AnswerList)
    End Sub
  Partial Private Sub InsertCurriculumResult(instance As CurriculumResult)
    End Sub
  Partial Private Sub UpdateCurriculumResult(instance As CurriculumResult)
    End Sub
  Partial Private Sub DeleteCurriculumResult(instance As CurriculumResult)
    End Sub
  Partial Private Sub InsertUserInCourse(instance As UserInCourse)
    End Sub
  Partial Private Sub UpdateUserInCourse(instance As UserInCourse)
    End Sub
  Partial Private Sub DeleteUserInCourse(instance As UserInCourse)
    End Sub
  Partial Private Sub InsertCurriculumGroup(instance As CurriculumGroup)
    End Sub
  Partial Private Sub UpdateCurriculumGroup(instance As CurriculumGroup)
    End Sub
  Partial Private Sub DeleteCurriculumGroup(instance As CurriculumGroup)
    End Sub
  Partial Private Sub InsertCorrectAnswer(instance As CorrectAnswer)
    End Sub
  Partial Private Sub UpdateCorrectAnswer(instance As CorrectAnswer)
    End Sub
  Partial Private Sub DeleteCorrectAnswer(instance As CorrectAnswer)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("LMSConnection").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Sites() As System.Data.Linq.Table(Of Site)
		Get
			Return Me.GetTable(Of Site)
		End Get
	End Property
	
	Public ReadOnly Property StudentDetails() As System.Data.Linq.Table(Of StudentDetail)
		Get
			Return Me.GetTable(Of StudentDetail)
		End Get
	End Property
	
	Public ReadOnly Property UserDetails() As System.Data.Linq.Table(Of UserDetail)
		Get
			Return Me.GetTable(Of UserDetail)
		End Get
	End Property
	
	Public ReadOnly Property AspNetRoles() As System.Data.Linq.Table(Of AspNetRole)
		Get
			Return Me.GetTable(Of AspNetRole)
		End Get
	End Property
	
	Public ReadOnly Property AspNetUserLogins() As System.Data.Linq.Table(Of AspNetUserLogin)
		Get
			Return Me.GetTable(Of AspNetUserLogin)
		End Get
	End Property
	
	Public ReadOnly Property AspNetUserRoles() As System.Data.Linq.Table(Of AspNetUserRole)
		Get
			Return Me.GetTable(Of AspNetUserRole)
		End Get
	End Property
	
	Public ReadOnly Property AspNetUsers() As System.Data.Linq.Table(Of AspNetUser)
		Get
			Return Me.GetTable(Of AspNetUser)
		End Get
	End Property
	
	Public ReadOnly Property AspNetUsersProfiles() As System.Data.Linq.Table(Of AspNetUsersProfile)
		Get
			Return Me.GetTable(Of AspNetUsersProfile)
		End Get
	End Property
	
	Public ReadOnly Property Courses() As System.Data.Linq.Table(Of Course)
		Get
			Return Me.GetTable(Of Course)
		End Get
	End Property
	
	Public ReadOnly Property Curriculums() As System.Data.Linq.Table(Of Curriculum)
		Get
			Return Me.GetTable(Of Curriculum)
		End Get
	End Property
	
	Public ReadOnly Property CurriculumLists() As System.Data.Linq.Table(Of CurriculumList)
		Get
			Return Me.GetTable(Of CurriculumList)
		End Get
	End Property
	
	Public ReadOnly Property Applicants() As System.Data.Linq.Table(Of Applicant)
		Get
			Return Me.GetTable(Of Applicant)
		End Get
	End Property
	
	Public ReadOnly Property qryUserRoles() As System.Data.Linq.Table(Of qryUserRole)
		Get
			Return Me.GetTable(Of qryUserRole)
		End Get
	End Property
	
	Public ReadOnly Property TimeZones() As System.Data.Linq.Table(Of TimeZone)
		Get
			Return Me.GetTable(Of TimeZone)
		End Get
	End Property
	
	Public ReadOnly Property TestGroups() As System.Data.Linq.Table(Of TestGroup)
		Get
			Return Me.GetTable(Of TestGroup)
		End Get
	End Property
	
	Public ReadOnly Property StudentsInGroups() As System.Data.Linq.Table(Of StudentsInGroup)
		Get
			Return Me.GetTable(Of StudentsInGroup)
		End Get
	End Property
	
	Public ReadOnly Property Students() As System.Data.Linq.Table(Of Student)
		Get
			Return Me.GetTable(Of Student)
		End Get
	End Property
	
	Public ReadOnly Property StudentsInCourses() As System.Data.Linq.Table(Of StudentsInCourse)
		Get
			Return Me.GetTable(Of StudentsInCourse)
		End Get
	End Property
	
	Public ReadOnly Property StudentsInGroup1s() As System.Data.Linq.Table(Of StudentsInGroup1)
		Get
			Return Me.GetTable(Of StudentsInGroup1)
		End Get
	End Property
	
	Public ReadOnly Property Locations() As System.Data.Linq.Table(Of Location)
		Get
			Return Me.GetTable(Of Location)
		End Get
	End Property
	
	Public ReadOnly Property Instructors() As System.Data.Linq.Table(Of Instructor)
		Get
			Return Me.GetTable(Of Instructor)
		End Get
	End Property
	
	Public ReadOnly Property CultureResources() As System.Data.Linq.Table(Of CultureResource)
		Get
			Return Me.GetTable(Of CultureResource)
		End Get
	End Property
	
	Public ReadOnly Property Icons() As System.Data.Linq.Table(Of Icon)
		Get
			Return Me.GetTable(Of Icon)
		End Get
	End Property
	
	Public ReadOnly Property CourseWidgets() As System.Data.Linq.Table(Of CourseWidget)
		Get
			Return Me.GetTable(Of CourseWidget)
		End Get
	End Property
	
	Public ReadOnly Property CourseAnnouncements() As System.Data.Linq.Table(Of CourseAnnouncement)
		Get
			Return Me.GetTable(Of CourseAnnouncement)
		End Get
	End Property
	
	Public ReadOnly Property CourseAssignments() As System.Data.Linq.Table(Of CourseAssignment)
		Get
			Return Me.GetTable(Of CourseAssignment)
		End Get
	End Property
	
	Public ReadOnly Property CourseAssignmentResults() As System.Data.Linq.Table(Of CourseAssignmentResult)
		Get
			Return Me.GetTable(Of CourseAssignmentResult)
		End Get
	End Property
	
	Public ReadOnly Property DashboardTabs() As System.Data.Linq.Table(Of DashboardTab)
		Get
			Return Me.GetTable(Of DashboardTab)
		End Get
	End Property
	
	Public ReadOnly Property DuscussionBoards() As System.Data.Linq.Table(Of DuscussionBoard)
		Get
			Return Me.GetTable(Of DuscussionBoard)
		End Get
	End Property
	
	Public ReadOnly Property DiscussionBoards() As System.Data.Linq.Table(Of DiscussionBoard)
		Get
			Return Me.GetTable(Of DiscussionBoard)
		End Get
	End Property
	
	Public ReadOnly Property DiscussionThreads() As System.Data.Linq.Table(Of DiscussionThread)
		Get
			Return Me.GetTable(Of DiscussionThread)
		End Get
	End Property
	
	Public ReadOnly Property DiscussionTopics() As System.Data.Linq.Table(Of DiscussionTopic)
		Get
			Return Me.GetTable(Of DiscussionTopic)
		End Get
	End Property
	
	Public ReadOnly Property TotalLessonCount_byCourseIDs() As System.Data.Linq.Table(Of TotalLessonCount_byCourseID)
		Get
			Return Me.GetTable(Of TotalLessonCount_byCourseID)
		End Get
	End Property
	
	Public ReadOnly Property CourseFiles_Counts() As System.Data.Linq.Table(Of CourseFiles_Count)
		Get
			Return Me.GetTable(Of CourseFiles_Count)
		End Get
	End Property
	
	Public ReadOnly Property TestCount_byCourseIDs() As System.Data.Linq.Table(Of TestCount_byCourseID)
		Get
			Return Me.GetTable(Of TestCount_byCourseID)
		End Get
	End Property
	
	Public ReadOnly Property ActivityLogs() As System.Data.Linq.Table(Of ActivityLog)
		Get
			Return Me.GetTable(Of ActivityLog)
		End Get
	End Property
	
	Public ReadOnly Property CurruculumAssessments() As System.Data.Linq.Table(Of CurruculumAssessment)
		Get
			Return Me.GetTable(Of CurruculumAssessment)
		End Get
	End Property
	
	Public ReadOnly Property CourseFiles() As System.Data.Linq.Table(Of CourseFile)
		Get
			Return Me.GetTable(Of CourseFile)
		End Get
	End Property
	
	Public ReadOnly Property CourseLinks() As System.Data.Linq.Table(Of CourseLink)
		Get
			Return Me.GetTable(Of CourseLink)
		End Get
	End Property
	
	Public ReadOnly Property Files() As System.Data.Linq.Table(Of File)
		Get
			Return Me.GetTable(Of File)
		End Get
	End Property
	
	Public ReadOnly Property Links() As System.Data.Linq.Table(Of Link)
		Get
			Return Me.GetTable(Of Link)
		End Get
	End Property
	
	Public ReadOnly Property AssignmentFiles() As System.Data.Linq.Table(Of AssignmentFile)
		Get
			Return Me.GetTable(Of AssignmentFile)
		End Get
	End Property
	
	Public ReadOnly Property Tests() As System.Data.Linq.Table(Of Test)
		Get
			Return Me.GetTable(Of Test)
		End Get
	End Property
	
	Public ReadOnly Property TestResults() As System.Data.Linq.Table(Of TestResult)
		Get
			Return Me.GetTable(Of TestResult)
		End Get
	End Property
	
	Public ReadOnly Property baretc_qryQuestions() As System.Data.Linq.Table(Of baretc_qryQuestion)
		Get
			Return Me.GetTable(Of baretc_qryQuestion)
		End Get
	End Property
	
	Public ReadOnly Property Questions() As System.Data.Linq.Table(Of Question)
		Get
			Return Me.GetTable(Of Question)
		End Get
	End Property
	
	Public ReadOnly Property TestScores() As System.Data.Linq.Table(Of TestScore)
		Get
			Return Me.GetTable(Of TestScore)
		End Get
	End Property
	
	Public ReadOnly Property TestSessions() As System.Data.Linq.Table(Of TestSession)
		Get
			Return Me.GetTable(Of TestSession)
		End Get
	End Property
	
	Public ReadOnly Property AnswerLists() As System.Data.Linq.Table(Of AnswerList)
		Get
			Return Me.GetTable(Of AnswerList)
		End Get
	End Property
	
	Public ReadOnly Property baretc_TestResults() As System.Data.Linq.Table(Of baretc_TestResult)
		Get
			Return Me.GetTable(Of baretc_TestResult)
		End Get
	End Property
	
	Public ReadOnly Property getCurriculumResults() As System.Data.Linq.Table(Of getCurriculumResult)
		Get
			Return Me.GetTable(Of getCurriculumResult)
		End Get
	End Property
	
	Public ReadOnly Property qryGetCourseListByUserIDs() As System.Data.Linq.Table(Of qryGetCourseListByUserID)
		Get
			Return Me.GetTable(Of qryGetCourseListByUserID)
		End Get
	End Property
	
	Public ReadOnly Property CurriculumResults() As System.Data.Linq.Table(Of CurriculumResult)
		Get
			Return Me.GetTable(Of CurriculumResult)
		End Get
	End Property
	
	Public ReadOnly Property UserInCourses() As System.Data.Linq.Table(Of UserInCourse)
		Get
			Return Me.GetTable(Of UserInCourse)
		End Get
	End Property
	
	Public ReadOnly Property CurriculumGroups() As System.Data.Linq.Table(Of CurriculumGroup)
		Get
			Return Me.GetTable(Of CurriculumGroup)
		End Get
	End Property
	
	Public ReadOnly Property qryViewHistoryLogs() As System.Data.Linq.Table(Of qryViewHistoryLog)
		Get
			Return Me.GetTable(Of qryViewHistoryLog)
		End Get
	End Property
	
	Public ReadOnly Property CorrectAnswers() As System.Data.Linq.Table(Of CorrectAnswer)
		Get
			Return Me.GetTable(Of CorrectAnswer)
		End Get
	End Property
	
	Public ReadOnly Property getDistinctCurriculumResults() As System.Data.Linq.Table(Of getDistinctCurriculumResult)
		Get
			Return Me.GetTable(Of getDistinctCurriculumResult)
		End Get
	End Property
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getApplicantFirstLastName")>  _
	Public Function getApplicantFirstLastName(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UserGuid", DbType:="NVarChar(50)")> ByVal userGuid As String) As ISingleResult(Of getApplicantFirstLastNameResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userGuid)
		Return CType(result.ReturnValue,ISingleResult(Of getApplicantFirstLastNameResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getAvailableRoles")>  _
	Public Function getAvailableRoles(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String) As ISingleResult(Of getAvailableRolesResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID)
		Return CType(result.ReturnValue,ISingleResult(Of getAvailableRolesResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getCurriculumByGroupID")>  _
	Public Function getCurriculumByGroupID(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal curriculumGroupID As String) As ISingleResult(Of getCurriculumByGroupIDResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), curriculumGroupID)
		Return CType(result.ReturnValue,ISingleResult(Of getCurriculumByGroupIDResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.AvailableTests")>  _
	Public Function AvailableTests(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UserName", DbType:="VarChar(50)")> ByVal userName As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="SiteID", DbType:="VarChar(50)")> ByVal siteID As String) As ISingleResult(Of AvailableTestsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userName, siteID)
		Return CType(result.ReturnValue,ISingleResult(Of AvailableTestsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.AvailableTestList")>  _
	Public Function AvailableTestList(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UserName", DbType:="NVarChar(50)")> ByVal userName As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="SiteID", DbType:="NVarChar(50)")> ByVal siteID As String) As ISingleResult(Of AvailableTestListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userName, siteID)
		Return CType(result.ReturnValue,ISingleResult(Of AvailableTestListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.StartTest")>  _
	Public Function StartTest(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="SessionID", DbType:="VarChar(50)")> ByVal sessionID As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), sessionID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateAnswerList")>  _
	Public Function UpdateAnswerList(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="TestSessionID", DbType:="VarChar(50)")> ByVal testSessionID As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="QuizID", DbType:="Int")> ByVal quizID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="QuestionID", DbType:="Int")> ByVal questionID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CorrectAnswer", DbType:="Int")> ByVal correctAnswer As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UserAnswer", DbType:="Int")> ByVal userAnswer As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), testSessionID, quizID, questionID, correctAnswer, userAnswer)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateAnswerList1")>  _
	Public Function UpdateAnswerList1(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="TestSessionID", DbType:="VarChar(50)")> ByVal testSessionID As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="QuizID", DbType:="Int")> ByVal quizID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="QuestionID", DbType:="Int")> ByVal questionID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CorrectAnswer", DbType:="Int")> ByVal correctAnswer As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UserAnswer", DbType:="Int")> ByVal userAnswer As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="EarnedPoints", DbType:="Int")> ByVal earnedPoints As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Result", DbType:="VarChar(50)")> ByVal result As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="FillInAnswer", DbType:="VarChar(50)")> ByVal fillInAnswer As String) As Integer
		Dim result1 As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), testSessionID, quizID, questionID, correctAnswer, userAnswer, earnedPoints, result, fillInAnswer)
		Return CType(result1.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.baretc_CurentAvailableTestsByCourse")>  _
	Public Function baretc_CurentAvailableTestsByCourse(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UserName", DbType:="VarChar(50)")> ByVal userName As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CourseID", DbType:="VarChar(50)")> ByVal courseID As String) As ISingleResult(Of baretc_CurentAvailableTestsByCourseResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userName, courseID)
		Return CType(result.ReturnValue,ISingleResult(Of baretc_CurentAvailableTestsByCourseResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.baretc_CurentAvailableTestsByAmbassador")>  _
	Public Function baretc_CurentAvailableTestsByAmbassador(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UserName", DbType:="VarChar(50)")> ByVal userName As String) As ISingleResult(Of baretc_CurentAvailableTestsByAmbassadorResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userName)
		Return CType(result.ReturnValue,ISingleResult(Of baretc_CurentAvailableTestsByAmbassadorResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.baretc_BrandTrainingResult")>  _
	Public Function baretc_BrandTrainingResult(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UserName", DbType:="NVarChar(50)")> ByVal userName As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal siteID As String) As ISingleResult(Of baretc_BrandTrainingResultResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userName, siteID)
		Return CType(result.ReturnValue,ISingleResult(Of baretc_BrandTrainingResultResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.AddStudentToAllCourses")>  _
	Public Function AddStudentToAllCourses(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userName As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userName)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getCompletedCurriculumCountByGroup")>  _
	Public Function getCompletedCurriculumCountByGroup(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CurriculumID", DbType:="NVarChar(50)")> ByVal curriculumID As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="StudentInCourseID", DbType:="NVarChar(50)")> ByVal studentInCourseID As String) As ISingleResult(Of getCompletedCurriculumCountByGroupResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), curriculumID, studentInCourseID)
		Return CType(result.ReturnValue,ISingleResult(Of getCompletedCurriculumCountByGroupResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getCurriculumListByGRoup")>  _
	Public Function getCurriculumListByGRoup(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal courseID As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal curriculumGroupID As String) As ISingleResult(Of getCurriculumListByGRoupResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID, courseID, curriculumGroupID)
		Return CType(result.ReturnValue,ISingleResult(Of getCurriculumListByGRoupResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.getCurriculumItems")>  _
	Public Function getCurriculumItems(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CourseID", DbType:="NVarChar(50)")> ByVal courseID As String) As ISingleResult(Of getCurriculumItemsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), courseID)
		Return CType(result.ReturnValue,ISingleResult(Of getCurriculumItemsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteStaffLogin")>  _
	Public Function DeleteStaffLogin(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteCourseFile")>  _
	Public Function DeleteCourseFile(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CourseID", DbType:="NVarChar(50)")> ByVal courseID As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="FileID", DbType:="NVarChar(50)")> ByVal fileID As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), courseID, fileID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteSelectedCourseFile")>  _
	Public Function DeleteSelectedCourseFile(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="FileID", DbType:="NVarChar(50)")> ByVal fileID As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), fileID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.baretc_BrandTrainingResultByCourseID")>  _
	Public Function baretc_BrandTrainingResultByCourseID(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UserName", DbType:="NVarChar(50)")> ByVal userName As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal courseID As String) As ISingleResult(Of baretc_BrandTrainingResultByCourseIDResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userName, courseID)
		Return CType(result.ReturnValue,ISingleResult(Of baretc_BrandTrainingResultByCourseIDResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.AddStudentToCourse")>  _
	Public Function AddStudentToCourse(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userName As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal courseID As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userName, courseID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.BrandTrainingResultByUserID")>  _
	Public Function BrandTrainingResultByUserID(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UserName", DbType:="NVarChar(50)")> ByVal userName As String) As ISingleResult(Of BrandTrainingResultByUserIDResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userName)
		Return CType(result.ReturnValue,ISingleResult(Of BrandTrainingResultByUserIDResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.AddUserToCourse")>  _
	Public Function AddUserToCourse(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal courseID As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID, courseID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.RemoveUserFromCourse")>  _
	Public Function RemoveUserFromCourse(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal userID As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal courseID As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID, courseID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetCurriculumByCurriculumGroupID")>  _
	Public Function GetCurriculumByCurriculumGroupID(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CurriculumGroupID", DbType:="NVarChar(50)")> ByVal curriculumGroupID As String) As ISingleResult(Of GetCurriculumByCurriculumGroupIDResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), curriculumGroupID)
		Return CType(result.ReturnValue,ISingleResult(Of GetCurriculumByCurriculumGroupIDResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertHistoryLog")>  _
	Public Function InsertHistoryLog(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UserID", DbType:="NVarChar(50)")> ByVal userID As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="EventID", DbType:="Int")> ByVal eventID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="LogTime", DbType:="DateTime")> ByVal logTime As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Activity", DbType:="NVarChar(50)")> ByVal activity As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Details", DbType:="NVarChar(MAX)")> ByVal details As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IPAddress", DbType:="NVarChar(50)")> ByVal iPAddress As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UserAgent", DbType:="NVarChar(256)")> ByVal userAgent As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="PageURL", DbType:="NVarChar(256)")> ByVal pageURL As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID, eventID, logTime, activity, details, iPAddress, userAgent, pageURL)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.BrandGroupTrainingResultByUserID")>  _
	Public Function BrandGroupTrainingResultByUserID(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UserName", DbType:="NVarChar(50)")> ByVal userName As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal courseGroupID As String) As ISingleResult(Of BrandGroupTrainingResultByUserIDResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userName, courseGroupID)
		Return CType(result.ReturnValue,ISingleResult(Of BrandGroupTrainingResultByUserIDResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateSavedAnswerList")>  _
	Public Function UpdateSavedAnswerList(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="TestSessionID", DbType:="VarChar(50)")> ByVal testSessionID As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="QuestionID", DbType:="Int")> ByVal questionID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UserAnswer", DbType:="Int")> ByVal userAnswer As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Result", DbType:="VarChar(50)")> ByVal result As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="FillInAnswer", DbType:="VarChar(50)")> ByVal fillInAnswer As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="EarnedPoints", DbType:="Int")> ByVal earnedPoints As System.Nullable(Of Integer)) As Integer
		Dim result1 As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), testSessionID, questionID, userAnswer, result, fillInAnswer, earnedPoints)
		Return CType(result1.ReturnValue,Integer)
	End Function
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Site")>  _
Partial Public Class Site
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As String
	
	Private _SiteID As String
	
	Private _HostName As String
	
	Private _CompanyName As String
	
	Private _SiteDescription As String
	
	Private _SiteName As String
	
	Private _SiteManager As String
	
	Private _Location As String
	
	Private _SiteHeader As String
	
	Private _PassingGrade As System.Nullable(Of Integer)
	
	Private _RetakeTestHrs As System.Nullable(Of Integer)
	
	Private _ShowAgreementPage As Boolean
	
	Private _AgreementText As String
	
	Private _EmailAddressRequired As Boolean
	
	Private _ValidateRegistration As Boolean
	
	Private _ContactEmailAddress As String
	
	Private _Timeout As System.Nullable(Of Integer)
	
	Private _RequiredTestEnabled As Boolean
	
	Private _RequiredTestID As Integer
	
	Private _RequiredTestText As String
	
	Private _EnableTestStats As Boolean
	
	Private _Host As String
	
	Private _LocatedEnabled As Boolean
	
	Private _CompanyLogo As System.Data.Linq.Binary
	
	Private _Subscription As System.Nullable(Of Integer)
	
	Private _DefaultTimeZone As String
	
	Private _CultureInfoCode As String
	
	Private _SiteLogo As String
	
	Private _ShowCopyright As System.Nullable(Of Boolean)
	
	Private _ShowAssignments As System.Nullable(Of Boolean)
	
	Private _FavIconURL As String
	
	Private _WelcomeText As String
	
	Private _DashboardURL As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As String)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnSiteIDChanging(value As String)
    End Sub
    Partial Private Sub OnSiteIDChanged()
    End Sub
    Partial Private Sub OnHostNameChanging(value As String)
    End Sub
    Partial Private Sub OnHostNameChanged()
    End Sub
    Partial Private Sub OnCompanyNameChanging(value As String)
    End Sub
    Partial Private Sub OnCompanyNameChanged()
    End Sub
    Partial Private Sub OnSiteDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnSiteDescriptionChanged()
    End Sub
    Partial Private Sub OnSiteNameChanging(value As String)
    End Sub
    Partial Private Sub OnSiteNameChanged()
    End Sub
    Partial Private Sub OnSiteManagerChanging(value As String)
    End Sub
    Partial Private Sub OnSiteManagerChanged()
    End Sub
    Partial Private Sub OnLocationChanging(value As String)
    End Sub
    Partial Private Sub OnLocationChanged()
    End Sub
    Partial Private Sub OnSiteHeaderChanging(value As String)
    End Sub
    Partial Private Sub OnSiteHeaderChanged()
    End Sub
    Partial Private Sub OnPassingGradeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPassingGradeChanged()
    End Sub
    Partial Private Sub OnRetakeTestHrsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRetakeTestHrsChanged()
    End Sub
    Partial Private Sub OnShowAgreementPageChanging(value As Boolean)
    End Sub
    Partial Private Sub OnShowAgreementPageChanged()
    End Sub
    Partial Private Sub OnAgreementTextChanging(value As String)
    End Sub
    Partial Private Sub OnAgreementTextChanged()
    End Sub
    Partial Private Sub OnEmailAddressRequiredChanging(value As Boolean)
    End Sub
    Partial Private Sub OnEmailAddressRequiredChanged()
    End Sub
    Partial Private Sub OnValidateRegistrationChanging(value As Boolean)
    End Sub
    Partial Private Sub OnValidateRegistrationChanged()
    End Sub
    Partial Private Sub OnContactEmailAddressChanging(value As String)
    End Sub
    Partial Private Sub OnContactEmailAddressChanged()
    End Sub
    Partial Private Sub OnTimeoutChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTimeoutChanged()
    End Sub
    Partial Private Sub OnRequiredTestEnabledChanging(value As Boolean)
    End Sub
    Partial Private Sub OnRequiredTestEnabledChanged()
    End Sub
    Partial Private Sub OnRequiredTestIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnRequiredTestIDChanged()
    End Sub
    Partial Private Sub OnRequiredTestTextChanging(value As String)
    End Sub
    Partial Private Sub OnRequiredTestTextChanged()
    End Sub
    Partial Private Sub OnEnableTestStatsChanging(value As Boolean)
    End Sub
    Partial Private Sub OnEnableTestStatsChanged()
    End Sub
    Partial Private Sub OnHostChanging(value As String)
    End Sub
    Partial Private Sub OnHostChanged()
    End Sub
    Partial Private Sub OnLocatedEnabledChanging(value As Boolean)
    End Sub
    Partial Private Sub OnLocatedEnabledChanged()
    End Sub
    Partial Private Sub OnCompanyLogoChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnCompanyLogoChanged()
    End Sub
    Partial Private Sub OnSubscriptionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSubscriptionChanged()
    End Sub
    Partial Private Sub OnDefaultTimeZoneChanging(value As String)
    End Sub
    Partial Private Sub OnDefaultTimeZoneChanged()
    End Sub
    Partial Private Sub OnCultureInfoCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCultureInfoCodeChanged()
    End Sub
    Partial Private Sub OnSiteLogoChanging(value As String)
    End Sub
    Partial Private Sub OnSiteLogoChanged()
    End Sub
    Partial Private Sub OnShowCopyrightChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnShowCopyrightChanged()
    End Sub
    Partial Private Sub OnShowAssignmentsChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnShowAssignmentsChanged()
    End Sub
    Partial Private Sub OnFavIconURLChanging(value As String)
    End Sub
    Partial Private Sub OnFavIconURLChanged()
    End Sub
    Partial Private Sub OnWelcomeTextChanging(value As String)
    End Sub
    Partial Private Sub OnWelcomeTextChanged()
    End Sub
    Partial Private Sub OnDashboardURLChanging(value As String)
    End Sub
    Partial Private Sub OnDashboardURLChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property ID() As String
		Get
			Return Me._ID
		End Get
		Set
			If (String.Equals(Me._ID, value) = false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property SiteID() As String
		Get
			Return Me._SiteID
		End Get
		Set
			If (String.Equals(Me._SiteID, value) = false) Then
				Me.OnSiteIDChanging(value)
				Me.SendPropertyChanging
				Me._SiteID = value
				Me.SendPropertyChanged("SiteID")
				Me.OnSiteIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HostName", DbType:="NVarChar(50)")>  _
	Public Property HostName() As String
		Get
			Return Me._HostName
		End Get
		Set
			If (String.Equals(Me._HostName, value) = false) Then
				Me.OnHostNameChanging(value)
				Me.SendPropertyChanging
				Me._HostName = value
				Me.SendPropertyChanged("HostName")
				Me.OnHostNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompanyName", DbType:="NVarChar(150)")>  _
	Public Property CompanyName() As String
		Get
			Return Me._CompanyName
		End Get
		Set
			If (String.Equals(Me._CompanyName, value) = false) Then
				Me.OnCompanyNameChanging(value)
				Me.SendPropertyChanging
				Me._CompanyName = value
				Me.SendPropertyChanged("CompanyName")
				Me.OnCompanyNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteDescription", DbType:="NVarChar(150)")>  _
	Public Property SiteDescription() As String
		Get
			Return Me._SiteDescription
		End Get
		Set
			If (String.Equals(Me._SiteDescription, value) = false) Then
				Me.OnSiteDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._SiteDescription = value
				Me.SendPropertyChanged("SiteDescription")
				Me.OnSiteDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteName", DbType:="NVarChar(150)")>  _
	Public Property SiteName() As String
		Get
			Return Me._SiteName
		End Get
		Set
			If (String.Equals(Me._SiteName, value) = false) Then
				Me.OnSiteNameChanging(value)
				Me.SendPropertyChanging
				Me._SiteName = value
				Me.SendPropertyChanged("SiteName")
				Me.OnSiteNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteManager", DbType:="NVarChar(50)")>  _
	Public Property SiteManager() As String
		Get
			Return Me._SiteManager
		End Get
		Set
			If (String.Equals(Me._SiteManager, value) = false) Then
				Me.OnSiteManagerChanging(value)
				Me.SendPropertyChanging
				Me._SiteManager = value
				Me.SendPropertyChanged("SiteManager")
				Me.OnSiteManagerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Location", DbType:="NVarChar(50)")>  _
	Public Property Location() As String
		Get
			Return Me._Location
		End Get
		Set
			If (String.Equals(Me._Location, value) = false) Then
				Me.OnLocationChanging(value)
				Me.SendPropertyChanging
				Me._Location = value
				Me.SendPropertyChanged("Location")
				Me.OnLocationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteHeader", DbType:="NVarChar(150)")>  _
	Public Property SiteHeader() As String
		Get
			Return Me._SiteHeader
		End Get
		Set
			If (String.Equals(Me._SiteHeader, value) = false) Then
				Me.OnSiteHeaderChanging(value)
				Me.SendPropertyChanging
				Me._SiteHeader = value
				Me.SendPropertyChanged("SiteHeader")
				Me.OnSiteHeaderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PassingGrade", DbType:="Int")>  _
	Public Property PassingGrade() As System.Nullable(Of Integer)
		Get
			Return Me._PassingGrade
		End Get
		Set
			If (Me._PassingGrade.Equals(value) = false) Then
				Me.OnPassingGradeChanging(value)
				Me.SendPropertyChanging
				Me._PassingGrade = value
				Me.SendPropertyChanged("PassingGrade")
				Me.OnPassingGradeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RetakeTestHrs", DbType:="Int")>  _
	Public Property RetakeTestHrs() As System.Nullable(Of Integer)
		Get
			Return Me._RetakeTestHrs
		End Get
		Set
			If (Me._RetakeTestHrs.Equals(value) = false) Then
				Me.OnRetakeTestHrsChanging(value)
				Me.SendPropertyChanging
				Me._RetakeTestHrs = value
				Me.SendPropertyChanged("RetakeTestHrs")
				Me.OnRetakeTestHrsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShowAgreementPage", DbType:="Bit NOT NULL")>  _
	Public Property ShowAgreementPage() As Boolean
		Get
			Return Me._ShowAgreementPage
		End Get
		Set
			If ((Me._ShowAgreementPage = value)  _
						= false) Then
				Me.OnShowAgreementPageChanging(value)
				Me.SendPropertyChanging
				Me._ShowAgreementPage = value
				Me.SendPropertyChanged("ShowAgreementPage")
				Me.OnShowAgreementPageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AgreementText", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property AgreementText() As String
		Get
			Return Me._AgreementText
		End Get
		Set
			If (String.Equals(Me._AgreementText, value) = false) Then
				Me.OnAgreementTextChanging(value)
				Me.SendPropertyChanging
				Me._AgreementText = value
				Me.SendPropertyChanged("AgreementText")
				Me.OnAgreementTextChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmailAddressRequired", DbType:="Bit NOT NULL")>  _
	Public Property EmailAddressRequired() As Boolean
		Get
			Return Me._EmailAddressRequired
		End Get
		Set
			If ((Me._EmailAddressRequired = value)  _
						= false) Then
				Me.OnEmailAddressRequiredChanging(value)
				Me.SendPropertyChanging
				Me._EmailAddressRequired = value
				Me.SendPropertyChanged("EmailAddressRequired")
				Me.OnEmailAddressRequiredChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ValidateRegistration", DbType:="Bit NOT NULL")>  _
	Public Property ValidateRegistration() As Boolean
		Get
			Return Me._ValidateRegistration
		End Get
		Set
			If ((Me._ValidateRegistration = value)  _
						= false) Then
				Me.OnValidateRegistrationChanging(value)
				Me.SendPropertyChanging
				Me._ValidateRegistration = value
				Me.SendPropertyChanged("ValidateRegistration")
				Me.OnValidateRegistrationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactEmailAddress", DbType:="NVarChar(50)")>  _
	Public Property ContactEmailAddress() As String
		Get
			Return Me._ContactEmailAddress
		End Get
		Set
			If (String.Equals(Me._ContactEmailAddress, value) = false) Then
				Me.OnContactEmailAddressChanging(value)
				Me.SendPropertyChanging
				Me._ContactEmailAddress = value
				Me.SendPropertyChanged("ContactEmailAddress")
				Me.OnContactEmailAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Timeout", DbType:="Int")>  _
	Public Property Timeout() As System.Nullable(Of Integer)
		Get
			Return Me._Timeout
		End Get
		Set
			If (Me._Timeout.Equals(value) = false) Then
				Me.OnTimeoutChanging(value)
				Me.SendPropertyChanging
				Me._Timeout = value
				Me.SendPropertyChanged("Timeout")
				Me.OnTimeoutChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RequiredTestEnabled", DbType:="Bit NOT NULL")>  _
	Public Property RequiredTestEnabled() As Boolean
		Get
			Return Me._RequiredTestEnabled
		End Get
		Set
			If ((Me._RequiredTestEnabled = value)  _
						= false) Then
				Me.OnRequiredTestEnabledChanging(value)
				Me.SendPropertyChanging
				Me._RequiredTestEnabled = value
				Me.SendPropertyChanged("RequiredTestEnabled")
				Me.OnRequiredTestEnabledChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RequiredTestID", DbType:="Int NOT NULL")>  _
	Public Property RequiredTestID() As Integer
		Get
			Return Me._RequiredTestID
		End Get
		Set
			If ((Me._RequiredTestID = value)  _
						= false) Then
				Me.OnRequiredTestIDChanging(value)
				Me.SendPropertyChanging
				Me._RequiredTestID = value
				Me.SendPropertyChanged("RequiredTestID")
				Me.OnRequiredTestIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RequiredTestText", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property RequiredTestText() As String
		Get
			Return Me._RequiredTestText
		End Get
		Set
			If (String.Equals(Me._RequiredTestText, value) = false) Then
				Me.OnRequiredTestTextChanging(value)
				Me.SendPropertyChanging
				Me._RequiredTestText = value
				Me.SendPropertyChanged("RequiredTestText")
				Me.OnRequiredTestTextChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EnableTestStats", DbType:="Bit NOT NULL")>  _
	Public Property EnableTestStats() As Boolean
		Get
			Return Me._EnableTestStats
		End Get
		Set
			If ((Me._EnableTestStats = value)  _
						= false) Then
				Me.OnEnableTestStatsChanging(value)
				Me.SendPropertyChanging
				Me._EnableTestStats = value
				Me.SendPropertyChanged("EnableTestStats")
				Me.OnEnableTestStatsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Host", DbType:="NVarChar(50)")>  _
	Public Property Host() As String
		Get
			Return Me._Host
		End Get
		Set
			If (String.Equals(Me._Host, value) = false) Then
				Me.OnHostChanging(value)
				Me.SendPropertyChanging
				Me._Host = value
				Me.SendPropertyChanged("Host")
				Me.OnHostChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LocatedEnabled", DbType:="Bit NOT NULL")>  _
	Public Property LocatedEnabled() As Boolean
		Get
			Return Me._LocatedEnabled
		End Get
		Set
			If ((Me._LocatedEnabled = value)  _
						= false) Then
				Me.OnLocatedEnabledChanging(value)
				Me.SendPropertyChanging
				Me._LocatedEnabled = value
				Me.SendPropertyChanged("LocatedEnabled")
				Me.OnLocatedEnabledChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompanyLogo", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CompanyLogo() As System.Data.Linq.Binary
		Get
			Return Me._CompanyLogo
		End Get
		Set
			If (Object.Equals(Me._CompanyLogo, value) = false) Then
				Me.OnCompanyLogoChanging(value)
				Me.SendPropertyChanging
				Me._CompanyLogo = value
				Me.SendPropertyChanged("CompanyLogo")
				Me.OnCompanyLogoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Subscription", DbType:="Int")>  _
	Public Property Subscription() As System.Nullable(Of Integer)
		Get
			Return Me._Subscription
		End Get
		Set
			If (Me._Subscription.Equals(value) = false) Then
				Me.OnSubscriptionChanging(value)
				Me.SendPropertyChanging
				Me._Subscription = value
				Me.SendPropertyChanged("Subscription")
				Me.OnSubscriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DefaultTimeZone", DbType:="NVarChar(50)")>  _
	Public Property DefaultTimeZone() As String
		Get
			Return Me._DefaultTimeZone
		End Get
		Set
			If (String.Equals(Me._DefaultTimeZone, value) = false) Then
				Me.OnDefaultTimeZoneChanging(value)
				Me.SendPropertyChanging
				Me._DefaultTimeZone = value
				Me.SendPropertyChanged("DefaultTimeZone")
				Me.OnDefaultTimeZoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CultureInfoCode", DbType:="NVarChar(10)")>  _
	Public Property CultureInfoCode() As String
		Get
			Return Me._CultureInfoCode
		End Get
		Set
			If (String.Equals(Me._CultureInfoCode, value) = false) Then
				Me.OnCultureInfoCodeChanging(value)
				Me.SendPropertyChanging
				Me._CultureInfoCode = value
				Me.SendPropertyChanged("CultureInfoCode")
				Me.OnCultureInfoCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteLogo", DbType:="NVarChar(255)")>  _
	Public Property SiteLogo() As String
		Get
			Return Me._SiteLogo
		End Get
		Set
			If (String.Equals(Me._SiteLogo, value) = false) Then
				Me.OnSiteLogoChanging(value)
				Me.SendPropertyChanging
				Me._SiteLogo = value
				Me.SendPropertyChanged("SiteLogo")
				Me.OnSiteLogoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShowCopyright", DbType:="Bit")>  _
	Public Property ShowCopyright() As System.Nullable(Of Boolean)
		Get
			Return Me._ShowCopyright
		End Get
		Set
			If (Me._ShowCopyright.Equals(value) = false) Then
				Me.OnShowCopyrightChanging(value)
				Me.SendPropertyChanging
				Me._ShowCopyright = value
				Me.SendPropertyChanged("ShowCopyright")
				Me.OnShowCopyrightChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShowAssignments", DbType:="Bit")>  _
	Public Property ShowAssignments() As System.Nullable(Of Boolean)
		Get
			Return Me._ShowAssignments
		End Get
		Set
			If (Me._ShowAssignments.Equals(value) = false) Then
				Me.OnShowAssignmentsChanging(value)
				Me.SendPropertyChanging
				Me._ShowAssignments = value
				Me.SendPropertyChanged("ShowAssignments")
				Me.OnShowAssignmentsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FavIconURL", DbType:="NVarChar(50)")>  _
	Public Property FavIconURL() As String
		Get
			Return Me._FavIconURL
		End Get
		Set
			If (String.Equals(Me._FavIconURL, value) = false) Then
				Me.OnFavIconURLChanging(value)
				Me.SendPropertyChanging
				Me._FavIconURL = value
				Me.SendPropertyChanged("FavIconURL")
				Me.OnFavIconURLChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WelcomeText", DbType:="NVarChar(255)")>  _
	Public Property WelcomeText() As String
		Get
			Return Me._WelcomeText
		End Get
		Set
			If (String.Equals(Me._WelcomeText, value) = false) Then
				Me.OnWelcomeTextChanging(value)
				Me.SendPropertyChanging
				Me._WelcomeText = value
				Me.SendPropertyChanged("WelcomeText")
				Me.OnWelcomeTextChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DashboardURL", DbType:="NVarChar(256)")>  _
	Public Property DashboardURL() As String
		Get
			Return Me._DashboardURL
		End Get
		Set
			If (String.Equals(Me._DashboardURL, value) = false) Then
				Me.OnDashboardURLChanging(value)
				Me.SendPropertyChanging
				Me._DashboardURL = value
				Me.SendPropertyChanged("DashboardURL")
				Me.OnDashboardURLChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.StudentDetails")>  _
Partial Public Class StudentDetail
	
	Private _Id As Integer
	
	Private _UserID As String
	
	Private _UserName As String
	
	Private _Email As String
	
	Private _FirstName As String
	
	Private _LastName As String
	
	Private _PhotoUrl As String
	
	Private _TimeZone As String
	
	Private _Phone1 As String
	
	Private _SiteID As String
	
	Private _Address As String
	
	Private _City As String
	
	Private _State As String
	
	Private _RegistrationDate As System.Nullable(Of Date)
	
	Private _LastLoginDate As System.Nullable(Of Date)
	
	Private _PostCode As String
	
	Private _Status As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", DbType:="Int NOT NULL")>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me._Id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property UserID() As String
		Get
			Return Me._UserID
		End Get
		Set
			If (String.Equals(Me._UserID, value) = false) Then
				Me._UserID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me._UserName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(256)")>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me._Email = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="NVarChar(50)")>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me._FirstName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="NVarChar(50)")>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me._LastName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhotoUrl", DbType:="NVarChar(MAX)")>  _
	Public Property PhotoUrl() As String
		Get
			Return Me._PhotoUrl
		End Get
		Set
			If (String.Equals(Me._PhotoUrl, value) = false) Then
				Me._PhotoUrl = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TimeZone", DbType:="NVarChar(50)")>  _
	Public Property TimeZone() As String
		Get
			Return Me._TimeZone
		End Get
		Set
			If (String.Equals(Me._TimeZone, value) = false) Then
				Me._TimeZone = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone1", DbType:="NVarChar(50)")>  _
	Public Property Phone1() As String
		Get
			Return Me._Phone1
		End Get
		Set
			If (String.Equals(Me._Phone1, value) = false) Then
				Me._Phone1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property SiteID() As String
		Get
			Return Me._SiteID
		End Get
		Set
			If (String.Equals(Me._SiteID, value) = false) Then
				Me._SiteID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="NVarChar(50)")>  _
	Public Property Address() As String
		Get
			Return Me._Address
		End Get
		Set
			If (String.Equals(Me._Address, value) = false) Then
				Me._Address = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", DbType:="NVarChar(128)")>  _
	Public Property City() As String
		Get
			Return Me._City
		End Get
		Set
			If (String.Equals(Me._City, value) = false) Then
				Me._City = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_State", DbType:="NVarChar(50)")>  _
	Public Property State() As String
		Get
			Return Me._State
		End Get
		Set
			If (String.Equals(Me._State, value) = false) Then
				Me._State = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RegistrationDate", DbType:="SmallDateTime")>  _
	Public Property RegistrationDate() As System.Nullable(Of Date)
		Get
			Return Me._RegistrationDate
		End Get
		Set
			If (Me._RegistrationDate.Equals(value) = false) Then
				Me._RegistrationDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastLoginDate", DbType:="SmallDateTime")>  _
	Public Property LastLoginDate() As System.Nullable(Of Date)
		Get
			Return Me._LastLoginDate
		End Get
		Set
			If (Me._LastLoginDate.Equals(value) = false) Then
				Me._LastLoginDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostCode", DbType:="NVarChar(50)")>  _
	Public Property PostCode() As String
		Get
			Return Me._PostCode
		End Get
		Set
			If (String.Equals(Me._PostCode, value) = false) Then
				Me._PostCode = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="NVarChar(50)")>  _
	Public Property Status() As String
		Get
			Return Me._Status
		End Get
		Set
			If (String.Equals(Me._Status, value) = false) Then
				Me._Status = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.UserDetails")>  _
Partial Public Class UserDetail
	
	Private _Id As Integer
	
	Private _UserID As String
	
	Private _UserName As String
	
	Private _Email As String
	
	Private _FirstName As String
	
	Private _LastName As String
	
	Private _PhotoUrl As String
	
	Private _TimeZone As String
	
	Private _Phone1 As String
	
	Private _SiteID As String
	
	Private _Address As String
	
	Private _City As String
	
	Private _State As String
	
	Private _RegistrationDate As System.Nullable(Of Date)
	
	Private _LastLoginDate As System.Nullable(Of Date)
	
	Private _PostCode As String
	
	Private _Status As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", DbType:="Int NOT NULL")>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me._Id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property UserID() As String
		Get
			Return Me._UserID
		End Get
		Set
			If (String.Equals(Me._UserID, value) = false) Then
				Me._UserID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me._UserName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(256)")>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me._Email = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="NVarChar(50)")>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me._FirstName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="NVarChar(50)")>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me._LastName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhotoUrl", DbType:="NVarChar(MAX)")>  _
	Public Property PhotoUrl() As String
		Get
			Return Me._PhotoUrl
		End Get
		Set
			If (String.Equals(Me._PhotoUrl, value) = false) Then
				Me._PhotoUrl = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TimeZone", DbType:="NVarChar(50)")>  _
	Public Property TimeZone() As String
		Get
			Return Me._TimeZone
		End Get
		Set
			If (String.Equals(Me._TimeZone, value) = false) Then
				Me._TimeZone = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone1", DbType:="NVarChar(50)")>  _
	Public Property Phone1() As String
		Get
			Return Me._Phone1
		End Get
		Set
			If (String.Equals(Me._Phone1, value) = false) Then
				Me._Phone1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property SiteID() As String
		Get
			Return Me._SiteID
		End Get
		Set
			If (String.Equals(Me._SiteID, value) = false) Then
				Me._SiteID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="NVarChar(50)")>  _
	Public Property Address() As String
		Get
			Return Me._Address
		End Get
		Set
			If (String.Equals(Me._Address, value) = false) Then
				Me._Address = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", DbType:="NVarChar(128)")>  _
	Public Property City() As String
		Get
			Return Me._City
		End Get
		Set
			If (String.Equals(Me._City, value) = false) Then
				Me._City = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_State", DbType:="NVarChar(50)")>  _
	Public Property State() As String
		Get
			Return Me._State
		End Get
		Set
			If (String.Equals(Me._State, value) = false) Then
				Me._State = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RegistrationDate", DbType:="SmallDateTime")>  _
	Public Property RegistrationDate() As System.Nullable(Of Date)
		Get
			Return Me._RegistrationDate
		End Get
		Set
			If (Me._RegistrationDate.Equals(value) = false) Then
				Me._RegistrationDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastLoginDate", DbType:="SmallDateTime")>  _
	Public Property LastLoginDate() As System.Nullable(Of Date)
		Get
			Return Me._LastLoginDate
		End Get
		Set
			If (Me._LastLoginDate.Equals(value) = false) Then
				Me._LastLoginDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostCode", DbType:="NVarChar(50)")>  _
	Public Property PostCode() As String
		Get
			Return Me._PostCode
		End Get
		Set
			If (String.Equals(Me._PostCode, value) = false) Then
				Me._PostCode = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="NVarChar(50)")>  _
	Public Property Status() As String
		Get
			Return Me._Status
		End Get
		Set
			If (String.Equals(Me._Status, value) = false) Then
				Me._Status = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AspNetRoles")>  _
Partial Public Class AspNetRole
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As String
	
	Private _Name As String
	
	Private _AspNetUserRoles As EntitySet(Of AspNetUserRole)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As String)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._AspNetUserRoles = New EntitySet(Of AspNetUserRole)(AddressOf Me.attach_AspNetUserRoles, AddressOf Me.detach_AspNetUserRoles)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Id() As String
		Get
			Return Me._Id
		End Get
		Set
			If (String.Equals(Me._Id, value) = false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AspNetRole_AspNetUserRole", Storage:="_AspNetUserRoles", ThisKey:="Id", OtherKey:="RoleId")>  _
	Public Property AspNetUserRoles() As EntitySet(Of AspNetUserRole)
		Get
			Return Me._AspNetUserRoles
		End Get
		Set
			Me._AspNetUserRoles.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_AspNetUserRoles(ByVal entity As AspNetUserRole)
		Me.SendPropertyChanging
		entity.AspNetRole = Me
	End Sub
	
	Private Sub detach_AspNetUserRoles(ByVal entity As AspNetUserRole)
		Me.SendPropertyChanging
		entity.AspNetRole = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AspNetUserLogins")>  _
Partial Public Class AspNetUserLogin
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _LoginProvider As String
	
	Private _ProviderKey As String
	
	Private _UserId As String
	
	Private _AspNetUser As EntityRef(Of AspNetUser)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnLoginProviderChanging(value As String)
    End Sub
    Partial Private Sub OnLoginProviderChanged()
    End Sub
    Partial Private Sub OnProviderKeyChanging(value As String)
    End Sub
    Partial Private Sub OnProviderKeyChanged()
    End Sub
    Partial Private Sub OnUserIdChanging(value As String)
    End Sub
    Partial Private Sub OnUserIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._AspNetUser = CType(Nothing, EntityRef(Of AspNetUser))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LoginProvider", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property LoginProvider() As String
		Get
			Return Me._LoginProvider
		End Get
		Set
			If (String.Equals(Me._LoginProvider, value) = false) Then
				Me.OnLoginProviderChanging(value)
				Me.SendPropertyChanging
				Me._LoginProvider = value
				Me.SendPropertyChanged("LoginProvider")
				Me.OnLoginProviderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProviderKey", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property ProviderKey() As String
		Get
			Return Me._ProviderKey
		End Get
		Set
			If (String.Equals(Me._ProviderKey, value) = false) Then
				Me.OnProviderKeyChanging(value)
				Me.SendPropertyChanging
				Me._ProviderKey = value
				Me.SendPropertyChanged("ProviderKey")
				Me.OnProviderKeyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property UserId() As String
		Get
			Return Me._UserId
		End Get
		Set
			If (String.Equals(Me._UserId, value) = false) Then
				If Me._AspNetUser.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUserIdChanging(value)
				Me.SendPropertyChanging
				Me._UserId = value
				Me.SendPropertyChanged("UserId")
				Me.OnUserIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AspNetUser_AspNetUserLogin", Storage:="_AspNetUser", ThisKey:="UserId", OtherKey:="Id", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property AspNetUser() As AspNetUser
		Get
			Return Me._AspNetUser.Entity
		End Get
		Set
			Dim previousValue As AspNetUser = Me._AspNetUser.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AspNetUser.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AspNetUser.Entity = Nothing
					previousValue.AspNetUserLogins.Remove(Me)
				End If
				Me._AspNetUser.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.AspNetUserLogins.Add(Me)
					Me._UserId = value.Id
				Else
					Me._UserId = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("AspNetUser")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AspNetUserRoles")>  _
Partial Public Class AspNetUserRole
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _UserId As String
	
	Private _RoleId As String
	
	Private _AspNetRole As EntityRef(Of AspNetRole)
	
	Private _AspNetUser As EntityRef(Of AspNetUser)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUserIdChanging(value As String)
    End Sub
    Partial Private Sub OnUserIdChanged()
    End Sub
    Partial Private Sub OnRoleIdChanging(value As String)
    End Sub
    Partial Private Sub OnRoleIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._AspNetRole = CType(Nothing, EntityRef(Of AspNetRole))
		Me._AspNetUser = CType(Nothing, EntityRef(Of AspNetUser))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property UserId() As String
		Get
			Return Me._UserId
		End Get
		Set
			If (String.Equals(Me._UserId, value) = false) Then
				If Me._AspNetUser.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUserIdChanging(value)
				Me.SendPropertyChanging
				Me._UserId = value
				Me.SendPropertyChanged("UserId")
				Me.OnUserIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RoleId", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property RoleId() As String
		Get
			Return Me._RoleId
		End Get
		Set
			If (String.Equals(Me._RoleId, value) = false) Then
				If Me._AspNetRole.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnRoleIdChanging(value)
				Me.SendPropertyChanging
				Me._RoleId = value
				Me.SendPropertyChanged("RoleId")
				Me.OnRoleIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AspNetRole_AspNetUserRole", Storage:="_AspNetRole", ThisKey:="RoleId", OtherKey:="Id", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property AspNetRole() As AspNetRole
		Get
			Return Me._AspNetRole.Entity
		End Get
		Set
			Dim previousValue As AspNetRole = Me._AspNetRole.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AspNetRole.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AspNetRole.Entity = Nothing
					previousValue.AspNetUserRoles.Remove(Me)
				End If
				Me._AspNetRole.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.AspNetUserRoles.Add(Me)
					Me._RoleId = value.Id
				Else
					Me._RoleId = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("AspNetRole")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AspNetUser_AspNetUserRole", Storage:="_AspNetUser", ThisKey:="UserId", OtherKey:="Id", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property AspNetUser() As AspNetUser
		Get
			Return Me._AspNetUser.Entity
		End Get
		Set
			Dim previousValue As AspNetUser = Me._AspNetUser.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AspNetUser.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AspNetUser.Entity = Nothing
					previousValue.AspNetUserRoles.Remove(Me)
				End If
				Me._AspNetUser.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.AspNetUserRoles.Add(Me)
					Me._UserId = value.Id
				Else
					Me._UserId = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("AspNetUser")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AspNetUsers")>  _
Partial Public Class AspNetUser
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As String
	
	Private _Email As String
	
	Private _EmailConfirmed As Boolean
	
	Private _PasswordHash As String
	
	Private _SecurityStamp As String
	
	Private _PhoneNumber As String
	
	Private _PhoneNumberConfirmed As Boolean
	
	Private _TwoFactorEnabled As Boolean
	
	Private _LockoutEndDateUtc As System.Nullable(Of Date)
	
	Private _LockoutEnabled As Boolean
	
	Private _AccessFailedCount As Integer
	
	Private _UserName As String
	
	Private _AspNetUserLogins As EntitySet(Of AspNetUserLogin)
	
	Private _AspNetUserRoles As EntitySet(Of AspNetUserRole)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As String)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnEmailConfirmedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnEmailConfirmedChanged()
    End Sub
    Partial Private Sub OnPasswordHashChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordHashChanged()
    End Sub
    Partial Private Sub OnSecurityStampChanging(value As String)
    End Sub
    Partial Private Sub OnSecurityStampChanged()
    End Sub
    Partial Private Sub OnPhoneNumberChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneNumberChanged()
    End Sub
    Partial Private Sub OnPhoneNumberConfirmedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnPhoneNumberConfirmedChanged()
    End Sub
    Partial Private Sub OnTwoFactorEnabledChanging(value As Boolean)
    End Sub
    Partial Private Sub OnTwoFactorEnabledChanged()
    End Sub
    Partial Private Sub OnLockoutEndDateUtcChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLockoutEndDateUtcChanged()
    End Sub
    Partial Private Sub OnLockoutEnabledChanging(value As Boolean)
    End Sub
    Partial Private Sub OnLockoutEnabledChanged()
    End Sub
    Partial Private Sub OnAccessFailedCountChanging(value As Integer)
    End Sub
    Partial Private Sub OnAccessFailedCountChanged()
    End Sub
    Partial Private Sub OnUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnUserNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._AspNetUserLogins = New EntitySet(Of AspNetUserLogin)(AddressOf Me.attach_AspNetUserLogins, AddressOf Me.detach_AspNetUserLogins)
		Me._AspNetUserRoles = New EntitySet(Of AspNetUserRole)(AddressOf Me.attach_AspNetUserRoles, AddressOf Me.detach_AspNetUserRoles)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Id() As String
		Get
			Return Me._Id
		End Get
		Set
			If (String.Equals(Me._Id, value) = false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(256)")>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmailConfirmed", DbType:="Bit NOT NULL")>  _
	Public Property EmailConfirmed() As Boolean
		Get
			Return Me._EmailConfirmed
		End Get
		Set
			If ((Me._EmailConfirmed = value)  _
						= false) Then
				Me.OnEmailConfirmedChanging(value)
				Me.SendPropertyChanging
				Me._EmailConfirmed = value
				Me.SendPropertyChanged("EmailConfirmed")
				Me.OnEmailConfirmedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PasswordHash", DbType:="NVarChar(MAX)")>  _
	Public Property PasswordHash() As String
		Get
			Return Me._PasswordHash
		End Get
		Set
			If (String.Equals(Me._PasswordHash, value) = false) Then
				Me.OnPasswordHashChanging(value)
				Me.SendPropertyChanging
				Me._PasswordHash = value
				Me.SendPropertyChanged("PasswordHash")
				Me.OnPasswordHashChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SecurityStamp", DbType:="NVarChar(MAX)")>  _
	Public Property SecurityStamp() As String
		Get
			Return Me._SecurityStamp
		End Get
		Set
			If (String.Equals(Me._SecurityStamp, value) = false) Then
				Me.OnSecurityStampChanging(value)
				Me.SendPropertyChanging
				Me._SecurityStamp = value
				Me.SendPropertyChanged("SecurityStamp")
				Me.OnSecurityStampChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhoneNumber", DbType:="NVarChar(MAX)")>  _
	Public Property PhoneNumber() As String
		Get
			Return Me._PhoneNumber
		End Get
		Set
			If (String.Equals(Me._PhoneNumber, value) = false) Then
				Me.OnPhoneNumberChanging(value)
				Me.SendPropertyChanging
				Me._PhoneNumber = value
				Me.SendPropertyChanged("PhoneNumber")
				Me.OnPhoneNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhoneNumberConfirmed", DbType:="Bit NOT NULL")>  _
	Public Property PhoneNumberConfirmed() As Boolean
		Get
			Return Me._PhoneNumberConfirmed
		End Get
		Set
			If ((Me._PhoneNumberConfirmed = value)  _
						= false) Then
				Me.OnPhoneNumberConfirmedChanging(value)
				Me.SendPropertyChanging
				Me._PhoneNumberConfirmed = value
				Me.SendPropertyChanged("PhoneNumberConfirmed")
				Me.OnPhoneNumberConfirmedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TwoFactorEnabled", DbType:="Bit NOT NULL")>  _
	Public Property TwoFactorEnabled() As Boolean
		Get
			Return Me._TwoFactorEnabled
		End Get
		Set
			If ((Me._TwoFactorEnabled = value)  _
						= false) Then
				Me.OnTwoFactorEnabledChanging(value)
				Me.SendPropertyChanging
				Me._TwoFactorEnabled = value
				Me.SendPropertyChanged("TwoFactorEnabled")
				Me.OnTwoFactorEnabledChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LockoutEndDateUtc", DbType:="DateTime")>  _
	Public Property LockoutEndDateUtc() As System.Nullable(Of Date)
		Get
			Return Me._LockoutEndDateUtc
		End Get
		Set
			If (Me._LockoutEndDateUtc.Equals(value) = false) Then
				Me.OnLockoutEndDateUtcChanging(value)
				Me.SendPropertyChanging
				Me._LockoutEndDateUtc = value
				Me.SendPropertyChanged("LockoutEndDateUtc")
				Me.OnLockoutEndDateUtcChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LockoutEnabled", DbType:="Bit NOT NULL")>  _
	Public Property LockoutEnabled() As Boolean
		Get
			Return Me._LockoutEnabled
		End Get
		Set
			If ((Me._LockoutEnabled = value)  _
						= false) Then
				Me.OnLockoutEnabledChanging(value)
				Me.SendPropertyChanging
				Me._LockoutEnabled = value
				Me.SendPropertyChanged("LockoutEnabled")
				Me.OnLockoutEnabledChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccessFailedCount", DbType:="Int NOT NULL")>  _
	Public Property AccessFailedCount() As Integer
		Get
			Return Me._AccessFailedCount
		End Get
		Set
			If ((Me._AccessFailedCount = value)  _
						= false) Then
				Me.OnAccessFailedCountChanging(value)
				Me.SendPropertyChanging
				Me._AccessFailedCount = value
				Me.SendPropertyChanged("AccessFailedCount")
				Me.OnAccessFailedCountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me.OnUserNameChanging(value)
				Me.SendPropertyChanging
				Me._UserName = value
				Me.SendPropertyChanged("UserName")
				Me.OnUserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AspNetUser_AspNetUserLogin", Storage:="_AspNetUserLogins", ThisKey:="Id", OtherKey:="UserId")>  _
	Public Property AspNetUserLogins() As EntitySet(Of AspNetUserLogin)
		Get
			Return Me._AspNetUserLogins
		End Get
		Set
			Me._AspNetUserLogins.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AspNetUser_AspNetUserRole", Storage:="_AspNetUserRoles", ThisKey:="Id", OtherKey:="UserId")>  _
	Public Property AspNetUserRoles() As EntitySet(Of AspNetUserRole)
		Get
			Return Me._AspNetUserRoles
		End Get
		Set
			Me._AspNetUserRoles.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_AspNetUserLogins(ByVal entity As AspNetUserLogin)
		Me.SendPropertyChanging
		entity.AspNetUser = Me
	End Sub
	
	Private Sub detach_AspNetUserLogins(ByVal entity As AspNetUserLogin)
		Me.SendPropertyChanging
		entity.AspNetUser = Nothing
	End Sub
	
	Private Sub attach_AspNetUserRoles(ByVal entity As AspNetUserRole)
		Me.SendPropertyChanging
		entity.AspNetUser = Me
	End Sub
	
	Private Sub detach_AspNetUserRoles(ByVal entity As AspNetUserRole)
		Me.SendPropertyChanging
		entity.AspNetUser = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AspNetUsersProfile")>  _
Partial Public Class AspNetUsersProfile
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _UserID As String
	
	Private _SiteID As String
	
	Private _FirstName As String
	
	Private _NickName As String
	
	Private _LastName As String
	
	Private _Phone1 As String
	
	Private _Phone2 As String
	
	Private _Address As String
	
	Private _Address2 As String
	
	Private _City As String
	
	Private _State As String
	
	Private _PostCode As String
	
	Private _TimeZone As String
	
	Private _PhotoUrl As String
	
	Private _DOB As System.Nullable(Of Date)
	
	Private _RegistrationDate As System.Nullable(Of Date)
	
	Private _LastLoginDate As System.Nullable(Of Date)
	
	Private _IsOnline As System.Nullable(Of Boolean)
	
	Private _Status As String
	
	Private _InvitationCode As String
	
	Private _Aboutme As String
	
	Private _ChangePasswordRequired As System.Nullable(Of Boolean)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnUserIDChanging(value As String)
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnSiteIDChanging(value As String)
    End Sub
    Partial Private Sub OnSiteIDChanged()
    End Sub
    Partial Private Sub OnFirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnFirstNameChanged()
    End Sub
    Partial Private Sub OnNickNameChanging(value As String)
    End Sub
    Partial Private Sub OnNickNameChanged()
    End Sub
    Partial Private Sub OnLastNameChanging(value As String)
    End Sub
    Partial Private Sub OnLastNameChanged()
    End Sub
    Partial Private Sub OnPhone1Changing(value As String)
    End Sub
    Partial Private Sub OnPhone1Changed()
    End Sub
    Partial Private Sub OnPhone2Changing(value As String)
    End Sub
    Partial Private Sub OnPhone2Changed()
    End Sub
    Partial Private Sub OnAddressChanging(value As String)
    End Sub
    Partial Private Sub OnAddressChanged()
    End Sub
    Partial Private Sub OnAddress2Changing(value As String)
    End Sub
    Partial Private Sub OnAddress2Changed()
    End Sub
    Partial Private Sub OnCityChanging(value As String)
    End Sub
    Partial Private Sub OnCityChanged()
    End Sub
    Partial Private Sub OnStateChanging(value As String)
    End Sub
    Partial Private Sub OnStateChanged()
    End Sub
    Partial Private Sub OnPostCodeChanging(value As String)
    End Sub
    Partial Private Sub OnPostCodeChanged()
    End Sub
    Partial Private Sub OnTimeZoneChanging(value As String)
    End Sub
    Partial Private Sub OnTimeZoneChanged()
    End Sub
    Partial Private Sub OnPhotoUrlChanging(value As String)
    End Sub
    Partial Private Sub OnPhotoUrlChanged()
    End Sub
    Partial Private Sub OnDOBChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDOBChanged()
    End Sub
    Partial Private Sub OnRegistrationDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnRegistrationDateChanged()
    End Sub
    Partial Private Sub OnLastLoginDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastLoginDateChanged()
    End Sub
    Partial Private Sub OnIsOnlineChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsOnlineChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As String)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnInvitationCodeChanging(value As String)
    End Sub
    Partial Private Sub OnInvitationCodeChanged()
    End Sub
    Partial Private Sub OnAboutmeChanging(value As String)
    End Sub
    Partial Private Sub OnAboutmeChanged()
    End Sub
    Partial Private Sub OnChangePasswordRequiredChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnChangePasswordRequiredChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property UserID() As String
		Get
			Return Me._UserID
		End Get
		Set
			If (String.Equals(Me._UserID, value) = false) Then
				Me.OnUserIDChanging(value)
				Me.SendPropertyChanging
				Me._UserID = value
				Me.SendPropertyChanged("UserID")
				Me.OnUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property SiteID() As String
		Get
			Return Me._SiteID
		End Get
		Set
			If (String.Equals(Me._SiteID, value) = false) Then
				Me.OnSiteIDChanging(value)
				Me.SendPropertyChanging
				Me._SiteID = value
				Me.SendPropertyChanged("SiteID")
				Me.OnSiteIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="NVarChar(50)")>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me.OnFirstNameChanging(value)
				Me.SendPropertyChanging
				Me._FirstName = value
				Me.SendPropertyChanged("FirstName")
				Me.OnFirstNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NickName", DbType:="NVarChar(50)")>  _
	Public Property NickName() As String
		Get
			Return Me._NickName
		End Get
		Set
			If (String.Equals(Me._NickName, value) = false) Then
				Me.OnNickNameChanging(value)
				Me.SendPropertyChanging
				Me._NickName = value
				Me.SendPropertyChanged("NickName")
				Me.OnNickNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="NVarChar(50)")>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me.OnLastNameChanging(value)
				Me.SendPropertyChanging
				Me._LastName = value
				Me.SendPropertyChanged("LastName")
				Me.OnLastNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone1", DbType:="NVarChar(50)")>  _
	Public Property Phone1() As String
		Get
			Return Me._Phone1
		End Get
		Set
			If (String.Equals(Me._Phone1, value) = false) Then
				Me.OnPhone1Changing(value)
				Me.SendPropertyChanging
				Me._Phone1 = value
				Me.SendPropertyChanged("Phone1")
				Me.OnPhone1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone2", DbType:="NVarChar(50)")>  _
	Public Property Phone2() As String
		Get
			Return Me._Phone2
		End Get
		Set
			If (String.Equals(Me._Phone2, value) = false) Then
				Me.OnPhone2Changing(value)
				Me.SendPropertyChanging
				Me._Phone2 = value
				Me.SendPropertyChanged("Phone2")
				Me.OnPhone2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="NVarChar(50)")>  _
	Public Property Address() As String
		Get
			Return Me._Address
		End Get
		Set
			If (String.Equals(Me._Address, value) = false) Then
				Me.OnAddressChanging(value)
				Me.SendPropertyChanging
				Me._Address = value
				Me.SendPropertyChanged("Address")
				Me.OnAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address2", DbType:="NVarChar(50)")>  _
	Public Property Address2() As String
		Get
			Return Me._Address2
		End Get
		Set
			If (String.Equals(Me._Address2, value) = false) Then
				Me.OnAddress2Changing(value)
				Me.SendPropertyChanging
				Me._Address2 = value
				Me.SendPropertyChanged("Address2")
				Me.OnAddress2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", DbType:="NVarChar(128)")>  _
	Public Property City() As String
		Get
			Return Me._City
		End Get
		Set
			If (String.Equals(Me._City, value) = false) Then
				Me.OnCityChanging(value)
				Me.SendPropertyChanging
				Me._City = value
				Me.SendPropertyChanged("City")
				Me.OnCityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_State", DbType:="NVarChar(50)")>  _
	Public Property State() As String
		Get
			Return Me._State
		End Get
		Set
			If (String.Equals(Me._State, value) = false) Then
				Me.OnStateChanging(value)
				Me.SendPropertyChanging
				Me._State = value
				Me.SendPropertyChanged("State")
				Me.OnStateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostCode", DbType:="NVarChar(50)")>  _
	Public Property PostCode() As String
		Get
			Return Me._PostCode
		End Get
		Set
			If (String.Equals(Me._PostCode, value) = false) Then
				Me.OnPostCodeChanging(value)
				Me.SendPropertyChanging
				Me._PostCode = value
				Me.SendPropertyChanged("PostCode")
				Me.OnPostCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TimeZone", DbType:="NVarChar(50)")>  _
	Public Property TimeZone() As String
		Get
			Return Me._TimeZone
		End Get
		Set
			If (String.Equals(Me._TimeZone, value) = false) Then
				Me.OnTimeZoneChanging(value)
				Me.SendPropertyChanging
				Me._TimeZone = value
				Me.SendPropertyChanged("TimeZone")
				Me.OnTimeZoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhotoUrl", DbType:="NVarChar(MAX)")>  _
	Public Property PhotoUrl() As String
		Get
			Return Me._PhotoUrl
		End Get
		Set
			If (String.Equals(Me._PhotoUrl, value) = false) Then
				Me.OnPhotoUrlChanging(value)
				Me.SendPropertyChanging
				Me._PhotoUrl = value
				Me.SendPropertyChanged("PhotoUrl")
				Me.OnPhotoUrlChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DOB", DbType:="SmallDateTime")>  _
	Public Property DOB() As System.Nullable(Of Date)
		Get
			Return Me._DOB
		End Get
		Set
			If (Me._DOB.Equals(value) = false) Then
				Me.OnDOBChanging(value)
				Me.SendPropertyChanging
				Me._DOB = value
				Me.SendPropertyChanged("DOB")
				Me.OnDOBChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RegistrationDate", DbType:="SmallDateTime")>  _
	Public Property RegistrationDate() As System.Nullable(Of Date)
		Get
			Return Me._RegistrationDate
		End Get
		Set
			If (Me._RegistrationDate.Equals(value) = false) Then
				Me.OnRegistrationDateChanging(value)
				Me.SendPropertyChanging
				Me._RegistrationDate = value
				Me.SendPropertyChanged("RegistrationDate")
				Me.OnRegistrationDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastLoginDate", DbType:="SmallDateTime")>  _
	Public Property LastLoginDate() As System.Nullable(Of Date)
		Get
			Return Me._LastLoginDate
		End Get
		Set
			If (Me._LastLoginDate.Equals(value) = false) Then
				Me.OnLastLoginDateChanging(value)
				Me.SendPropertyChanging
				Me._LastLoginDate = value
				Me.SendPropertyChanged("LastLoginDate")
				Me.OnLastLoginDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsOnline", DbType:="Bit")>  _
	Public Property IsOnline() As System.Nullable(Of Boolean)
		Get
			Return Me._IsOnline
		End Get
		Set
			If (Me._IsOnline.Equals(value) = false) Then
				Me.OnIsOnlineChanging(value)
				Me.SendPropertyChanging
				Me._IsOnline = value
				Me.SendPropertyChanged("IsOnline")
				Me.OnIsOnlineChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="NVarChar(50)")>  _
	Public Property Status() As String
		Get
			Return Me._Status
		End Get
		Set
			If (String.Equals(Me._Status, value) = false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvitationCode", DbType:="NVarChar(50)")>  _
	Public Property InvitationCode() As String
		Get
			Return Me._InvitationCode
		End Get
		Set
			If (String.Equals(Me._InvitationCode, value) = false) Then
				Me.OnInvitationCodeChanging(value)
				Me.SendPropertyChanging
				Me._InvitationCode = value
				Me.SendPropertyChanged("InvitationCode")
				Me.OnInvitationCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Aboutme", DbType:="NVarChar(MAX)")>  _
	Public Property Aboutme() As String
		Get
			Return Me._Aboutme
		End Get
		Set
			If (String.Equals(Me._Aboutme, value) = false) Then
				Me.OnAboutmeChanging(value)
				Me.SendPropertyChanging
				Me._Aboutme = value
				Me.SendPropertyChanged("Aboutme")
				Me.OnAboutmeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ChangePasswordRequired", DbType:="Bit")>  _
	Public Property ChangePasswordRequired() As System.Nullable(Of Boolean)
		Get
			Return Me._ChangePasswordRequired
		End Get
		Set
			If (Me._ChangePasswordRequired.Equals(value) = false) Then
				Me.OnChangePasswordRequiredChanging(value)
				Me.SendPropertyChanging
				Me._ChangePasswordRequired = value
				Me.SendPropertyChanged("ChangePasswordRequired")
				Me.OnChangePasswordRequiredChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Course")>  _
Partial Public Class Course
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CourseID As String
	
	Private _CourseTitle As String
	
	Private _CourseCode As String
	
	Private _SiteID As String
	
	Private _PrerequisiteID As String
	
	Private _GroupID As String
	
	Private _InstructorID As String
	
	Private _TestID As String
	
	Private _Description As String
	
	Private _Enabled As System.Nullable(Of Boolean)
	
	Private _Enrollment As System.Nullable(Of Integer)
	
	Private _CourseType As System.Nullable(Of Integer)
	
	Private _Syllabus As String
	
	Private _CreditsEarned As System.Nullable(Of Integer)
	
	Private _StartDate As System.Nullable(Of Date)
	
	Private _EndDate As System.Nullable(Of Date)
	
	Private _EnableAssignments As System.Nullable(Of Boolean)
	
	Private _ShowCourseSubHeading As System.Nullable(Of Boolean)
	
	Private _EnableSideBarAnnouncements As System.Nullable(Of Boolean)
	
	Private _EnableSideBarSupport As System.Nullable(Of Boolean)
	
	Private _IconURL As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCourseIDChanging(value As String)
    End Sub
    Partial Private Sub OnCourseIDChanged()
    End Sub
    Partial Private Sub OnCourseTitleChanging(value As String)
    End Sub
    Partial Private Sub OnCourseTitleChanged()
    End Sub
    Partial Private Sub OnCourseCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCourseCodeChanged()
    End Sub
    Partial Private Sub OnSiteIDChanging(value As String)
    End Sub
    Partial Private Sub OnSiteIDChanged()
    End Sub
    Partial Private Sub OnPrerequisiteIDChanging(value As String)
    End Sub
    Partial Private Sub OnPrerequisiteIDChanged()
    End Sub
    Partial Private Sub OnGroupIDChanging(value As String)
    End Sub
    Partial Private Sub OnGroupIDChanged()
    End Sub
    Partial Private Sub OnInstructorIDChanging(value As String)
    End Sub
    Partial Private Sub OnInstructorIDChanged()
    End Sub
    Partial Private Sub OnTestIDChanging(value As String)
    End Sub
    Partial Private Sub OnTestIDChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnEnabledChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnEnabledChanged()
    End Sub
    Partial Private Sub OnEnrollmentChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnEnrollmentChanged()
    End Sub
    Partial Private Sub OnCourseTypeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCourseTypeChanged()
    End Sub
    Partial Private Sub OnSyllabusChanging(value As String)
    End Sub
    Partial Private Sub OnSyllabusChanged()
    End Sub
    Partial Private Sub OnCreditsEarnedChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCreditsEarnedChanged()
    End Sub
    Partial Private Sub OnStartDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnStartDateChanged()
    End Sub
    Partial Private Sub OnEndDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnEndDateChanged()
    End Sub
    Partial Private Sub OnEnableAssignmentsChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnEnableAssignmentsChanged()
    End Sub
    Partial Private Sub OnShowCourseSubHeadingChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnShowCourseSubHeadingChanged()
    End Sub
    Partial Private Sub OnEnableSideBarAnnouncementsChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnEnableSideBarAnnouncementsChanged()
    End Sub
    Partial Private Sub OnEnableSideBarSupportChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnEnableSideBarSupportChanged()
    End Sub
    Partial Private Sub OnIconURLChanging(value As String)
    End Sub
    Partial Private Sub OnIconURLChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CourseID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property CourseID() As String
		Get
			Return Me._CourseID
		End Get
		Set
			If (String.Equals(Me._CourseID, value) = false) Then
				Me.OnCourseIDChanging(value)
				Me.SendPropertyChanging
				Me._CourseID = value
				Me.SendPropertyChanged("CourseID")
				Me.OnCourseIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CourseTitle", DbType:="NVarChar(50)")>  _
	Public Property CourseTitle() As String
		Get
			Return Me._CourseTitle
		End Get
		Set
			If (String.Equals(Me._CourseTitle, value) = false) Then
				Me.OnCourseTitleChanging(value)
				Me.SendPropertyChanging
				Me._CourseTitle = value
				Me.SendPropertyChanged("CourseTitle")
				Me.OnCourseTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CourseCode", DbType:="NVarChar(50)")>  _
	Public Property CourseCode() As String
		Get
			Return Me._CourseCode
		End Get
		Set
			If (String.Equals(Me._CourseCode, value) = false) Then
				Me.OnCourseCodeChanging(value)
				Me.SendPropertyChanging
				Me._CourseCode = value
				Me.SendPropertyChanged("CourseCode")
				Me.OnCourseCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteID", DbType:="NVarChar(50)")>  _
	Public Property SiteID() As String
		Get
			Return Me._SiteID
		End Get
		Set
			If (String.Equals(Me._SiteID, value) = false) Then
				Me.OnSiteIDChanging(value)
				Me.SendPropertyChanging
				Me._SiteID = value
				Me.SendPropertyChanged("SiteID")
				Me.OnSiteIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PrerequisiteID", DbType:="NVarChar(50)")>  _
	Public Property PrerequisiteID() As String
		Get
			Return Me._PrerequisiteID
		End Get
		Set
			If (String.Equals(Me._PrerequisiteID, value) = false) Then
				Me.OnPrerequisiteIDChanging(value)
				Me.SendPropertyChanging
				Me._PrerequisiteID = value
				Me.SendPropertyChanged("PrerequisiteID")
				Me.OnPrerequisiteIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupID", DbType:="NVarChar(50)")>  _
	Public Property GroupID() As String
		Get
			Return Me._GroupID
		End Get
		Set
			If (String.Equals(Me._GroupID, value) = false) Then
				Me.OnGroupIDChanging(value)
				Me.SendPropertyChanging
				Me._GroupID = value
				Me.SendPropertyChanged("GroupID")
				Me.OnGroupIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InstructorID", DbType:="NVarChar(50)")>  _
	Public Property InstructorID() As String
		Get
			Return Me._InstructorID
		End Get
		Set
			If (String.Equals(Me._InstructorID, value) = false) Then
				Me.OnInstructorIDChanging(value)
				Me.SendPropertyChanging
				Me._InstructorID = value
				Me.SendPropertyChanged("InstructorID")
				Me.OnInstructorIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TestID", DbType:="NVarChar(50)")>  _
	Public Property TestID() As String
		Get
			Return Me._TestID
		End Get
		Set
			If (String.Equals(Me._TestID, value) = false) Then
				Me.OnTestIDChanging(value)
				Me.SendPropertyChanging
				Me._TestID = value
				Me.SendPropertyChanged("TestID")
				Me.OnTestIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Enabled", DbType:="Bit")>  _
	Public Property Enabled() As System.Nullable(Of Boolean)
		Get
			Return Me._Enabled
		End Get
		Set
			If (Me._Enabled.Equals(value) = false) Then
				Me.OnEnabledChanging(value)
				Me.SendPropertyChanging
				Me._Enabled = value
				Me.SendPropertyChanged("Enabled")
				Me.OnEnabledChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Enrollment", DbType:="Int")>  _
	Public Property Enrollment() As System.Nullable(Of Integer)
		Get
			Return Me._Enrollment
		End Get
		Set
			If (Me._Enrollment.Equals(value) = false) Then
				Me.OnEnrollmentChanging(value)
				Me.SendPropertyChanging
				Me._Enrollment = value
				Me.SendPropertyChanged("Enrollment")
				Me.OnEnrollmentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CourseType", DbType:="Int")>  _
	Public Property CourseType() As System.Nullable(Of Integer)
		Get
			Return Me._CourseType
		End Get
		Set
			If (Me._CourseType.Equals(value) = false) Then
				Me.OnCourseTypeChanging(value)
				Me.SendPropertyChanging
				Me._CourseType = value
				Me.SendPropertyChanged("CourseType")
				Me.OnCourseTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Syllabus", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Syllabus() As String
		Get
			Return Me._Syllabus
		End Get
		Set
			If (String.Equals(Me._Syllabus, value) = false) Then
				Me.OnSyllabusChanging(value)
				Me.SendPropertyChanging
				Me._Syllabus = value
				Me.SendPropertyChanged("Syllabus")
				Me.OnSyllabusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreditsEarned", DbType:="Int")>  _
	Public Property CreditsEarned() As System.Nullable(Of Integer)
		Get
			Return Me._CreditsEarned
		End Get
		Set
			If (Me._CreditsEarned.Equals(value) = false) Then
				Me.OnCreditsEarnedChanging(value)
				Me.SendPropertyChanging
				Me._CreditsEarned = value
				Me.SendPropertyChanged("CreditsEarned")
				Me.OnCreditsEarnedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartDate", DbType:="SmallDateTime")>  _
	Public Property StartDate() As System.Nullable(Of Date)
		Get
			Return Me._StartDate
		End Get
		Set
			If (Me._StartDate.Equals(value) = false) Then
				Me.OnStartDateChanging(value)
				Me.SendPropertyChanging
				Me._StartDate = value
				Me.SendPropertyChanged("StartDate")
				Me.OnStartDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndDate", DbType:="SmallDateTime")>  _
	Public Property EndDate() As System.Nullable(Of Date)
		Get
			Return Me._EndDate
		End Get
		Set
			If (Me._EndDate.Equals(value) = false) Then
				Me.OnEndDateChanging(value)
				Me.SendPropertyChanging
				Me._EndDate = value
				Me.SendPropertyChanged("EndDate")
				Me.OnEndDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EnableAssignments", DbType:="Bit")>  _
	Public Property EnableAssignments() As System.Nullable(Of Boolean)
		Get
			Return Me._EnableAssignments
		End Get
		Set
			If (Me._EnableAssignments.Equals(value) = false) Then
				Me.OnEnableAssignmentsChanging(value)
				Me.SendPropertyChanging
				Me._EnableAssignments = value
				Me.SendPropertyChanged("EnableAssignments")
				Me.OnEnableAssignmentsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShowCourseSubHeading", DbType:="Bit")>  _
	Public Property ShowCourseSubHeading() As System.Nullable(Of Boolean)
		Get
			Return Me._ShowCourseSubHeading
		End Get
		Set
			If (Me._ShowCourseSubHeading.Equals(value) = false) Then
				Me.OnShowCourseSubHeadingChanging(value)
				Me.SendPropertyChanging
				Me._ShowCourseSubHeading = value
				Me.SendPropertyChanged("ShowCourseSubHeading")
				Me.OnShowCourseSubHeadingChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EnableSideBarAnnouncements", DbType:="Bit")>  _
	Public Property EnableSideBarAnnouncements() As System.Nullable(Of Boolean)
		Get
			Return Me._EnableSideBarAnnouncements
		End Get
		Set
			If (Me._EnableSideBarAnnouncements.Equals(value) = false) Then
				Me.OnEnableSideBarAnnouncementsChanging(value)
				Me.SendPropertyChanging
				Me._EnableSideBarAnnouncements = value
				Me.SendPropertyChanged("EnableSideBarAnnouncements")
				Me.OnEnableSideBarAnnouncementsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EnableSideBarSupport", DbType:="Bit")>  _
	Public Property EnableSideBarSupport() As System.Nullable(Of Boolean)
		Get
			Return Me._EnableSideBarSupport
		End Get
		Set
			If (Me._EnableSideBarSupport.Equals(value) = false) Then
				Me.OnEnableSideBarSupportChanging(value)
				Me.SendPropertyChanging
				Me._EnableSideBarSupport = value
				Me.SendPropertyChanged("EnableSideBarSupport")
				Me.OnEnableSideBarSupportChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IconURL", DbType:="NVarChar(255)")>  _
	Public Property IconURL() As String
		Get
			Return Me._IconURL
		End Get
		Set
			If (String.Equals(Me._IconURL, value) = false) Then
				Me.OnIconURLChanging(value)
				Me.SendPropertyChanging
				Me._IconURL = value
				Me.SendPropertyChanged("IconURL")
				Me.OnIconURLChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Curriculum")>  _
Partial Public Class Curriculum
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CurriculumID As String
	
	Private _CurriculumTitle As String
	
	Private _CurriculumGroupID As String
	
	Private _CourseID As String
	
	Private _Text As String
	
	Private _SortOrder As System.Nullable(Of Integer)
	
	Private _DesiredOrder As System.Nullable(Of Integer)
	
	Private _Enabled As System.Nullable(Of Boolean)
	
	Private _ComplexityLevel As System.Nullable(Of Integer)
	
	Private _Required As System.Nullable(Of Boolean)
	
	Private _Points As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCurriculumIDChanging(value As String)
    End Sub
    Partial Private Sub OnCurriculumIDChanged()
    End Sub
    Partial Private Sub OnCurriculumTitleChanging(value As String)
    End Sub
    Partial Private Sub OnCurriculumTitleChanged()
    End Sub
    Partial Private Sub OnCurriculumGroupIDChanging(value As String)
    End Sub
    Partial Private Sub OnCurriculumGroupIDChanged()
    End Sub
    Partial Private Sub OnCourseIDChanging(value As String)
    End Sub
    Partial Private Sub OnCourseIDChanged()
    End Sub
    Partial Private Sub OnTextChanging(value As String)
    End Sub
    Partial Private Sub OnTextChanged()
    End Sub
    Partial Private Sub OnSortOrderChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSortOrderChanged()
    End Sub
    Partial Private Sub OnDesiredOrderChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDesiredOrderChanged()
    End Sub
    Partial Private Sub OnEnabledChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnEnabledChanged()
    End Sub
    Partial Private Sub OnComplexityLevelChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnComplexityLevelChanged()
    End Sub
    Partial Private Sub OnRequiredChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnRequiredChanged()
    End Sub
    Partial Private Sub OnPointsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPointsChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurriculumID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property CurriculumID() As String
		Get
			Return Me._CurriculumID
		End Get
		Set
			If (String.Equals(Me._CurriculumID, value) = false) Then
				Me.OnCurriculumIDChanging(value)
				Me.SendPropertyChanging
				Me._CurriculumID = value
				Me.SendPropertyChanged("CurriculumID")
				Me.OnCurriculumIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurriculumTitle", DbType:="NVarChar(50)")>  _
	Public Property CurriculumTitle() As String
		Get
			Return Me._CurriculumTitle
		End Get
		Set
			If (String.Equals(Me._CurriculumTitle, value) = false) Then
				Me.OnCurriculumTitleChanging(value)
				Me.SendPropertyChanging
				Me._CurriculumTitle = value
				Me.SendPropertyChanged("CurriculumTitle")
				Me.OnCurriculumTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurriculumGroupID", DbType:="NVarChar(50)")>  _
	Public Property CurriculumGroupID() As String
		Get
			Return Me._CurriculumGroupID
		End Get
		Set
			If (String.Equals(Me._CurriculumGroupID, value) = false) Then
				Me.OnCurriculumGroupIDChanging(value)
				Me.SendPropertyChanging
				Me._CurriculumGroupID = value
				Me.SendPropertyChanged("CurriculumGroupID")
				Me.OnCurriculumGroupIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CourseID", DbType:="NVarChar(50)")>  _
	Public Property CourseID() As String
		Get
			Return Me._CourseID
		End Get
		Set
			If (String.Equals(Me._CourseID, value) = false) Then
				Me.OnCourseIDChanging(value)
				Me.SendPropertyChanging
				Me._CourseID = value
				Me.SendPropertyChanged("CourseID")
				Me.OnCourseIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Text", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Text() As String
		Get
			Return Me._Text
		End Get
		Set
			If (String.Equals(Me._Text, value) = false) Then
				Me.OnTextChanging(value)
				Me.SendPropertyChanging
				Me._Text = value
				Me.SendPropertyChanged("Text")
				Me.OnTextChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SortOrder", DbType:="Int")>  _
	Public Property SortOrder() As System.Nullable(Of Integer)
		Get
			Return Me._SortOrder
		End Get
		Set
			If (Me._SortOrder.Equals(value) = false) Then
				Me.OnSortOrderChanging(value)
				Me.SendPropertyChanging
				Me._SortOrder = value
				Me.SendPropertyChanged("SortOrder")
				Me.OnSortOrderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DesiredOrder", DbType:="Int")>  _
	Public Property DesiredOrder() As System.Nullable(Of Integer)
		Get
			Return Me._DesiredOrder
		End Get
		Set
			If (Me._DesiredOrder.Equals(value) = false) Then
				Me.OnDesiredOrderChanging(value)
				Me.SendPropertyChanging
				Me._DesiredOrder = value
				Me.SendPropertyChanged("DesiredOrder")
				Me.OnDesiredOrderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Enabled", DbType:="Bit")>  _
	Public Property Enabled() As System.Nullable(Of Boolean)
		Get
			Return Me._Enabled
		End Get
		Set
			If (Me._Enabled.Equals(value) = false) Then
				Me.OnEnabledChanging(value)
				Me.SendPropertyChanging
				Me._Enabled = value
				Me.SendPropertyChanged("Enabled")
				Me.OnEnabledChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ComplexityLevel", DbType:="Int")>  _
	Public Property ComplexityLevel() As System.Nullable(Of Integer)
		Get
			Return Me._ComplexityLevel
		End Get
		Set
			If (Me._ComplexityLevel.Equals(value) = false) Then
				Me.OnComplexityLevelChanging(value)
				Me.SendPropertyChanging
				Me._ComplexityLevel = value
				Me.SendPropertyChanged("ComplexityLevel")
				Me.OnComplexityLevelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Required", DbType:="Bit")>  _
	Public Property Required() As System.Nullable(Of Boolean)
		Get
			Return Me._Required
		End Get
		Set
			If (Me._Required.Equals(value) = false) Then
				Me.OnRequiredChanging(value)
				Me.SendPropertyChanging
				Me._Required = value
				Me.SendPropertyChanged("Required")
				Me.OnRequiredChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Points", DbType:="Int")>  _
	Public Property Points() As System.Nullable(Of Integer)
		Get
			Return Me._Points
		End Get
		Set
			If (Me._Points.Equals(value) = false) Then
				Me.OnPointsChanging(value)
				Me.SendPropertyChanging
				Me._Points = value
				Me.SendPropertyChanged("Points")
				Me.OnPointsChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CurriculumList")>  _
Partial Public Class CurriculumList
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CurriculumListID As String
	
	Private _CurriculumID As String
	
	Private _Title As String
	
	Private _Text As String
	
	Private _Order As System.Nullable(Of Integer)
	
	Private _ContentType As System.Nullable(Of Integer)
	
	Private _VideoURL As String
	
	Private _EmbedCode As String
	
	Private _Answer1 As String
	
	Private _Answer2 As String
	
	Private _Answer3 As String
	
	Private _Answer4 As String
	
	Private _CorrectAnswer As System.Nullable(Of Integer)
	
	Private _AnswerExplanation As String
	
	Private _QuestionType As String
	
	Private _AnswerText As String
	
	Private _CorrectAnswerText As String
	
	Private _AssignmentID As String
	
	Private _UserContentID As String
	
	Private _TestID As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCurriculumListIDChanging(value As String)
    End Sub
    Partial Private Sub OnCurriculumListIDChanged()
    End Sub
    Partial Private Sub OnCurriculumIDChanging(value As String)
    End Sub
    Partial Private Sub OnCurriculumIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnTextChanging(value As String)
    End Sub
    Partial Private Sub OnTextChanged()
    End Sub
    Partial Private Sub OnOrderChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnOrderChanged()
    End Sub
    Partial Private Sub OnContentTypeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnContentTypeChanged()
    End Sub
    Partial Private Sub OnVideoURLChanging(value As String)
    End Sub
    Partial Private Sub OnVideoURLChanged()
    End Sub
    Partial Private Sub OnEmbedCodeChanging(value As String)
    End Sub
    Partial Private Sub OnEmbedCodeChanged()
    End Sub
    Partial Private Sub OnAnswer1Changing(value As String)
    End Sub
    Partial Private Sub OnAnswer1Changed()
    End Sub
    Partial Private Sub OnAnswer2Changing(value As String)
    End Sub
    Partial Private Sub OnAnswer2Changed()
    End Sub
    Partial Private Sub OnAnswer3Changing(value As String)
    End Sub
    Partial Private Sub OnAnswer3Changed()
    End Sub
    Partial Private Sub OnAnswer4Changing(value As String)
    End Sub
    Partial Private Sub OnAnswer4Changed()
    End Sub
    Partial Private Sub OnCorrectAnswerChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCorrectAnswerChanged()
    End Sub
    Partial Private Sub OnAnswerExplanationChanging(value As String)
    End Sub
    Partial Private Sub OnAnswerExplanationChanged()
    End Sub
    Partial Private Sub OnQuestionTypeChanging(value As String)
    End Sub
    Partial Private Sub OnQuestionTypeChanged()
    End Sub
    Partial Private Sub OnAnswerTextChanging(value As String)
    End Sub
    Partial Private Sub OnAnswerTextChanged()
    End Sub
    Partial Private Sub OnCorrectAnswerTextChanging(value As String)
    End Sub
    Partial Private Sub OnCorrectAnswerTextChanged()
    End Sub
    Partial Private Sub OnAssignmentIDChanging(value As String)
    End Sub
    Partial Private Sub OnAssignmentIDChanged()
    End Sub
    Partial Private Sub OnUserContentIDChanging(value As String)
    End Sub
    Partial Private Sub OnUserContentIDChanged()
    End Sub
    Partial Private Sub OnTestIDChanging(value As String)
    End Sub
    Partial Private Sub OnTestIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurriculumListID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property CurriculumListID() As String
		Get
			Return Me._CurriculumListID
		End Get
		Set
			If (String.Equals(Me._CurriculumListID, value) = false) Then
				Me.OnCurriculumListIDChanging(value)
				Me.SendPropertyChanging
				Me._CurriculumListID = value
				Me.SendPropertyChanged("CurriculumListID")
				Me.OnCurriculumListIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurriculumID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CurriculumID() As String
		Get
			Return Me._CurriculumID
		End Get
		Set
			If (String.Equals(Me._CurriculumID, value) = false) Then
				Me.OnCurriculumIDChanging(value)
				Me.SendPropertyChanging
				Me._CurriculumID = value
				Me.SendPropertyChanged("CurriculumID")
				Me.OnCurriculumIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(50)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Text", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Text() As String
		Get
			Return Me._Text
		End Get
		Set
			If (String.Equals(Me._Text, value) = false) Then
				Me.OnTextChanging(value)
				Me.SendPropertyChanging
				Me._Text = value
				Me.SendPropertyChanged("Text")
				Me.OnTextChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Order", DbType:="Int")>  _
	Public Property [Order]() As System.Nullable(Of Integer)
		Get
			Return Me._Order
		End Get
		Set
			If (Me._Order.Equals(value) = false) Then
				Me.OnOrderChanging(value)
				Me.SendPropertyChanging
				Me._Order = value
				Me.SendPropertyChanged("[Order]")
				Me.OnOrderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContentType", DbType:="Int")>  _
	Public Property ContentType() As System.Nullable(Of Integer)
		Get
			Return Me._ContentType
		End Get
		Set
			If (Me._ContentType.Equals(value) = false) Then
				Me.OnContentTypeChanging(value)
				Me.SendPropertyChanging
				Me._ContentType = value
				Me.SendPropertyChanged("ContentType")
				Me.OnContentTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VideoURL", DbType:="NVarChar(255)")>  _
	Public Property VideoURL() As String
		Get
			Return Me._VideoURL
		End Get
		Set
			If (String.Equals(Me._VideoURL, value) = false) Then
				Me.OnVideoURLChanging(value)
				Me.SendPropertyChanging
				Me._VideoURL = value
				Me.SendPropertyChanged("VideoURL")
				Me.OnVideoURLChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmbedCode", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property EmbedCode() As String
		Get
			Return Me._EmbedCode
		End Get
		Set
			If (String.Equals(Me._EmbedCode, value) = false) Then
				Me.OnEmbedCodeChanging(value)
				Me.SendPropertyChanging
				Me._EmbedCode = value
				Me.SendPropertyChanged("EmbedCode")
				Me.OnEmbedCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Answer1", DbType:="NVarChar(255)")>  _
	Public Property Answer1() As String
		Get
			Return Me._Answer1
		End Get
		Set
			If (String.Equals(Me._Answer1, value) = false) Then
				Me.OnAnswer1Changing(value)
				Me.SendPropertyChanging
				Me._Answer1 = value
				Me.SendPropertyChanged("Answer1")
				Me.OnAnswer1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Answer2", DbType:="NVarChar(255)")>  _
	Public Property Answer2() As String
		Get
			Return Me._Answer2
		End Get
		Set
			If (String.Equals(Me._Answer2, value) = false) Then
				Me.OnAnswer2Changing(value)
				Me.SendPropertyChanging
				Me._Answer2 = value
				Me.SendPropertyChanged("Answer2")
				Me.OnAnswer2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Answer3", DbType:="NVarChar(255)")>  _
	Public Property Answer3() As String
		Get
			Return Me._Answer3
		End Get
		Set
			If (String.Equals(Me._Answer3, value) = false) Then
				Me.OnAnswer3Changing(value)
				Me.SendPropertyChanging
				Me._Answer3 = value
				Me.SendPropertyChanged("Answer3")
				Me.OnAnswer3Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Answer4", DbType:="NVarChar(255)")>  _
	Public Property Answer4() As String
		Get
			Return Me._Answer4
		End Get
		Set
			If (String.Equals(Me._Answer4, value) = false) Then
				Me.OnAnswer4Changing(value)
				Me.SendPropertyChanging
				Me._Answer4 = value
				Me.SendPropertyChanged("Answer4")
				Me.OnAnswer4Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CorrectAnswer", DbType:="Int")>  _
	Public Property CorrectAnswer() As System.Nullable(Of Integer)
		Get
			Return Me._CorrectAnswer
		End Get
		Set
			If (Me._CorrectAnswer.Equals(value) = false) Then
				Me.OnCorrectAnswerChanging(value)
				Me.SendPropertyChanging
				Me._CorrectAnswer = value
				Me.SendPropertyChanged("CorrectAnswer")
				Me.OnCorrectAnswerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AnswerExplanation", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property AnswerExplanation() As String
		Get
			Return Me._AnswerExplanation
		End Get
		Set
			If (String.Equals(Me._AnswerExplanation, value) = false) Then
				Me.OnAnswerExplanationChanging(value)
				Me.SendPropertyChanging
				Me._AnswerExplanation = value
				Me.SendPropertyChanged("AnswerExplanation")
				Me.OnAnswerExplanationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QuestionType", DbType:="NVarChar(50)")>  _
	Public Property QuestionType() As String
		Get
			Return Me._QuestionType
		End Get
		Set
			If (String.Equals(Me._QuestionType, value) = false) Then
				Me.OnQuestionTypeChanging(value)
				Me.SendPropertyChanging
				Me._QuestionType = value
				Me.SendPropertyChanged("QuestionType")
				Me.OnQuestionTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AnswerText", DbType:="NVarChar(50)")>  _
	Public Property AnswerText() As String
		Get
			Return Me._AnswerText
		End Get
		Set
			If (String.Equals(Me._AnswerText, value) = false) Then
				Me.OnAnswerTextChanging(value)
				Me.SendPropertyChanging
				Me._AnswerText = value
				Me.SendPropertyChanged("AnswerText")
				Me.OnAnswerTextChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CorrectAnswerText", DbType:="NVarChar(50)")>  _
	Public Property CorrectAnswerText() As String
		Get
			Return Me._CorrectAnswerText
		End Get
		Set
			If (String.Equals(Me._CorrectAnswerText, value) = false) Then
				Me.OnCorrectAnswerTextChanging(value)
				Me.SendPropertyChanging
				Me._CorrectAnswerText = value
				Me.SendPropertyChanged("CorrectAnswerText")
				Me.OnCorrectAnswerTextChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AssignmentID", DbType:="NVarChar(50)")>  _
	Public Property AssignmentID() As String
		Get
			Return Me._AssignmentID
		End Get
		Set
			If (String.Equals(Me._AssignmentID, value) = false) Then
				Me.OnAssignmentIDChanging(value)
				Me.SendPropertyChanging
				Me._AssignmentID = value
				Me.SendPropertyChanged("AssignmentID")
				Me.OnAssignmentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserContentID", DbType:="NVarChar(50)")>  _
	Public Property UserContentID() As String
		Get
			Return Me._UserContentID
		End Get
		Set
			If (String.Equals(Me._UserContentID, value) = false) Then
				Me.OnUserContentIDChanging(value)
				Me.SendPropertyChanging
				Me._UserContentID = value
				Me.SendPropertyChanged("UserContentID")
				Me.OnUserContentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TestID", DbType:="NVarChar(50)")>  _
	Public Property TestID() As String
		Get
			Return Me._TestID
		End Get
		Set
			If (String.Equals(Me._TestID, value) = false) Then
				Me.OnTestIDChanging(value)
				Me.SendPropertyChanging
				Me._TestID = value
				Me.SendPropertyChanged("TestID")
				Me.OnTestIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Applicants")>  _
Partial Public Class Applicant
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ApplicantID As Integer
	
	Private _dbGUID As String
	
	Private _SSN As String
	
	Private _FirstName As String
	
	Private _LastName As String
	
	Private _Address As String
	
	Private _City As String
	
	Private _State As String
	
	Private _Zip As String
	
	Private _Phone As String
	
	Private _CellPhone As String
	
	Private _DOB As String
	
	Private _SiteID As String
	
	Private _db1 As String
	
	Private _db1Label As String
	
	Private _db2 As String
	
	Private _db2Label As String
	
	Private _db3 As String
	
	Private _db3Label As String
	
	Private _db4 As String
	
	Private _db4Label As String
	
	Private _db5 As String
	
	Private _db5Label As String
	
	Private _RegistrationDate As System.Nullable(Of Date)
	
	Private _LastLoginDate As System.Nullable(Of Date)
	
	Private _EmailAddress As String
	
	Private _IsOnline As String
	
	Private _IPAddress As String
	
	Private _InvitationCode As String
	
	Private _InvitationDate As System.Nullable(Of Date)
	
	Private _Status As String
	
	Private _TimeZone As String
	
	Private _CultureInfoCode As String
	
	Private _ProfileImageURL As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicantIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnApplicantIDChanged()
    End Sub
    Partial Private Sub OndbGUIDChanging(value As String)
    End Sub
    Partial Private Sub OndbGUIDChanged()
    End Sub
    Partial Private Sub OnSSNChanging(value As String)
    End Sub
    Partial Private Sub OnSSNChanged()
    End Sub
    Partial Private Sub OnFirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnFirstNameChanged()
    End Sub
    Partial Private Sub OnLastNameChanging(value As String)
    End Sub
    Partial Private Sub OnLastNameChanged()
    End Sub
    Partial Private Sub OnAddressChanging(value As String)
    End Sub
    Partial Private Sub OnAddressChanged()
    End Sub
    Partial Private Sub OnCityChanging(value As String)
    End Sub
    Partial Private Sub OnCityChanged()
    End Sub
    Partial Private Sub OnStateChanging(value As String)
    End Sub
    Partial Private Sub OnStateChanged()
    End Sub
    Partial Private Sub OnZipChanging(value As String)
    End Sub
    Partial Private Sub OnZipChanged()
    End Sub
    Partial Private Sub OnPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneChanged()
    End Sub
    Partial Private Sub OnCellPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnCellPhoneChanged()
    End Sub
    Partial Private Sub OnDOBChanging(value As String)
    End Sub
    Partial Private Sub OnDOBChanged()
    End Sub
    Partial Private Sub OnSiteIDChanging(value As String)
    End Sub
    Partial Private Sub OnSiteIDChanged()
    End Sub
    Partial Private Sub Ondb1Changing(value As String)
    End Sub
    Partial Private Sub Ondb1Changed()
    End Sub
    Partial Private Sub Ondb1LabelChanging(value As String)
    End Sub
    Partial Private Sub Ondb1LabelChanged()
    End Sub
    Partial Private Sub Ondb2Changing(value As String)
    End Sub
    Partial Private Sub Ondb2Changed()
    End Sub
    Partial Private Sub Ondb2LabelChanging(value As String)
    End Sub
    Partial Private Sub Ondb2LabelChanged()
    End Sub
    Partial Private Sub Ondb3Changing(value As String)
    End Sub
    Partial Private Sub Ondb3Changed()
    End Sub
    Partial Private Sub Ondb3LabelChanging(value As String)
    End Sub
    Partial Private Sub Ondb3LabelChanged()
    End Sub
    Partial Private Sub Ondb4Changing(value As String)
    End Sub
    Partial Private Sub Ondb4Changed()
    End Sub
    Partial Private Sub Ondb4LabelChanging(value As String)
    End Sub
    Partial Private Sub Ondb4LabelChanged()
    End Sub
    Partial Private Sub Ondb5Changing(value As String)
    End Sub
    Partial Private Sub Ondb5Changed()
    End Sub
    Partial Private Sub Ondb5LabelChanging(value As String)
    End Sub
    Partial Private Sub Ondb5LabelChanged()
    End Sub
    Partial Private Sub OnRegistrationDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnRegistrationDateChanged()
    End Sub
    Partial Private Sub OnLastLoginDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastLoginDateChanged()
    End Sub
    Partial Private Sub OnEmailAddressChanging(value As String)
    End Sub
    Partial Private Sub OnEmailAddressChanged()
    End Sub
    Partial Private Sub OnIsOnlineChanging(value As String)
    End Sub
    Partial Private Sub OnIsOnlineChanged()
    End Sub
    Partial Private Sub OnIPAddressChanging(value As String)
    End Sub
    Partial Private Sub OnIPAddressChanged()
    End Sub
    Partial Private Sub OnInvitationCodeChanging(value As String)
    End Sub
    Partial Private Sub OnInvitationCodeChanged()
    End Sub
    Partial Private Sub OnInvitationDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnInvitationDateChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As String)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnTimeZoneChanging(value As String)
    End Sub
    Partial Private Sub OnTimeZoneChanged()
    End Sub
    Partial Private Sub OnCultureInfoCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCultureInfoCodeChanged()
    End Sub
    Partial Private Sub OnProfileImageURLChanging(value As String)
    End Sub
    Partial Private Sub OnProfileImageURLChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicantID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ApplicantID() As Integer
		Get
			Return Me._ApplicantID
		End Get
		Set
			If ((Me._ApplicantID = value)  _
						= false) Then
				Me.OnApplicantIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicantID = value
				Me.SendPropertyChanged("ApplicantID")
				Me.OnApplicantIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dbGUID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property dbGUID() As String
		Get
			Return Me._dbGUID
		End Get
		Set
			If (String.Equals(Me._dbGUID, value) = false) Then
				Me.OndbGUIDChanging(value)
				Me.SendPropertyChanging
				Me._dbGUID = value
				Me.SendPropertyChanged("dbGUID")
				Me.OndbGUIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SSN", DbType:="NVarChar(4)")>  _
	Public Property SSN() As String
		Get
			Return Me._SSN
		End Get
		Set
			If (String.Equals(Me._SSN, value) = false) Then
				Me.OnSSNChanging(value)
				Me.SendPropertyChanging
				Me._SSN = value
				Me.SendPropertyChanged("SSN")
				Me.OnSSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me.OnFirstNameChanging(value)
				Me.SendPropertyChanging
				Me._FirstName = value
				Me.SendPropertyChanged("FirstName")
				Me.OnFirstNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me.OnLastNameChanging(value)
				Me.SendPropertyChanging
				Me._LastName = value
				Me.SendPropertyChanged("LastName")
				Me.OnLastNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="NVarChar(50)")>  _
	Public Property Address() As String
		Get
			Return Me._Address
		End Get
		Set
			If (String.Equals(Me._Address, value) = false) Then
				Me.OnAddressChanging(value)
				Me.SendPropertyChanging
				Me._Address = value
				Me.SendPropertyChanged("Address")
				Me.OnAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", DbType:="NVarChar(50)")>  _
	Public Property City() As String
		Get
			Return Me._City
		End Get
		Set
			If (String.Equals(Me._City, value) = false) Then
				Me.OnCityChanging(value)
				Me.SendPropertyChanging
				Me._City = value
				Me.SendPropertyChanged("City")
				Me.OnCityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_State", DbType:="NVarChar(50)")>  _
	Public Property State() As String
		Get
			Return Me._State
		End Get
		Set
			If (String.Equals(Me._State, value) = false) Then
				Me.OnStateChanging(value)
				Me.SendPropertyChanging
				Me._State = value
				Me.SendPropertyChanged("State")
				Me.OnStateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Zip", DbType:="NVarChar(50)")>  _
	Public Property Zip() As String
		Get
			Return Me._Zip
		End Get
		Set
			If (String.Equals(Me._Zip, value) = false) Then
				Me.OnZipChanging(value)
				Me.SendPropertyChanging
				Me._Zip = value
				Me.SendPropertyChanged("Zip")
				Me.OnZipChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone", DbType:="NVarChar(50)")>  _
	Public Property Phone() As String
		Get
			Return Me._Phone
		End Get
		Set
			If (String.Equals(Me._Phone, value) = false) Then
				Me.OnPhoneChanging(value)
				Me.SendPropertyChanging
				Me._Phone = value
				Me.SendPropertyChanged("Phone")
				Me.OnPhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CellPhone", DbType:="NVarChar(50)")>  _
	Public Property CellPhone() As String
		Get
			Return Me._CellPhone
		End Get
		Set
			If (String.Equals(Me._CellPhone, value) = false) Then
				Me.OnCellPhoneChanging(value)
				Me.SendPropertyChanging
				Me._CellPhone = value
				Me.SendPropertyChanged("CellPhone")
				Me.OnCellPhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DOB", DbType:="NVarChar(50)")>  _
	Public Property DOB() As String
		Get
			Return Me._DOB
		End Get
		Set
			If (String.Equals(Me._DOB, value) = false) Then
				Me.OnDOBChanging(value)
				Me.SendPropertyChanging
				Me._DOB = value
				Me.SendPropertyChanged("DOB")
				Me.OnDOBChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property SiteID() As String
		Get
			Return Me._SiteID
		End Get
		Set
			If (String.Equals(Me._SiteID, value) = false) Then
				Me.OnSiteIDChanging(value)
				Me.SendPropertyChanging
				Me._SiteID = value
				Me.SendPropertyChanged("SiteID")
				Me.OnSiteIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_db1", DbType:="NVarChar(255)")>  _
	Public Property db1() As String
		Get
			Return Me._db1
		End Get
		Set
			If (String.Equals(Me._db1, value) = false) Then
				Me.Ondb1Changing(value)
				Me.SendPropertyChanging
				Me._db1 = value
				Me.SendPropertyChanged("db1")
				Me.Ondb1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_db1Label", DbType:="NVarChar(255)")>  _
	Public Property db1Label() As String
		Get
			Return Me._db1Label
		End Get
		Set
			If (String.Equals(Me._db1Label, value) = false) Then
				Me.Ondb1LabelChanging(value)
				Me.SendPropertyChanging
				Me._db1Label = value
				Me.SendPropertyChanged("db1Label")
				Me.Ondb1LabelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_db2", DbType:="NVarChar(255)")>  _
	Public Property db2() As String
		Get
			Return Me._db2
		End Get
		Set
			If (String.Equals(Me._db2, value) = false) Then
				Me.Ondb2Changing(value)
				Me.SendPropertyChanging
				Me._db2 = value
				Me.SendPropertyChanged("db2")
				Me.Ondb2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_db2Label", DbType:="NVarChar(255)")>  _
	Public Property db2Label() As String
		Get
			Return Me._db2Label
		End Get
		Set
			If (String.Equals(Me._db2Label, value) = false) Then
				Me.Ondb2LabelChanging(value)
				Me.SendPropertyChanging
				Me._db2Label = value
				Me.SendPropertyChanged("db2Label")
				Me.Ondb2LabelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_db3", DbType:="NVarChar(255)")>  _
	Public Property db3() As String
		Get
			Return Me._db3
		End Get
		Set
			If (String.Equals(Me._db3, value) = false) Then
				Me.Ondb3Changing(value)
				Me.SendPropertyChanging
				Me._db3 = value
				Me.SendPropertyChanged("db3")
				Me.Ondb3Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_db3Label", DbType:="NVarChar(255)")>  _
	Public Property db3Label() As String
		Get
			Return Me._db3Label
		End Get
		Set
			If (String.Equals(Me._db3Label, value) = false) Then
				Me.Ondb3LabelChanging(value)
				Me.SendPropertyChanging
				Me._db3Label = value
				Me.SendPropertyChanged("db3Label")
				Me.Ondb3LabelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_db4", DbType:="NVarChar(255)")>  _
	Public Property db4() As String
		Get
			Return Me._db4
		End Get
		Set
			If (String.Equals(Me._db4, value) = false) Then
				Me.Ondb4Changing(value)
				Me.SendPropertyChanging
				Me._db4 = value
				Me.SendPropertyChanged("db4")
				Me.Ondb4Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_db4Label", DbType:="NVarChar(255)")>  _
	Public Property db4Label() As String
		Get
			Return Me._db4Label
		End Get
		Set
			If (String.Equals(Me._db4Label, value) = false) Then
				Me.Ondb4LabelChanging(value)
				Me.SendPropertyChanging
				Me._db4Label = value
				Me.SendPropertyChanged("db4Label")
				Me.Ondb4LabelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_db5", DbType:="NVarChar(255)")>  _
	Public Property db5() As String
		Get
			Return Me._db5
		End Get
		Set
			If (String.Equals(Me._db5, value) = false) Then
				Me.Ondb5Changing(value)
				Me.SendPropertyChanging
				Me._db5 = value
				Me.SendPropertyChanged("db5")
				Me.Ondb5Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_db5Label", DbType:="NVarChar(255)")>  _
	Public Property db5Label() As String
		Get
			Return Me._db5Label
		End Get
		Set
			If (String.Equals(Me._db5Label, value) = false) Then
				Me.Ondb5LabelChanging(value)
				Me.SendPropertyChanging
				Me._db5Label = value
				Me.SendPropertyChanged("db5Label")
				Me.Ondb5LabelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RegistrationDate", DbType:="SmallDateTime")>  _
	Public Property RegistrationDate() As System.Nullable(Of Date)
		Get
			Return Me._RegistrationDate
		End Get
		Set
			If (Me._RegistrationDate.Equals(value) = false) Then
				Me.OnRegistrationDateChanging(value)
				Me.SendPropertyChanging
				Me._RegistrationDate = value
				Me.SendPropertyChanged("RegistrationDate")
				Me.OnRegistrationDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastLoginDate", DbType:="SmallDateTime")>  _
	Public Property LastLoginDate() As System.Nullable(Of Date)
		Get
			Return Me._LastLoginDate
		End Get
		Set
			If (Me._LastLoginDate.Equals(value) = false) Then
				Me.OnLastLoginDateChanging(value)
				Me.SendPropertyChanging
				Me._LastLoginDate = value
				Me.SendPropertyChanged("LastLoginDate")
				Me.OnLastLoginDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmailAddress", DbType:="NVarChar(50)")>  _
	Public Property EmailAddress() As String
		Get
			Return Me._EmailAddress
		End Get
		Set
			If (String.Equals(Me._EmailAddress, value) = false) Then
				Me.OnEmailAddressChanging(value)
				Me.SendPropertyChanging
				Me._EmailAddress = value
				Me.SendPropertyChanged("EmailAddress")
				Me.OnEmailAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsOnline", DbType:="Char(10)")>  _
	Public Property IsOnline() As String
		Get
			Return Me._IsOnline
		End Get
		Set
			If (String.Equals(Me._IsOnline, value) = false) Then
				Me.OnIsOnlineChanging(value)
				Me.SendPropertyChanging
				Me._IsOnline = value
				Me.SendPropertyChanged("IsOnline")
				Me.OnIsOnlineChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IPAddress", DbType:="NVarChar(50)")>  _
	Public Property IPAddress() As String
		Get
			Return Me._IPAddress
		End Get
		Set
			If (String.Equals(Me._IPAddress, value) = false) Then
				Me.OnIPAddressChanging(value)
				Me.SendPropertyChanging
				Me._IPAddress = value
				Me.SendPropertyChanged("IPAddress")
				Me.OnIPAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvitationCode", DbType:="NVarChar(50)")>  _
	Public Property InvitationCode() As String
		Get
			Return Me._InvitationCode
		End Get
		Set
			If (String.Equals(Me._InvitationCode, value) = false) Then
				Me.OnInvitationCodeChanging(value)
				Me.SendPropertyChanging
				Me._InvitationCode = value
				Me.SendPropertyChanged("InvitationCode")
				Me.OnInvitationCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvitationDate", DbType:="SmallDateTime")>  _
	Public Property InvitationDate() As System.Nullable(Of Date)
		Get
			Return Me._InvitationDate
		End Get
		Set
			If (Me._InvitationDate.Equals(value) = false) Then
				Me.OnInvitationDateChanging(value)
				Me.SendPropertyChanging
				Me._InvitationDate = value
				Me.SendPropertyChanged("InvitationDate")
				Me.OnInvitationDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="NVarChar(20)")>  _
	Public Property Status() As String
		Get
			Return Me._Status
		End Get
		Set
			If (String.Equals(Me._Status, value) = false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TimeZone", DbType:="NVarChar(255)")>  _
	Public Property TimeZone() As String
		Get
			Return Me._TimeZone
		End Get
		Set
			If (String.Equals(Me._TimeZone, value) = false) Then
				Me.OnTimeZoneChanging(value)
				Me.SendPropertyChanging
				Me._TimeZone = value
				Me.SendPropertyChanged("TimeZone")
				Me.OnTimeZoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CultureInfoCode", DbType:="NVarChar(10)")>  _
	Public Property CultureInfoCode() As String
		Get
			Return Me._CultureInfoCode
		End Get
		Set
			If (String.Equals(Me._CultureInfoCode, value) = false) Then
				Me.OnCultureInfoCodeChanging(value)
				Me.SendPropertyChanging
				Me._CultureInfoCode = value
				Me.SendPropertyChanged("CultureInfoCode")
				Me.OnCultureInfoCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProfileImageURL", DbType:="NVarChar(255)")>  _
	Public Property ProfileImageURL() As String
		Get
			Return Me._ProfileImageURL
		End Get
		Set
			If (String.Equals(Me._ProfileImageURL, value) = false) Then
				Me.OnProfileImageURLChanging(value)
				Me.SendPropertyChanging
				Me._ProfileImageURL = value
				Me.SendPropertyChanged("ProfileImageURL")
				Me.OnProfileImageURLChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryUserRoles")>  _
Partial Public Class qryUserRole
	
	Private _UserId As String
	
	Private _RoleId As String
	
	Private _Name As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property UserId() As String
		Get
			Return Me._UserId
		End Get
		Set
			If (String.Equals(Me._UserId, value) = false) Then
				Me._UserId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RoleId", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property RoleId() As String
		Get
			Return Me._RoleId
		End Get
		Set
			If (String.Equals(Me._RoleId, value) = false) Then
				Me._RoleId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me._Name = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TimeZones")>  _
Partial Public Class TimeZone
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _TimeZoneID As Integer
	
	Private _Id As String
	
	Private _DisplayName As String
	
	Private _StandardName As String
	
	Private _DaylightName As String
	
	Private _SupportsDaylightSavingTime As System.Nullable(Of Boolean)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTimeZoneIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnTimeZoneIDChanged()
    End Sub
    Partial Private Sub OnIdChanging(value As String)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnDisplayNameChanging(value As String)
    End Sub
    Partial Private Sub OnDisplayNameChanged()
    End Sub
    Partial Private Sub OnStandardNameChanging(value As String)
    End Sub
    Partial Private Sub OnStandardNameChanged()
    End Sub
    Partial Private Sub OnDaylightNameChanging(value As String)
    End Sub
    Partial Private Sub OnDaylightNameChanged()
    End Sub
    Partial Private Sub OnSupportsDaylightSavingTimeChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnSupportsDaylightSavingTimeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TimeZoneID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property TimeZoneID() As Integer
		Get
			Return Me._TimeZoneID
		End Get
		Set
			If ((Me._TimeZoneID = value)  _
						= false) Then
				Me.OnTimeZoneIDChanging(value)
				Me.SendPropertyChanging
				Me._TimeZoneID = value
				Me.SendPropertyChanged("TimeZoneID")
				Me.OnTimeZoneIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", DbType:="NVarChar(255)")>  _
	Public Property Id() As String
		Get
			Return Me._Id
		End Get
		Set
			If (String.Equals(Me._Id, value) = false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DisplayName", DbType:="NVarChar(255)")>  _
	Public Property DisplayName() As String
		Get
			Return Me._DisplayName
		End Get
		Set
			If (String.Equals(Me._DisplayName, value) = false) Then
				Me.OnDisplayNameChanging(value)
				Me.SendPropertyChanging
				Me._DisplayName = value
				Me.SendPropertyChanged("DisplayName")
				Me.OnDisplayNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StandardName", DbType:="NVarChar(255)")>  _
	Public Property StandardName() As String
		Get
			Return Me._StandardName
		End Get
		Set
			If (String.Equals(Me._StandardName, value) = false) Then
				Me.OnStandardNameChanging(value)
				Me.SendPropertyChanging
				Me._StandardName = value
				Me.SendPropertyChanged("StandardName")
				Me.OnStandardNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DaylightName", DbType:="NVarChar(255)")>  _
	Public Property DaylightName() As String
		Get
			Return Me._DaylightName
		End Get
		Set
			If (String.Equals(Me._DaylightName, value) = false) Then
				Me.OnDaylightNameChanging(value)
				Me.SendPropertyChanging
				Me._DaylightName = value
				Me.SendPropertyChanged("DaylightName")
				Me.OnDaylightNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SupportsDaylightSavingTime", DbType:="Bit")>  _
	Public Property SupportsDaylightSavingTime() As System.Nullable(Of Boolean)
		Get
			Return Me._SupportsDaylightSavingTime
		End Get
		Set
			If (Me._SupportsDaylightSavingTime.Equals(value) = false) Then
				Me.OnSupportsDaylightSavingTimeChanging(value)
				Me.SendPropertyChanging
				Me._SupportsDaylightSavingTime = value
				Me.SendPropertyChanged("SupportsDaylightSavingTime")
				Me.OnSupportsDaylightSavingTimeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TestGroups")>  _
Partial Public Class TestGroup
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _GroupID As String
	
	Private _GroupTitle As String
	
	Private _SiteID As String
	
	Private _DefaultGroup As System.Nullable(Of Boolean)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnGroupIDChanging(value As String)
    End Sub
    Partial Private Sub OnGroupIDChanged()
    End Sub
    Partial Private Sub OnGroupTitleChanging(value As String)
    End Sub
    Partial Private Sub OnGroupTitleChanged()
    End Sub
    Partial Private Sub OnSiteIDChanging(value As String)
    End Sub
    Partial Private Sub OnSiteIDChanged()
    End Sub
    Partial Private Sub OnDefaultGroupChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnDefaultGroupChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property GroupID() As String
		Get
			Return Me._GroupID
		End Get
		Set
			If (String.Equals(Me._GroupID, value) = false) Then
				Me.OnGroupIDChanging(value)
				Me.SendPropertyChanging
				Me._GroupID = value
				Me.SendPropertyChanged("GroupID")
				Me.OnGroupIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupTitle", DbType:="NVarChar(50)")>  _
	Public Property GroupTitle() As String
		Get
			Return Me._GroupTitle
		End Get
		Set
			If (String.Equals(Me._GroupTitle, value) = false) Then
				Me.OnGroupTitleChanging(value)
				Me.SendPropertyChanging
				Me._GroupTitle = value
				Me.SendPropertyChanged("GroupTitle")
				Me.OnGroupTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteID", DbType:="NChar(10)")>  _
	Public Property SiteID() As String
		Get
			Return Me._SiteID
		End Get
		Set
			If (String.Equals(Me._SiteID, value) = false) Then
				Me.OnSiteIDChanging(value)
				Me.SendPropertyChanging
				Me._SiteID = value
				Me.SendPropertyChanged("SiteID")
				Me.OnSiteIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DefaultGroup", DbType:="Bit")>  _
	Public Property DefaultGroup() As System.Nullable(Of Boolean)
		Get
			Return Me._DefaultGroup
		End Get
		Set
			If (Me._DefaultGroup.Equals(value) = false) Then
				Me.OnDefaultGroupChanging(value)
				Me.SendPropertyChanging
				Me._DefaultGroup = value
				Me.SendPropertyChanged("DefaultGroup")
				Me.OnDefaultGroupChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.StudentsInGroups")>  _
Partial Public Class StudentsInGroup
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _UserName As String
	
	Private _TestGoupID As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnUserNameChanged()
    End Sub
    Partial Private Sub OnTestGoupIDChanging(value As String)
    End Sub
    Partial Private Sub OnTestGoupIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me.OnUserNameChanging(value)
				Me.SendPropertyChanging
				Me._UserName = value
				Me.SendPropertyChanged("UserName")
				Me.OnUserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TestGoupID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property TestGoupID() As String
		Get
			Return Me._TestGoupID
		End Get
		Set
			If (String.Equals(Me._TestGoupID, value) = false) Then
				Me.OnTestGoupIDChanging(value)
				Me.SendPropertyChanging
				Me._TestGoupID = value
				Me.SendPropertyChanged("TestGoupID")
				Me.OnTestGoupIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Students")>  _
Partial Public Class Student
	
	Private _Id As String
	
	Private _UserName As String
	
	Private _Email As String
	
	Private _UserId As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property Id() As String
		Get
			Return Me._Id
		End Get
		Set
			If (String.Equals(Me._Id, value) = false) Then
				Me._Id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me._UserName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(256)")>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me._Email = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property UserId() As String
		Get
			Return Me._UserId
		End Get
		Set
			If (String.Equals(Me._UserId, value) = false) Then
				Me._UserId = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.StudentsInCourse")>  _
Partial Public Class StudentsInCourse
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _StudentInCourseID As String
	
	Private _UserName As String
	
	Private _CourseID As String
	
	Private _Status As System.Nullable(Of Integer)
	
	Private _PercentComplete As System.Nullable(Of Integer)
	
	Private _DateStarted As System.Nullable(Of Date)
	
	Private _DateCompleted As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnStudentInCourseIDChanging(value As String)
    End Sub
    Partial Private Sub OnStudentInCourseIDChanged()
    End Sub
    Partial Private Sub OnUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnUserNameChanged()
    End Sub
    Partial Private Sub OnCourseIDChanging(value As String)
    End Sub
    Partial Private Sub OnCourseIDChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnPercentCompleteChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPercentCompleteChanged()
    End Sub
    Partial Private Sub OnDateStartedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateStartedChanged()
    End Sub
    Partial Private Sub OnDateCompletedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateCompletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StudentInCourseID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property StudentInCourseID() As String
		Get
			Return Me._StudentInCourseID
		End Get
		Set
			If (String.Equals(Me._StudentInCourseID, value) = false) Then
				Me.OnStudentInCourseIDChanging(value)
				Me.SendPropertyChanging
				Me._StudentInCourseID = value
				Me.SendPropertyChanged("StudentInCourseID")
				Me.OnStudentInCourseIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="NVarChar(50)")>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me.OnUserNameChanging(value)
				Me.SendPropertyChanging
				Me._UserName = value
				Me.SendPropertyChanged("UserName")
				Me.OnUserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CourseID", DbType:="NVarChar(50)")>  _
	Public Property CourseID() As String
		Get
			Return Me._CourseID
		End Get
		Set
			If (String.Equals(Me._CourseID, value) = false) Then
				Me.OnCourseIDChanging(value)
				Me.SendPropertyChanging
				Me._CourseID = value
				Me.SendPropertyChanged("CourseID")
				Me.OnCourseIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="Int")>  _
	Public Property Status() As System.Nullable(Of Integer)
		Get
			Return Me._Status
		End Get
		Set
			If (Me._Status.Equals(value) = false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PercentComplete", DbType:="Int")>  _
	Public Property PercentComplete() As System.Nullable(Of Integer)
		Get
			Return Me._PercentComplete
		End Get
		Set
			If (Me._PercentComplete.Equals(value) = false) Then
				Me.OnPercentCompleteChanging(value)
				Me.SendPropertyChanging
				Me._PercentComplete = value
				Me.SendPropertyChanged("PercentComplete")
				Me.OnPercentCompleteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateStarted", DbType:="DateTime")>  _
	Public Property DateStarted() As System.Nullable(Of Date)
		Get
			Return Me._DateStarted
		End Get
		Set
			If (Me._DateStarted.Equals(value) = false) Then
				Me.OnDateStartedChanging(value)
				Me.SendPropertyChanging
				Me._DateStarted = value
				Me.SendPropertyChanged("DateStarted")
				Me.OnDateStartedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCompleted", DbType:="DateTime")>  _
	Public Property DateCompleted() As System.Nullable(Of Date)
		Get
			Return Me._DateCompleted
		End Get
		Set
			If (Me._DateCompleted.Equals(value) = false) Then
				Me.OnDateCompletedChanging(value)
				Me.SendPropertyChanging
				Me._DateCompleted = value
				Me.SendPropertyChanged("DateCompleted")
				Me.OnDateCompletedChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.StudentsInGroups")>  _
Partial Public Class StudentsInGroup1
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _UserName As String
	
	Private _TestGoupID As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnUserNameChanged()
    End Sub
    Partial Private Sub OnTestGoupIDChanging(value As String)
    End Sub
    Partial Private Sub OnTestGoupIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me.OnUserNameChanging(value)
				Me.SendPropertyChanging
				Me._UserName = value
				Me.SendPropertyChanged("UserName")
				Me.OnUserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TestGoupID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property TestGoupID() As String
		Get
			Return Me._TestGoupID
		End Get
		Set
			If (String.Equals(Me._TestGoupID, value) = false) Then
				Me.OnTestGoupIDChanging(value)
				Me.SendPropertyChanging
				Me._TestGoupID = value
				Me.SendPropertyChanged("TestGoupID")
				Me.OnTestGoupIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Locations")>  _
Partial Public Class Location
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _LocationID As String
	
	Private _SiteID As String
	
	Private _LocationName As String
	
	Private _IP_Address As String
	
	Private _ContactName As String
	
	Private _ContactPhone As String
	
	Private _ContactEmail As String
	
	Private _Created As System.Nullable(Of Date)
	
	Private _CreatedBy As String
	
	Private _Modified As System.Nullable(Of Date)
	
	Private _ModifiedBy As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnLocationIDChanging(value As String)
    End Sub
    Partial Private Sub OnLocationIDChanged()
    End Sub
    Partial Private Sub OnSiteIDChanging(value As String)
    End Sub
    Partial Private Sub OnSiteIDChanged()
    End Sub
    Partial Private Sub OnLocationNameChanging(value As String)
    End Sub
    Partial Private Sub OnLocationNameChanged()
    End Sub
    Partial Private Sub OnIP_AddressChanging(value As String)
    End Sub
    Partial Private Sub OnIP_AddressChanged()
    End Sub
    Partial Private Sub OnContactNameChanging(value As String)
    End Sub
    Partial Private Sub OnContactNameChanged()
    End Sub
    Partial Private Sub OnContactPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnContactPhoneChanged()
    End Sub
    Partial Private Sub OnContactEmailChanging(value As String)
    End Sub
    Partial Private Sub OnContactEmailChanged()
    End Sub
    Partial Private Sub OnCreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCreatedChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As String)
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnModifiedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnModifiedChanged()
    End Sub
    Partial Private Sub OnModifiedByChanging(value As String)
    End Sub
    Partial Private Sub OnModifiedByChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LocationID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property LocationID() As String
		Get
			Return Me._LocationID
		End Get
		Set
			If (String.Equals(Me._LocationID, value) = false) Then
				Me.OnLocationIDChanging(value)
				Me.SendPropertyChanging
				Me._LocationID = value
				Me.SendPropertyChanged("LocationID")
				Me.OnLocationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property SiteID() As String
		Get
			Return Me._SiteID
		End Get
		Set
			If (String.Equals(Me._SiteID, value) = false) Then
				Me.OnSiteIDChanging(value)
				Me.SendPropertyChanging
				Me._SiteID = value
				Me.SendPropertyChanged("SiteID")
				Me.OnSiteIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LocationName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property LocationName() As String
		Get
			Return Me._LocationName
		End Get
		Set
			If (String.Equals(Me._LocationName, value) = false) Then
				Me.OnLocationNameChanging(value)
				Me.SendPropertyChanging
				Me._LocationName = value
				Me.SendPropertyChanged("LocationName")
				Me.OnLocationNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IP_Address", DbType:="VarChar(50)")>  _
	Public Property IP_Address() As String
		Get
			Return Me._IP_Address
		End Get
		Set
			If (String.Equals(Me._IP_Address, value) = false) Then
				Me.OnIP_AddressChanging(value)
				Me.SendPropertyChanging
				Me._IP_Address = value
				Me.SendPropertyChanged("IP_Address")
				Me.OnIP_AddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactName", DbType:="VarChar(100)")>  _
	Public Property ContactName() As String
		Get
			Return Me._ContactName
		End Get
		Set
			If (String.Equals(Me._ContactName, value) = false) Then
				Me.OnContactNameChanging(value)
				Me.SendPropertyChanging
				Me._ContactName = value
				Me.SendPropertyChanged("ContactName")
				Me.OnContactNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactPhone", DbType:="VarChar(50)")>  _
	Public Property ContactPhone() As String
		Get
			Return Me._ContactPhone
		End Get
		Set
			If (String.Equals(Me._ContactPhone, value) = false) Then
				Me.OnContactPhoneChanging(value)
				Me.SendPropertyChanging
				Me._ContactPhone = value
				Me.SendPropertyChanged("ContactPhone")
				Me.OnContactPhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactEmail", DbType:="VarChar(255)")>  _
	Public Property ContactEmail() As String
		Get
			Return Me._ContactEmail
		End Get
		Set
			If (String.Equals(Me._ContactEmail, value) = false) Then
				Me.OnContactEmailChanging(value)
				Me.SendPropertyChanging
				Me._ContactEmail = value
				Me.SendPropertyChanged("ContactEmail")
				Me.OnContactEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Created", DbType:="SmallDateTime")>  _
	Public Property Created() As System.Nullable(Of Date)
		Get
			Return Me._Created
		End Get
		Set
			If (Me._Created.Equals(value) = false) Then
				Me.OnCreatedChanging(value)
				Me.SendPropertyChanging
				Me._Created = value
				Me.SendPropertyChanged("Created")
				Me.OnCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="VarChar(50)")>  _
	Public Property CreatedBy() As String
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (String.Equals(Me._CreatedBy, value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Modified", DbType:="SmallDateTime")>  _
	Public Property Modified() As System.Nullable(Of Date)
		Get
			Return Me._Modified
		End Get
		Set
			If (Me._Modified.Equals(value) = false) Then
				Me.OnModifiedChanging(value)
				Me.SendPropertyChanging
				Me._Modified = value
				Me.SendPropertyChanged("Modified")
				Me.OnModifiedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedBy", DbType:="VarChar(50)")>  _
	Public Property ModifiedBy() As String
		Get
			Return Me._ModifiedBy
		End Get
		Set
			If (String.Equals(Me._ModifiedBy, value) = false) Then
				Me.OnModifiedByChanging(value)
				Me.SendPropertyChanging
				Me._ModifiedBy = value
				Me.SendPropertyChanged("ModifiedBy")
				Me.OnModifiedByChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instructors")>  _
Partial Public Class Instructor
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _InstructorID As String
	
	Private _SiteID As String
	
	Private _InstructorName As String
	
	Private _InstructorEmail As String
	
	Private _EnableEmailNotification As System.Nullable(Of Boolean)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnInstructorIDChanging(value As String)
    End Sub
    Partial Private Sub OnInstructorIDChanged()
    End Sub
    Partial Private Sub OnSiteIDChanging(value As String)
    End Sub
    Partial Private Sub OnSiteIDChanged()
    End Sub
    Partial Private Sub OnInstructorNameChanging(value As String)
    End Sub
    Partial Private Sub OnInstructorNameChanged()
    End Sub
    Partial Private Sub OnInstructorEmailChanging(value As String)
    End Sub
    Partial Private Sub OnInstructorEmailChanged()
    End Sub
    Partial Private Sub OnEnableEmailNotificationChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnEnableEmailNotificationChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InstructorID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property InstructorID() As String
		Get
			Return Me._InstructorID
		End Get
		Set
			If (String.Equals(Me._InstructorID, value) = false) Then
				Me.OnInstructorIDChanging(value)
				Me.SendPropertyChanging
				Me._InstructorID = value
				Me.SendPropertyChanged("InstructorID")
				Me.OnInstructorIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property SiteID() As String
		Get
			Return Me._SiteID
		End Get
		Set
			If (String.Equals(Me._SiteID, value) = false) Then
				Me.OnSiteIDChanging(value)
				Me.SendPropertyChanging
				Me._SiteID = value
				Me.SendPropertyChanged("SiteID")
				Me.OnSiteIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InstructorName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property InstructorName() As String
		Get
			Return Me._InstructorName
		End Get
		Set
			If (String.Equals(Me._InstructorName, value) = false) Then
				Me.OnInstructorNameChanging(value)
				Me.SendPropertyChanging
				Me._InstructorName = value
				Me.SendPropertyChanged("InstructorName")
				Me.OnInstructorNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InstructorEmail", DbType:="NVarChar(255)")>  _
	Public Property InstructorEmail() As String
		Get
			Return Me._InstructorEmail
		End Get
		Set
			If (String.Equals(Me._InstructorEmail, value) = false) Then
				Me.OnInstructorEmailChanging(value)
				Me.SendPropertyChanging
				Me._InstructorEmail = value
				Me.SendPropertyChanged("InstructorEmail")
				Me.OnInstructorEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EnableEmailNotification", DbType:="Bit")>  _
	Public Property EnableEmailNotification() As System.Nullable(Of Boolean)
		Get
			Return Me._EnableEmailNotification
		End Get
		Set
			If (Me._EnableEmailNotification.Equals(value) = false) Then
				Me.OnEnableEmailNotificationChanging(value)
				Me.SendPropertyChanging
				Me._EnableEmailNotification = value
				Me.SendPropertyChanged("EnableEmailNotification")
				Me.OnEnableEmailNotificationChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CultureResource")>  _
Partial Public Class CultureResource
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PrimaryID As Integer
	
	Private _ID As String
	
	Private _CultureID As String
	
	Private _Name As String
	
	Private _en_Value As String
	
	Private _Value As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPrimaryIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnPrimaryIDChanged()
    End Sub
    Partial Private Sub OnIDChanging(value As String)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnCultureIDChanging(value As String)
    End Sub
    Partial Private Sub OnCultureIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub Onen_ValueChanging(value As String)
    End Sub
    Partial Private Sub Onen_ValueChanged()
    End Sub
    Partial Private Sub OnValueChanging(value As String)
    End Sub
    Partial Private Sub OnValueChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PrimaryID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property PrimaryID() As Integer
		Get
			Return Me._PrimaryID
		End Get
		Set
			If ((Me._PrimaryID = value)  _
						= false) Then
				Me.OnPrimaryIDChanging(value)
				Me.SendPropertyChanging
				Me._PrimaryID = value
				Me.SendPropertyChanged("PrimaryID")
				Me.OnPrimaryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property ID() As String
		Get
			Return Me._ID
		End Get
		Set
			If (String.Equals(Me._ID, value) = false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CultureID", DbType:="NVarChar(10)")>  _
	Public Property CultureID() As String
		Get
			Return Me._CultureID
		End Get
		Set
			If (String.Equals(Me._CultureID, value) = false) Then
				Me.OnCultureIDChanging(value)
				Me.SendPropertyChanging
				Me._CultureID = value
				Me.SendPropertyChanged("CultureID")
				Me.OnCultureIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_en_Value", DbType:="NVarChar(MAX)")>  _
	Public Property en_Value() As String
		Get
			Return Me._en_Value
		End Get
		Set
			If (String.Equals(Me._en_Value, value) = false) Then
				Me.Onen_ValueChanging(value)
				Me.SendPropertyChanging
				Me._en_Value = value
				Me.SendPropertyChanged("en_Value")
				Me.Onen_ValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Value", DbType:="NVarChar(MAX)")>  _
	Public Property Value() As String
		Get
			Return Me._Value
		End Get
		Set
			If (String.Equals(Me._Value, value) = false) Then
				Me.OnValueChanging(value)
				Me.SendPropertyChanging
				Me._Value = value
				Me.SendPropertyChanged("Value")
				Me.OnValueChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Icons")>  _
Partial Public Class Icon
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IconID As Integer
	
	Private _IconName As String
	
	Private _IconDetail As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIconIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIconIDChanged()
    End Sub
    Partial Private Sub OnIconNameChanging(value As String)
    End Sub
    Partial Private Sub OnIconNameChanged()
    End Sub
    Partial Private Sub OnIconDetailChanging(value As String)
    End Sub
    Partial Private Sub OnIconDetailChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IconID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IconID() As Integer
		Get
			Return Me._IconID
		End Get
		Set
			If ((Me._IconID = value)  _
						= false) Then
				Me.OnIconIDChanging(value)
				Me.SendPropertyChanging
				Me._IconID = value
				Me.SendPropertyChanged("IconID")
				Me.OnIconIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IconName", DbType:="NVarChar(50)")>  _
	Public Property IconName() As String
		Get
			Return Me._IconName
		End Get
		Set
			If (String.Equals(Me._IconName, value) = false) Then
				Me.OnIconNameChanging(value)
				Me.SendPropertyChanging
				Me._IconName = value
				Me.SendPropertyChanged("IconName")
				Me.OnIconNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IconDetail", DbType:="NVarChar(50)")>  _
	Public Property IconDetail() As String
		Get
			Return Me._IconDetail
		End Get
		Set
			If (String.Equals(Me._IconDetail, value) = false) Then
				Me.OnIconDetailChanging(value)
				Me.SendPropertyChanging
				Me._IconDetail = value
				Me.SendPropertyChanged("IconDetail")
				Me.OnIconDetailChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CourseWidgets")>  _
Partial Public Class CourseWidget
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _WidgetID As Integer
	
	Private _CourseID As String
	
	Private _WidgetName As String
	
	Private _Title As String
	
	Private _UniqueTitle As String
	
	Private _DescriptionText As String
	
	Private _Enabled As System.Nullable(Of Boolean)
	
	Private _Icon As String
	
	Private _Order As System.Nullable(Of Integer)
	
	Private _PageURL As String
	
	Private _Color As String
	
	Private _Dashboard As System.Nullable(Of Boolean)
	
	Private _LeftNav As System.Nullable(Of Boolean)
	
	Private _RightNav As System.Nullable(Of Boolean)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnWidgetIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnWidgetIDChanged()
    End Sub
    Partial Private Sub OnCourseIDChanging(value As String)
    End Sub
    Partial Private Sub OnCourseIDChanged()
    End Sub
    Partial Private Sub OnWidgetNameChanging(value As String)
    End Sub
    Partial Private Sub OnWidgetNameChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnUniqueTitleChanging(value As String)
    End Sub
    Partial Private Sub OnUniqueTitleChanged()
    End Sub
    Partial Private Sub OnDescriptionTextChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionTextChanged()
    End Sub
    Partial Private Sub OnEnabledChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnEnabledChanged()
    End Sub
    Partial Private Sub OnIconChanging(value As String)
    End Sub
    Partial Private Sub OnIconChanged()
    End Sub
    Partial Private Sub OnOrderChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnOrderChanged()
    End Sub
    Partial Private Sub OnPageURLChanging(value As String)
    End Sub
    Partial Private Sub OnPageURLChanged()
    End Sub
    Partial Private Sub OnColorChanging(value As String)
    End Sub
    Partial Private Sub OnColorChanged()
    End Sub
    Partial Private Sub OnDashboardChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnDashboardChanged()
    End Sub
    Partial Private Sub OnLeftNavChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnLeftNavChanged()
    End Sub
    Partial Private Sub OnRightNavChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnRightNavChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WidgetID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property WidgetID() As Integer
		Get
			Return Me._WidgetID
		End Get
		Set
			If ((Me._WidgetID = value)  _
						= false) Then
				Me.OnWidgetIDChanging(value)
				Me.SendPropertyChanging
				Me._WidgetID = value
				Me.SendPropertyChanged("WidgetID")
				Me.OnWidgetIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CourseID", DbType:="NVarChar(50)")>  _
	Public Property CourseID() As String
		Get
			Return Me._CourseID
		End Get
		Set
			If (String.Equals(Me._CourseID, value) = false) Then
				Me.OnCourseIDChanging(value)
				Me.SendPropertyChanging
				Me._CourseID = value
				Me.SendPropertyChanged("CourseID")
				Me.OnCourseIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WidgetName", DbType:="NVarChar(50)")>  _
	Public Property WidgetName() As String
		Get
			Return Me._WidgetName
		End Get
		Set
			If (String.Equals(Me._WidgetName, value) = false) Then
				Me.OnWidgetNameChanging(value)
				Me.SendPropertyChanging
				Me._WidgetName = value
				Me.SendPropertyChanged("WidgetName")
				Me.OnWidgetNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(50)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UniqueTitle", DbType:="NVarChar(50)")>  _
	Public Property UniqueTitle() As String
		Get
			Return Me._UniqueTitle
		End Get
		Set
			If (String.Equals(Me._UniqueTitle, value) = false) Then
				Me.OnUniqueTitleChanging(value)
				Me.SendPropertyChanging
				Me._UniqueTitle = value
				Me.SendPropertyChanged("UniqueTitle")
				Me.OnUniqueTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DescriptionText", DbType:="NVarChar(MAX)")>  _
	Public Property DescriptionText() As String
		Get
			Return Me._DescriptionText
		End Get
		Set
			If (String.Equals(Me._DescriptionText, value) = false) Then
				Me.OnDescriptionTextChanging(value)
				Me.SendPropertyChanging
				Me._DescriptionText = value
				Me.SendPropertyChanged("DescriptionText")
				Me.OnDescriptionTextChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Enabled", DbType:="Bit")>  _
	Public Property Enabled() As System.Nullable(Of Boolean)
		Get
			Return Me._Enabled
		End Get
		Set
			If (Me._Enabled.Equals(value) = false) Then
				Me.OnEnabledChanging(value)
				Me.SendPropertyChanging
				Me._Enabled = value
				Me.SendPropertyChanged("Enabled")
				Me.OnEnabledChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Icon", DbType:="NVarChar(50)")>  _
	Public Property Icon() As String
		Get
			Return Me._Icon
		End Get
		Set
			If (String.Equals(Me._Icon, value) = false) Then
				Me.OnIconChanging(value)
				Me.SendPropertyChanging
				Me._Icon = value
				Me.SendPropertyChanged("Icon")
				Me.OnIconChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Order", DbType:="Int")>  _
	Public Property [Order]() As System.Nullable(Of Integer)
		Get
			Return Me._Order
		End Get
		Set
			If (Me._Order.Equals(value) = false) Then
				Me.OnOrderChanging(value)
				Me.SendPropertyChanging
				Me._Order = value
				Me.SendPropertyChanged("[Order]")
				Me.OnOrderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PageURL", DbType:="NVarChar(255)")>  _
	Public Property PageURL() As String
		Get
			Return Me._PageURL
		End Get
		Set
			If (String.Equals(Me._PageURL, value) = false) Then
				Me.OnPageURLChanging(value)
				Me.SendPropertyChanging
				Me._PageURL = value
				Me.SendPropertyChanged("PageURL")
				Me.OnPageURLChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Color", DbType:="NVarChar(50)")>  _
	Public Property Color() As String
		Get
			Return Me._Color
		End Get
		Set
			If (String.Equals(Me._Color, value) = false) Then
				Me.OnColorChanging(value)
				Me.SendPropertyChanging
				Me._Color = value
				Me.SendPropertyChanged("Color")
				Me.OnColorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dashboard", DbType:="Bit")>  _
	Public Property Dashboard() As System.Nullable(Of Boolean)
		Get
			Return Me._Dashboard
		End Get
		Set
			If (Me._Dashboard.Equals(value) = false) Then
				Me.OnDashboardChanging(value)
				Me.SendPropertyChanging
				Me._Dashboard = value
				Me.SendPropertyChanged("Dashboard")
				Me.OnDashboardChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LeftNav", DbType:="Bit")>  _
	Public Property LeftNav() As System.Nullable(Of Boolean)
		Get
			Return Me._LeftNav
		End Get
		Set
			If (Me._LeftNav.Equals(value) = false) Then
				Me.OnLeftNavChanging(value)
				Me.SendPropertyChanging
				Me._LeftNav = value
				Me.SendPropertyChanged("LeftNav")
				Me.OnLeftNavChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RightNav", DbType:="Bit")>  _
	Public Property RightNav() As System.Nullable(Of Boolean)
		Get
			Return Me._RightNav
		End Get
		Set
			If (Me._RightNav.Equals(value) = false) Then
				Me.OnRightNavChanging(value)
				Me.SendPropertyChanging
				Me._RightNav = value
				Me.SendPropertyChanged("RightNav")
				Me.OnRightNavChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CourseAnnouncements")>  _
Partial Public Class CourseAnnouncement
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _AnnouncementID As String
	
	Private _CourseID As String
	
	Private _Title As String
	
	Private _Description As String
	
	Private _StartDate As System.Nullable(Of Date)
	
	Private _EndDate As String
	
	Private _NeverExpire As System.Nullable(Of Boolean)
	
	Private _CreatedBy As String
	
	Private _CreatedDate As System.Nullable(Of Date)
	
	Private _ModifiedBy As String
	
	Private _ModifiedDate As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnAnnouncementIDChanging(value As String)
    End Sub
    Partial Private Sub OnAnnouncementIDChanged()
    End Sub
    Partial Private Sub OnCourseIDChanging(value As String)
    End Sub
    Partial Private Sub OnCourseIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnStartDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnStartDateChanged()
    End Sub
    Partial Private Sub OnEndDateChanging(value As String)
    End Sub
    Partial Private Sub OnEndDateChanged()
    End Sub
    Partial Private Sub OnNeverExpireChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnNeverExpireChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As String)
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnCreatedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCreatedDateChanged()
    End Sub
    Partial Private Sub OnModifiedByChanging(value As String)
    End Sub
    Partial Private Sub OnModifiedByChanged()
    End Sub
    Partial Private Sub OnModifiedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnModifiedDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AnnouncementID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property AnnouncementID() As String
		Get
			Return Me._AnnouncementID
		End Get
		Set
			If (String.Equals(Me._AnnouncementID, value) = false) Then
				Me.OnAnnouncementIDChanging(value)
				Me.SendPropertyChanging
				Me._AnnouncementID = value
				Me.SendPropertyChanged("AnnouncementID")
				Me.OnAnnouncementIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CourseID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CourseID() As String
		Get
			Return Me._CourseID
		End Get
		Set
			If (String.Equals(Me._CourseID, value) = false) Then
				Me.OnCourseIDChanging(value)
				Me.SendPropertyChanging
				Me._CourseID = value
				Me.SendPropertyChanged("CourseID")
				Me.OnCourseIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(50)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartDate", DbType:="SmallDateTime")>  _
	Public Property StartDate() As System.Nullable(Of Date)
		Get
			Return Me._StartDate
		End Get
		Set
			If (Me._StartDate.Equals(value) = false) Then
				Me.OnStartDateChanging(value)
				Me.SendPropertyChanging
				Me._StartDate = value
				Me.SendPropertyChanged("StartDate")
				Me.OnStartDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndDate", DbType:="NVarChar(50)")>  _
	Public Property EndDate() As String
		Get
			Return Me._EndDate
		End Get
		Set
			If (String.Equals(Me._EndDate, value) = false) Then
				Me.OnEndDateChanging(value)
				Me.SendPropertyChanging
				Me._EndDate = value
				Me.SendPropertyChanged("EndDate")
				Me.OnEndDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NeverExpire", DbType:="Bit")>  _
	Public Property NeverExpire() As System.Nullable(Of Boolean)
		Get
			Return Me._NeverExpire
		End Get
		Set
			If (Me._NeverExpire.Equals(value) = false) Then
				Me.OnNeverExpireChanging(value)
				Me.SendPropertyChanging
				Me._NeverExpire = value
				Me.SendPropertyChanged("NeverExpire")
				Me.OnNeverExpireChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="NVarChar(50)")>  _
	Public Property CreatedBy() As String
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (String.Equals(Me._CreatedBy, value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedDate", DbType:="SmallDateTime")>  _
	Public Property CreatedDate() As System.Nullable(Of Date)
		Get
			Return Me._CreatedDate
		End Get
		Set
			If (Me._CreatedDate.Equals(value) = false) Then
				Me.OnCreatedDateChanging(value)
				Me.SendPropertyChanging
				Me._CreatedDate = value
				Me.SendPropertyChanged("CreatedDate")
				Me.OnCreatedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedBy", DbType:="NVarChar(50)")>  _
	Public Property ModifiedBy() As String
		Get
			Return Me._ModifiedBy
		End Get
		Set
			If (String.Equals(Me._ModifiedBy, value) = false) Then
				Me.OnModifiedByChanging(value)
				Me.SendPropertyChanging
				Me._ModifiedBy = value
				Me.SendPropertyChanged("ModifiedBy")
				Me.OnModifiedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDate", DbType:="SmallDateTime")>  _
	Public Property ModifiedDate() As System.Nullable(Of Date)
		Get
			Return Me._ModifiedDate
		End Get
		Set
			If (Me._ModifiedDate.Equals(value) = false) Then
				Me.OnModifiedDateChanging(value)
				Me.SendPropertyChanging
				Me._ModifiedDate = value
				Me.SendPropertyChanged("ModifiedDate")
				Me.OnModifiedDateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CourseAssignment")>  _
Partial Public Class CourseAssignment
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _AssignmentID As String
	
	Private _CourseID As String
	
	Private _StudentID As String
	
	Private _RelatedItemID As String
	
	Private _Title As String
	
	Private _Description As String
	
	Private _StartDate As System.Nullable(Of Date)
	
	Private _DateDue As System.Nullable(Of Date)
	
	Private _Link As String
	
	Private _AssignedBy As String
	
	Private _AssignmentType As System.Nullable(Of Integer)
	
	Private _AdminNotes As String
	
	Private _SiteID As String
	
	Private _AvailablePoints As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnAssignmentIDChanging(value As String)
    End Sub
    Partial Private Sub OnAssignmentIDChanged()
    End Sub
    Partial Private Sub OnCourseIDChanging(value As String)
    End Sub
    Partial Private Sub OnCourseIDChanged()
    End Sub
    Partial Private Sub OnStudentIDChanging(value As String)
    End Sub
    Partial Private Sub OnStudentIDChanged()
    End Sub
    Partial Private Sub OnRelatedItemIDChanging(value As String)
    End Sub
    Partial Private Sub OnRelatedItemIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnStartDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnStartDateChanged()
    End Sub
    Partial Private Sub OnDateDueChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateDueChanged()
    End Sub
    Partial Private Sub OnLinkChanging(value As String)
    End Sub
    Partial Private Sub OnLinkChanged()
    End Sub
    Partial Private Sub OnAssignedByChanging(value As String)
    End Sub
    Partial Private Sub OnAssignedByChanged()
    End Sub
    Partial Private Sub OnAssignmentTypeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAssignmentTypeChanged()
    End Sub
    Partial Private Sub OnAdminNotesChanging(value As String)
    End Sub
    Partial Private Sub OnAdminNotesChanged()
    End Sub
    Partial Private Sub OnSiteIDChanging(value As String)
    End Sub
    Partial Private Sub OnSiteIDChanged()
    End Sub
    Partial Private Sub OnAvailablePointsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAvailablePointsChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AssignmentID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property AssignmentID() As String
		Get
			Return Me._AssignmentID
		End Get
		Set
			If (String.Equals(Me._AssignmentID, value) = false) Then
				Me.OnAssignmentIDChanging(value)
				Me.SendPropertyChanging
				Me._AssignmentID = value
				Me.SendPropertyChanged("AssignmentID")
				Me.OnAssignmentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CourseID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CourseID() As String
		Get
			Return Me._CourseID
		End Get
		Set
			If (String.Equals(Me._CourseID, value) = false) Then
				Me.OnCourseIDChanging(value)
				Me.SendPropertyChanging
				Me._CourseID = value
				Me.SendPropertyChanged("CourseID")
				Me.OnCourseIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StudentID", DbType:="NVarChar(50)")>  _
	Public Property StudentID() As String
		Get
			Return Me._StudentID
		End Get
		Set
			If (String.Equals(Me._StudentID, value) = false) Then
				Me.OnStudentIDChanging(value)
				Me.SendPropertyChanging
				Me._StudentID = value
				Me.SendPropertyChanged("StudentID")
				Me.OnStudentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RelatedItemID", DbType:="NVarChar(50)")>  _
	Public Property RelatedItemID() As String
		Get
			Return Me._RelatedItemID
		End Get
		Set
			If (String.Equals(Me._RelatedItemID, value) = false) Then
				Me.OnRelatedItemIDChanging(value)
				Me.SendPropertyChanging
				Me._RelatedItemID = value
				Me.SendPropertyChanged("RelatedItemID")
				Me.OnRelatedItemIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartDate", DbType:="SmallDateTime")>  _
	Public Property StartDate() As System.Nullable(Of Date)
		Get
			Return Me._StartDate
		End Get
		Set
			If (Me._StartDate.Equals(value) = false) Then
				Me.OnStartDateChanging(value)
				Me.SendPropertyChanging
				Me._StartDate = value
				Me.SendPropertyChanged("StartDate")
				Me.OnStartDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateDue", DbType:="SmallDateTime")>  _
	Public Property DateDue() As System.Nullable(Of Date)
		Get
			Return Me._DateDue
		End Get
		Set
			If (Me._DateDue.Equals(value) = false) Then
				Me.OnDateDueChanging(value)
				Me.SendPropertyChanging
				Me._DateDue = value
				Me.SendPropertyChanged("DateDue")
				Me.OnDateDueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Link", DbType:="NVarChar(255)")>  _
	Public Property Link() As String
		Get
			Return Me._Link
		End Get
		Set
			If (String.Equals(Me._Link, value) = false) Then
				Me.OnLinkChanging(value)
				Me.SendPropertyChanging
				Me._Link = value
				Me.SendPropertyChanged("Link")
				Me.OnLinkChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AssignedBy", DbType:="NVarChar(50)")>  _
	Public Property AssignedBy() As String
		Get
			Return Me._AssignedBy
		End Get
		Set
			If (String.Equals(Me._AssignedBy, value) = false) Then
				Me.OnAssignedByChanging(value)
				Me.SendPropertyChanging
				Me._AssignedBy = value
				Me.SendPropertyChanged("AssignedBy")
				Me.OnAssignedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AssignmentType", DbType:="Int")>  _
	Public Property AssignmentType() As System.Nullable(Of Integer)
		Get
			Return Me._AssignmentType
		End Get
		Set
			If (Me._AssignmentType.Equals(value) = false) Then
				Me.OnAssignmentTypeChanging(value)
				Me.SendPropertyChanging
				Me._AssignmentType = value
				Me.SendPropertyChanged("AssignmentType")
				Me.OnAssignmentTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AdminNotes", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property AdminNotes() As String
		Get
			Return Me._AdminNotes
		End Get
		Set
			If (String.Equals(Me._AdminNotes, value) = false) Then
				Me.OnAdminNotesChanging(value)
				Me.SendPropertyChanging
				Me._AdminNotes = value
				Me.SendPropertyChanged("AdminNotes")
				Me.OnAdminNotesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteID", DbType:="NVarChar(50)")>  _
	Public Property SiteID() As String
		Get
			Return Me._SiteID
		End Get
		Set
			If (String.Equals(Me._SiteID, value) = false) Then
				Me.OnSiteIDChanging(value)
				Me.SendPropertyChanging
				Me._SiteID = value
				Me.SendPropertyChanged("SiteID")
				Me.OnSiteIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AvailablePoints", DbType:="Int")>  _
	Public Property AvailablePoints() As System.Nullable(Of Integer)
		Get
			Return Me._AvailablePoints
		End Get
		Set
			If (Me._AvailablePoints.Equals(value) = false) Then
				Me.OnAvailablePointsChanging(value)
				Me.SendPropertyChanging
				Me._AvailablePoints = value
				Me.SendPropertyChanged("AvailablePoints")
				Me.OnAvailablePointsChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CourseAssignmentResult")>  _
Partial Public Class CourseAssignmentResult
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ResultID As Integer
	
	Private _AssignmentID As String
	
	Private _StudentID As String
	
	Private _CompletionDate As System.Nullable(Of Date)
	
	Private _Score As System.Nullable(Of Integer)
	
	Private _Result As String
	
	Private _Graded As System.Nullable(Of Boolean)
	
	Private _Completed As System.Nullable(Of Boolean)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnResultIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnResultIDChanged()
    End Sub
    Partial Private Sub OnAssignmentIDChanging(value As String)
    End Sub
    Partial Private Sub OnAssignmentIDChanged()
    End Sub
    Partial Private Sub OnStudentIDChanging(value As String)
    End Sub
    Partial Private Sub OnStudentIDChanged()
    End Sub
    Partial Private Sub OnCompletionDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCompletionDateChanged()
    End Sub
    Partial Private Sub OnScoreChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnScoreChanged()
    End Sub
    Partial Private Sub OnResultChanging(value As String)
    End Sub
    Partial Private Sub OnResultChanged()
    End Sub
    Partial Private Sub OnGradedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnGradedChanged()
    End Sub
    Partial Private Sub OnCompletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnCompletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ResultID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ResultID() As Integer
		Get
			Return Me._ResultID
		End Get
		Set
			If ((Me._ResultID = value)  _
						= false) Then
				Me.OnResultIDChanging(value)
				Me.SendPropertyChanging
				Me._ResultID = value
				Me.SendPropertyChanged("ResultID")
				Me.OnResultIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AssignmentID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property AssignmentID() As String
		Get
			Return Me._AssignmentID
		End Get
		Set
			If (String.Equals(Me._AssignmentID, value) = false) Then
				Me.OnAssignmentIDChanging(value)
				Me.SendPropertyChanging
				Me._AssignmentID = value
				Me.SendPropertyChanged("AssignmentID")
				Me.OnAssignmentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StudentID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property StudentID() As String
		Get
			Return Me._StudentID
		End Get
		Set
			If (String.Equals(Me._StudentID, value) = false) Then
				Me.OnStudentIDChanging(value)
				Me.SendPropertyChanging
				Me._StudentID = value
				Me.SendPropertyChanged("StudentID")
				Me.OnStudentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompletionDate", DbType:="SmallDateTime")>  _
	Public Property CompletionDate() As System.Nullable(Of Date)
		Get
			Return Me._CompletionDate
		End Get
		Set
			If (Me._CompletionDate.Equals(value) = false) Then
				Me.OnCompletionDateChanging(value)
				Me.SendPropertyChanging
				Me._CompletionDate = value
				Me.SendPropertyChanged("CompletionDate")
				Me.OnCompletionDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Score", DbType:="Int")>  _
	Public Property Score() As System.Nullable(Of Integer)
		Get
			Return Me._Score
		End Get
		Set
			If (Me._Score.Equals(value) = false) Then
				Me.OnScoreChanging(value)
				Me.SendPropertyChanging
				Me._Score = value
				Me.SendPropertyChanged("Score")
				Me.OnScoreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Result", DbType:="NVarChar(50)")>  _
	Public Property Result() As String
		Get
			Return Me._Result
		End Get
		Set
			If (String.Equals(Me._Result, value) = false) Then
				Me.OnResultChanging(value)
				Me.SendPropertyChanging
				Me._Result = value
				Me.SendPropertyChanged("Result")
				Me.OnResultChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Graded", DbType:="Bit")>  _
	Public Property Graded() As System.Nullable(Of Boolean)
		Get
			Return Me._Graded
		End Get
		Set
			If (Me._Graded.Equals(value) = false) Then
				Me.OnGradedChanging(value)
				Me.SendPropertyChanging
				Me._Graded = value
				Me.SendPropertyChanged("Graded")
				Me.OnGradedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Completed", DbType:="Bit")>  _
	Public Property Completed() As System.Nullable(Of Boolean)
		Get
			Return Me._Completed
		End Get
		Set
			If (Me._Completed.Equals(value) = false) Then
				Me.OnCompletedChanging(value)
				Me.SendPropertyChanging
				Me._Completed = value
				Me.SendPropertyChanged("Completed")
				Me.OnCompletedChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DashboardTabs")>  _
Partial Public Class DashboardTab
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _SiteID As String
	
	Private _TabID As System.Nullable(Of Integer)
	
	Private _Title As String
	
	Private _Widget As String
	
	Private _Icon As String
	
	Private _ToolBarTitle As String
	
	Private _PageDescriptionText As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnSiteIDChanging(value As String)
    End Sub
    Partial Private Sub OnSiteIDChanged()
    End Sub
    Partial Private Sub OnTabIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTabIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnWidgetChanging(value As String)
    End Sub
    Partial Private Sub OnWidgetChanged()
    End Sub
    Partial Private Sub OnIconChanging(value As String)
    End Sub
    Partial Private Sub OnIconChanged()
    End Sub
    Partial Private Sub OnToolBarTitleChanging(value As String)
    End Sub
    Partial Private Sub OnToolBarTitleChanged()
    End Sub
    Partial Private Sub OnPageDescriptionTextChanging(value As String)
    End Sub
    Partial Private Sub OnPageDescriptionTextChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteID", DbType:="NVarChar(50)")>  _
	Public Property SiteID() As String
		Get
			Return Me._SiteID
		End Get
		Set
			If (String.Equals(Me._SiteID, value) = false) Then
				Me.OnSiteIDChanging(value)
				Me.SendPropertyChanging
				Me._SiteID = value
				Me.SendPropertyChanged("SiteID")
				Me.OnSiteIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TabID", DbType:="Int")>  _
	Public Property TabID() As System.Nullable(Of Integer)
		Get
			Return Me._TabID
		End Get
		Set
			If (Me._TabID.Equals(value) = false) Then
				Me.OnTabIDChanging(value)
				Me.SendPropertyChanging
				Me._TabID = value
				Me.SendPropertyChanged("TabID")
				Me.OnTabIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(50)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Widget", DbType:="NVarChar(50)")>  _
	Public Property Widget() As String
		Get
			Return Me._Widget
		End Get
		Set
			If (String.Equals(Me._Widget, value) = false) Then
				Me.OnWidgetChanging(value)
				Me.SendPropertyChanging
				Me._Widget = value
				Me.SendPropertyChanged("Widget")
				Me.OnWidgetChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Icon", DbType:="NVarChar(50)")>  _
	Public Property Icon() As String
		Get
			Return Me._Icon
		End Get
		Set
			If (String.Equals(Me._Icon, value) = false) Then
				Me.OnIconChanging(value)
				Me.SendPropertyChanging
				Me._Icon = value
				Me.SendPropertyChanged("Icon")
				Me.OnIconChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ToolBarTitle", DbType:="NVarChar(50)")>  _
	Public Property ToolBarTitle() As String
		Get
			Return Me._ToolBarTitle
		End Get
		Set
			If (String.Equals(Me._ToolBarTitle, value) = false) Then
				Me.OnToolBarTitleChanging(value)
				Me.SendPropertyChanging
				Me._ToolBarTitle = value
				Me.SendPropertyChanged("ToolBarTitle")
				Me.OnToolBarTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PageDescriptionText", DbType:="NVarChar(MAX)")>  _
	Public Property PageDescriptionText() As String
		Get
			Return Me._PageDescriptionText
		End Get
		Set
			If (String.Equals(Me._PageDescriptionText, value) = false) Then
				Me.OnPageDescriptionTextChanging(value)
				Me.SendPropertyChanging
				Me._PageDescriptionText = value
				Me.SendPropertyChanged("PageDescriptionText")
				Me.OnPageDescriptionTextChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DuscussionBoard")>  _
Partial Public Class DuscussionBoard
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _BoardID As String
	
	Private _CourseID As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnBoardIDChanging(value As String)
    End Sub
    Partial Private Sub OnBoardIDChanged()
    End Sub
    Partial Private Sub OnCourseIDChanging(value As String)
    End Sub
    Partial Private Sub OnCourseIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BoardID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property BoardID() As String
		Get
			Return Me._BoardID
		End Get
		Set
			If (String.Equals(Me._BoardID, value) = false) Then
				Me.OnBoardIDChanging(value)
				Me.SendPropertyChanging
				Me._BoardID = value
				Me.SendPropertyChanged("BoardID")
				Me.OnBoardIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CourseID", DbType:="NVarChar(50)")>  _
	Public Property CourseID() As String
		Get
			Return Me._CourseID
		End Get
		Set
			If (String.Equals(Me._CourseID, value) = false) Then
				Me.OnCourseIDChanging(value)
				Me.SendPropertyChanging
				Me._CourseID = value
				Me.SendPropertyChanged("CourseID")
				Me.OnCourseIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DiscussionBoard")>  _
Partial Public Class DiscussionBoard
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _BoardID As String
	
	Private _CourseID As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnBoardIDChanging(value As String)
    End Sub
    Partial Private Sub OnBoardIDChanged()
    End Sub
    Partial Private Sub OnCourseIDChanging(value As String)
    End Sub
    Partial Private Sub OnCourseIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BoardID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property BoardID() As String
		Get
			Return Me._BoardID
		End Get
		Set
			If (String.Equals(Me._BoardID, value) = false) Then
				Me.OnBoardIDChanging(value)
				Me.SendPropertyChanging
				Me._BoardID = value
				Me.SendPropertyChanged("BoardID")
				Me.OnBoardIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CourseID", DbType:="NVarChar(50)")>  _
	Public Property CourseID() As String
		Get
			Return Me._CourseID
		End Get
		Set
			If (String.Equals(Me._CourseID, value) = false) Then
				Me.OnCourseIDChanging(value)
				Me.SendPropertyChanging
				Me._CourseID = value
				Me.SendPropertyChanged("CourseID")
				Me.OnCourseIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DiscussionThread")>  _
Partial Public Class DiscussionThread
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ThreadID As String
	
	Private _TopicID As String
	
	Private _ParentID As String
	
	Private _CreatedBy As String
	
	Private _CreatedDate As System.Nullable(Of Date)
	
	Private _BodyText As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnThreadIDChanging(value As String)
    End Sub
    Partial Private Sub OnThreadIDChanged()
    End Sub
    Partial Private Sub OnTopicIDChanging(value As String)
    End Sub
    Partial Private Sub OnTopicIDChanged()
    End Sub
    Partial Private Sub OnParentIDChanging(value As String)
    End Sub
    Partial Private Sub OnParentIDChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As String)
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnCreatedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCreatedDateChanged()
    End Sub
    Partial Private Sub OnBodyTextChanging(value As String)
    End Sub
    Partial Private Sub OnBodyTextChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ThreadID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property ThreadID() As String
		Get
			Return Me._ThreadID
		End Get
		Set
			If (String.Equals(Me._ThreadID, value) = false) Then
				Me.OnThreadIDChanging(value)
				Me.SendPropertyChanging
				Me._ThreadID = value
				Me.SendPropertyChanged("ThreadID")
				Me.OnThreadIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TopicID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property TopicID() As String
		Get
			Return Me._TopicID
		End Get
		Set
			If (String.Equals(Me._TopicID, value) = false) Then
				Me.OnTopicIDChanging(value)
				Me.SendPropertyChanging
				Me._TopicID = value
				Me.SendPropertyChanged("TopicID")
				Me.OnTopicIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ParentID", DbType:="NVarChar(50)")>  _
	Public Property ParentID() As String
		Get
			Return Me._ParentID
		End Get
		Set
			If (String.Equals(Me._ParentID, value) = false) Then
				Me.OnParentIDChanging(value)
				Me.SendPropertyChanging
				Me._ParentID = value
				Me.SendPropertyChanged("ParentID")
				Me.OnParentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CreatedBy() As String
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (String.Equals(Me._CreatedBy, value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedDate", DbType:="SmallDateTime")>  _
	Public Property CreatedDate() As System.Nullable(Of Date)
		Get
			Return Me._CreatedDate
		End Get
		Set
			If (Me._CreatedDate.Equals(value) = false) Then
				Me.OnCreatedDateChanging(value)
				Me.SendPropertyChanging
				Me._CreatedDate = value
				Me.SendPropertyChanged("CreatedDate")
				Me.OnCreatedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BodyText", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property BodyText() As String
		Get
			Return Me._BodyText
		End Get
		Set
			If (String.Equals(Me._BodyText, value) = false) Then
				Me.OnBodyTextChanging(value)
				Me.SendPropertyChanging
				Me._BodyText = value
				Me.SendPropertyChanged("BodyText")
				Me.OnBodyTextChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DiscussionTopic")>  _
Partial Public Class DiscussionTopic
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _TopicID As String
	
	Private _BoardID As String
	
	Private _Title As String
	
	Private _BodyText As String
	
	Private _CreatedBy As String
	
	Private _CreatedDate As System.Nullable(Of Date)
	
	Private _Active As System.Nullable(Of Boolean)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTopicIDChanging(value As String)
    End Sub
    Partial Private Sub OnTopicIDChanged()
    End Sub
    Partial Private Sub OnBoardIDChanging(value As String)
    End Sub
    Partial Private Sub OnBoardIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnBodyTextChanging(value As String)
    End Sub
    Partial Private Sub OnBodyTextChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As String)
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnCreatedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCreatedDateChanged()
    End Sub
    Partial Private Sub OnActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnActiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TopicID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property TopicID() As String
		Get
			Return Me._TopicID
		End Get
		Set
			If (String.Equals(Me._TopicID, value) = false) Then
				Me.OnTopicIDChanging(value)
				Me.SendPropertyChanging
				Me._TopicID = value
				Me.SendPropertyChanged("TopicID")
				Me.OnTopicIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BoardID", DbType:="NVarChar(50)")>  _
	Public Property BoardID() As String
		Get
			Return Me._BoardID
		End Get
		Set
			If (String.Equals(Me._BoardID, value) = false) Then
				Me.OnBoardIDChanging(value)
				Me.SendPropertyChanging
				Me._BoardID = value
				Me.SendPropertyChanged("BoardID")
				Me.OnBoardIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(100)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BodyText", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property BodyText() As String
		Get
			Return Me._BodyText
		End Get
		Set
			If (String.Equals(Me._BodyText, value) = false) Then
				Me.OnBodyTextChanging(value)
				Me.SendPropertyChanging
				Me._BodyText = value
				Me.SendPropertyChanged("BodyText")
				Me.OnBodyTextChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="NVarChar(50)")>  _
	Public Property CreatedBy() As String
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (String.Equals(Me._CreatedBy, value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedDate", DbType:="SmallDateTime")>  _
	Public Property CreatedDate() As System.Nullable(Of Date)
		Get
			Return Me._CreatedDate
		End Get
		Set
			If (Me._CreatedDate.Equals(value) = false) Then
				Me.OnCreatedDateChanging(value)
				Me.SendPropertyChanging
				Me._CreatedDate = value
				Me.SendPropertyChanged("CreatedDate")
				Me.OnCreatedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Active", DbType:="Bit")>  _
	Public Property Active() As System.Nullable(Of Boolean)
		Get
			Return Me._Active
		End Get
		Set
			If (Me._Active.Equals(value) = false) Then
				Me.OnActiveChanging(value)
				Me.SendPropertyChanging
				Me._Active = value
				Me.SendPropertyChanged("Active")
				Me.OnActiveChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TotalLessonCount_byCourseID")>  _
Partial Public Class TotalLessonCount_byCourseID
	
	Private _CourseID As String
	
	Private _TotalLessons As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CourseID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CourseID() As String
		Get
			Return Me._CourseID
		End Get
		Set
			If (String.Equals(Me._CourseID, value) = false) Then
				Me._CourseID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalLessons", DbType:="Int")>  _
	Public Property TotalLessons() As System.Nullable(Of Integer)
		Get
			Return Me._TotalLessons
		End Get
		Set
			If (Me._TotalLessons.Equals(value) = false) Then
				Me._TotalLessons = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CourseFiles_Count")>  _
Partial Public Class CourseFiles_Count
	
	Private _CourseID As String
	
	Private _TotalFiles As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CourseID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CourseID() As String
		Get
			Return Me._CourseID
		End Get
		Set
			If (String.Equals(Me._CourseID, value) = false) Then
				Me._CourseID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalFiles", DbType:="Int")>  _
	Public Property TotalFiles() As System.Nullable(Of Integer)
		Get
			Return Me._TotalFiles
		End Get
		Set
			If (Me._TotalFiles.Equals(value) = false) Then
				Me._TotalFiles = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TestCount_byCourseID")>  _
Partial Public Class TestCount_byCourseID
	
	Private _CourseID As String
	
	Private _TotalTests As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CourseID", DbType:="NVarChar(50)")>  _
	Public Property CourseID() As String
		Get
			Return Me._CourseID
		End Get
		Set
			If (String.Equals(Me._CourseID, value) = false) Then
				Me._CourseID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalTests", DbType:="Int")>  _
	Public Property TotalTests() As System.Nullable(Of Integer)
		Get
			Return Me._TotalTests
		End Get
		Set
			If (Me._TotalTests.Equals(value) = false) Then
				Me._TotalTests = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ActivityLog")>  _
Partial Public Class ActivityLog
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _Activity As String
	
	Private _ActivityID As System.Nullable(Of Integer)
	
	Private _LogTime As System.Nullable(Of Date)
	
	Private _UserName As String
	
	Private _SiteID As String
	
	Private _IPAddress As String
	
	Private _Details As String
	
	Private _SessionID As String
	
	Private _RelatedItemID As String
	
	Private _RelatedItemType As System.Nullable(Of Integer)
	
	Private _CourseID As String
	
	Private _AssignmentID As String
	
	Private _TestID As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnActivityChanging(value As String)
    End Sub
    Partial Private Sub OnActivityChanged()
    End Sub
    Partial Private Sub OnActivityIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnActivityIDChanged()
    End Sub
    Partial Private Sub OnLogTimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLogTimeChanged()
    End Sub
    Partial Private Sub OnUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnUserNameChanged()
    End Sub
    Partial Private Sub OnSiteIDChanging(value As String)
    End Sub
    Partial Private Sub OnSiteIDChanged()
    End Sub
    Partial Private Sub OnIPAddressChanging(value As String)
    End Sub
    Partial Private Sub OnIPAddressChanged()
    End Sub
    Partial Private Sub OnDetailsChanging(value As String)
    End Sub
    Partial Private Sub OnDetailsChanged()
    End Sub
    Partial Private Sub OnSessionIDChanging(value As String)
    End Sub
    Partial Private Sub OnSessionIDChanged()
    End Sub
    Partial Private Sub OnRelatedItemIDChanging(value As String)
    End Sub
    Partial Private Sub OnRelatedItemIDChanged()
    End Sub
    Partial Private Sub OnRelatedItemTypeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRelatedItemTypeChanged()
    End Sub
    Partial Private Sub OnCourseIDChanging(value As String)
    End Sub
    Partial Private Sub OnCourseIDChanged()
    End Sub
    Partial Private Sub OnAssignmentIDChanging(value As String)
    End Sub
    Partial Private Sub OnAssignmentIDChanged()
    End Sub
    Partial Private Sub OnTestIDChanging(value As String)
    End Sub
    Partial Private Sub OnTestIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activity", DbType:="NVarChar(50)")>  _
	Public Property Activity() As String
		Get
			Return Me._Activity
		End Get
		Set
			If (String.Equals(Me._Activity, value) = false) Then
				Me.OnActivityChanging(value)
				Me.SendPropertyChanging
				Me._Activity = value
				Me.SendPropertyChanged("Activity")
				Me.OnActivityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ActivityID", DbType:="Int")>  _
	Public Property ActivityID() As System.Nullable(Of Integer)
		Get
			Return Me._ActivityID
		End Get
		Set
			If (Me._ActivityID.Equals(value) = false) Then
				Me.OnActivityIDChanging(value)
				Me.SendPropertyChanging
				Me._ActivityID = value
				Me.SendPropertyChanged("ActivityID")
				Me.OnActivityIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LogTime", DbType:="DateTime")>  _
	Public Property LogTime() As System.Nullable(Of Date)
		Get
			Return Me._LogTime
		End Get
		Set
			If (Me._LogTime.Equals(value) = false) Then
				Me.OnLogTimeChanging(value)
				Me.SendPropertyChanging
				Me._LogTime = value
				Me.SendPropertyChanged("LogTime")
				Me.OnLogTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="NVarChar(50)")>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me.OnUserNameChanging(value)
				Me.SendPropertyChanging
				Me._UserName = value
				Me.SendPropertyChanged("UserName")
				Me.OnUserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteID", DbType:="NVarChar(50)")>  _
	Public Property SiteID() As String
		Get
			Return Me._SiteID
		End Get
		Set
			If (String.Equals(Me._SiteID, value) = false) Then
				Me.OnSiteIDChanging(value)
				Me.SendPropertyChanging
				Me._SiteID = value
				Me.SendPropertyChanged("SiteID")
				Me.OnSiteIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IPAddress", DbType:="NVarChar(50)")>  _
	Public Property IPAddress() As String
		Get
			Return Me._IPAddress
		End Get
		Set
			If (String.Equals(Me._IPAddress, value) = false) Then
				Me.OnIPAddressChanging(value)
				Me.SendPropertyChanging
				Me._IPAddress = value
				Me.SendPropertyChanged("IPAddress")
				Me.OnIPAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Details", DbType:="NVarChar(1000)")>  _
	Public Property Details() As String
		Get
			Return Me._Details
		End Get
		Set
			If (String.Equals(Me._Details, value) = false) Then
				Me.OnDetailsChanging(value)
				Me.SendPropertyChanging
				Me._Details = value
				Me.SendPropertyChanged("Details")
				Me.OnDetailsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SessionID", DbType:="NVarChar(50)")>  _
	Public Property SessionID() As String
		Get
			Return Me._SessionID
		End Get
		Set
			If (String.Equals(Me._SessionID, value) = false) Then
				Me.OnSessionIDChanging(value)
				Me.SendPropertyChanging
				Me._SessionID = value
				Me.SendPropertyChanged("SessionID")
				Me.OnSessionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RelatedItemID", DbType:="NVarChar(50)")>  _
	Public Property RelatedItemID() As String
		Get
			Return Me._RelatedItemID
		End Get
		Set
			If (String.Equals(Me._RelatedItemID, value) = false) Then
				Me.OnRelatedItemIDChanging(value)
				Me.SendPropertyChanging
				Me._RelatedItemID = value
				Me.SendPropertyChanged("RelatedItemID")
				Me.OnRelatedItemIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RelatedItemType", DbType:="Int")>  _
	Public Property RelatedItemType() As System.Nullable(Of Integer)
		Get
			Return Me._RelatedItemType
		End Get
		Set
			If (Me._RelatedItemType.Equals(value) = false) Then
				Me.OnRelatedItemTypeChanging(value)
				Me.SendPropertyChanging
				Me._RelatedItemType = value
				Me.SendPropertyChanged("RelatedItemType")
				Me.OnRelatedItemTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CourseID", DbType:="NVarChar(50)")>  _
	Public Property CourseID() As String
		Get
			Return Me._CourseID
		End Get
		Set
			If (String.Equals(Me._CourseID, value) = false) Then
				Me.OnCourseIDChanging(value)
				Me.SendPropertyChanging
				Me._CourseID = value
				Me.SendPropertyChanged("CourseID")
				Me.OnCourseIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AssignmentID", DbType:="NVarChar(50)")>  _
	Public Property AssignmentID() As String
		Get
			Return Me._AssignmentID
		End Get
		Set
			If (String.Equals(Me._AssignmentID, value) = false) Then
				Me.OnAssignmentIDChanging(value)
				Me.SendPropertyChanging
				Me._AssignmentID = value
				Me.SendPropertyChanged("AssignmentID")
				Me.OnAssignmentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TestID", DbType:="NVarChar(50)")>  _
	Public Property TestID() As String
		Get
			Return Me._TestID
		End Get
		Set
			If (String.Equals(Me._TestID, value) = false) Then
				Me.OnTestIDChanging(value)
				Me.SendPropertyChanging
				Me._TestID = value
				Me.SendPropertyChanged("TestID")
				Me.OnTestIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CurruculumAssessment")>  _
Partial Public Class CurruculumAssessment
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _AssessmentID As Integer
	
	Private _CurruculumListID As String
	
	Private _StudentID As String
	
	Private _Assessment As System.Nullable(Of Integer)
	
	Private _DateStamp As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnAssessmentIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnAssessmentIDChanged()
    End Sub
    Partial Private Sub OnCurruculumListIDChanging(value As String)
    End Sub
    Partial Private Sub OnCurruculumListIDChanged()
    End Sub
    Partial Private Sub OnStudentIDChanging(value As String)
    End Sub
    Partial Private Sub OnStudentIDChanged()
    End Sub
    Partial Private Sub OnAssessmentChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAssessmentChanged()
    End Sub
    Partial Private Sub OnDateStampChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateStampChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AssessmentID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property AssessmentID() As Integer
		Get
			Return Me._AssessmentID
		End Get
		Set
			If ((Me._AssessmentID = value)  _
						= false) Then
				Me.OnAssessmentIDChanging(value)
				Me.SendPropertyChanging
				Me._AssessmentID = value
				Me.SendPropertyChanged("AssessmentID")
				Me.OnAssessmentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurruculumListID", DbType:="NVarChar(50)")>  _
	Public Property CurruculumListID() As String
		Get
			Return Me._CurruculumListID
		End Get
		Set
			If (String.Equals(Me._CurruculumListID, value) = false) Then
				Me.OnCurruculumListIDChanging(value)
				Me.SendPropertyChanging
				Me._CurruculumListID = value
				Me.SendPropertyChanged("CurruculumListID")
				Me.OnCurruculumListIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StudentID", DbType:="NVarChar(50)")>  _
	Public Property StudentID() As String
		Get
			Return Me._StudentID
		End Get
		Set
			If (String.Equals(Me._StudentID, value) = false) Then
				Me.OnStudentIDChanging(value)
				Me.SendPropertyChanging
				Me._StudentID = value
				Me.SendPropertyChanged("StudentID")
				Me.OnStudentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Assessment", DbType:="Int")>  _
	Public Property Assessment() As System.Nullable(Of Integer)
		Get
			Return Me._Assessment
		End Get
		Set
			If (Me._Assessment.Equals(value) = false) Then
				Me.OnAssessmentChanging(value)
				Me.SendPropertyChanging
				Me._Assessment = value
				Me.SendPropertyChanged("Assessment")
				Me.OnAssessmentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateStamp", DbType:="SmallDateTime")>  _
	Public Property DateStamp() As System.Nullable(Of Date)
		Get
			Return Me._DateStamp
		End Get
		Set
			If (Me._DateStamp.Equals(value) = false) Then
				Me.OnDateStampChanging(value)
				Me.SendPropertyChanging
				Me._DateStamp = value
				Me.SendPropertyChanged("DateStamp")
				Me.OnDateStampChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CourseFiles")>  _
Partial Public Class CourseFile
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _FileID As String
	
	Private _CourseID As String
	
	Private _RelatedID As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnFileIDChanging(value As String)
    End Sub
    Partial Private Sub OnFileIDChanged()
    End Sub
    Partial Private Sub OnCourseIDChanging(value As String)
    End Sub
    Partial Private Sub OnCourseIDChanged()
    End Sub
    Partial Private Sub OnRelatedIDChanging(value As String)
    End Sub
    Partial Private Sub OnRelatedIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FileID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property FileID() As String
		Get
			Return Me._FileID
		End Get
		Set
			If (String.Equals(Me._FileID, value) = false) Then
				Me.OnFileIDChanging(value)
				Me.SendPropertyChanging
				Me._FileID = value
				Me.SendPropertyChanged("FileID")
				Me.OnFileIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CourseID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CourseID() As String
		Get
			Return Me._CourseID
		End Get
		Set
			If (String.Equals(Me._CourseID, value) = false) Then
				Me.OnCourseIDChanging(value)
				Me.SendPropertyChanging
				Me._CourseID = value
				Me.SendPropertyChanged("CourseID")
				Me.OnCourseIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RelatedID", DbType:="NVarChar(50)")>  _
	Public Property RelatedID() As String
		Get
			Return Me._RelatedID
		End Get
		Set
			If (String.Equals(Me._RelatedID, value) = false) Then
				Me.OnRelatedIDChanging(value)
				Me.SendPropertyChanging
				Me._RelatedID = value
				Me.SendPropertyChanged("RelatedID")
				Me.OnRelatedIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CourseLinks")>  _
Partial Public Class CourseLink
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _LinkID As String
	
	Private _CourseID As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnLinkIDChanging(value As String)
    End Sub
    Partial Private Sub OnLinkIDChanged()
    End Sub
    Partial Private Sub OnCourseIDChanging(value As String)
    End Sub
    Partial Private Sub OnCourseIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LinkID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property LinkID() As String
		Get
			Return Me._LinkID
		End Get
		Set
			If (String.Equals(Me._LinkID, value) = false) Then
				Me.OnLinkIDChanging(value)
				Me.SendPropertyChanging
				Me._LinkID = value
				Me.SendPropertyChanged("LinkID")
				Me.OnLinkIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CourseID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CourseID() As String
		Get
			Return Me._CourseID
		End Get
		Set
			If (String.Equals(Me._CourseID, value) = false) Then
				Me.OnCourseIDChanging(value)
				Me.SendPropertyChanging
				Me._CourseID = value
				Me.SendPropertyChanged("CourseID")
				Me.OnCourseIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Files")>  _
Partial Public Class File
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As String
	
	Private _FileName As String
	
	Private _ContentType As String
	
	Private _Size As Long
	
	Private _Data As System.Data.Linq.Binary
	
	Private _SiteID As String
	
	Private _DateUploaded As System.Nullable(Of Date)
	
	Private _UploadedBy As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As String)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnFileNameChanging(value As String)
    End Sub
    Partial Private Sub OnFileNameChanged()
    End Sub
    Partial Private Sub OnContentTypeChanging(value As String)
    End Sub
    Partial Private Sub OnContentTypeChanged()
    End Sub
    Partial Private Sub OnSizeChanging(value As Long)
    End Sub
    Partial Private Sub OnSizeChanged()
    End Sub
    Partial Private Sub OnDataChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnDataChanged()
    End Sub
    Partial Private Sub OnSiteIDChanging(value As String)
    End Sub
    Partial Private Sub OnSiteIDChanged()
    End Sub
    Partial Private Sub OnDateUploadedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUploadedChanged()
    End Sub
    Partial Private Sub OnUploadedByChanging(value As String)
    End Sub
    Partial Private Sub OnUploadedByChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property ID() As String
		Get
			Return Me._ID
		End Get
		Set
			If (String.Equals(Me._ID, value) = false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FileName", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property FileName() As String
		Get
			Return Me._FileName
		End Get
		Set
			If (String.Equals(Me._FileName, value) = false) Then
				Me.OnFileNameChanging(value)
				Me.SendPropertyChanging
				Me._FileName = value
				Me.SendPropertyChanged("FileName")
				Me.OnFileNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContentType", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property ContentType() As String
		Get
			Return Me._ContentType
		End Get
		Set
			If (String.Equals(Me._ContentType, value) = false) Then
				Me.OnContentTypeChanging(value)
				Me.SendPropertyChanging
				Me._ContentType = value
				Me.SendPropertyChanged("ContentType")
				Me.OnContentTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Size", DbType:="BigInt NOT NULL")>  _
	Public Property Size() As Long
		Get
			Return Me._Size
		End Get
		Set
			If ((Me._Size = value)  _
						= false) Then
				Me.OnSizeChanging(value)
				Me.SendPropertyChanging
				Me._Size = value
				Me.SendPropertyChanged("Size")
				Me.OnSizeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Data", DbType:="VarBinary(MAX) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Data() As System.Data.Linq.Binary
		Get
			Return Me._Data
		End Get
		Set
			If (Object.Equals(Me._Data, value) = false) Then
				Me.OnDataChanging(value)
				Me.SendPropertyChanging
				Me._Data = value
				Me.SendPropertyChanged("Data")
				Me.OnDataChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteID", DbType:="NVarChar(50)")>  _
	Public Property SiteID() As String
		Get
			Return Me._SiteID
		End Get
		Set
			If (String.Equals(Me._SiteID, value) = false) Then
				Me.OnSiteIDChanging(value)
				Me.SendPropertyChanging
				Me._SiteID = value
				Me.SendPropertyChanged("SiteID")
				Me.OnSiteIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUploaded", DbType:="SmallDateTime")>  _
	Public Property DateUploaded() As System.Nullable(Of Date)
		Get
			Return Me._DateUploaded
		End Get
		Set
			If (Me._DateUploaded.Equals(value) = false) Then
				Me.OnDateUploadedChanging(value)
				Me.SendPropertyChanging
				Me._DateUploaded = value
				Me.SendPropertyChanged("DateUploaded")
				Me.OnDateUploadedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UploadedBy", DbType:="NVarChar(50)")>  _
	Public Property UploadedBy() As String
		Get
			Return Me._UploadedBy
		End Get
		Set
			If (String.Equals(Me._UploadedBy, value) = false) Then
				Me.OnUploadedByChanging(value)
				Me.SendPropertyChanging
				Me._UploadedBy = value
				Me.SendPropertyChanged("UploadedBy")
				Me.OnUploadedByChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Links")>  _
Partial Public Class Link
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As String
	
	Private _LinkTitle As String
	
	Private _LinkURL As String
	
	Private _SiteID As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As String)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnLinkTitleChanging(value As String)
    End Sub
    Partial Private Sub OnLinkTitleChanged()
    End Sub
    Partial Private Sub OnLinkURLChanging(value As String)
    End Sub
    Partial Private Sub OnLinkURLChanged()
    End Sub
    Partial Private Sub OnSiteIDChanging(value As String)
    End Sub
    Partial Private Sub OnSiteIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property ID() As String
		Get
			Return Me._ID
		End Get
		Set
			If (String.Equals(Me._ID, value) = false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LinkTitle", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property LinkTitle() As String
		Get
			Return Me._LinkTitle
		End Get
		Set
			If (String.Equals(Me._LinkTitle, value) = false) Then
				Me.OnLinkTitleChanging(value)
				Me.SendPropertyChanging
				Me._LinkTitle = value
				Me.SendPropertyChanged("LinkTitle")
				Me.OnLinkTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LinkURL", DbType:="NVarChar(255)")>  _
	Public Property LinkURL() As String
		Get
			Return Me._LinkURL
		End Get
		Set
			If (String.Equals(Me._LinkURL, value) = false) Then
				Me.OnLinkURLChanging(value)
				Me.SendPropertyChanging
				Me._LinkURL = value
				Me.SendPropertyChanged("LinkURL")
				Me.OnLinkURLChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteID", DbType:="NChar(10)")>  _
	Public Property SiteID() As String
		Get
			Return Me._SiteID
		End Get
		Set
			If (String.Equals(Me._SiteID, value) = false) Then
				Me.OnSiteIDChanging(value)
				Me.SendPropertyChanging
				Me._SiteID = value
				Me.SendPropertyChanged("SiteID")
				Me.OnSiteIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AssignmentFiles")>  _
Partial Public Class AssignmentFile
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _AssignmentFileID As Integer
	
	Private _AssignmentID As String
	
	Private _StudentID As String
	
	Private _Status As System.Nullable(Of Integer)
	
	Private _Version As System.Nullable(Of Integer)
	
	Private _FileID As String
	
	Private _Type As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnAssignmentFileIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnAssignmentFileIDChanged()
    End Sub
    Partial Private Sub OnAssignmentIDChanging(value As String)
    End Sub
    Partial Private Sub OnAssignmentIDChanged()
    End Sub
    Partial Private Sub OnStudentIDChanging(value As String)
    End Sub
    Partial Private Sub OnStudentIDChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnVersionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnVersionChanged()
    End Sub
    Partial Private Sub OnFileIDChanging(value As String)
    End Sub
    Partial Private Sub OnFileIDChanged()
    End Sub
    Partial Private Sub OnTypeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTypeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AssignmentFileID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property AssignmentFileID() As Integer
		Get
			Return Me._AssignmentFileID
		End Get
		Set
			If ((Me._AssignmentFileID = value)  _
						= false) Then
				Me.OnAssignmentFileIDChanging(value)
				Me.SendPropertyChanging
				Me._AssignmentFileID = value
				Me.SendPropertyChanged("AssignmentFileID")
				Me.OnAssignmentFileIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AssignmentID", DbType:="NVarChar(50)")>  _
	Public Property AssignmentID() As String
		Get
			Return Me._AssignmentID
		End Get
		Set
			If (String.Equals(Me._AssignmentID, value) = false) Then
				Me.OnAssignmentIDChanging(value)
				Me.SendPropertyChanging
				Me._AssignmentID = value
				Me.SendPropertyChanged("AssignmentID")
				Me.OnAssignmentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StudentID", DbType:="NVarChar(50)")>  _
	Public Property StudentID() As String
		Get
			Return Me._StudentID
		End Get
		Set
			If (String.Equals(Me._StudentID, value) = false) Then
				Me.OnStudentIDChanging(value)
				Me.SendPropertyChanging
				Me._StudentID = value
				Me.SendPropertyChanged("StudentID")
				Me.OnStudentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="Int")>  _
	Public Property Status() As System.Nullable(Of Integer)
		Get
			Return Me._Status
		End Get
		Set
			If (Me._Status.Equals(value) = false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Version", DbType:="Int")>  _
	Public Property Version() As System.Nullable(Of Integer)
		Get
			Return Me._Version
		End Get
		Set
			If (Me._Version.Equals(value) = false) Then
				Me.OnVersionChanging(value)
				Me.SendPropertyChanging
				Me._Version = value
				Me.SendPropertyChanged("Version")
				Me.OnVersionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FileID", DbType:="NVarChar(50)")>  _
	Public Property FileID() As String
		Get
			Return Me._FileID
		End Get
		Set
			If (String.Equals(Me._FileID, value) = false) Then
				Me.OnFileIDChanging(value)
				Me.SendPropertyChanging
				Me._FileID = value
				Me.SendPropertyChanged("FileID")
				Me.OnFileIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Type", DbType:="Int")>  _
	Public Property Type() As System.Nullable(Of Integer)
		Get
			Return Me._Type
		End Get
		Set
			If (Me._Type.Equals(value) = false) Then
				Me.OnTypeChanging(value)
				Me.SendPropertyChanging
				Me._Type = value
				Me.SendPropertyChanged("Type")
				Me.OnTypeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Test")>  _
Partial Public Class Test
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _QuizID As Integer
	
	Private _TestID As String
	
	Private _Title As String
	
	Private _Local As String
	
	Private _SiteID As String
	
	Private _AgreementPage As String
	
	Private _Enabled As Boolean
	
	Private _PassingGrade As System.Nullable(Of Integer)
	
	Private _ShowResults As Boolean
	
	Private _TimeLimit As System.Nullable(Of Integer)
	
	Private _prerequisite As Integer
	
	Private _CompletedText As String
	
	Private _GroupID As String
	
	Private _InstructorID As String
	
	Private _CourseID As String
	
	Private _FailedText As String
	
	Private _RetakeHours1 As System.Nullable(Of Integer)
	
	Private _RetakeText1 As String
	
	Private _RetakeHours2 As System.Nullable(Of Integer)
	
	Private _RetakeText2 As String
	
	Private _RetakeHours3 As System.Nullable(Of Integer)
	
	Private _RetakeText3 As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnQuizIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnQuizIDChanged()
    End Sub
    Partial Private Sub OnTestIDChanging(value As String)
    End Sub
    Partial Private Sub OnTestIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnLocalChanging(value As String)
    End Sub
    Partial Private Sub OnLocalChanged()
    End Sub
    Partial Private Sub OnSiteIDChanging(value As String)
    End Sub
    Partial Private Sub OnSiteIDChanged()
    End Sub
    Partial Private Sub OnAgreementPageChanging(value As String)
    End Sub
    Partial Private Sub OnAgreementPageChanged()
    End Sub
    Partial Private Sub OnEnabledChanging(value As Boolean)
    End Sub
    Partial Private Sub OnEnabledChanged()
    End Sub
    Partial Private Sub OnPassingGradeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPassingGradeChanged()
    End Sub
    Partial Private Sub OnShowResultsChanging(value As Boolean)
    End Sub
    Partial Private Sub OnShowResultsChanged()
    End Sub
    Partial Private Sub OnTimeLimitChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTimeLimitChanged()
    End Sub
    Partial Private Sub OnprerequisiteChanging(value As Integer)
    End Sub
    Partial Private Sub OnprerequisiteChanged()
    End Sub
    Partial Private Sub OnCompletedTextChanging(value As String)
    End Sub
    Partial Private Sub OnCompletedTextChanged()
    End Sub
    Partial Private Sub OnGroupIDChanging(value As String)
    End Sub
    Partial Private Sub OnGroupIDChanged()
    End Sub
    Partial Private Sub OnInstructorIDChanging(value As String)
    End Sub
    Partial Private Sub OnInstructorIDChanged()
    End Sub
    Partial Private Sub OnCourseIDChanging(value As String)
    End Sub
    Partial Private Sub OnCourseIDChanged()
    End Sub
    Partial Private Sub OnFailedTextChanging(value As String)
    End Sub
    Partial Private Sub OnFailedTextChanged()
    End Sub
    Partial Private Sub OnRetakeHours1Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRetakeHours1Changed()
    End Sub
    Partial Private Sub OnRetakeText1Changing(value As String)
    End Sub
    Partial Private Sub OnRetakeText1Changed()
    End Sub
    Partial Private Sub OnRetakeHours2Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRetakeHours2Changed()
    End Sub
    Partial Private Sub OnRetakeText2Changing(value As String)
    End Sub
    Partial Private Sub OnRetakeText2Changed()
    End Sub
    Partial Private Sub OnRetakeHours3Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRetakeHours3Changed()
    End Sub
    Partial Private Sub OnRetakeText3Changing(value As String)
    End Sub
    Partial Private Sub OnRetakeText3Changed()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QuizID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property QuizID() As Integer
		Get
			Return Me._QuizID
		End Get
		Set
			If ((Me._QuizID = value)  _
						= false) Then
				Me.OnQuizIDChanging(value)
				Me.SendPropertyChanging
				Me._QuizID = value
				Me.SendPropertyChanged("QuizID")
				Me.OnQuizIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TestID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property TestID() As String
		Get
			Return Me._TestID
		End Get
		Set
			If (String.Equals(Me._TestID, value) = false) Then
				Me.OnTestIDChanging(value)
				Me.SendPropertyChanging
				Me._TestID = value
				Me.SendPropertyChanged("TestID")
				Me.OnTestIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="VarChar(50)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Local", DbType:="VarChar(50)")>  _
	Public Property Local() As String
		Get
			Return Me._Local
		End Get
		Set
			If (String.Equals(Me._Local, value) = false) Then
				Me.OnLocalChanging(value)
				Me.SendPropertyChanging
				Me._Local = value
				Me.SendPropertyChanged("Local")
				Me.OnLocalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteID", DbType:="NVarChar(50)")>  _
	Public Property SiteID() As String
		Get
			Return Me._SiteID
		End Get
		Set
			If (String.Equals(Me._SiteID, value) = false) Then
				Me.OnSiteIDChanging(value)
				Me.SendPropertyChanging
				Me._SiteID = value
				Me.SendPropertyChanged("SiteID")
				Me.OnSiteIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AgreementPage", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property AgreementPage() As String
		Get
			Return Me._AgreementPage
		End Get
		Set
			If (String.Equals(Me._AgreementPage, value) = false) Then
				Me.OnAgreementPageChanging(value)
				Me.SendPropertyChanging
				Me._AgreementPage = value
				Me.SendPropertyChanged("AgreementPage")
				Me.OnAgreementPageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Enabled", DbType:="Bit NOT NULL")>  _
	Public Property Enabled() As Boolean
		Get
			Return Me._Enabled
		End Get
		Set
			If ((Me._Enabled = value)  _
						= false) Then
				Me.OnEnabledChanging(value)
				Me.SendPropertyChanging
				Me._Enabled = value
				Me.SendPropertyChanged("Enabled")
				Me.OnEnabledChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PassingGrade", DbType:="Int")>  _
	Public Property PassingGrade() As System.Nullable(Of Integer)
		Get
			Return Me._PassingGrade
		End Get
		Set
			If (Me._PassingGrade.Equals(value) = false) Then
				Me.OnPassingGradeChanging(value)
				Me.SendPropertyChanging
				Me._PassingGrade = value
				Me.SendPropertyChanged("PassingGrade")
				Me.OnPassingGradeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShowResults", DbType:="Bit NOT NULL")>  _
	Public Property ShowResults() As Boolean
		Get
			Return Me._ShowResults
		End Get
		Set
			If ((Me._ShowResults = value)  _
						= false) Then
				Me.OnShowResultsChanging(value)
				Me.SendPropertyChanging
				Me._ShowResults = value
				Me.SendPropertyChanged("ShowResults")
				Me.OnShowResultsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TimeLimit", DbType:="Int")>  _
	Public Property TimeLimit() As System.Nullable(Of Integer)
		Get
			Return Me._TimeLimit
		End Get
		Set
			If (Me._TimeLimit.Equals(value) = false) Then
				Me.OnTimeLimitChanging(value)
				Me.SendPropertyChanging
				Me._TimeLimit = value
				Me.SendPropertyChanged("TimeLimit")
				Me.OnTimeLimitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_prerequisite", DbType:="Int NOT NULL")>  _
	Public Property prerequisite() As Integer
		Get
			Return Me._prerequisite
		End Get
		Set
			If ((Me._prerequisite = value)  _
						= false) Then
				Me.OnprerequisiteChanging(value)
				Me.SendPropertyChanging
				Me._prerequisite = value
				Me.SendPropertyChanged("prerequisite")
				Me.OnprerequisiteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompletedText", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CompletedText() As String
		Get
			Return Me._CompletedText
		End Get
		Set
			If (String.Equals(Me._CompletedText, value) = false) Then
				Me.OnCompletedTextChanging(value)
				Me.SendPropertyChanging
				Me._CompletedText = value
				Me.SendPropertyChanged("CompletedText")
				Me.OnCompletedTextChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupID", DbType:="NVarChar(50)")>  _
	Public Property GroupID() As String
		Get
			Return Me._GroupID
		End Get
		Set
			If (String.Equals(Me._GroupID, value) = false) Then
				Me.OnGroupIDChanging(value)
				Me.SendPropertyChanging
				Me._GroupID = value
				Me.SendPropertyChanged("GroupID")
				Me.OnGroupIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InstructorID", DbType:="NVarChar(50)")>  _
	Public Property InstructorID() As String
		Get
			Return Me._InstructorID
		End Get
		Set
			If (String.Equals(Me._InstructorID, value) = false) Then
				Me.OnInstructorIDChanging(value)
				Me.SendPropertyChanging
				Me._InstructorID = value
				Me.SendPropertyChanged("InstructorID")
				Me.OnInstructorIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CourseID", DbType:="NVarChar(50)")>  _
	Public Property CourseID() As String
		Get
			Return Me._CourseID
		End Get
		Set
			If (String.Equals(Me._CourseID, value) = false) Then
				Me.OnCourseIDChanging(value)
				Me.SendPropertyChanging
				Me._CourseID = value
				Me.SendPropertyChanged("CourseID")
				Me.OnCourseIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FailedText", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FailedText() As String
		Get
			Return Me._FailedText
		End Get
		Set
			If (String.Equals(Me._FailedText, value) = false) Then
				Me.OnFailedTextChanging(value)
				Me.SendPropertyChanging
				Me._FailedText = value
				Me.SendPropertyChanged("FailedText")
				Me.OnFailedTextChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RetakeHours1", DbType:="Int")>  _
	Public Property RetakeHours1() As System.Nullable(Of Integer)
		Get
			Return Me._RetakeHours1
		End Get
		Set
			If (Me._RetakeHours1.Equals(value) = false) Then
				Me.OnRetakeHours1Changing(value)
				Me.SendPropertyChanging
				Me._RetakeHours1 = value
				Me.SendPropertyChanged("RetakeHours1")
				Me.OnRetakeHours1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RetakeText1", DbType:="NVarChar(250)")>  _
	Public Property RetakeText1() As String
		Get
			Return Me._RetakeText1
		End Get
		Set
			If (String.Equals(Me._RetakeText1, value) = false) Then
				Me.OnRetakeText1Changing(value)
				Me.SendPropertyChanging
				Me._RetakeText1 = value
				Me.SendPropertyChanged("RetakeText1")
				Me.OnRetakeText1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RetakeHours2", DbType:="Int")>  _
	Public Property RetakeHours2() As System.Nullable(Of Integer)
		Get
			Return Me._RetakeHours2
		End Get
		Set
			If (Me._RetakeHours2.Equals(value) = false) Then
				Me.OnRetakeHours2Changing(value)
				Me.SendPropertyChanging
				Me._RetakeHours2 = value
				Me.SendPropertyChanged("RetakeHours2")
				Me.OnRetakeHours2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RetakeText2", DbType:="NVarChar(250)")>  _
	Public Property RetakeText2() As String
		Get
			Return Me._RetakeText2
		End Get
		Set
			If (String.Equals(Me._RetakeText2, value) = false) Then
				Me.OnRetakeText2Changing(value)
				Me.SendPropertyChanging
				Me._RetakeText2 = value
				Me.SendPropertyChanged("RetakeText2")
				Me.OnRetakeText2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RetakeHours3", DbType:="Int")>  _
	Public Property RetakeHours3() As System.Nullable(Of Integer)
		Get
			Return Me._RetakeHours3
		End Get
		Set
			If (Me._RetakeHours3.Equals(value) = false) Then
				Me.OnRetakeHours3Changing(value)
				Me.SendPropertyChanging
				Me._RetakeHours3 = value
				Me.SendPropertyChanged("RetakeHours3")
				Me.OnRetakeHours3Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RetakeText3", DbType:="NVarChar(250)")>  _
	Public Property RetakeText3() As String
		Get
			Return Me._RetakeText3
		End Get
		Set
			If (String.Equals(Me._RetakeText3, value) = false) Then
				Me.OnRetakeText3Changing(value)
				Me.SendPropertyChanging
				Me._RetakeText3 = value
				Me.SendPropertyChanged("RetakeText3")
				Me.OnRetakeText3Changed
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TestResults")>  _
Partial Public Class TestResult
	
	Private _Title As String
	
	Private _DateTimeCompleted As System.Nullable(Of Date)
	
	Private _Score As String
	
	Private _Result As String
	
	Private _TestSessionID As String
	
	Private _UserName As String
	
	Private _StartTime As System.Nullable(Of Date)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="VarChar(50)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me._Title = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateTimeCompleted", DbType:="SmallDateTime")>  _
	Public Property DateTimeCompleted() As System.Nullable(Of Date)
		Get
			Return Me._DateTimeCompleted
		End Get
		Set
			If (Me._DateTimeCompleted.Equals(value) = false) Then
				Me._DateTimeCompleted = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Score", DbType:="NVarChar(256)")>  _
	Public Property Score() As String
		Get
			Return Me._Score
		End Get
		Set
			If (String.Equals(Me._Score, value) = false) Then
				Me._Score = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Result", DbType:="NVarChar(256)")>  _
	Public Property Result() As String
		Get
			Return Me._Result
		End Get
		Set
			If (String.Equals(Me._Result, value) = false) Then
				Me._Result = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TestSessionID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property TestSessionID() As String
		Get
			Return Me._TestSessionID
		End Get
		Set
			If (String.Equals(Me._TestSessionID, value) = false) Then
				Me._TestSessionID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me._UserName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartTime", DbType:="SmallDateTime")>  _
	Public Property StartTime() As System.Nullable(Of Date)
		Get
			Return Me._StartTime
		End Get
		Set
			If (Me._StartTime.Equals(value) = false) Then
				Me._StartTime = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.baretc_qryQuestions")>  _
Partial Public Class baretc_qryQuestion
	
	Private _QuestionID As Integer
	
	Private _TestID As String
	
	Private _Title As String
	
	Private _QuestionType As String
	
	Private _Points As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QuestionID", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property QuestionID() As Integer
		Get
			Return Me._QuestionID
		End Get
		Set
			If ((Me._QuestionID = value)  _
						= false) Then
				Me._QuestionID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TestID", DbType:="NVarChar(50)")>  _
	Public Property TestID() As String
		Get
			Return Me._TestID
		End Get
		Set
			If (String.Equals(Me._TestID, value) = false) Then
				Me._TestID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="VarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me._Title = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QuestionType", DbType:="VarChar(17)")>  _
	Public Property QuestionType() As String
		Get
			Return Me._QuestionType
		End Get
		Set
			If (String.Equals(Me._QuestionType, value) = false) Then
				Me._QuestionType = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Points", DbType:="Int")>  _
	Public Property Points() As System.Nullable(Of Integer)
		Get
			Return Me._Points
		End Get
		Set
			If (Me._Points.Equals(value) = false) Then
				Me._Points = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Questions")>  _
Partial Public Class Question
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _QuestionID As Integer
	
	Private _QuizID As Integer
	
	Private _TestID As String
	
	Private _Title As String
	
	Private _Answer1 As String
	
	Private _Answer2 As String
	
	Private _Answer3 As String
	
	Private _Answer4 As String
	
	Private _Answer5 As String
	
	Private _Answer6 As String
	
	Private _CorrectAnswer As System.Nullable(Of Byte)
	
	Private _AnswerExplanation As String
	
	Private _QuestionOrder As System.Nullable(Of Byte)
	
	Private _CopiedFromQuestionID As System.Nullable(Of Integer)
	
	Private _DesiredOrder As System.Nullable(Of Integer)
	
	Private _Points As System.Nullable(Of Integer)
	
	Private _QuestionType As String
	
	Private _AnswerText As String
	
	Private _CorrectAnswerText As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnQuestionIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnQuestionIDChanged()
    End Sub
    Partial Private Sub OnQuizIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnQuizIDChanged()
    End Sub
    Partial Private Sub OnTestIDChanging(value As String)
    End Sub
    Partial Private Sub OnTestIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnAnswer1Changing(value As String)
    End Sub
    Partial Private Sub OnAnswer1Changed()
    End Sub
    Partial Private Sub OnAnswer2Changing(value As String)
    End Sub
    Partial Private Sub OnAnswer2Changed()
    End Sub
    Partial Private Sub OnAnswer3Changing(value As String)
    End Sub
    Partial Private Sub OnAnswer3Changed()
    End Sub
    Partial Private Sub OnAnswer4Changing(value As String)
    End Sub
    Partial Private Sub OnAnswer4Changed()
    End Sub
    Partial Private Sub OnAnswer5Changing(value As String)
    End Sub
    Partial Private Sub OnAnswer5Changed()
    End Sub
    Partial Private Sub OnAnswer6Changing(value As String)
    End Sub
    Partial Private Sub OnAnswer6Changed()
    End Sub
    Partial Private Sub OnCorrectAnswerChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnCorrectAnswerChanged()
    End Sub
    Partial Private Sub OnAnswerExplanationChanging(value As String)
    End Sub
    Partial Private Sub OnAnswerExplanationChanged()
    End Sub
    Partial Private Sub OnQuestionOrderChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnQuestionOrderChanged()
    End Sub
    Partial Private Sub OnCopiedFromQuestionIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCopiedFromQuestionIDChanged()
    End Sub
    Partial Private Sub OnDesiredOrderChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDesiredOrderChanged()
    End Sub
    Partial Private Sub OnPointsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPointsChanged()
    End Sub
    Partial Private Sub OnQuestionTypeChanging(value As String)
    End Sub
    Partial Private Sub OnQuestionTypeChanged()
    End Sub
    Partial Private Sub OnAnswerTextChanging(value As String)
    End Sub
    Partial Private Sub OnAnswerTextChanged()
    End Sub
    Partial Private Sub OnCorrectAnswerTextChanging(value As String)
    End Sub
    Partial Private Sub OnCorrectAnswerTextChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QuestionID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property QuestionID() As Integer
		Get
			Return Me._QuestionID
		End Get
		Set
			If ((Me._QuestionID = value)  _
						= false) Then
				Me.OnQuestionIDChanging(value)
				Me.SendPropertyChanging
				Me._QuestionID = value
				Me.SendPropertyChanged("QuestionID")
				Me.OnQuestionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QuizID", DbType:="Int NOT NULL")>  _
	Public Property QuizID() As Integer
		Get
			Return Me._QuizID
		End Get
		Set
			If ((Me._QuizID = value)  _
						= false) Then
				Me.OnQuizIDChanging(value)
				Me.SendPropertyChanging
				Me._QuizID = value
				Me.SendPropertyChanged("QuizID")
				Me.OnQuizIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TestID", DbType:="NVarChar(50)")>  _
	Public Property TestID() As String
		Get
			Return Me._TestID
		End Get
		Set
			If (String.Equals(Me._TestID, value) = false) Then
				Me.OnTestIDChanging(value)
				Me.SendPropertyChanging
				Me._TestID = value
				Me.SendPropertyChanged("TestID")
				Me.OnTestIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="VarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Answer1", DbType:="VarChar(1000)")>  _
	Public Property Answer1() As String
		Get
			Return Me._Answer1
		End Get
		Set
			If (String.Equals(Me._Answer1, value) = false) Then
				Me.OnAnswer1Changing(value)
				Me.SendPropertyChanging
				Me._Answer1 = value
				Me.SendPropertyChanged("Answer1")
				Me.OnAnswer1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Answer2", DbType:="VarChar(1000)")>  _
	Public Property Answer2() As String
		Get
			Return Me._Answer2
		End Get
		Set
			If (String.Equals(Me._Answer2, value) = false) Then
				Me.OnAnswer2Changing(value)
				Me.SendPropertyChanging
				Me._Answer2 = value
				Me.SendPropertyChanged("Answer2")
				Me.OnAnswer2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Answer3", DbType:="VarChar(1000)")>  _
	Public Property Answer3() As String
		Get
			Return Me._Answer3
		End Get
		Set
			If (String.Equals(Me._Answer3, value) = false) Then
				Me.OnAnswer3Changing(value)
				Me.SendPropertyChanging
				Me._Answer3 = value
				Me.SendPropertyChanged("Answer3")
				Me.OnAnswer3Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Answer4", DbType:="VarChar(1000)")>  _
	Public Property Answer4() As String
		Get
			Return Me._Answer4
		End Get
		Set
			If (String.Equals(Me._Answer4, value) = false) Then
				Me.OnAnswer4Changing(value)
				Me.SendPropertyChanging
				Me._Answer4 = value
				Me.SendPropertyChanged("Answer4")
				Me.OnAnswer4Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Answer5", DbType:="VarChar(1000)")>  _
	Public Property Answer5() As String
		Get
			Return Me._Answer5
		End Get
		Set
			If (String.Equals(Me._Answer5, value) = false) Then
				Me.OnAnswer5Changing(value)
				Me.SendPropertyChanging
				Me._Answer5 = value
				Me.SendPropertyChanged("Answer5")
				Me.OnAnswer5Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Answer6", DbType:="VarChar(1000)")>  _
	Public Property Answer6() As String
		Get
			Return Me._Answer6
		End Get
		Set
			If (String.Equals(Me._Answer6, value) = false) Then
				Me.OnAnswer6Changing(value)
				Me.SendPropertyChanging
				Me._Answer6 = value
				Me.SendPropertyChanged("Answer6")
				Me.OnAnswer6Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CorrectAnswer", DbType:="TinyInt")>  _
	Public Property CorrectAnswer() As System.Nullable(Of Byte)
		Get
			Return Me._CorrectAnswer
		End Get
		Set
			If (Me._CorrectAnswer.Equals(value) = false) Then
				Me.OnCorrectAnswerChanging(value)
				Me.SendPropertyChanging
				Me._CorrectAnswer = value
				Me.SendPropertyChanged("CorrectAnswer")
				Me.OnCorrectAnswerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AnswerExplanation", DbType:="VarChar(1000)")>  _
	Public Property AnswerExplanation() As String
		Get
			Return Me._AnswerExplanation
		End Get
		Set
			If (String.Equals(Me._AnswerExplanation, value) = false) Then
				Me.OnAnswerExplanationChanging(value)
				Me.SendPropertyChanging
				Me._AnswerExplanation = value
				Me.SendPropertyChanged("AnswerExplanation")
				Me.OnAnswerExplanationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QuestionOrder", DbType:="TinyInt")>  _
	Public Property QuestionOrder() As System.Nullable(Of Byte)
		Get
			Return Me._QuestionOrder
		End Get
		Set
			If (Me._QuestionOrder.Equals(value) = false) Then
				Me.OnQuestionOrderChanging(value)
				Me.SendPropertyChanging
				Me._QuestionOrder = value
				Me.SendPropertyChanged("QuestionOrder")
				Me.OnQuestionOrderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CopiedFromQuestionID", DbType:="Int")>  _
	Public Property CopiedFromQuestionID() As System.Nullable(Of Integer)
		Get
			Return Me._CopiedFromQuestionID
		End Get
		Set
			If (Me._CopiedFromQuestionID.Equals(value) = false) Then
				Me.OnCopiedFromQuestionIDChanging(value)
				Me.SendPropertyChanging
				Me._CopiedFromQuestionID = value
				Me.SendPropertyChanged("CopiedFromQuestionID")
				Me.OnCopiedFromQuestionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DesiredOrder", DbType:="Int")>  _
	Public Property DesiredOrder() As System.Nullable(Of Integer)
		Get
			Return Me._DesiredOrder
		End Get
		Set
			If (Me._DesiredOrder.Equals(value) = false) Then
				Me.OnDesiredOrderChanging(value)
				Me.SendPropertyChanging
				Me._DesiredOrder = value
				Me.SendPropertyChanged("DesiredOrder")
				Me.OnDesiredOrderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Points", DbType:="Int")>  _
	Public Property Points() As System.Nullable(Of Integer)
		Get
			Return Me._Points
		End Get
		Set
			If (Me._Points.Equals(value) = false) Then
				Me.OnPointsChanging(value)
				Me.SendPropertyChanging
				Me._Points = value
				Me.SendPropertyChanged("Points")
				Me.OnPointsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QuestionType", DbType:="NVarChar(50)")>  _
	Public Property QuestionType() As String
		Get
			Return Me._QuestionType
		End Get
		Set
			If (String.Equals(Me._QuestionType, value) = false) Then
				Me.OnQuestionTypeChanging(value)
				Me.SendPropertyChanging
				Me._QuestionType = value
				Me.SendPropertyChanged("QuestionType")
				Me.OnQuestionTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AnswerText", DbType:="NVarChar(50)")>  _
	Public Property AnswerText() As String
		Get
			Return Me._AnswerText
		End Get
		Set
			If (String.Equals(Me._AnswerText, value) = false) Then
				Me.OnAnswerTextChanging(value)
				Me.SendPropertyChanging
				Me._AnswerText = value
				Me.SendPropertyChanged("AnswerText")
				Me.OnAnswerTextChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CorrectAnswerText", DbType:="NVarChar(50)")>  _
	Public Property CorrectAnswerText() As String
		Get
			Return Me._CorrectAnswerText
		End Get
		Set
			If (String.Equals(Me._CorrectAnswerText, value) = false) Then
				Me.OnCorrectAnswerTextChanging(value)
				Me.SendPropertyChanging
				Me._CorrectAnswerText = value
				Me.SendPropertyChanged("CorrectAnswerText")
				Me.OnCorrectAnswerTextChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TestScores")>  _
Partial Public Class TestScore
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _UserTestID As Integer
	
	Private _TestID As Integer
	
	Private _ID As String
	
	Private _DateTimeCompleted As System.Nullable(Of Date)
	
	Private _Score As String
	
	Private _Result As String
	
	Private _UserName As String
	
	Private _Terminal As String
	
	Private _TestSessionID As String
	
	Private _StartTime As System.Nullable(Of Date)
	
	Private _TotalElapTime As System.Nullable(Of Integer)
	
	Private _RetakeTestHrs As System.Nullable(Of Integer)
	
	Private _PassingGrade As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUserTestIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserTestIDChanged()
    End Sub
    Partial Private Sub OnTestIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnTestIDChanged()
    End Sub
    Partial Private Sub OnIDChanging(value As String)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnDateTimeCompletedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateTimeCompletedChanged()
    End Sub
    Partial Private Sub OnScoreChanging(value As String)
    End Sub
    Partial Private Sub OnScoreChanged()
    End Sub
    Partial Private Sub OnResultChanging(value As String)
    End Sub
    Partial Private Sub OnResultChanged()
    End Sub
    Partial Private Sub OnUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnUserNameChanged()
    End Sub
    Partial Private Sub OnTerminalChanging(value As String)
    End Sub
    Partial Private Sub OnTerminalChanged()
    End Sub
    Partial Private Sub OnTestSessionIDChanging(value As String)
    End Sub
    Partial Private Sub OnTestSessionIDChanged()
    End Sub
    Partial Private Sub OnStartTimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnStartTimeChanged()
    End Sub
    Partial Private Sub OnTotalElapTimeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTotalElapTimeChanged()
    End Sub
    Partial Private Sub OnRetakeTestHrsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRetakeTestHrsChanged()
    End Sub
    Partial Private Sub OnPassingGradeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPassingGradeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserTestID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property UserTestID() As Integer
		Get
			Return Me._UserTestID
		End Get
		Set
			If ((Me._UserTestID = value)  _
						= false) Then
				Me.OnUserTestIDChanging(value)
				Me.SendPropertyChanging
				Me._UserTestID = value
				Me.SendPropertyChanged("UserTestID")
				Me.OnUserTestIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TestID", DbType:="Int NOT NULL")>  _
	Public Property TestID() As Integer
		Get
			Return Me._TestID
		End Get
		Set
			If ((Me._TestID = value)  _
						= false) Then
				Me.OnTestIDChanging(value)
				Me.SendPropertyChanging
				Me._TestID = value
				Me.SendPropertyChanged("TestID")
				Me.OnTestIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="NVarChar(50)")>  _
	Public Property ID() As String
		Get
			Return Me._ID
		End Get
		Set
			If (String.Equals(Me._ID, value) = false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateTimeCompleted", DbType:="SmallDateTime")>  _
	Public Property DateTimeCompleted() As System.Nullable(Of Date)
		Get
			Return Me._DateTimeCompleted
		End Get
		Set
			If (Me._DateTimeCompleted.Equals(value) = false) Then
				Me.OnDateTimeCompletedChanging(value)
				Me.SendPropertyChanging
				Me._DateTimeCompleted = value
				Me.SendPropertyChanged("DateTimeCompleted")
				Me.OnDateTimeCompletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Score", DbType:="NVarChar(256)")>  _
	Public Property Score() As String
		Get
			Return Me._Score
		End Get
		Set
			If (String.Equals(Me._Score, value) = false) Then
				Me.OnScoreChanging(value)
				Me.SendPropertyChanging
				Me._Score = value
				Me.SendPropertyChanged("Score")
				Me.OnScoreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Result", DbType:="NVarChar(256)")>  _
	Public Property Result() As String
		Get
			Return Me._Result
		End Get
		Set
			If (String.Equals(Me._Result, value) = false) Then
				Me.OnResultChanging(value)
				Me.SendPropertyChanging
				Me._Result = value
				Me.SendPropertyChanged("Result")
				Me.OnResultChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me.OnUserNameChanging(value)
				Me.SendPropertyChanging
				Me._UserName = value
				Me.SendPropertyChanged("UserName")
				Me.OnUserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Terminal", DbType:="VarChar(50)")>  _
	Public Property Terminal() As String
		Get
			Return Me._Terminal
		End Get
		Set
			If (String.Equals(Me._Terminal, value) = false) Then
				Me.OnTerminalChanging(value)
				Me.SendPropertyChanging
				Me._Terminal = value
				Me.SendPropertyChanged("Terminal")
				Me.OnTerminalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TestSessionID", DbType:="VarChar(50)")>  _
	Public Property TestSessionID() As String
		Get
			Return Me._TestSessionID
		End Get
		Set
			If (String.Equals(Me._TestSessionID, value) = false) Then
				Me.OnTestSessionIDChanging(value)
				Me.SendPropertyChanging
				Me._TestSessionID = value
				Me.SendPropertyChanged("TestSessionID")
				Me.OnTestSessionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartTime", DbType:="SmallDateTime")>  _
	Public Property StartTime() As System.Nullable(Of Date)
		Get
			Return Me._StartTime
		End Get
		Set
			If (Me._StartTime.Equals(value) = false) Then
				Me.OnStartTimeChanging(value)
				Me.SendPropertyChanging
				Me._StartTime = value
				Me.SendPropertyChanged("StartTime")
				Me.OnStartTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalElapTime", DbType:="Int")>  _
	Public Property TotalElapTime() As System.Nullable(Of Integer)
		Get
			Return Me._TotalElapTime
		End Get
		Set
			If (Me._TotalElapTime.Equals(value) = false) Then
				Me.OnTotalElapTimeChanging(value)
				Me.SendPropertyChanging
				Me._TotalElapTime = value
				Me.SendPropertyChanged("TotalElapTime")
				Me.OnTotalElapTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RetakeTestHrs", DbType:="Int")>  _
	Public Property RetakeTestHrs() As System.Nullable(Of Integer)
		Get
			Return Me._RetakeTestHrs
		End Get
		Set
			If (Me._RetakeTestHrs.Equals(value) = false) Then
				Me.OnRetakeTestHrsChanging(value)
				Me.SendPropertyChanging
				Me._RetakeTestHrs = value
				Me.SendPropertyChanged("RetakeTestHrs")
				Me.OnRetakeTestHrsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PassingGrade", DbType:="Int")>  _
	Public Property PassingGrade() As System.Nullable(Of Integer)
		Get
			Return Me._PassingGrade
		End Get
		Set
			If (Me._PassingGrade.Equals(value) = false) Then
				Me.OnPassingGradeChanging(value)
				Me.SendPropertyChanging
				Me._PassingGrade = value
				Me.SendPropertyChanged("PassingGrade")
				Me.OnPassingGradeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TestSession")>  _
Partial Public Class TestSession
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SessionID As String
	
	Private _UserName As String
	
	Private _QuizID As Integer
	
	Private _TestID As String
	
	Private _CurrentQuestionID As Integer
	
	Private _IPAddress As String
	
	Private _StartDate As System.Nullable(Of Date)
	
	Private _SiteID As String
	
	Private _Status As String
	
	Private _TimeLimit As System.Nullable(Of Integer)
	
	Private _RunningTime As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSessionIDChanging(value As String)
    End Sub
    Partial Private Sub OnSessionIDChanged()
    End Sub
    Partial Private Sub OnUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnUserNameChanged()
    End Sub
    Partial Private Sub OnQuizIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnQuizIDChanged()
    End Sub
    Partial Private Sub OnTestIDChanging(value As String)
    End Sub
    Partial Private Sub OnTestIDChanged()
    End Sub
    Partial Private Sub OnCurrentQuestionIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCurrentQuestionIDChanged()
    End Sub
    Partial Private Sub OnIPAddressChanging(value As String)
    End Sub
    Partial Private Sub OnIPAddressChanged()
    End Sub
    Partial Private Sub OnStartDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnStartDateChanged()
    End Sub
    Partial Private Sub OnSiteIDChanging(value As String)
    End Sub
    Partial Private Sub OnSiteIDChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As String)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnTimeLimitChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTimeLimitChanged()
    End Sub
    Partial Private Sub OnRunningTimeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRunningTimeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SessionID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property SessionID() As String
		Get
			Return Me._SessionID
		End Get
		Set
			If (String.Equals(Me._SessionID, value) = false) Then
				Me.OnSessionIDChanging(value)
				Me.SendPropertyChanging
				Me._SessionID = value
				Me.SendPropertyChanged("SessionID")
				Me.OnSessionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me.OnUserNameChanging(value)
				Me.SendPropertyChanging
				Me._UserName = value
				Me.SendPropertyChanged("UserName")
				Me.OnUserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QuizID", DbType:="Int NOT NULL")>  _
	Public Property QuizID() As Integer
		Get
			Return Me._QuizID
		End Get
		Set
			If ((Me._QuizID = value)  _
						= false) Then
				Me.OnQuizIDChanging(value)
				Me.SendPropertyChanging
				Me._QuizID = value
				Me.SendPropertyChanged("QuizID")
				Me.OnQuizIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TestID", DbType:="NVarChar(50)")>  _
	Public Property TestID() As String
		Get
			Return Me._TestID
		End Get
		Set
			If (String.Equals(Me._TestID, value) = false) Then
				Me.OnTestIDChanging(value)
				Me.SendPropertyChanging
				Me._TestID = value
				Me.SendPropertyChanged("TestID")
				Me.OnTestIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurrentQuestionID", DbType:="Int NOT NULL")>  _
	Public Property CurrentQuestionID() As Integer
		Get
			Return Me._CurrentQuestionID
		End Get
		Set
			If ((Me._CurrentQuestionID = value)  _
						= false) Then
				Me.OnCurrentQuestionIDChanging(value)
				Me.SendPropertyChanging
				Me._CurrentQuestionID = value
				Me.SendPropertyChanged("CurrentQuestionID")
				Me.OnCurrentQuestionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IPAddress", DbType:="NVarChar(50)")>  _
	Public Property IPAddress() As String
		Get
			Return Me._IPAddress
		End Get
		Set
			If (String.Equals(Me._IPAddress, value) = false) Then
				Me.OnIPAddressChanging(value)
				Me.SendPropertyChanging
				Me._IPAddress = value
				Me.SendPropertyChanged("IPAddress")
				Me.OnIPAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartDate", DbType:="SmallDateTime")>  _
	Public Property StartDate() As System.Nullable(Of Date)
		Get
			Return Me._StartDate
		End Get
		Set
			If (Me._StartDate.Equals(value) = false) Then
				Me.OnStartDateChanging(value)
				Me.SendPropertyChanging
				Me._StartDate = value
				Me.SendPropertyChanged("StartDate")
				Me.OnStartDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteID", DbType:="NVarChar(50)")>  _
	Public Property SiteID() As String
		Get
			Return Me._SiteID
		End Get
		Set
			If (String.Equals(Me._SiteID, value) = false) Then
				Me.OnSiteIDChanging(value)
				Me.SendPropertyChanging
				Me._SiteID = value
				Me.SendPropertyChanged("SiteID")
				Me.OnSiteIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="NVarChar(50)")>  _
	Public Property Status() As String
		Get
			Return Me._Status
		End Get
		Set
			If (String.Equals(Me._Status, value) = false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TimeLimit", DbType:="Int")>  _
	Public Property TimeLimit() As System.Nullable(Of Integer)
		Get
			Return Me._TimeLimit
		End Get
		Set
			If (Me._TimeLimit.Equals(value) = false) Then
				Me.OnTimeLimitChanging(value)
				Me.SendPropertyChanging
				Me._TimeLimit = value
				Me.SendPropertyChanged("TimeLimit")
				Me.OnTimeLimitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunningTime", DbType:="Int")>  _
	Public Property RunningTime() As System.Nullable(Of Integer)
		Get
			Return Me._RunningTime
		End Get
		Set
			If (Me._RunningTime.Equals(value) = false) Then
				Me.OnRunningTimeChanging(value)
				Me.SendPropertyChanging
				Me._RunningTime = value
				Me.SendPropertyChanged("RunningTime")
				Me.OnRunningTimeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AnswerList")>  _
Partial Public Class AnswerList
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _AnswerListID As Integer
	
	Private _TestSessionID As String
	
	Private _QuizID As Integer
	
	Private _TestID As String
	
	Private _QuestionID As System.Nullable(Of Integer)
	
	Private _CorrectAnswer As System.Nullable(Of Integer)
	
	Private _UserAnswer As System.Nullable(Of Integer)
	
	Private _FillInAnswer As String
	
	Private _RealQuestionID As System.Nullable(Of Integer)
	
	Private _EarnedPoints As System.Nullable(Of Integer)
	
	Private _Result As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnAnswerListIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnAnswerListIDChanged()
    End Sub
    Partial Private Sub OnTestSessionIDChanging(value As String)
    End Sub
    Partial Private Sub OnTestSessionIDChanged()
    End Sub
    Partial Private Sub OnQuizIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnQuizIDChanged()
    End Sub
    Partial Private Sub OnTestIDChanging(value As String)
    End Sub
    Partial Private Sub OnTestIDChanged()
    End Sub
    Partial Private Sub OnQuestionIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnQuestionIDChanged()
    End Sub
    Partial Private Sub OnCorrectAnswerChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCorrectAnswerChanged()
    End Sub
    Partial Private Sub OnUserAnswerChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnUserAnswerChanged()
    End Sub
    Partial Private Sub OnFillInAnswerChanging(value As String)
    End Sub
    Partial Private Sub OnFillInAnswerChanged()
    End Sub
    Partial Private Sub OnRealQuestionIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRealQuestionIDChanged()
    End Sub
    Partial Private Sub OnEarnedPointsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnEarnedPointsChanged()
    End Sub
    Partial Private Sub OnResultChanging(value As String)
    End Sub
    Partial Private Sub OnResultChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AnswerListID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property AnswerListID() As Integer
		Get
			Return Me._AnswerListID
		End Get
		Set
			If ((Me._AnswerListID = value)  _
						= false) Then
				Me.OnAnswerListIDChanging(value)
				Me.SendPropertyChanging
				Me._AnswerListID = value
				Me.SendPropertyChanged("AnswerListID")
				Me.OnAnswerListIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TestSessionID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property TestSessionID() As String
		Get
			Return Me._TestSessionID
		End Get
		Set
			If (String.Equals(Me._TestSessionID, value) = false) Then
				Me.OnTestSessionIDChanging(value)
				Me.SendPropertyChanging
				Me._TestSessionID = value
				Me.SendPropertyChanged("TestSessionID")
				Me.OnTestSessionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QuizID", DbType:="Int NOT NULL")>  _
	Public Property QuizID() As Integer
		Get
			Return Me._QuizID
		End Get
		Set
			If ((Me._QuizID = value)  _
						= false) Then
				Me.OnQuizIDChanging(value)
				Me.SendPropertyChanging
				Me._QuizID = value
				Me.SendPropertyChanged("QuizID")
				Me.OnQuizIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TestID", DbType:="NVarChar(50)")>  _
	Public Property TestID() As String
		Get
			Return Me._TestID
		End Get
		Set
			If (String.Equals(Me._TestID, value) = false) Then
				Me.OnTestIDChanging(value)
				Me.SendPropertyChanging
				Me._TestID = value
				Me.SendPropertyChanged("TestID")
				Me.OnTestIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QuestionID", DbType:="Int")>  _
	Public Property QuestionID() As System.Nullable(Of Integer)
		Get
			Return Me._QuestionID
		End Get
		Set
			If (Me._QuestionID.Equals(value) = false) Then
				Me.OnQuestionIDChanging(value)
				Me.SendPropertyChanging
				Me._QuestionID = value
				Me.SendPropertyChanged("QuestionID")
				Me.OnQuestionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CorrectAnswer", DbType:="Int")>  _
	Public Property CorrectAnswer() As System.Nullable(Of Integer)
		Get
			Return Me._CorrectAnswer
		End Get
		Set
			If (Me._CorrectAnswer.Equals(value) = false) Then
				Me.OnCorrectAnswerChanging(value)
				Me.SendPropertyChanging
				Me._CorrectAnswer = value
				Me.SendPropertyChanged("CorrectAnswer")
				Me.OnCorrectAnswerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserAnswer", DbType:="Int")>  _
	Public Property UserAnswer() As System.Nullable(Of Integer)
		Get
			Return Me._UserAnswer
		End Get
		Set
			If (Me._UserAnswer.Equals(value) = false) Then
				Me.OnUserAnswerChanging(value)
				Me.SendPropertyChanging
				Me._UserAnswer = value
				Me.SendPropertyChanged("UserAnswer")
				Me.OnUserAnswerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FillInAnswer", DbType:="NVarChar(50)")>  _
	Public Property FillInAnswer() As String
		Get
			Return Me._FillInAnswer
		End Get
		Set
			If (String.Equals(Me._FillInAnswer, value) = false) Then
				Me.OnFillInAnswerChanging(value)
				Me.SendPropertyChanging
				Me._FillInAnswer = value
				Me.SendPropertyChanged("FillInAnswer")
				Me.OnFillInAnswerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RealQuestionID", DbType:="Int")>  _
	Public Property RealQuestionID() As System.Nullable(Of Integer)
		Get
			Return Me._RealQuestionID
		End Get
		Set
			If (Me._RealQuestionID.Equals(value) = false) Then
				Me.OnRealQuestionIDChanging(value)
				Me.SendPropertyChanging
				Me._RealQuestionID = value
				Me.SendPropertyChanged("RealQuestionID")
				Me.OnRealQuestionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EarnedPoints", DbType:="Int")>  _
	Public Property EarnedPoints() As System.Nullable(Of Integer)
		Get
			Return Me._EarnedPoints
		End Get
		Set
			If (Me._EarnedPoints.Equals(value) = false) Then
				Me.OnEarnedPointsChanging(value)
				Me.SendPropertyChanging
				Me._EarnedPoints = value
				Me.SendPropertyChanged("EarnedPoints")
				Me.OnEarnedPointsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Result", DbType:="NChar(10)")>  _
	Public Property Result() As String
		Get
			Return Me._Result
		End Get
		Set
			If (String.Equals(Me._Result, value) = false) Then
				Me.OnResultChanging(value)
				Me.SendPropertyChanging
				Me._Result = value
				Me.SendPropertyChanged("Result")
				Me.OnResultChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.baretc_TestResults")>  _
Partial Public Class baretc_TestResult
	
	Private _Title As String
	
	Private _ID As String
	
	Private _DateTimeCompleted As System.Nullable(Of Date)
	
	Private _Score As String
	
	Private _Result As String
	
	Private _TestSessionID As String
	
	Private _UserName As String
	
	Private _StartTime As System.Nullable(Of Date)
	
	Private _CourseID As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="VarChar(50)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me._Title = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="NVarChar(50)")>  _
	Public Property ID() As String
		Get
			Return Me._ID
		End Get
		Set
			If (String.Equals(Me._ID, value) = false) Then
				Me._ID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateTimeCompleted", DbType:="SmallDateTime")>  _
	Public Property DateTimeCompleted() As System.Nullable(Of Date)
		Get
			Return Me._DateTimeCompleted
		End Get
		Set
			If (Me._DateTimeCompleted.Equals(value) = false) Then
				Me._DateTimeCompleted = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Score", DbType:="NVarChar(256)")>  _
	Public Property Score() As String
		Get
			Return Me._Score
		End Get
		Set
			If (String.Equals(Me._Score, value) = false) Then
				Me._Score = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Result", DbType:="NVarChar(256)")>  _
	Public Property Result() As String
		Get
			Return Me._Result
		End Get
		Set
			If (String.Equals(Me._Result, value) = false) Then
				Me._Result = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TestSessionID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property TestSessionID() As String
		Get
			Return Me._TestSessionID
		End Get
		Set
			If (String.Equals(Me._TestSessionID, value) = false) Then
				Me._TestSessionID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me._UserName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartTime", DbType:="SmallDateTime")>  _
	Public Property StartTime() As System.Nullable(Of Date)
		Get
			Return Me._StartTime
		End Get
		Set
			If (Me._StartTime.Equals(value) = false) Then
				Me._StartTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CourseID", DbType:="NVarChar(50)")>  _
	Public Property CourseID() As String
		Get
			Return Me._CourseID
		End Get
		Set
			If (String.Equals(Me._CourseID, value) = false) Then
				Me._CourseID = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.getCurriculumResult")>  _
Partial Public Class getCurriculumResult
	
	Private _ResultID As Integer
	
	Private _StudentInCourseID As String
	
	Private _DateCompleted As System.Nullable(Of Date)
	
	Private _Completed As System.Nullable(Of Boolean)
	
	Private _CurriculumTitle As String
	
	Private _CurriculumID As String
	
	Private _CurriculumGroupID As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ResultID", DbType:="Int NOT NULL")>  _
	Public Property ResultID() As Integer
		Get
			Return Me._ResultID
		End Get
		Set
			If ((Me._ResultID = value)  _
						= false) Then
				Me._ResultID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StudentInCourseID", DbType:="NVarChar(50)")>  _
	Public Property StudentInCourseID() As String
		Get
			Return Me._StudentInCourseID
		End Get
		Set
			If (String.Equals(Me._StudentInCourseID, value) = false) Then
				Me._StudentInCourseID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCompleted", DbType:="DateTime")>  _
	Public Property DateCompleted() As System.Nullable(Of Date)
		Get
			Return Me._DateCompleted
		End Get
		Set
			If (Me._DateCompleted.Equals(value) = false) Then
				Me._DateCompleted = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Completed", DbType:="Bit")>  _
	Public Property Completed() As System.Nullable(Of Boolean)
		Get
			Return Me._Completed
		End Get
		Set
			If (Me._Completed.Equals(value) = false) Then
				Me._Completed = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurriculumTitle", DbType:="NVarChar(50)")>  _
	Public Property CurriculumTitle() As String
		Get
			Return Me._CurriculumTitle
		End Get
		Set
			If (String.Equals(Me._CurriculumTitle, value) = false) Then
				Me._CurriculumTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurriculumID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CurriculumID() As String
		Get
			Return Me._CurriculumID
		End Get
		Set
			If (String.Equals(Me._CurriculumID, value) = false) Then
				Me._CurriculumID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurriculumGroupID", DbType:="NVarChar(50)")>  _
	Public Property CurriculumGroupID() As String
		Get
			Return Me._CurriculumGroupID
		End Get
		Set
			If (String.Equals(Me._CurriculumGroupID, value) = false) Then
				Me._CurriculumGroupID = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryGetCourseListByUserID")>  _
Partial Public Class qryGetCourseListByUserID
	
	Private _UserName As String
	
	Private _CourseTitle As String
	
	Private _CourseID As String
	
	Private _UserID As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me._UserName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CourseTitle", DbType:="NVarChar(50)")>  _
	Public Property CourseTitle() As String
		Get
			Return Me._CourseTitle
		End Get
		Set
			If (String.Equals(Me._CourseTitle, value) = false) Then
				Me._CourseTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CourseID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CourseID() As String
		Get
			Return Me._CourseID
		End Get
		Set
			If (String.Equals(Me._CourseID, value) = false) Then
				Me._CourseID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property UserID() As String
		Get
			Return Me._UserID
		End Get
		Set
			If (String.Equals(Me._UserID, value) = false) Then
				Me._UserID = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CurriculumResult")>  _
Partial Public Class CurriculumResult
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ResultID As Integer
	
	Private _StudentInCourseID As String
	
	Private _CurriculumID As String
	
	Private _DateCompleted As System.Nullable(Of Date)
	
	Private _Completed As System.Nullable(Of Boolean)
	
	Private _UserName As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnResultIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnResultIDChanged()
    End Sub
    Partial Private Sub OnStudentInCourseIDChanging(value As String)
    End Sub
    Partial Private Sub OnStudentInCourseIDChanged()
    End Sub
    Partial Private Sub OnCurriculumIDChanging(value As String)
    End Sub
    Partial Private Sub OnCurriculumIDChanged()
    End Sub
    Partial Private Sub OnDateCompletedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateCompletedChanged()
    End Sub
    Partial Private Sub OnCompletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnCompletedChanged()
    End Sub
    Partial Private Sub OnUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnUserNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ResultID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ResultID() As Integer
		Get
			Return Me._ResultID
		End Get
		Set
			If ((Me._ResultID = value)  _
						= false) Then
				Me.OnResultIDChanging(value)
				Me.SendPropertyChanging
				Me._ResultID = value
				Me.SendPropertyChanged("ResultID")
				Me.OnResultIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StudentInCourseID", DbType:="NVarChar(50)")>  _
	Public Property StudentInCourseID() As String
		Get
			Return Me._StudentInCourseID
		End Get
		Set
			If (String.Equals(Me._StudentInCourseID, value) = false) Then
				Me.OnStudentInCourseIDChanging(value)
				Me.SendPropertyChanging
				Me._StudentInCourseID = value
				Me.SendPropertyChanged("StudentInCourseID")
				Me.OnStudentInCourseIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurriculumID", DbType:="NVarChar(50)")>  _
	Public Property CurriculumID() As String
		Get
			Return Me._CurriculumID
		End Get
		Set
			If (String.Equals(Me._CurriculumID, value) = false) Then
				Me.OnCurriculumIDChanging(value)
				Me.SendPropertyChanging
				Me._CurriculumID = value
				Me.SendPropertyChanged("CurriculumID")
				Me.OnCurriculumIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCompleted", DbType:="DateTime")>  _
	Public Property DateCompleted() As System.Nullable(Of Date)
		Get
			Return Me._DateCompleted
		End Get
		Set
			If (Me._DateCompleted.Equals(value) = false) Then
				Me.OnDateCompletedChanging(value)
				Me.SendPropertyChanging
				Me._DateCompleted = value
				Me.SendPropertyChanged("DateCompleted")
				Me.OnDateCompletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Completed", DbType:="Bit")>  _
	Public Property Completed() As System.Nullable(Of Boolean)
		Get
			Return Me._Completed
		End Get
		Set
			If (Me._Completed.Equals(value) = false) Then
				Me.OnCompletedChanging(value)
				Me.SendPropertyChanging
				Me._Completed = value
				Me.SendPropertyChanged("Completed")
				Me.OnCompletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="NVarChar(50)")>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me.OnUserNameChanging(value)
				Me.SendPropertyChanging
				Me._UserName = value
				Me.SendPropertyChanged("UserName")
				Me.OnUserNameChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.UserInCourse")>  _
Partial Public Class UserInCourse
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _UserInCourseID As Integer
	
	Private _UserID As String
	
	Private _CourseID As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUserInCourseIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserInCourseIDChanged()
    End Sub
    Partial Private Sub OnUserIDChanging(value As String)
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnCourseIDChanging(value As String)
    End Sub
    Partial Private Sub OnCourseIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserInCourseID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property UserInCourseID() As Integer
		Get
			Return Me._UserInCourseID
		End Get
		Set
			If ((Me._UserInCourseID = value)  _
						= false) Then
				Me.OnUserInCourseIDChanging(value)
				Me.SendPropertyChanging
				Me._UserInCourseID = value
				Me.SendPropertyChanged("UserInCourseID")
				Me.OnUserInCourseIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property UserID() As String
		Get
			Return Me._UserID
		End Get
		Set
			If (String.Equals(Me._UserID, value) = false) Then
				Me.OnUserIDChanging(value)
				Me.SendPropertyChanging
				Me._UserID = value
				Me.SendPropertyChanged("UserID")
				Me.OnUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CourseID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CourseID() As String
		Get
			Return Me._CourseID
		End Get
		Set
			If (String.Equals(Me._CourseID, value) = false) Then
				Me.OnCourseIDChanging(value)
				Me.SendPropertyChanging
				Me._CourseID = value
				Me.SendPropertyChanged("CourseID")
				Me.OnCourseIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CurriculumGroup")>  _
Partial Public Class CurriculumGroup
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CurriculumGroupID As String
	
	Private _CourseID As String
	
	Private _Title As String
	
	Private _RequiredGroupID As String
	
	Private _StartDate As System.Nullable(Of Date)
	
	Private _SortOrder As System.Nullable(Of Integer)
	
	Private _PreRequisiteRequired As System.Nullable(Of Boolean)
	
	Private _Required As System.Nullable(Of Boolean)
	
	Private _Hold As System.Nullable(Of Boolean)
	
	Private _Enabled As System.Nullable(Of Boolean)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCurriculumGroupIDChanging(value As String)
    End Sub
    Partial Private Sub OnCurriculumGroupIDChanged()
    End Sub
    Partial Private Sub OnCourseIDChanging(value As String)
    End Sub
    Partial Private Sub OnCourseIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnRequiredGroupIDChanging(value As String)
    End Sub
    Partial Private Sub OnRequiredGroupIDChanged()
    End Sub
    Partial Private Sub OnStartDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnStartDateChanged()
    End Sub
    Partial Private Sub OnSortOrderChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSortOrderChanged()
    End Sub
    Partial Private Sub OnPreRequisiteRequiredChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnPreRequisiteRequiredChanged()
    End Sub
    Partial Private Sub OnRequiredChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnRequiredChanged()
    End Sub
    Partial Private Sub OnHoldChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnHoldChanged()
    End Sub
    Partial Private Sub OnEnabledChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnEnabledChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurriculumGroupID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property CurriculumGroupID() As String
		Get
			Return Me._CurriculumGroupID
		End Get
		Set
			If (String.Equals(Me._CurriculumGroupID, value) = false) Then
				Me.OnCurriculumGroupIDChanging(value)
				Me.SendPropertyChanging
				Me._CurriculumGroupID = value
				Me.SendPropertyChanged("CurriculumGroupID")
				Me.OnCurriculumGroupIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CourseID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CourseID() As String
		Get
			Return Me._CourseID
		End Get
		Set
			If (String.Equals(Me._CourseID, value) = false) Then
				Me.OnCourseIDChanging(value)
				Me.SendPropertyChanging
				Me._CourseID = value
				Me.SendPropertyChanged("CourseID")
				Me.OnCourseIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RequiredGroupID", DbType:="NVarChar(50)")>  _
	Public Property RequiredGroupID() As String
		Get
			Return Me._RequiredGroupID
		End Get
		Set
			If (String.Equals(Me._RequiredGroupID, value) = false) Then
				Me.OnRequiredGroupIDChanging(value)
				Me.SendPropertyChanging
				Me._RequiredGroupID = value
				Me.SendPropertyChanged("RequiredGroupID")
				Me.OnRequiredGroupIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartDate", DbType:="SmallDateTime")>  _
	Public Property StartDate() As System.Nullable(Of Date)
		Get
			Return Me._StartDate
		End Get
		Set
			If (Me._StartDate.Equals(value) = false) Then
				Me.OnStartDateChanging(value)
				Me.SendPropertyChanging
				Me._StartDate = value
				Me.SendPropertyChanged("StartDate")
				Me.OnStartDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SortOrder", DbType:="Int")>  _
	Public Property SortOrder() As System.Nullable(Of Integer)
		Get
			Return Me._SortOrder
		End Get
		Set
			If (Me._SortOrder.Equals(value) = false) Then
				Me.OnSortOrderChanging(value)
				Me.SendPropertyChanging
				Me._SortOrder = value
				Me.SendPropertyChanged("SortOrder")
				Me.OnSortOrderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PreRequisiteRequired", DbType:="Bit")>  _
	Public Property PreRequisiteRequired() As System.Nullable(Of Boolean)
		Get
			Return Me._PreRequisiteRequired
		End Get
		Set
			If (Me._PreRequisiteRequired.Equals(value) = false) Then
				Me.OnPreRequisiteRequiredChanging(value)
				Me.SendPropertyChanging
				Me._PreRequisiteRequired = value
				Me.SendPropertyChanged("PreRequisiteRequired")
				Me.OnPreRequisiteRequiredChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Required", DbType:="Bit")>  _
	Public Property Required() As System.Nullable(Of Boolean)
		Get
			Return Me._Required
		End Get
		Set
			If (Me._Required.Equals(value) = false) Then
				Me.OnRequiredChanging(value)
				Me.SendPropertyChanging
				Me._Required = value
				Me.SendPropertyChanged("Required")
				Me.OnRequiredChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Hold", DbType:="Bit")>  _
	Public Property Hold() As System.Nullable(Of Boolean)
		Get
			Return Me._Hold
		End Get
		Set
			If (Me._Hold.Equals(value) = false) Then
				Me.OnHoldChanging(value)
				Me.SendPropertyChanging
				Me._Hold = value
				Me.SendPropertyChanged("Hold")
				Me.OnHoldChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Enabled", DbType:="Bit")>  _
	Public Property Enabled() As System.Nullable(Of Boolean)
		Get
			Return Me._Enabled
		End Get
		Set
			If (Me._Enabled.Equals(value) = false) Then
				Me.OnEnabledChanging(value)
				Me.SendPropertyChanging
				Me._Enabled = value
				Me.SendPropertyChanged("Enabled")
				Me.OnEnabledChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.qryViewHistoryLog")>  _
Partial Public Class qryViewHistoryLog
	
	Private _ID As Integer
	
	Private _UserID As String
	
	Private _UserName As String
	
	Private _Full_Name As String
	
	Private _EventID As System.Nullable(Of Integer)
	
	Private _ActivityDate_CST_ As System.Nullable(Of Date)
	
	Private _Activity As String
	
	Private _PageURL As String
	
	Private _Details As String
	
	Private _IPAddress As String
	
	Private _UserAgent As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="Int NOT NULL")>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me._ID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property UserID() As String
		Get
			Return Me._UserID
		End Get
		Set
			If (String.Equals(Me._UserID, value) = false) Then
				Me._UserID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me._UserName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Full Name]", Storage:="_Full_Name", DbType:="NVarChar(101)")>  _
	Public Property Full_Name() As String
		Get
			Return Me._Full_Name
		End Get
		Set
			If (String.Equals(Me._Full_Name, value) = false) Then
				Me._Full_Name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EventID", DbType:="Int")>  _
	Public Property EventID() As System.Nullable(Of Integer)
		Get
			Return Me._EventID
		End Get
		Set
			If (Me._EventID.Equals(value) = false) Then
				Me._EventID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[ActivityDate(CST)]", Storage:="_ActivityDate_CST_", DbType:="DateTime")>  _
	Public Property ActivityDate_CST_() As System.Nullable(Of Date)
		Get
			Return Me._ActivityDate_CST_
		End Get
		Set
			If (Me._ActivityDate_CST_.Equals(value) = false) Then
				Me._ActivityDate_CST_ = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activity", DbType:="NVarChar(50)")>  _
	Public Property Activity() As String
		Get
			Return Me._Activity
		End Get
		Set
			If (String.Equals(Me._Activity, value) = false) Then
				Me._Activity = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PageURL", DbType:="NVarChar(256)")>  _
	Public Property PageURL() As String
		Get
			Return Me._PageURL
		End Get
		Set
			If (String.Equals(Me._PageURL, value) = false) Then
				Me._PageURL = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Details", DbType:="NVarChar(MAX)")>  _
	Public Property Details() As String
		Get
			Return Me._Details
		End Get
		Set
			If (String.Equals(Me._Details, value) = false) Then
				Me._Details = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IPAddress", DbType:="NVarChar(50)")>  _
	Public Property IPAddress() As String
		Get
			Return Me._IPAddress
		End Get
		Set
			If (String.Equals(Me._IPAddress, value) = false) Then
				Me._IPAddress = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserAgent", DbType:="NVarChar(256)")>  _
	Public Property UserAgent() As String
		Get
			Return Me._UserAgent
		End Get
		Set
			If (String.Equals(Me._UserAgent, value) = false) Then
				Me._UserAgent = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CorrectAnswer")>  _
Partial Public Class CorrectAnswer
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CorrectAnswerID As Integer
	
	Private _QuestionID As System.Nullable(Of Integer)
	
	Private _CorrectAnswer As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCorrectAnswerIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCorrectAnswerIDChanged()
    End Sub
    Partial Private Sub OnQuestionIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnQuestionIDChanged()
    End Sub
    Partial Private Sub OnCorrectAnswerChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCorrectAnswerChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CorrectAnswerID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property CorrectAnswerID() As Integer
		Get
			Return Me._CorrectAnswerID
		End Get
		Set
			If ((Me._CorrectAnswerID = value)  _
						= false) Then
				Me.OnCorrectAnswerIDChanging(value)
				Me.SendPropertyChanging
				Me._CorrectAnswerID = value
				Me.SendPropertyChanged("CorrectAnswerID")
				Me.OnCorrectAnswerIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QuestionID", DbType:="Int")>  _
	Public Property QuestionID() As System.Nullable(Of Integer)
		Get
			Return Me._QuestionID
		End Get
		Set
			If (Me._QuestionID.Equals(value) = false) Then
				Me.OnQuestionIDChanging(value)
				Me.SendPropertyChanging
				Me._QuestionID = value
				Me.SendPropertyChanged("QuestionID")
				Me.OnQuestionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CorrectAnswer", DbType:="Int")>  _
	Public Property CorrectAnswer() As System.Nullable(Of Integer)
		Get
			Return Me._CorrectAnswer
		End Get
		Set
			If (Me._CorrectAnswer.Equals(value) = false) Then
				Me.OnCorrectAnswerChanging(value)
				Me.SendPropertyChanging
				Me._CorrectAnswer = value
				Me.SendPropertyChanged("CorrectAnswer")
				Me.OnCorrectAnswerChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.getDistinctCurriculumResults")>  _
Partial Public Class getDistinctCurriculumResult
	
	Private _CurriculumID As String
	
	Private _CourseID As String
	
	Private _CurriculumGroupID As String
	
	Private _UserName As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurriculumID", DbType:="NVarChar(50)")>  _
	Public Property CurriculumID() As String
		Get
			Return Me._CurriculumID
		End Get
		Set
			If (String.Equals(Me._CurriculumID, value) = false) Then
				Me._CurriculumID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CourseID", DbType:="NVarChar(50)")>  _
	Public Property CourseID() As String
		Get
			Return Me._CourseID
		End Get
		Set
			If (String.Equals(Me._CourseID, value) = false) Then
				Me._CourseID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurriculumGroupID", DbType:="NVarChar(50)")>  _
	Public Property CurriculumGroupID() As String
		Get
			Return Me._CurriculumGroupID
		End Get
		Set
			If (String.Equals(Me._CurriculumGroupID, value) = false) Then
				Me._CurriculumGroupID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me._UserName = value
			End If
		End Set
	End Property
End Class

Partial Public Class getApplicantFirstLastNameResult
	
	Private _FirstName As String
	
	Private _LastName As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="NVarChar(50)")>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me._FirstName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="NVarChar(50)")>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me._LastName = value
			End If
		End Set
	End Property
End Class

Partial Public Class getAvailableRolesResult
	
	Private _DataKeyID As String
	
	Private _InsertID As String
	
	Private _Name As String
	
	Private _roleID As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataKeyID", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property DataKeyID() As String
		Get
			Return Me._DataKeyID
		End Get
		Set
			If (String.Equals(Me._DataKeyID, value) = false) Then
				Me._DataKeyID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InsertID", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property InsertID() As String
		Get
			Return Me._InsertID
		End Get
		Set
			If (String.Equals(Me._InsertID, value) = false) Then
				Me._InsertID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me._Name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_roleID", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property roleID() As String
		Get
			Return Me._roleID
		End Get
		Set
			If (String.Equals(Me._roleID, value) = false) Then
				Me._roleID = value
			End If
		End Set
	End Property
End Class

Partial Public Class getCurriculumByGroupIDResult
	
	Private _CurriculumID As String
	
	Private _CurriculumTitle As String
	
	Private _CurriculumGroupID As String
	
	Private _CourseID As String
	
	Private _Text As String
	
	Private _SortOrder As System.Nullable(Of Integer)
	
	Private _DesiredOrder As System.Nullable(Of Integer)
	
	Private _Enabled As System.Nullable(Of Boolean)
	
	Private _ComplexityLevel As System.Nullable(Of Integer)
	
	Private _Required As System.Nullable(Of Boolean)
	
	Private _Points As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurriculumID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CurriculumID() As String
		Get
			Return Me._CurriculumID
		End Get
		Set
			If (String.Equals(Me._CurriculumID, value) = false) Then
				Me._CurriculumID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurriculumTitle", DbType:="NVarChar(50)")>  _
	Public Property CurriculumTitle() As String
		Get
			Return Me._CurriculumTitle
		End Get
		Set
			If (String.Equals(Me._CurriculumTitle, value) = false) Then
				Me._CurriculumTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurriculumGroupID", DbType:="NVarChar(50)")>  _
	Public Property CurriculumGroupID() As String
		Get
			Return Me._CurriculumGroupID
		End Get
		Set
			If (String.Equals(Me._CurriculumGroupID, value) = false) Then
				Me._CurriculumGroupID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CourseID", DbType:="NVarChar(50)")>  _
	Public Property CourseID() As String
		Get
			Return Me._CourseID
		End Get
		Set
			If (String.Equals(Me._CourseID, value) = false) Then
				Me._CourseID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Text", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Text() As String
		Get
			Return Me._Text
		End Get
		Set
			If (String.Equals(Me._Text, value) = false) Then
				Me._Text = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SortOrder", DbType:="Int")>  _
	Public Property SortOrder() As System.Nullable(Of Integer)
		Get
			Return Me._SortOrder
		End Get
		Set
			If (Me._SortOrder.Equals(value) = false) Then
				Me._SortOrder = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DesiredOrder", DbType:="Int")>  _
	Public Property DesiredOrder() As System.Nullable(Of Integer)
		Get
			Return Me._DesiredOrder
		End Get
		Set
			If (Me._DesiredOrder.Equals(value) = false) Then
				Me._DesiredOrder = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Enabled", DbType:="Bit")>  _
	Public Property Enabled() As System.Nullable(Of Boolean)
		Get
			Return Me._Enabled
		End Get
		Set
			If (Me._Enabled.Equals(value) = false) Then
				Me._Enabled = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ComplexityLevel", DbType:="Int")>  _
	Public Property ComplexityLevel() As System.Nullable(Of Integer)
		Get
			Return Me._ComplexityLevel
		End Get
		Set
			If (Me._ComplexityLevel.Equals(value) = false) Then
				Me._ComplexityLevel = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Required", DbType:="Bit")>  _
	Public Property Required() As System.Nullable(Of Boolean)
		Get
			Return Me._Required
		End Get
		Set
			If (Me._Required.Equals(value) = false) Then
				Me._Required = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Points", DbType:="Int")>  _
	Public Property Points() As System.Nullable(Of Integer)
		Get
			Return Me._Points
		End Get
		Set
			If (Me._Points.Equals(value) = false) Then
				Me._Points = value
			End If
		End Set
	End Property
End Class

Partial Public Class AvailableTestsResult
	
	Private _prerequisite As Integer
	
	Private _QuizID As Integer
	
	Private _Title As String
	
	Private _Enabled As Boolean
	
	Private _Score As String
	
	Private _DateTimeCompleted As System.Nullable(Of Date)
	
	Private _PassingGrade As System.Nullable(Of Integer)
	
	Private _Result As String
	
	Private _dbGUID As String
	
	Private _UserName As String
	
	Private _RetakeTestHrs As System.Nullable(Of Integer)
	
	Private _SiteID As String
	
	Private _PreReqResult As String
	
	Private _PreReqTitle As String
	
	Private _GroupID As String
	
	Private _InstructorID As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_prerequisite", DbType:="Int NOT NULL")>  _
	Public Property prerequisite() As Integer
		Get
			Return Me._prerequisite
		End Get
		Set
			If ((Me._prerequisite = value)  _
						= false) Then
				Me._prerequisite = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QuizID", DbType:="Int NOT NULL")>  _
	Public Property QuizID() As Integer
		Get
			Return Me._QuizID
		End Get
		Set
			If ((Me._QuizID = value)  _
						= false) Then
				Me._QuizID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="VarChar(50)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me._Title = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Enabled", DbType:="Bit NOT NULL")>  _
	Public Property Enabled() As Boolean
		Get
			Return Me._Enabled
		End Get
		Set
			If ((Me._Enabled = value)  _
						= false) Then
				Me._Enabled = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Score", DbType:="NVarChar(256)")>  _
	Public Property Score() As String
		Get
			Return Me._Score
		End Get
		Set
			If (String.Equals(Me._Score, value) = false) Then
				Me._Score = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateTimeCompleted", DbType:="SmallDateTime")>  _
	Public Property DateTimeCompleted() As System.Nullable(Of Date)
		Get
			Return Me._DateTimeCompleted
		End Get
		Set
			If (Me._DateTimeCompleted.Equals(value) = false) Then
				Me._DateTimeCompleted = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PassingGrade", DbType:="Int")>  _
	Public Property PassingGrade() As System.Nullable(Of Integer)
		Get
			Return Me._PassingGrade
		End Get
		Set
			If (Me._PassingGrade.Equals(value) = false) Then
				Me._PassingGrade = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Result", DbType:="VarChar(11) NOT NULL", CanBeNull:=false)>  _
	Public Property Result() As String
		Get
			Return Me._Result
		End Get
		Set
			If (String.Equals(Me._Result, value) = false) Then
				Me._Result = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dbGUID", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property dbGUID() As String
		Get
			Return Me._dbGUID
		End Get
		Set
			If (String.Equals(Me._dbGUID, value) = false) Then
				Me._dbGUID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="NVarChar(256)")>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me._UserName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RetakeTestHrs", DbType:="Int")>  _
	Public Property RetakeTestHrs() As System.Nullable(Of Integer)
		Get
			Return Me._RetakeTestHrs
		End Get
		Set
			If (Me._RetakeTestHrs.Equals(value) = false) Then
				Me._RetakeTestHrs = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property SiteID() As String
		Get
			Return Me._SiteID
		End Get
		Set
			If (String.Equals(Me._SiteID, value) = false) Then
				Me._SiteID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PreReqResult", DbType:="NVarChar(256)")>  _
	Public Property PreReqResult() As String
		Get
			Return Me._PreReqResult
		End Get
		Set
			If (String.Equals(Me._PreReqResult, value) = false) Then
				Me._PreReqResult = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PreReqTitle", DbType:="VarChar(50)")>  _
	Public Property PreReqTitle() As String
		Get
			Return Me._PreReqTitle
		End Get
		Set
			If (String.Equals(Me._PreReqTitle, value) = false) Then
				Me._PreReqTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupID", DbType:="NVarChar(50)")>  _
	Public Property GroupID() As String
		Get
			Return Me._GroupID
		End Get
		Set
			If (String.Equals(Me._GroupID, value) = false) Then
				Me._GroupID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InstructorID", DbType:="NVarChar(50)")>  _
	Public Property InstructorID() As String
		Get
			Return Me._InstructorID
		End Get
		Set
			If (String.Equals(Me._InstructorID, value) = false) Then
				Me._InstructorID = value
			End If
		End Set
	End Property
End Class

Partial Public Class AvailableTestListResult
	
	Private _QuizID As Integer
	
	Private _TestID As String
	
	Private _Title As String
	
	Private _Score As String
	
	Private _DateTimeCompleted As System.Nullable(Of Date)
	
	Private _PassingGrade As System.Nullable(Of Integer)
	
	Private _RetakeDate As System.Nullable(Of Date)
	
	Private _Result As String
	
	Private _Enabled As Boolean
	
	Private _dbGUID As String
	
	Private _UserName As String
	
	Private _RetakeTestHrs As System.Nullable(Of Integer)
	
	Private _SiteID As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QuizID", DbType:="Int NOT NULL")>  _
	Public Property QuizID() As Integer
		Get
			Return Me._QuizID
		End Get
		Set
			If ((Me._QuizID = value)  _
						= false) Then
				Me._QuizID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TestID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property TestID() As String
		Get
			Return Me._TestID
		End Get
		Set
			If (String.Equals(Me._TestID, value) = false) Then
				Me._TestID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="VarChar(50)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me._Title = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Score", DbType:="NVarChar(256)")>  _
	Public Property Score() As String
		Get
			Return Me._Score
		End Get
		Set
			If (String.Equals(Me._Score, value) = false) Then
				Me._Score = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateTimeCompleted", DbType:="SmallDateTime")>  _
	Public Property DateTimeCompleted() As System.Nullable(Of Date)
		Get
			Return Me._DateTimeCompleted
		End Get
		Set
			If (Me._DateTimeCompleted.Equals(value) = false) Then
				Me._DateTimeCompleted = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PassingGrade", DbType:="Int")>  _
	Public Property PassingGrade() As System.Nullable(Of Integer)
		Get
			Return Me._PassingGrade
		End Get
		Set
			If (Me._PassingGrade.Equals(value) = false) Then
				Me._PassingGrade = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RetakeDate", DbType:="SmallDateTime")>  _
	Public Property RetakeDate() As System.Nullable(Of Date)
		Get
			Return Me._RetakeDate
		End Get
		Set
			If (Me._RetakeDate.Equals(value) = false) Then
				Me._RetakeDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Result", DbType:="VarChar(11) NOT NULL", CanBeNull:=false)>  _
	Public Property Result() As String
		Get
			Return Me._Result
		End Get
		Set
			If (String.Equals(Me._Result, value) = false) Then
				Me._Result = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Enabled", DbType:="Bit NOT NULL")>  _
	Public Property Enabled() As Boolean
		Get
			Return Me._Enabled
		End Get
		Set
			If ((Me._Enabled = value)  _
						= false) Then
				Me._Enabled = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dbGUID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property dbGUID() As String
		Get
			Return Me._dbGUID
		End Get
		Set
			If (String.Equals(Me._dbGUID, value) = false) Then
				Me._dbGUID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="NVarChar(256)")>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me._UserName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RetakeTestHrs", DbType:="Int")>  _
	Public Property RetakeTestHrs() As System.Nullable(Of Integer)
		Get
			Return Me._RetakeTestHrs
		End Get
		Set
			If (Me._RetakeTestHrs.Equals(value) = false) Then
				Me._RetakeTestHrs = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property SiteID() As String
		Get
			Return Me._SiteID
		End Get
		Set
			If (String.Equals(Me._SiteID, value) = false) Then
				Me._SiteID = value
			End If
		End Set
	End Property
End Class

Partial Public Class baretc_CurentAvailableTestsByCourseResult
	
	Private _TestID As String
	
	Private _Title As String
	
	Private _Result As String
	
	Private _Score As String
	
	Private _TestResult As String
	
	Private _PassingGrade As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TestID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property TestID() As String
		Get
			Return Me._TestID
		End Get
		Set
			If (String.Equals(Me._TestID, value) = false) Then
				Me._TestID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="VarChar(50)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me._Title = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Result", DbType:="VarChar(MAX)")>  _
	Public Property Result() As String
		Get
			Return Me._Result
		End Get
		Set
			If (String.Equals(Me._Result, value) = false) Then
				Me._Result = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Score", DbType:="VarChar(MAX)")>  _
	Public Property Score() As String
		Get
			Return Me._Score
		End Get
		Set
			If (String.Equals(Me._Score, value) = false) Then
				Me._Score = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TestResult", DbType:="VarChar(9)")>  _
	Public Property TestResult() As String
		Get
			Return Me._TestResult
		End Get
		Set
			If (String.Equals(Me._TestResult, value) = false) Then
				Me._TestResult = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PassingGrade", DbType:="Int")>  _
	Public Property PassingGrade() As System.Nullable(Of Integer)
		Get
			Return Me._PassingGrade
		End Get
		Set
			If (Me._PassingGrade.Equals(value) = false) Then
				Me._PassingGrade = value
			End If
		End Set
	End Property
End Class

Partial Public Class baretc_CurentAvailableTestsByAmbassadorResult
	
	Private _TestID As String
	
	Private _Title As String
	
	Private _Result As String
	
	Private _Score As String
	
	Private _TestResult As String
	
	Private _PassingGrade As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TestID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property TestID() As String
		Get
			Return Me._TestID
		End Get
		Set
			If (String.Equals(Me._TestID, value) = false) Then
				Me._TestID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="VarChar(50)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me._Title = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Result", DbType:="VarChar(MAX)")>  _
	Public Property Result() As String
		Get
			Return Me._Result
		End Get
		Set
			If (String.Equals(Me._Result, value) = false) Then
				Me._Result = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Score", DbType:="VarChar(MAX)")>  _
	Public Property Score() As String
		Get
			Return Me._Score
		End Get
		Set
			If (String.Equals(Me._Score, value) = false) Then
				Me._Score = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TestResult", DbType:="VarChar(9)")>  _
	Public Property TestResult() As String
		Get
			Return Me._TestResult
		End Get
		Set
			If (String.Equals(Me._TestResult, value) = false) Then
				Me._TestResult = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PassingGrade", DbType:="Int")>  _
	Public Property PassingGrade() As System.Nullable(Of Integer)
		Get
			Return Me._PassingGrade
		End Get
		Set
			If (Me._PassingGrade.Equals(value) = false) Then
				Me._PassingGrade = value
			End If
		End Set
	End Property
End Class

Partial Public Class baretc_BrandTrainingResultResult
	
	Private _CourseTitle As String
	
	Private _CourseID As String
	
	Private _TestCount As System.Nullable(Of Integer)
	
	Private _PassedCount As System.Nullable(Of Integer)
	
	Private _CurriculumCompletedCount As System.Nullable(Of Integer)
	
	Private _CurriculumCount As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CourseTitle", DbType:="NVarChar(50)")>  _
	Public Property CourseTitle() As String
		Get
			Return Me._CourseTitle
		End Get
		Set
			If (String.Equals(Me._CourseTitle, value) = false) Then
				Me._CourseTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CourseID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CourseID() As String
		Get
			Return Me._CourseID
		End Get
		Set
			If (String.Equals(Me._CourseID, value) = false) Then
				Me._CourseID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TestCount", DbType:="Int")>  _
	Public Property TestCount() As System.Nullable(Of Integer)
		Get
			Return Me._TestCount
		End Get
		Set
			If (Me._TestCount.Equals(value) = false) Then
				Me._TestCount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PassedCount", DbType:="Int")>  _
	Public Property PassedCount() As System.Nullable(Of Integer)
		Get
			Return Me._PassedCount
		End Get
		Set
			If (Me._PassedCount.Equals(value) = false) Then
				Me._PassedCount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurriculumCompletedCount", DbType:="Int")>  _
	Public Property CurriculumCompletedCount() As System.Nullable(Of Integer)
		Get
			Return Me._CurriculumCompletedCount
		End Get
		Set
			If (Me._CurriculumCompletedCount.Equals(value) = false) Then
				Me._CurriculumCompletedCount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurriculumCount", DbType:="Int")>  _
	Public Property CurriculumCount() As System.Nullable(Of Integer)
		Get
			Return Me._CurriculumCount
		End Get
		Set
			If (Me._CurriculumCount.Equals(value) = false) Then
				Me._CurriculumCount = value
			End If
		End Set
	End Property
End Class

Partial Public Class getCompletedCurriculumCountByGroupResult
	
	Private _ResultID As Integer
	
	Private _StudentInCourseID As String
	
	Private _DateCompleted As System.Nullable(Of Date)
	
	Private _Completed As System.Nullable(Of Boolean)
	
	Private _CurriculumTitle As String
	
	Private _CurriculumID As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ResultID", DbType:="Int NOT NULL")>  _
	Public Property ResultID() As Integer
		Get
			Return Me._ResultID
		End Get
		Set
			If ((Me._ResultID = value)  _
						= false) Then
				Me._ResultID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StudentInCourseID", DbType:="NVarChar(50)")>  _
	Public Property StudentInCourseID() As String
		Get
			Return Me._StudentInCourseID
		End Get
		Set
			If (String.Equals(Me._StudentInCourseID, value) = false) Then
				Me._StudentInCourseID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCompleted", DbType:="DateTime")>  _
	Public Property DateCompleted() As System.Nullable(Of Date)
		Get
			Return Me._DateCompleted
		End Get
		Set
			If (Me._DateCompleted.Equals(value) = false) Then
				Me._DateCompleted = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Completed", DbType:="Bit")>  _
	Public Property Completed() As System.Nullable(Of Boolean)
		Get
			Return Me._Completed
		End Get
		Set
			If (Me._Completed.Equals(value) = false) Then
				Me._Completed = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurriculumTitle", DbType:="NVarChar(50)")>  _
	Public Property CurriculumTitle() As String
		Get
			Return Me._CurriculumTitle
		End Get
		Set
			If (String.Equals(Me._CurriculumTitle, value) = false) Then
				Me._CurriculumTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurriculumID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CurriculumID() As String
		Get
			Return Me._CurriculumID
		End Get
		Set
			If (String.Equals(Me._CurriculumID, value) = false) Then
				Me._CurriculumID = value
			End If
		End Set
	End Property
End Class

Partial Public Class getCurriculumListByGRoupResult
	
	Private _CurriculumID As String
	
	Private _CurriculumTitle As String
	
	Private _CurriculumGroupID As String
	
	Private _Title As String
	
	Private _Text As String
	
	Private _RequiredGroupID As String
	
	Private _RequiredGroupName As String
	
	Private _CourseID As String
	
	Private _SortOrder As System.Nullable(Of Integer)
	
	Private _Enabled As System.Nullable(Of Boolean)
	
	Private _Required As System.Nullable(Of Boolean)
	
	Private _DateCompleted As System.Nullable(Of Date)
	
	Private _CurriculumType As System.Nullable(Of Integer)
	
	Private _backgroundcss As String
	
	Private _RequiredGroupCompleted As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurriculumID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CurriculumID() As String
		Get
			Return Me._CurriculumID
		End Get
		Set
			If (String.Equals(Me._CurriculumID, value) = false) Then
				Me._CurriculumID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurriculumTitle", DbType:="NVarChar(50)")>  _
	Public Property CurriculumTitle() As String
		Get
			Return Me._CurriculumTitle
		End Get
		Set
			If (String.Equals(Me._CurriculumTitle, value) = false) Then
				Me._CurriculumTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurriculumGroupID", DbType:="NVarChar(50)")>  _
	Public Property CurriculumGroupID() As String
		Get
			Return Me._CurriculumGroupID
		End Get
		Set
			If (String.Equals(Me._CurriculumGroupID, value) = false) Then
				Me._CurriculumGroupID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me._Title = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Text", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Text() As String
		Get
			Return Me._Text
		End Get
		Set
			If (String.Equals(Me._Text, value) = false) Then
				Me._Text = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RequiredGroupID", DbType:="NVarChar(50)")>  _
	Public Property RequiredGroupID() As String
		Get
			Return Me._RequiredGroupID
		End Get
		Set
			If (String.Equals(Me._RequiredGroupID, value) = false) Then
				Me._RequiredGroupID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RequiredGroupName", DbType:="VarChar(MAX)")>  _
	Public Property RequiredGroupName() As String
		Get
			Return Me._RequiredGroupName
		End Get
		Set
			If (String.Equals(Me._RequiredGroupName, value) = false) Then
				Me._RequiredGroupName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CourseID", DbType:="NVarChar(50)")>  _
	Public Property CourseID() As String
		Get
			Return Me._CourseID
		End Get
		Set
			If (String.Equals(Me._CourseID, value) = false) Then
				Me._CourseID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SortOrder", DbType:="Int")>  _
	Public Property SortOrder() As System.Nullable(Of Integer)
		Get
			Return Me._SortOrder
		End Get
		Set
			If (Me._SortOrder.Equals(value) = false) Then
				Me._SortOrder = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Enabled", DbType:="Bit")>  _
	Public Property Enabled() As System.Nullable(Of Boolean)
		Get
			Return Me._Enabled
		End Get
		Set
			If (Me._Enabled.Equals(value) = false) Then
				Me._Enabled = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Required", DbType:="Bit")>  _
	Public Property Required() As System.Nullable(Of Boolean)
		Get
			Return Me._Required
		End Get
		Set
			If (Me._Required.Equals(value) = false) Then
				Me._Required = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCompleted", DbType:="DateTime")>  _
	Public Property DateCompleted() As System.Nullable(Of Date)
		Get
			Return Me._DateCompleted
		End Get
		Set
			If (Me._DateCompleted.Equals(value) = false) Then
				Me._DateCompleted = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurriculumType", DbType:="Int")>  _
	Public Property CurriculumType() As System.Nullable(Of Integer)
		Get
			Return Me._CurriculumType
		End Get
		Set
			If (Me._CurriculumType.Equals(value) = false) Then
				Me._CurriculumType = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_backgroundcss", DbType:="VarChar(6)")>  _
	Public Property backgroundcss() As String
		Get
			Return Me._backgroundcss
		End Get
		Set
			If (String.Equals(Me._backgroundcss, value) = false) Then
				Me._backgroundcss = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RequiredGroupCompleted", DbType:="VarChar(5) NOT NULL", CanBeNull:=false)>  _
	Public Property RequiredGroupCompleted() As String
		Get
			Return Me._RequiredGroupCompleted
		End Get
		Set
			If (String.Equals(Me._RequiredGroupCompleted, value) = false) Then
				Me._RequiredGroupCompleted = value
			End If
		End Set
	End Property
End Class

Partial Public Class getCurriculumItemsResult
	
	Private _CurriculumGroupID As String
	
	Private _CourseID As String
	
	Private _Title As String
	
	Private _RequiredGroupID As String
	
	Private _StartDate As System.Nullable(Of Date)
	
	Private _SortOrder As System.Nullable(Of Integer)
	
	Private _PreRequisiteRequired As System.Nullable(Of Boolean)
	
	Private _Required As System.Nullable(Of Boolean)
	
	Private _Hold As System.Nullable(Of Boolean)
	
	Private _Enabled As System.Nullable(Of Boolean)
	
	Private _TotalCurriculum As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurriculumGroupID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CurriculumGroupID() As String
		Get
			Return Me._CurriculumGroupID
		End Get
		Set
			If (String.Equals(Me._CurriculumGroupID, value) = false) Then
				Me._CurriculumGroupID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CourseID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CourseID() As String
		Get
			Return Me._CourseID
		End Get
		Set
			If (String.Equals(Me._CourseID, value) = false) Then
				Me._CourseID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me._Title = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RequiredGroupID", DbType:="NVarChar(50)")>  _
	Public Property RequiredGroupID() As String
		Get
			Return Me._RequiredGroupID
		End Get
		Set
			If (String.Equals(Me._RequiredGroupID, value) = false) Then
				Me._RequiredGroupID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartDate", DbType:="SmallDateTime")>  _
	Public Property StartDate() As System.Nullable(Of Date)
		Get
			Return Me._StartDate
		End Get
		Set
			If (Me._StartDate.Equals(value) = false) Then
				Me._StartDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SortOrder", DbType:="Int")>  _
	Public Property SortOrder() As System.Nullable(Of Integer)
		Get
			Return Me._SortOrder
		End Get
		Set
			If (Me._SortOrder.Equals(value) = false) Then
				Me._SortOrder = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PreRequisiteRequired", DbType:="Bit")>  _
	Public Property PreRequisiteRequired() As System.Nullable(Of Boolean)
		Get
			Return Me._PreRequisiteRequired
		End Get
		Set
			If (Me._PreRequisiteRequired.Equals(value) = false) Then
				Me._PreRequisiteRequired = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Required", DbType:="Bit")>  _
	Public Property Required() As System.Nullable(Of Boolean)
		Get
			Return Me._Required
		End Get
		Set
			If (Me._Required.Equals(value) = false) Then
				Me._Required = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Hold", DbType:="Bit")>  _
	Public Property Hold() As System.Nullable(Of Boolean)
		Get
			Return Me._Hold
		End Get
		Set
			If (Me._Hold.Equals(value) = false) Then
				Me._Hold = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Enabled", DbType:="Bit")>  _
	Public Property Enabled() As System.Nullable(Of Boolean)
		Get
			Return Me._Enabled
		End Get
		Set
			If (Me._Enabled.Equals(value) = false) Then
				Me._Enabled = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalCurriculum", DbType:="Int")>  _
	Public Property TotalCurriculum() As System.Nullable(Of Integer)
		Get
			Return Me._TotalCurriculum
		End Get
		Set
			If (Me._TotalCurriculum.Equals(value) = false) Then
				Me._TotalCurriculum = value
			End If
		End Set
	End Property
End Class

Partial Public Class baretc_BrandTrainingResultByCourseIDResult
	
	Private _CourseTitle As String
	
	Private _CourseID As String
	
	Private _TestCount As System.Nullable(Of Integer)
	
	Private _PassedCount As System.Nullable(Of Integer)
	
	Private _CurriculumCompletedCount As System.Nullable(Of Integer)
	
	Private _CurriculumCount As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CourseTitle", DbType:="NVarChar(50)")>  _
	Public Property CourseTitle() As String
		Get
			Return Me._CourseTitle
		End Get
		Set
			If (String.Equals(Me._CourseTitle, value) = false) Then
				Me._CourseTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CourseID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CourseID() As String
		Get
			Return Me._CourseID
		End Get
		Set
			If (String.Equals(Me._CourseID, value) = false) Then
				Me._CourseID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TestCount", DbType:="Int")>  _
	Public Property TestCount() As System.Nullable(Of Integer)
		Get
			Return Me._TestCount
		End Get
		Set
			If (Me._TestCount.Equals(value) = false) Then
				Me._TestCount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PassedCount", DbType:="Int")>  _
	Public Property PassedCount() As System.Nullable(Of Integer)
		Get
			Return Me._PassedCount
		End Get
		Set
			If (Me._PassedCount.Equals(value) = false) Then
				Me._PassedCount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurriculumCompletedCount", DbType:="Int")>  _
	Public Property CurriculumCompletedCount() As System.Nullable(Of Integer)
		Get
			Return Me._CurriculumCompletedCount
		End Get
		Set
			If (Me._CurriculumCompletedCount.Equals(value) = false) Then
				Me._CurriculumCompletedCount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurriculumCount", DbType:="Int")>  _
	Public Property CurriculumCount() As System.Nullable(Of Integer)
		Get
			Return Me._CurriculumCount
		End Get
		Set
			If (Me._CurriculumCount.Equals(value) = false) Then
				Me._CurriculumCount = value
			End If
		End Set
	End Property
End Class

Partial Public Class BrandTrainingResultByUserIDResult
	
	Private _UserName As String
	
	Private _CourseTitle As String
	
	Private _CourseID As String
	
	Private _UserID As String
	
	Private _TestCount As System.Nullable(Of Integer)
	
	Private _PassedCount As System.Nullable(Of Integer)
	
	Private _CurriculumCompletedCount As System.Nullable(Of Integer)
	
	Private _CurriculumCount As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me._UserName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CourseTitle", DbType:="NVarChar(50)")>  _
	Public Property CourseTitle() As String
		Get
			Return Me._CourseTitle
		End Get
		Set
			If (String.Equals(Me._CourseTitle, value) = false) Then
				Me._CourseTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CourseID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CourseID() As String
		Get
			Return Me._CourseID
		End Get
		Set
			If (String.Equals(Me._CourseID, value) = false) Then
				Me._CourseID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property UserID() As String
		Get
			Return Me._UserID
		End Get
		Set
			If (String.Equals(Me._UserID, value) = false) Then
				Me._UserID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TestCount", DbType:="Int")>  _
	Public Property TestCount() As System.Nullable(Of Integer)
		Get
			Return Me._TestCount
		End Get
		Set
			If (Me._TestCount.Equals(value) = false) Then
				Me._TestCount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PassedCount", DbType:="Int")>  _
	Public Property PassedCount() As System.Nullable(Of Integer)
		Get
			Return Me._PassedCount
		End Get
		Set
			If (Me._PassedCount.Equals(value) = false) Then
				Me._PassedCount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurriculumCompletedCount", DbType:="Int")>  _
	Public Property CurriculumCompletedCount() As System.Nullable(Of Integer)
		Get
			Return Me._CurriculumCompletedCount
		End Get
		Set
			If (Me._CurriculumCompletedCount.Equals(value) = false) Then
				Me._CurriculumCompletedCount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurriculumCount", DbType:="Int")>  _
	Public Property CurriculumCount() As System.Nullable(Of Integer)
		Get
			Return Me._CurriculumCount
		End Get
		Set
			If (Me._CurriculumCount.Equals(value) = false) Then
				Me._CurriculumCount = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetCurriculumByCurriculumGroupIDResult
	
	Private _CurriculumID As String
	
	Private _CurriculumTitle As String
	
	Private _CurriculumGroupID As String
	
	Private _CourseID As String
	
	Private _type As System.Nullable(Of Integer)
	
	Private _SortOrder As System.Nullable(Of Integer)
	
	Private _Enabled As System.Nullable(Of Boolean)
	
	Private _ComplexityLevel As System.Nullable(Of Integer)
	
	Private _Required As System.Nullable(Of Boolean)
	
	Private _Points As System.Nullable(Of Integer)
	
	Private _url As String
	
	Private _completed As System.Nullable(Of Integer)
	
	Private _last24hours As System.Nullable(Of Integer)
	
	Private _thisweek As System.Nullable(Of Integer)
	
	Private _lastweek As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurriculumID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CurriculumID() As String
		Get
			Return Me._CurriculumID
		End Get
		Set
			If (String.Equals(Me._CurriculumID, value) = false) Then
				Me._CurriculumID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurriculumTitle", DbType:="NVarChar(50)")>  _
	Public Property CurriculumTitle() As String
		Get
			Return Me._CurriculumTitle
		End Get
		Set
			If (String.Equals(Me._CurriculumTitle, value) = false) Then
				Me._CurriculumTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurriculumGroupID", DbType:="NVarChar(50)")>  _
	Public Property CurriculumGroupID() As String
		Get
			Return Me._CurriculumGroupID
		End Get
		Set
			If (String.Equals(Me._CurriculumGroupID, value) = false) Then
				Me._CurriculumGroupID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CourseID", DbType:="NVarChar(50)")>  _
	Public Property CourseID() As String
		Get
			Return Me._CourseID
		End Get
		Set
			If (String.Equals(Me._CourseID, value) = false) Then
				Me._CourseID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_type", DbType:="Int")>  _
	Public Property type() As System.Nullable(Of Integer)
		Get
			Return Me._type
		End Get
		Set
			If (Me._type.Equals(value) = false) Then
				Me._type = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SortOrder", DbType:="Int")>  _
	Public Property SortOrder() As System.Nullable(Of Integer)
		Get
			Return Me._SortOrder
		End Get
		Set
			If (Me._SortOrder.Equals(value) = false) Then
				Me._SortOrder = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Enabled", DbType:="Bit")>  _
	Public Property Enabled() As System.Nullable(Of Boolean)
		Get
			Return Me._Enabled
		End Get
		Set
			If (Me._Enabled.Equals(value) = false) Then
				Me._Enabled = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ComplexityLevel", DbType:="Int")>  _
	Public Property ComplexityLevel() As System.Nullable(Of Integer)
		Get
			Return Me._ComplexityLevel
		End Get
		Set
			If (Me._ComplexityLevel.Equals(value) = false) Then
				Me._ComplexityLevel = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Required", DbType:="Bit")>  _
	Public Property Required() As System.Nullable(Of Boolean)
		Get
			Return Me._Required
		End Get
		Set
			If (Me._Required.Equals(value) = false) Then
				Me._Required = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Points", DbType:="Int")>  _
	Public Property Points() As System.Nullable(Of Integer)
		Get
			Return Me._Points
		End Get
		Set
			If (Me._Points.Equals(value) = false) Then
				Me._Points = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_url", DbType:="NVarChar(90)")>  _
	Public Property url() As String
		Get
			Return Me._url
		End Get
		Set
			If (String.Equals(Me._url, value) = false) Then
				Me._url = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_completed", DbType:="Int")>  _
	Public Property completed() As System.Nullable(Of Integer)
		Get
			Return Me._completed
		End Get
		Set
			If (Me._completed.Equals(value) = false) Then
				Me._completed = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_last24hours", DbType:="Int")>  _
	Public Property last24hours() As System.Nullable(Of Integer)
		Get
			Return Me._last24hours
		End Get
		Set
			If (Me._last24hours.Equals(value) = false) Then
				Me._last24hours = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_thisweek", DbType:="Int")>  _
	Public Property thisweek() As System.Nullable(Of Integer)
		Get
			Return Me._thisweek
		End Get
		Set
			If (Me._thisweek.Equals(value) = false) Then
				Me._thisweek = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lastweek", DbType:="Int")>  _
	Public Property lastweek() As System.Nullable(Of Integer)
		Get
			Return Me._lastweek
		End Get
		Set
			If (Me._lastweek.Equals(value) = false) Then
				Me._lastweek = value
			End If
		End Set
	End Property
End Class

Partial Public Class BrandGroupTrainingResultByUserIDResult
	
	Private _UserName As String
	
	Private _CourseTitle As String
	
	Private _CourseID As String
	
	Private _UserID As String
	
	Private _CurriculumCompletedCount As System.Nullable(Of Integer)
	
	Private _CurriculumCount As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me._UserName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CourseTitle", DbType:="NVarChar(50)")>  _
	Public Property CourseTitle() As String
		Get
			Return Me._CourseTitle
		End Get
		Set
			If (String.Equals(Me._CourseTitle, value) = false) Then
				Me._CourseTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CourseID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CourseID() As String
		Get
			Return Me._CourseID
		End Get
		Set
			If (String.Equals(Me._CourseID, value) = false) Then
				Me._CourseID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property UserID() As String
		Get
			Return Me._UserID
		End Get
		Set
			If (String.Equals(Me._UserID, value) = false) Then
				Me._UserID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurriculumCompletedCount", DbType:="Int")>  _
	Public Property CurriculumCompletedCount() As System.Nullable(Of Integer)
		Get
			Return Me._CurriculumCompletedCount
		End Get
		Set
			If (Me._CurriculumCompletedCount.Equals(value) = false) Then
				Me._CurriculumCompletedCount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurriculumCount", DbType:="Int")>  _
	Public Property CurriculumCount() As System.Nullable(Of Integer)
		Get
			Return Me._CurriculumCount
		End Get
		Set
			If (Me._CurriculumCount.Equals(value) = false) Then
				Me._CurriculumCount = value
			End If
		End Set
	End Property
End Class
